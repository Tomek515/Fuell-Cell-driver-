
testadc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000609c  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000158  08006158  08006158  00007158  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080062b0  080062b0  0000800c  2**0
                  CONTENTS
  4 .ARM          00000008  080062b0  080062b0  000072b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080062b8  080062b8  0000800c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080062b8  080062b8  000072b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080062bc  080062bc  000072bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080062c0  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c8  2000000c  080062cc  0000800c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001d4  080062cc  000081d4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000800c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013669  00000000  00000000  00008034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000029bb  00000000  00000000  0001b69d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001100  00000000  00000000  0001e058  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d4a  00000000  00000000  0001f158  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019acf  00000000  00000000  0001fea2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014f00  00000000  00000000  00039971  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a79e7  00000000  00000000  0004e871  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f6258  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003f64  00000000  00000000  000f629c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  000fa200  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08006140 	.word	0x08006140

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	08006140 	.word	0x08006140

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	@ 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f8f0 	bl	80003ec <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			@ (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__divsi3>:
 8000218:	4603      	mov	r3, r0
 800021a:	430b      	orrs	r3, r1
 800021c:	d47f      	bmi.n	800031e <__divsi3+0x106>
 800021e:	2200      	movs	r2, #0
 8000220:	0843      	lsrs	r3, r0, #1
 8000222:	428b      	cmp	r3, r1
 8000224:	d374      	bcc.n	8000310 <__divsi3+0xf8>
 8000226:	0903      	lsrs	r3, r0, #4
 8000228:	428b      	cmp	r3, r1
 800022a:	d35f      	bcc.n	80002ec <__divsi3+0xd4>
 800022c:	0a03      	lsrs	r3, r0, #8
 800022e:	428b      	cmp	r3, r1
 8000230:	d344      	bcc.n	80002bc <__divsi3+0xa4>
 8000232:	0b03      	lsrs	r3, r0, #12
 8000234:	428b      	cmp	r3, r1
 8000236:	d328      	bcc.n	800028a <__divsi3+0x72>
 8000238:	0c03      	lsrs	r3, r0, #16
 800023a:	428b      	cmp	r3, r1
 800023c:	d30d      	bcc.n	800025a <__divsi3+0x42>
 800023e:	22ff      	movs	r2, #255	@ 0xff
 8000240:	0209      	lsls	r1, r1, #8
 8000242:	ba12      	rev	r2, r2
 8000244:	0c03      	lsrs	r3, r0, #16
 8000246:	428b      	cmp	r3, r1
 8000248:	d302      	bcc.n	8000250 <__divsi3+0x38>
 800024a:	1212      	asrs	r2, r2, #8
 800024c:	0209      	lsls	r1, r1, #8
 800024e:	d065      	beq.n	800031c <__divsi3+0x104>
 8000250:	0b03      	lsrs	r3, r0, #12
 8000252:	428b      	cmp	r3, r1
 8000254:	d319      	bcc.n	800028a <__divsi3+0x72>
 8000256:	e000      	b.n	800025a <__divsi3+0x42>
 8000258:	0a09      	lsrs	r1, r1, #8
 800025a:	0bc3      	lsrs	r3, r0, #15
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__divsi3+0x4c>
 8000260:	03cb      	lsls	r3, r1, #15
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0b83      	lsrs	r3, r0, #14
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__divsi3+0x58>
 800026c:	038b      	lsls	r3, r1, #14
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	0b43      	lsrs	r3, r0, #13
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x64>
 8000278:	034b      	lsls	r3, r1, #13
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x70>
 8000284:	030b      	lsls	r3, r1, #12
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0ac3      	lsrs	r3, r0, #11
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x7c>
 8000290:	02cb      	lsls	r3, r1, #11
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0a83      	lsrs	r3, r0, #10
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x88>
 800029c:	028b      	lsls	r3, r1, #10
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0a43      	lsrs	r3, r0, #9
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x94>
 80002a8:	024b      	lsls	r3, r1, #9
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a03      	lsrs	r3, r0, #8
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0xa0>
 80002b4:	020b      	lsls	r3, r1, #8
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	d2cd      	bcs.n	8000258 <__divsi3+0x40>
 80002bc:	09c3      	lsrs	r3, r0, #7
 80002be:	428b      	cmp	r3, r1
 80002c0:	d301      	bcc.n	80002c6 <__divsi3+0xae>
 80002c2:	01cb      	lsls	r3, r1, #7
 80002c4:	1ac0      	subs	r0, r0, r3
 80002c6:	4152      	adcs	r2, r2
 80002c8:	0983      	lsrs	r3, r0, #6
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d301      	bcc.n	80002d2 <__divsi3+0xba>
 80002ce:	018b      	lsls	r3, r1, #6
 80002d0:	1ac0      	subs	r0, r0, r3
 80002d2:	4152      	adcs	r2, r2
 80002d4:	0943      	lsrs	r3, r0, #5
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xc6>
 80002da:	014b      	lsls	r3, r1, #5
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0903      	lsrs	r3, r0, #4
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xd2>
 80002e6:	010b      	lsls	r3, r1, #4
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	08c3      	lsrs	r3, r0, #3
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xde>
 80002f2:	00cb      	lsls	r3, r1, #3
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0883      	lsrs	r3, r0, #2
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xea>
 80002fe:	008b      	lsls	r3, r1, #2
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0843      	lsrs	r3, r0, #1
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xf6>
 800030a:	004b      	lsls	r3, r1, #1
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	1a41      	subs	r1, r0, r1
 8000312:	d200      	bcs.n	8000316 <__divsi3+0xfe>
 8000314:	4601      	mov	r1, r0
 8000316:	4152      	adcs	r2, r2
 8000318:	4610      	mov	r0, r2
 800031a:	4770      	bx	lr
 800031c:	e05d      	b.n	80003da <__divsi3+0x1c2>
 800031e:	0fca      	lsrs	r2, r1, #31
 8000320:	d000      	beq.n	8000324 <__divsi3+0x10c>
 8000322:	4249      	negs	r1, r1
 8000324:	1003      	asrs	r3, r0, #32
 8000326:	d300      	bcc.n	800032a <__divsi3+0x112>
 8000328:	4240      	negs	r0, r0
 800032a:	4053      	eors	r3, r2
 800032c:	2200      	movs	r2, #0
 800032e:	469c      	mov	ip, r3
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d32d      	bcc.n	8000392 <__divsi3+0x17a>
 8000336:	0a03      	lsrs	r3, r0, #8
 8000338:	428b      	cmp	r3, r1
 800033a:	d312      	bcc.n	8000362 <__divsi3+0x14a>
 800033c:	22fc      	movs	r2, #252	@ 0xfc
 800033e:	0189      	lsls	r1, r1, #6
 8000340:	ba12      	rev	r2, r2
 8000342:	0a03      	lsrs	r3, r0, #8
 8000344:	428b      	cmp	r3, r1
 8000346:	d30c      	bcc.n	8000362 <__divsi3+0x14a>
 8000348:	0189      	lsls	r1, r1, #6
 800034a:	1192      	asrs	r2, r2, #6
 800034c:	428b      	cmp	r3, r1
 800034e:	d308      	bcc.n	8000362 <__divsi3+0x14a>
 8000350:	0189      	lsls	r1, r1, #6
 8000352:	1192      	asrs	r2, r2, #6
 8000354:	428b      	cmp	r3, r1
 8000356:	d304      	bcc.n	8000362 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	d03a      	beq.n	80003d2 <__divsi3+0x1ba>
 800035c:	1192      	asrs	r2, r2, #6
 800035e:	e000      	b.n	8000362 <__divsi3+0x14a>
 8000360:	0989      	lsrs	r1, r1, #6
 8000362:	09c3      	lsrs	r3, r0, #7
 8000364:	428b      	cmp	r3, r1
 8000366:	d301      	bcc.n	800036c <__divsi3+0x154>
 8000368:	01cb      	lsls	r3, r1, #7
 800036a:	1ac0      	subs	r0, r0, r3
 800036c:	4152      	adcs	r2, r2
 800036e:	0983      	lsrs	r3, r0, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d301      	bcc.n	8000378 <__divsi3+0x160>
 8000374:	018b      	lsls	r3, r1, #6
 8000376:	1ac0      	subs	r0, r0, r3
 8000378:	4152      	adcs	r2, r2
 800037a:	0943      	lsrs	r3, r0, #5
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x16c>
 8000380:	014b      	lsls	r3, r1, #5
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0903      	lsrs	r3, r0, #4
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x178>
 800038c:	010b      	lsls	r3, r1, #4
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	08c3      	lsrs	r3, r0, #3
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x184>
 8000398:	00cb      	lsls	r3, r1, #3
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0883      	lsrs	r3, r0, #2
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x190>
 80003a4:	008b      	lsls	r3, r1, #2
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	d2d9      	bcs.n	8000360 <__divsi3+0x148>
 80003ac:	0843      	lsrs	r3, r0, #1
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d301      	bcc.n	80003b6 <__divsi3+0x19e>
 80003b2:	004b      	lsls	r3, r1, #1
 80003b4:	1ac0      	subs	r0, r0, r3
 80003b6:	4152      	adcs	r2, r2
 80003b8:	1a41      	subs	r1, r0, r1
 80003ba:	d200      	bcs.n	80003be <__divsi3+0x1a6>
 80003bc:	4601      	mov	r1, r0
 80003be:	4663      	mov	r3, ip
 80003c0:	4152      	adcs	r2, r2
 80003c2:	105b      	asrs	r3, r3, #1
 80003c4:	4610      	mov	r0, r2
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x1b4>
 80003c8:	4240      	negs	r0, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d500      	bpl.n	80003d0 <__divsi3+0x1b8>
 80003ce:	4249      	negs	r1, r1
 80003d0:	4770      	bx	lr
 80003d2:	4663      	mov	r3, ip
 80003d4:	105b      	asrs	r3, r3, #1
 80003d6:	d300      	bcc.n	80003da <__divsi3+0x1c2>
 80003d8:	4240      	negs	r0, r0
 80003da:	b501      	push	{r0, lr}
 80003dc:	2000      	movs	r0, #0
 80003de:	f000 f805 	bl	80003ec <__aeabi_idiv0>
 80003e2:	bd02      	pop	{r1, pc}

080003e4 <__aeabi_idivmod>:
 80003e4:	2900      	cmp	r1, #0
 80003e6:	d0f8      	beq.n	80003da <__divsi3+0x1c2>
 80003e8:	e716      	b.n	8000218 <__divsi3>
 80003ea:	4770      	bx	lr

080003ec <__aeabi_idiv0>:
 80003ec:	4770      	bx	lr
 80003ee:	46c0      	nop			@ (mov r8, r8)

080003f0 <__aeabi_cfrcmple>:
 80003f0:	4684      	mov	ip, r0
 80003f2:	0008      	movs	r0, r1
 80003f4:	4661      	mov	r1, ip
 80003f6:	e7ff      	b.n	80003f8 <__aeabi_cfcmpeq>

080003f8 <__aeabi_cfcmpeq>:
 80003f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80003fa:	f000 facf 	bl	800099c <__lesf2>
 80003fe:	2800      	cmp	r0, #0
 8000400:	d401      	bmi.n	8000406 <__aeabi_cfcmpeq+0xe>
 8000402:	2100      	movs	r1, #0
 8000404:	42c8      	cmn	r0, r1
 8000406:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000408 <__aeabi_fcmpeq>:
 8000408:	b510      	push	{r4, lr}
 800040a:	f000 fa4f 	bl	80008ac <__eqsf2>
 800040e:	4240      	negs	r0, r0
 8000410:	3001      	adds	r0, #1
 8000412:	bd10      	pop	{r4, pc}

08000414 <__aeabi_fcmplt>:
 8000414:	b510      	push	{r4, lr}
 8000416:	f000 fac1 	bl	800099c <__lesf2>
 800041a:	2800      	cmp	r0, #0
 800041c:	db01      	blt.n	8000422 <__aeabi_fcmplt+0xe>
 800041e:	2000      	movs	r0, #0
 8000420:	bd10      	pop	{r4, pc}
 8000422:	2001      	movs	r0, #1
 8000424:	bd10      	pop	{r4, pc}
 8000426:	46c0      	nop			@ (mov r8, r8)

08000428 <__aeabi_fcmple>:
 8000428:	b510      	push	{r4, lr}
 800042a:	f000 fab7 	bl	800099c <__lesf2>
 800042e:	2800      	cmp	r0, #0
 8000430:	dd01      	ble.n	8000436 <__aeabi_fcmple+0xe>
 8000432:	2000      	movs	r0, #0
 8000434:	bd10      	pop	{r4, pc}
 8000436:	2001      	movs	r0, #1
 8000438:	bd10      	pop	{r4, pc}
 800043a:	46c0      	nop			@ (mov r8, r8)

0800043c <__aeabi_fcmpgt>:
 800043c:	b510      	push	{r4, lr}
 800043e:	f000 fa5d 	bl	80008fc <__gesf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	dc01      	bgt.n	800044a <__aeabi_fcmpgt+0xe>
 8000446:	2000      	movs	r0, #0
 8000448:	bd10      	pop	{r4, pc}
 800044a:	2001      	movs	r0, #1
 800044c:	bd10      	pop	{r4, pc}
 800044e:	46c0      	nop			@ (mov r8, r8)

08000450 <__aeabi_fcmpge>:
 8000450:	b510      	push	{r4, lr}
 8000452:	f000 fa53 	bl	80008fc <__gesf2>
 8000456:	2800      	cmp	r0, #0
 8000458:	da01      	bge.n	800045e <__aeabi_fcmpge+0xe>
 800045a:	2000      	movs	r0, #0
 800045c:	bd10      	pop	{r4, pc}
 800045e:	2001      	movs	r0, #1
 8000460:	bd10      	pop	{r4, pc}
 8000462:	46c0      	nop			@ (mov r8, r8)

08000464 <__aeabi_uldivmod>:
 8000464:	2b00      	cmp	r3, #0
 8000466:	d111      	bne.n	800048c <__aeabi_uldivmod+0x28>
 8000468:	2a00      	cmp	r2, #0
 800046a:	d10f      	bne.n	800048c <__aeabi_uldivmod+0x28>
 800046c:	2900      	cmp	r1, #0
 800046e:	d100      	bne.n	8000472 <__aeabi_uldivmod+0xe>
 8000470:	2800      	cmp	r0, #0
 8000472:	d002      	beq.n	800047a <__aeabi_uldivmod+0x16>
 8000474:	2100      	movs	r1, #0
 8000476:	43c9      	mvns	r1, r1
 8000478:	0008      	movs	r0, r1
 800047a:	b407      	push	{r0, r1, r2}
 800047c:	4802      	ldr	r0, [pc, #8]	@ (8000488 <__aeabi_uldivmod+0x24>)
 800047e:	a102      	add	r1, pc, #8	@ (adr r1, 8000488 <__aeabi_uldivmod+0x24>)
 8000480:	1840      	adds	r0, r0, r1
 8000482:	9002      	str	r0, [sp, #8]
 8000484:	bd03      	pop	{r0, r1, pc}
 8000486:	46c0      	nop			@ (mov r8, r8)
 8000488:	ffffff65 	.word	0xffffff65
 800048c:	b403      	push	{r0, r1}
 800048e:	4668      	mov	r0, sp
 8000490:	b501      	push	{r0, lr}
 8000492:	9802      	ldr	r0, [sp, #8]
 8000494:	f000 f81e 	bl	80004d4 <__udivmoddi4>
 8000498:	9b01      	ldr	r3, [sp, #4]
 800049a:	469e      	mov	lr, r3
 800049c:	b002      	add	sp, #8
 800049e:	bc0c      	pop	{r2, r3}
 80004a0:	4770      	bx	lr
 80004a2:	46c0      	nop			@ (mov r8, r8)

080004a4 <__aeabi_f2uiz>:
 80004a4:	219e      	movs	r1, #158	@ 0x9e
 80004a6:	b510      	push	{r4, lr}
 80004a8:	05c9      	lsls	r1, r1, #23
 80004aa:	1c04      	adds	r4, r0, #0
 80004ac:	f7ff ffd0 	bl	8000450 <__aeabi_fcmpge>
 80004b0:	2800      	cmp	r0, #0
 80004b2:	d103      	bne.n	80004bc <__aeabi_f2uiz+0x18>
 80004b4:	1c20      	adds	r0, r4, #0
 80004b6:	f000 fda1 	bl	8000ffc <__aeabi_f2iz>
 80004ba:	bd10      	pop	{r4, pc}
 80004bc:	219e      	movs	r1, #158	@ 0x9e
 80004be:	1c20      	adds	r0, r4, #0
 80004c0:	05c9      	lsls	r1, r1, #23
 80004c2:	f000 fbf7 	bl	8000cb4 <__aeabi_fsub>
 80004c6:	f000 fd99 	bl	8000ffc <__aeabi_f2iz>
 80004ca:	2380      	movs	r3, #128	@ 0x80
 80004cc:	061b      	lsls	r3, r3, #24
 80004ce:	469c      	mov	ip, r3
 80004d0:	4460      	add	r0, ip
 80004d2:	e7f2      	b.n	80004ba <__aeabi_f2uiz+0x16>

080004d4 <__udivmoddi4>:
 80004d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004d6:	4657      	mov	r7, sl
 80004d8:	464e      	mov	r6, r9
 80004da:	4645      	mov	r5, r8
 80004dc:	46de      	mov	lr, fp
 80004de:	b5e0      	push	{r5, r6, r7, lr}
 80004e0:	0004      	movs	r4, r0
 80004e2:	000d      	movs	r5, r1
 80004e4:	4692      	mov	sl, r2
 80004e6:	4699      	mov	r9, r3
 80004e8:	b083      	sub	sp, #12
 80004ea:	428b      	cmp	r3, r1
 80004ec:	d830      	bhi.n	8000550 <__udivmoddi4+0x7c>
 80004ee:	d02d      	beq.n	800054c <__udivmoddi4+0x78>
 80004f0:	4649      	mov	r1, r9
 80004f2:	4650      	mov	r0, sl
 80004f4:	f000 fe4e 	bl	8001194 <__clzdi2>
 80004f8:	0029      	movs	r1, r5
 80004fa:	0006      	movs	r6, r0
 80004fc:	0020      	movs	r0, r4
 80004fe:	f000 fe49 	bl	8001194 <__clzdi2>
 8000502:	1a33      	subs	r3, r6, r0
 8000504:	4698      	mov	r8, r3
 8000506:	3b20      	subs	r3, #32
 8000508:	d434      	bmi.n	8000574 <__udivmoddi4+0xa0>
 800050a:	469b      	mov	fp, r3
 800050c:	4653      	mov	r3, sl
 800050e:	465a      	mov	r2, fp
 8000510:	4093      	lsls	r3, r2
 8000512:	4642      	mov	r2, r8
 8000514:	001f      	movs	r7, r3
 8000516:	4653      	mov	r3, sl
 8000518:	4093      	lsls	r3, r2
 800051a:	001e      	movs	r6, r3
 800051c:	42af      	cmp	r7, r5
 800051e:	d83b      	bhi.n	8000598 <__udivmoddi4+0xc4>
 8000520:	42af      	cmp	r7, r5
 8000522:	d100      	bne.n	8000526 <__udivmoddi4+0x52>
 8000524:	e079      	b.n	800061a <__udivmoddi4+0x146>
 8000526:	465b      	mov	r3, fp
 8000528:	1ba4      	subs	r4, r4, r6
 800052a:	41bd      	sbcs	r5, r7
 800052c:	2b00      	cmp	r3, #0
 800052e:	da00      	bge.n	8000532 <__udivmoddi4+0x5e>
 8000530:	e076      	b.n	8000620 <__udivmoddi4+0x14c>
 8000532:	2200      	movs	r2, #0
 8000534:	2300      	movs	r3, #0
 8000536:	9200      	str	r2, [sp, #0]
 8000538:	9301      	str	r3, [sp, #4]
 800053a:	2301      	movs	r3, #1
 800053c:	465a      	mov	r2, fp
 800053e:	4093      	lsls	r3, r2
 8000540:	9301      	str	r3, [sp, #4]
 8000542:	2301      	movs	r3, #1
 8000544:	4642      	mov	r2, r8
 8000546:	4093      	lsls	r3, r2
 8000548:	9300      	str	r3, [sp, #0]
 800054a:	e029      	b.n	80005a0 <__udivmoddi4+0xcc>
 800054c:	4282      	cmp	r2, r0
 800054e:	d9cf      	bls.n	80004f0 <__udivmoddi4+0x1c>
 8000550:	2200      	movs	r2, #0
 8000552:	2300      	movs	r3, #0
 8000554:	9200      	str	r2, [sp, #0]
 8000556:	9301      	str	r3, [sp, #4]
 8000558:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800055a:	2b00      	cmp	r3, #0
 800055c:	d001      	beq.n	8000562 <__udivmoddi4+0x8e>
 800055e:	601c      	str	r4, [r3, #0]
 8000560:	605d      	str	r5, [r3, #4]
 8000562:	9800      	ldr	r0, [sp, #0]
 8000564:	9901      	ldr	r1, [sp, #4]
 8000566:	b003      	add	sp, #12
 8000568:	bcf0      	pop	{r4, r5, r6, r7}
 800056a:	46bb      	mov	fp, r7
 800056c:	46b2      	mov	sl, r6
 800056e:	46a9      	mov	r9, r5
 8000570:	46a0      	mov	r8, r4
 8000572:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000574:	4642      	mov	r2, r8
 8000576:	469b      	mov	fp, r3
 8000578:	2320      	movs	r3, #32
 800057a:	1a9b      	subs	r3, r3, r2
 800057c:	4652      	mov	r2, sl
 800057e:	40da      	lsrs	r2, r3
 8000580:	4641      	mov	r1, r8
 8000582:	0013      	movs	r3, r2
 8000584:	464a      	mov	r2, r9
 8000586:	408a      	lsls	r2, r1
 8000588:	0017      	movs	r7, r2
 800058a:	4642      	mov	r2, r8
 800058c:	431f      	orrs	r7, r3
 800058e:	4653      	mov	r3, sl
 8000590:	4093      	lsls	r3, r2
 8000592:	001e      	movs	r6, r3
 8000594:	42af      	cmp	r7, r5
 8000596:	d9c3      	bls.n	8000520 <__udivmoddi4+0x4c>
 8000598:	2200      	movs	r2, #0
 800059a:	2300      	movs	r3, #0
 800059c:	9200      	str	r2, [sp, #0]
 800059e:	9301      	str	r3, [sp, #4]
 80005a0:	4643      	mov	r3, r8
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d0d8      	beq.n	8000558 <__udivmoddi4+0x84>
 80005a6:	07fb      	lsls	r3, r7, #31
 80005a8:	0872      	lsrs	r2, r6, #1
 80005aa:	431a      	orrs	r2, r3
 80005ac:	4646      	mov	r6, r8
 80005ae:	087b      	lsrs	r3, r7, #1
 80005b0:	e00e      	b.n	80005d0 <__udivmoddi4+0xfc>
 80005b2:	42ab      	cmp	r3, r5
 80005b4:	d101      	bne.n	80005ba <__udivmoddi4+0xe6>
 80005b6:	42a2      	cmp	r2, r4
 80005b8:	d80c      	bhi.n	80005d4 <__udivmoddi4+0x100>
 80005ba:	1aa4      	subs	r4, r4, r2
 80005bc:	419d      	sbcs	r5, r3
 80005be:	2001      	movs	r0, #1
 80005c0:	1924      	adds	r4, r4, r4
 80005c2:	416d      	adcs	r5, r5
 80005c4:	2100      	movs	r1, #0
 80005c6:	3e01      	subs	r6, #1
 80005c8:	1824      	adds	r4, r4, r0
 80005ca:	414d      	adcs	r5, r1
 80005cc:	2e00      	cmp	r6, #0
 80005ce:	d006      	beq.n	80005de <__udivmoddi4+0x10a>
 80005d0:	42ab      	cmp	r3, r5
 80005d2:	d9ee      	bls.n	80005b2 <__udivmoddi4+0xde>
 80005d4:	3e01      	subs	r6, #1
 80005d6:	1924      	adds	r4, r4, r4
 80005d8:	416d      	adcs	r5, r5
 80005da:	2e00      	cmp	r6, #0
 80005dc:	d1f8      	bne.n	80005d0 <__udivmoddi4+0xfc>
 80005de:	9800      	ldr	r0, [sp, #0]
 80005e0:	9901      	ldr	r1, [sp, #4]
 80005e2:	465b      	mov	r3, fp
 80005e4:	1900      	adds	r0, r0, r4
 80005e6:	4169      	adcs	r1, r5
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	db24      	blt.n	8000636 <__udivmoddi4+0x162>
 80005ec:	002b      	movs	r3, r5
 80005ee:	465a      	mov	r2, fp
 80005f0:	4644      	mov	r4, r8
 80005f2:	40d3      	lsrs	r3, r2
 80005f4:	002a      	movs	r2, r5
 80005f6:	40e2      	lsrs	r2, r4
 80005f8:	001c      	movs	r4, r3
 80005fa:	465b      	mov	r3, fp
 80005fc:	0015      	movs	r5, r2
 80005fe:	2b00      	cmp	r3, #0
 8000600:	db2a      	blt.n	8000658 <__udivmoddi4+0x184>
 8000602:	0026      	movs	r6, r4
 8000604:	409e      	lsls	r6, r3
 8000606:	0033      	movs	r3, r6
 8000608:	0026      	movs	r6, r4
 800060a:	4647      	mov	r7, r8
 800060c:	40be      	lsls	r6, r7
 800060e:	0032      	movs	r2, r6
 8000610:	1a80      	subs	r0, r0, r2
 8000612:	4199      	sbcs	r1, r3
 8000614:	9000      	str	r0, [sp, #0]
 8000616:	9101      	str	r1, [sp, #4]
 8000618:	e79e      	b.n	8000558 <__udivmoddi4+0x84>
 800061a:	42a3      	cmp	r3, r4
 800061c:	d8bc      	bhi.n	8000598 <__udivmoddi4+0xc4>
 800061e:	e782      	b.n	8000526 <__udivmoddi4+0x52>
 8000620:	4642      	mov	r2, r8
 8000622:	2320      	movs	r3, #32
 8000624:	2100      	movs	r1, #0
 8000626:	1a9b      	subs	r3, r3, r2
 8000628:	2200      	movs	r2, #0
 800062a:	9100      	str	r1, [sp, #0]
 800062c:	9201      	str	r2, [sp, #4]
 800062e:	2201      	movs	r2, #1
 8000630:	40da      	lsrs	r2, r3
 8000632:	9201      	str	r2, [sp, #4]
 8000634:	e785      	b.n	8000542 <__udivmoddi4+0x6e>
 8000636:	4642      	mov	r2, r8
 8000638:	2320      	movs	r3, #32
 800063a:	1a9b      	subs	r3, r3, r2
 800063c:	002a      	movs	r2, r5
 800063e:	4646      	mov	r6, r8
 8000640:	409a      	lsls	r2, r3
 8000642:	0023      	movs	r3, r4
 8000644:	40f3      	lsrs	r3, r6
 8000646:	4644      	mov	r4, r8
 8000648:	4313      	orrs	r3, r2
 800064a:	002a      	movs	r2, r5
 800064c:	40e2      	lsrs	r2, r4
 800064e:	001c      	movs	r4, r3
 8000650:	465b      	mov	r3, fp
 8000652:	0015      	movs	r5, r2
 8000654:	2b00      	cmp	r3, #0
 8000656:	dad4      	bge.n	8000602 <__udivmoddi4+0x12e>
 8000658:	4642      	mov	r2, r8
 800065a:	002f      	movs	r7, r5
 800065c:	2320      	movs	r3, #32
 800065e:	0026      	movs	r6, r4
 8000660:	4097      	lsls	r7, r2
 8000662:	1a9b      	subs	r3, r3, r2
 8000664:	40de      	lsrs	r6, r3
 8000666:	003b      	movs	r3, r7
 8000668:	4333      	orrs	r3, r6
 800066a:	e7cd      	b.n	8000608 <__udivmoddi4+0x134>

0800066c <__aeabi_fdiv>:
 800066c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800066e:	464f      	mov	r7, r9
 8000670:	4646      	mov	r6, r8
 8000672:	46d6      	mov	lr, sl
 8000674:	0244      	lsls	r4, r0, #9
 8000676:	b5c0      	push	{r6, r7, lr}
 8000678:	0047      	lsls	r7, r0, #1
 800067a:	1c0e      	adds	r6, r1, #0
 800067c:	0a64      	lsrs	r4, r4, #9
 800067e:	0e3f      	lsrs	r7, r7, #24
 8000680:	0fc5      	lsrs	r5, r0, #31
 8000682:	2f00      	cmp	r7, #0
 8000684:	d03c      	beq.n	8000700 <__aeabi_fdiv+0x94>
 8000686:	2fff      	cmp	r7, #255	@ 0xff
 8000688:	d042      	beq.n	8000710 <__aeabi_fdiv+0xa4>
 800068a:	2300      	movs	r3, #0
 800068c:	2280      	movs	r2, #128	@ 0x80
 800068e:	4699      	mov	r9, r3
 8000690:	469a      	mov	sl, r3
 8000692:	00e4      	lsls	r4, r4, #3
 8000694:	04d2      	lsls	r2, r2, #19
 8000696:	4314      	orrs	r4, r2
 8000698:	3f7f      	subs	r7, #127	@ 0x7f
 800069a:	0273      	lsls	r3, r6, #9
 800069c:	0a5b      	lsrs	r3, r3, #9
 800069e:	4698      	mov	r8, r3
 80006a0:	0073      	lsls	r3, r6, #1
 80006a2:	0e1b      	lsrs	r3, r3, #24
 80006a4:	0ff6      	lsrs	r6, r6, #31
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d01b      	beq.n	80006e2 <__aeabi_fdiv+0x76>
 80006aa:	2bff      	cmp	r3, #255	@ 0xff
 80006ac:	d013      	beq.n	80006d6 <__aeabi_fdiv+0x6a>
 80006ae:	4642      	mov	r2, r8
 80006b0:	2180      	movs	r1, #128	@ 0x80
 80006b2:	00d2      	lsls	r2, r2, #3
 80006b4:	04c9      	lsls	r1, r1, #19
 80006b6:	4311      	orrs	r1, r2
 80006b8:	4688      	mov	r8, r1
 80006ba:	2000      	movs	r0, #0
 80006bc:	3b7f      	subs	r3, #127	@ 0x7f
 80006be:	0029      	movs	r1, r5
 80006c0:	1aff      	subs	r7, r7, r3
 80006c2:	464b      	mov	r3, r9
 80006c4:	4071      	eors	r1, r6
 80006c6:	b2c9      	uxtb	r1, r1
 80006c8:	2b0f      	cmp	r3, #15
 80006ca:	d900      	bls.n	80006ce <__aeabi_fdiv+0x62>
 80006cc:	e0b5      	b.n	800083a <__aeabi_fdiv+0x1ce>
 80006ce:	4a74      	ldr	r2, [pc, #464]	@ (80008a0 <__aeabi_fdiv+0x234>)
 80006d0:	009b      	lsls	r3, r3, #2
 80006d2:	58d3      	ldr	r3, [r2, r3]
 80006d4:	469f      	mov	pc, r3
 80006d6:	4643      	mov	r3, r8
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d13f      	bne.n	800075c <__aeabi_fdiv+0xf0>
 80006dc:	3fff      	subs	r7, #255	@ 0xff
 80006de:	3302      	adds	r3, #2
 80006e0:	e003      	b.n	80006ea <__aeabi_fdiv+0x7e>
 80006e2:	4643      	mov	r3, r8
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d12d      	bne.n	8000744 <__aeabi_fdiv+0xd8>
 80006e8:	2301      	movs	r3, #1
 80006ea:	0029      	movs	r1, r5
 80006ec:	464a      	mov	r2, r9
 80006ee:	4071      	eors	r1, r6
 80006f0:	b2c9      	uxtb	r1, r1
 80006f2:	431a      	orrs	r2, r3
 80006f4:	2a0e      	cmp	r2, #14
 80006f6:	d838      	bhi.n	800076a <__aeabi_fdiv+0xfe>
 80006f8:	486a      	ldr	r0, [pc, #424]	@ (80008a4 <__aeabi_fdiv+0x238>)
 80006fa:	0092      	lsls	r2, r2, #2
 80006fc:	5882      	ldr	r2, [r0, r2]
 80006fe:	4697      	mov	pc, r2
 8000700:	2c00      	cmp	r4, #0
 8000702:	d113      	bne.n	800072c <__aeabi_fdiv+0xc0>
 8000704:	2304      	movs	r3, #4
 8000706:	4699      	mov	r9, r3
 8000708:	3b03      	subs	r3, #3
 800070a:	2700      	movs	r7, #0
 800070c:	469a      	mov	sl, r3
 800070e:	e7c4      	b.n	800069a <__aeabi_fdiv+0x2e>
 8000710:	2c00      	cmp	r4, #0
 8000712:	d105      	bne.n	8000720 <__aeabi_fdiv+0xb4>
 8000714:	2308      	movs	r3, #8
 8000716:	4699      	mov	r9, r3
 8000718:	3b06      	subs	r3, #6
 800071a:	27ff      	movs	r7, #255	@ 0xff
 800071c:	469a      	mov	sl, r3
 800071e:	e7bc      	b.n	800069a <__aeabi_fdiv+0x2e>
 8000720:	230c      	movs	r3, #12
 8000722:	4699      	mov	r9, r3
 8000724:	3b09      	subs	r3, #9
 8000726:	27ff      	movs	r7, #255	@ 0xff
 8000728:	469a      	mov	sl, r3
 800072a:	e7b6      	b.n	800069a <__aeabi_fdiv+0x2e>
 800072c:	0020      	movs	r0, r4
 800072e:	f000 fd13 	bl	8001158 <__clzsi2>
 8000732:	2776      	movs	r7, #118	@ 0x76
 8000734:	1f43      	subs	r3, r0, #5
 8000736:	409c      	lsls	r4, r3
 8000738:	2300      	movs	r3, #0
 800073a:	427f      	negs	r7, r7
 800073c:	4699      	mov	r9, r3
 800073e:	469a      	mov	sl, r3
 8000740:	1a3f      	subs	r7, r7, r0
 8000742:	e7aa      	b.n	800069a <__aeabi_fdiv+0x2e>
 8000744:	4640      	mov	r0, r8
 8000746:	f000 fd07 	bl	8001158 <__clzsi2>
 800074a:	4642      	mov	r2, r8
 800074c:	1f43      	subs	r3, r0, #5
 800074e:	409a      	lsls	r2, r3
 8000750:	2376      	movs	r3, #118	@ 0x76
 8000752:	425b      	negs	r3, r3
 8000754:	1a1b      	subs	r3, r3, r0
 8000756:	4690      	mov	r8, r2
 8000758:	2000      	movs	r0, #0
 800075a:	e7b0      	b.n	80006be <__aeabi_fdiv+0x52>
 800075c:	2303      	movs	r3, #3
 800075e:	464a      	mov	r2, r9
 8000760:	431a      	orrs	r2, r3
 8000762:	4691      	mov	r9, r2
 8000764:	2003      	movs	r0, #3
 8000766:	33fc      	adds	r3, #252	@ 0xfc
 8000768:	e7a9      	b.n	80006be <__aeabi_fdiv+0x52>
 800076a:	000d      	movs	r5, r1
 800076c:	20ff      	movs	r0, #255	@ 0xff
 800076e:	2200      	movs	r2, #0
 8000770:	05c0      	lsls	r0, r0, #23
 8000772:	07ed      	lsls	r5, r5, #31
 8000774:	4310      	orrs	r0, r2
 8000776:	4328      	orrs	r0, r5
 8000778:	bce0      	pop	{r5, r6, r7}
 800077a:	46ba      	mov	sl, r7
 800077c:	46b1      	mov	r9, r6
 800077e:	46a8      	mov	r8, r5
 8000780:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000782:	000d      	movs	r5, r1
 8000784:	2000      	movs	r0, #0
 8000786:	2200      	movs	r2, #0
 8000788:	e7f2      	b.n	8000770 <__aeabi_fdiv+0x104>
 800078a:	4653      	mov	r3, sl
 800078c:	2b02      	cmp	r3, #2
 800078e:	d0ed      	beq.n	800076c <__aeabi_fdiv+0x100>
 8000790:	2b03      	cmp	r3, #3
 8000792:	d033      	beq.n	80007fc <__aeabi_fdiv+0x190>
 8000794:	46a0      	mov	r8, r4
 8000796:	2b01      	cmp	r3, #1
 8000798:	d105      	bne.n	80007a6 <__aeabi_fdiv+0x13a>
 800079a:	2000      	movs	r0, #0
 800079c:	2200      	movs	r2, #0
 800079e:	e7e7      	b.n	8000770 <__aeabi_fdiv+0x104>
 80007a0:	0035      	movs	r5, r6
 80007a2:	2803      	cmp	r0, #3
 80007a4:	d07a      	beq.n	800089c <__aeabi_fdiv+0x230>
 80007a6:	003b      	movs	r3, r7
 80007a8:	337f      	adds	r3, #127	@ 0x7f
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	dd2d      	ble.n	800080a <__aeabi_fdiv+0x19e>
 80007ae:	4642      	mov	r2, r8
 80007b0:	0752      	lsls	r2, r2, #29
 80007b2:	d007      	beq.n	80007c4 <__aeabi_fdiv+0x158>
 80007b4:	220f      	movs	r2, #15
 80007b6:	4641      	mov	r1, r8
 80007b8:	400a      	ands	r2, r1
 80007ba:	2a04      	cmp	r2, #4
 80007bc:	d002      	beq.n	80007c4 <__aeabi_fdiv+0x158>
 80007be:	2204      	movs	r2, #4
 80007c0:	4694      	mov	ip, r2
 80007c2:	44e0      	add	r8, ip
 80007c4:	4642      	mov	r2, r8
 80007c6:	0112      	lsls	r2, r2, #4
 80007c8:	d505      	bpl.n	80007d6 <__aeabi_fdiv+0x16a>
 80007ca:	4642      	mov	r2, r8
 80007cc:	4b36      	ldr	r3, [pc, #216]	@ (80008a8 <__aeabi_fdiv+0x23c>)
 80007ce:	401a      	ands	r2, r3
 80007d0:	003b      	movs	r3, r7
 80007d2:	4690      	mov	r8, r2
 80007d4:	3380      	adds	r3, #128	@ 0x80
 80007d6:	2bfe      	cmp	r3, #254	@ 0xfe
 80007d8:	dcc8      	bgt.n	800076c <__aeabi_fdiv+0x100>
 80007da:	4642      	mov	r2, r8
 80007dc:	0192      	lsls	r2, r2, #6
 80007de:	0a52      	lsrs	r2, r2, #9
 80007e0:	b2d8      	uxtb	r0, r3
 80007e2:	e7c5      	b.n	8000770 <__aeabi_fdiv+0x104>
 80007e4:	2280      	movs	r2, #128	@ 0x80
 80007e6:	2500      	movs	r5, #0
 80007e8:	20ff      	movs	r0, #255	@ 0xff
 80007ea:	03d2      	lsls	r2, r2, #15
 80007ec:	e7c0      	b.n	8000770 <__aeabi_fdiv+0x104>
 80007ee:	2280      	movs	r2, #128	@ 0x80
 80007f0:	03d2      	lsls	r2, r2, #15
 80007f2:	4214      	tst	r4, r2
 80007f4:	d002      	beq.n	80007fc <__aeabi_fdiv+0x190>
 80007f6:	4643      	mov	r3, r8
 80007f8:	4213      	tst	r3, r2
 80007fa:	d049      	beq.n	8000890 <__aeabi_fdiv+0x224>
 80007fc:	2280      	movs	r2, #128	@ 0x80
 80007fe:	03d2      	lsls	r2, r2, #15
 8000800:	4322      	orrs	r2, r4
 8000802:	0252      	lsls	r2, r2, #9
 8000804:	20ff      	movs	r0, #255	@ 0xff
 8000806:	0a52      	lsrs	r2, r2, #9
 8000808:	e7b2      	b.n	8000770 <__aeabi_fdiv+0x104>
 800080a:	2201      	movs	r2, #1
 800080c:	1ad3      	subs	r3, r2, r3
 800080e:	2b1b      	cmp	r3, #27
 8000810:	dcc3      	bgt.n	800079a <__aeabi_fdiv+0x12e>
 8000812:	4642      	mov	r2, r8
 8000814:	40da      	lsrs	r2, r3
 8000816:	4643      	mov	r3, r8
 8000818:	379e      	adds	r7, #158	@ 0x9e
 800081a:	40bb      	lsls	r3, r7
 800081c:	1e59      	subs	r1, r3, #1
 800081e:	418b      	sbcs	r3, r1
 8000820:	431a      	orrs	r2, r3
 8000822:	0753      	lsls	r3, r2, #29
 8000824:	d004      	beq.n	8000830 <__aeabi_fdiv+0x1c4>
 8000826:	230f      	movs	r3, #15
 8000828:	4013      	ands	r3, r2
 800082a:	2b04      	cmp	r3, #4
 800082c:	d000      	beq.n	8000830 <__aeabi_fdiv+0x1c4>
 800082e:	3204      	adds	r2, #4
 8000830:	0153      	lsls	r3, r2, #5
 8000832:	d529      	bpl.n	8000888 <__aeabi_fdiv+0x21c>
 8000834:	2001      	movs	r0, #1
 8000836:	2200      	movs	r2, #0
 8000838:	e79a      	b.n	8000770 <__aeabi_fdiv+0x104>
 800083a:	4642      	mov	r2, r8
 800083c:	0163      	lsls	r3, r4, #5
 800083e:	0155      	lsls	r5, r2, #5
 8000840:	42ab      	cmp	r3, r5
 8000842:	d215      	bcs.n	8000870 <__aeabi_fdiv+0x204>
 8000844:	201b      	movs	r0, #27
 8000846:	2200      	movs	r2, #0
 8000848:	3f01      	subs	r7, #1
 800084a:	2601      	movs	r6, #1
 800084c:	001c      	movs	r4, r3
 800084e:	0052      	lsls	r2, r2, #1
 8000850:	005b      	lsls	r3, r3, #1
 8000852:	2c00      	cmp	r4, #0
 8000854:	db01      	blt.n	800085a <__aeabi_fdiv+0x1ee>
 8000856:	429d      	cmp	r5, r3
 8000858:	d801      	bhi.n	800085e <__aeabi_fdiv+0x1f2>
 800085a:	1b5b      	subs	r3, r3, r5
 800085c:	4332      	orrs	r2, r6
 800085e:	3801      	subs	r0, #1
 8000860:	2800      	cmp	r0, #0
 8000862:	d1f3      	bne.n	800084c <__aeabi_fdiv+0x1e0>
 8000864:	1e58      	subs	r0, r3, #1
 8000866:	4183      	sbcs	r3, r0
 8000868:	4313      	orrs	r3, r2
 800086a:	4698      	mov	r8, r3
 800086c:	000d      	movs	r5, r1
 800086e:	e79a      	b.n	80007a6 <__aeabi_fdiv+0x13a>
 8000870:	201a      	movs	r0, #26
 8000872:	2201      	movs	r2, #1
 8000874:	1b5b      	subs	r3, r3, r5
 8000876:	e7e8      	b.n	800084a <__aeabi_fdiv+0x1de>
 8000878:	3b02      	subs	r3, #2
 800087a:	425a      	negs	r2, r3
 800087c:	4153      	adcs	r3, r2
 800087e:	425b      	negs	r3, r3
 8000880:	0035      	movs	r5, r6
 8000882:	2200      	movs	r2, #0
 8000884:	b2d8      	uxtb	r0, r3
 8000886:	e773      	b.n	8000770 <__aeabi_fdiv+0x104>
 8000888:	0192      	lsls	r2, r2, #6
 800088a:	2000      	movs	r0, #0
 800088c:	0a52      	lsrs	r2, r2, #9
 800088e:	e76f      	b.n	8000770 <__aeabi_fdiv+0x104>
 8000890:	431a      	orrs	r2, r3
 8000892:	0252      	lsls	r2, r2, #9
 8000894:	0035      	movs	r5, r6
 8000896:	20ff      	movs	r0, #255	@ 0xff
 8000898:	0a52      	lsrs	r2, r2, #9
 800089a:	e769      	b.n	8000770 <__aeabi_fdiv+0x104>
 800089c:	4644      	mov	r4, r8
 800089e:	e7ad      	b.n	80007fc <__aeabi_fdiv+0x190>
 80008a0:	08006158 	.word	0x08006158
 80008a4:	08006198 	.word	0x08006198
 80008a8:	f7ffffff 	.word	0xf7ffffff

080008ac <__eqsf2>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	0042      	lsls	r2, r0, #1
 80008b0:	024e      	lsls	r6, r1, #9
 80008b2:	004c      	lsls	r4, r1, #1
 80008b4:	0245      	lsls	r5, r0, #9
 80008b6:	0a6d      	lsrs	r5, r5, #9
 80008b8:	0e12      	lsrs	r2, r2, #24
 80008ba:	0fc3      	lsrs	r3, r0, #31
 80008bc:	0a76      	lsrs	r6, r6, #9
 80008be:	0e24      	lsrs	r4, r4, #24
 80008c0:	0fc9      	lsrs	r1, r1, #31
 80008c2:	2aff      	cmp	r2, #255	@ 0xff
 80008c4:	d010      	beq.n	80008e8 <__eqsf2+0x3c>
 80008c6:	2cff      	cmp	r4, #255	@ 0xff
 80008c8:	d00c      	beq.n	80008e4 <__eqsf2+0x38>
 80008ca:	2001      	movs	r0, #1
 80008cc:	42a2      	cmp	r2, r4
 80008ce:	d10a      	bne.n	80008e6 <__eqsf2+0x3a>
 80008d0:	42b5      	cmp	r5, r6
 80008d2:	d108      	bne.n	80008e6 <__eqsf2+0x3a>
 80008d4:	428b      	cmp	r3, r1
 80008d6:	d00f      	beq.n	80008f8 <__eqsf2+0x4c>
 80008d8:	2a00      	cmp	r2, #0
 80008da:	d104      	bne.n	80008e6 <__eqsf2+0x3a>
 80008dc:	0028      	movs	r0, r5
 80008de:	1e43      	subs	r3, r0, #1
 80008e0:	4198      	sbcs	r0, r3
 80008e2:	e000      	b.n	80008e6 <__eqsf2+0x3a>
 80008e4:	2001      	movs	r0, #1
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	2001      	movs	r0, #1
 80008ea:	2cff      	cmp	r4, #255	@ 0xff
 80008ec:	d1fb      	bne.n	80008e6 <__eqsf2+0x3a>
 80008ee:	4335      	orrs	r5, r6
 80008f0:	d1f9      	bne.n	80008e6 <__eqsf2+0x3a>
 80008f2:	404b      	eors	r3, r1
 80008f4:	0018      	movs	r0, r3
 80008f6:	e7f6      	b.n	80008e6 <__eqsf2+0x3a>
 80008f8:	2000      	movs	r0, #0
 80008fa:	e7f4      	b.n	80008e6 <__eqsf2+0x3a>

080008fc <__gesf2>:
 80008fc:	b530      	push	{r4, r5, lr}
 80008fe:	0042      	lsls	r2, r0, #1
 8000900:	0244      	lsls	r4, r0, #9
 8000902:	024d      	lsls	r5, r1, #9
 8000904:	0fc3      	lsrs	r3, r0, #31
 8000906:	0048      	lsls	r0, r1, #1
 8000908:	0a64      	lsrs	r4, r4, #9
 800090a:	0e12      	lsrs	r2, r2, #24
 800090c:	0a6d      	lsrs	r5, r5, #9
 800090e:	0e00      	lsrs	r0, r0, #24
 8000910:	0fc9      	lsrs	r1, r1, #31
 8000912:	2aff      	cmp	r2, #255	@ 0xff
 8000914:	d019      	beq.n	800094a <__gesf2+0x4e>
 8000916:	28ff      	cmp	r0, #255	@ 0xff
 8000918:	d00b      	beq.n	8000932 <__gesf2+0x36>
 800091a:	2a00      	cmp	r2, #0
 800091c:	d11e      	bne.n	800095c <__gesf2+0x60>
 800091e:	2800      	cmp	r0, #0
 8000920:	d10b      	bne.n	800093a <__gesf2+0x3e>
 8000922:	2d00      	cmp	r5, #0
 8000924:	d027      	beq.n	8000976 <__gesf2+0x7a>
 8000926:	2c00      	cmp	r4, #0
 8000928:	d134      	bne.n	8000994 <__gesf2+0x98>
 800092a:	2900      	cmp	r1, #0
 800092c:	d02f      	beq.n	800098e <__gesf2+0x92>
 800092e:	0008      	movs	r0, r1
 8000930:	bd30      	pop	{r4, r5, pc}
 8000932:	2d00      	cmp	r5, #0
 8000934:	d128      	bne.n	8000988 <__gesf2+0x8c>
 8000936:	2a00      	cmp	r2, #0
 8000938:	d101      	bne.n	800093e <__gesf2+0x42>
 800093a:	2c00      	cmp	r4, #0
 800093c:	d0f5      	beq.n	800092a <__gesf2+0x2e>
 800093e:	428b      	cmp	r3, r1
 8000940:	d107      	bne.n	8000952 <__gesf2+0x56>
 8000942:	2b00      	cmp	r3, #0
 8000944:	d023      	beq.n	800098e <__gesf2+0x92>
 8000946:	0018      	movs	r0, r3
 8000948:	e7f2      	b.n	8000930 <__gesf2+0x34>
 800094a:	2c00      	cmp	r4, #0
 800094c:	d11c      	bne.n	8000988 <__gesf2+0x8c>
 800094e:	28ff      	cmp	r0, #255	@ 0xff
 8000950:	d014      	beq.n	800097c <__gesf2+0x80>
 8000952:	1e58      	subs	r0, r3, #1
 8000954:	2302      	movs	r3, #2
 8000956:	4018      	ands	r0, r3
 8000958:	3801      	subs	r0, #1
 800095a:	e7e9      	b.n	8000930 <__gesf2+0x34>
 800095c:	2800      	cmp	r0, #0
 800095e:	d0f8      	beq.n	8000952 <__gesf2+0x56>
 8000960:	428b      	cmp	r3, r1
 8000962:	d1f6      	bne.n	8000952 <__gesf2+0x56>
 8000964:	4282      	cmp	r2, r0
 8000966:	dcf4      	bgt.n	8000952 <__gesf2+0x56>
 8000968:	dbeb      	blt.n	8000942 <__gesf2+0x46>
 800096a:	42ac      	cmp	r4, r5
 800096c:	d8f1      	bhi.n	8000952 <__gesf2+0x56>
 800096e:	2000      	movs	r0, #0
 8000970:	42ac      	cmp	r4, r5
 8000972:	d2dd      	bcs.n	8000930 <__gesf2+0x34>
 8000974:	e7e5      	b.n	8000942 <__gesf2+0x46>
 8000976:	2c00      	cmp	r4, #0
 8000978:	d0da      	beq.n	8000930 <__gesf2+0x34>
 800097a:	e7ea      	b.n	8000952 <__gesf2+0x56>
 800097c:	2d00      	cmp	r5, #0
 800097e:	d103      	bne.n	8000988 <__gesf2+0x8c>
 8000980:	428b      	cmp	r3, r1
 8000982:	d1e6      	bne.n	8000952 <__gesf2+0x56>
 8000984:	2000      	movs	r0, #0
 8000986:	e7d3      	b.n	8000930 <__gesf2+0x34>
 8000988:	2002      	movs	r0, #2
 800098a:	4240      	negs	r0, r0
 800098c:	e7d0      	b.n	8000930 <__gesf2+0x34>
 800098e:	2001      	movs	r0, #1
 8000990:	4240      	negs	r0, r0
 8000992:	e7cd      	b.n	8000930 <__gesf2+0x34>
 8000994:	428b      	cmp	r3, r1
 8000996:	d0e8      	beq.n	800096a <__gesf2+0x6e>
 8000998:	e7db      	b.n	8000952 <__gesf2+0x56>
 800099a:	46c0      	nop			@ (mov r8, r8)

0800099c <__lesf2>:
 800099c:	b530      	push	{r4, r5, lr}
 800099e:	0042      	lsls	r2, r0, #1
 80009a0:	0244      	lsls	r4, r0, #9
 80009a2:	024d      	lsls	r5, r1, #9
 80009a4:	0fc3      	lsrs	r3, r0, #31
 80009a6:	0048      	lsls	r0, r1, #1
 80009a8:	0a64      	lsrs	r4, r4, #9
 80009aa:	0e12      	lsrs	r2, r2, #24
 80009ac:	0a6d      	lsrs	r5, r5, #9
 80009ae:	0e00      	lsrs	r0, r0, #24
 80009b0:	0fc9      	lsrs	r1, r1, #31
 80009b2:	2aff      	cmp	r2, #255	@ 0xff
 80009b4:	d01a      	beq.n	80009ec <__lesf2+0x50>
 80009b6:	28ff      	cmp	r0, #255	@ 0xff
 80009b8:	d00e      	beq.n	80009d8 <__lesf2+0x3c>
 80009ba:	2a00      	cmp	r2, #0
 80009bc:	d11e      	bne.n	80009fc <__lesf2+0x60>
 80009be:	2800      	cmp	r0, #0
 80009c0:	d10e      	bne.n	80009e0 <__lesf2+0x44>
 80009c2:	2d00      	cmp	r5, #0
 80009c4:	d02a      	beq.n	8000a1c <__lesf2+0x80>
 80009c6:	2c00      	cmp	r4, #0
 80009c8:	d00c      	beq.n	80009e4 <__lesf2+0x48>
 80009ca:	428b      	cmp	r3, r1
 80009cc:	d01d      	beq.n	8000a0a <__lesf2+0x6e>
 80009ce:	1e58      	subs	r0, r3, #1
 80009d0:	2302      	movs	r3, #2
 80009d2:	4018      	ands	r0, r3
 80009d4:	3801      	subs	r0, #1
 80009d6:	e010      	b.n	80009fa <__lesf2+0x5e>
 80009d8:	2d00      	cmp	r5, #0
 80009da:	d10d      	bne.n	80009f8 <__lesf2+0x5c>
 80009dc:	2a00      	cmp	r2, #0
 80009de:	d120      	bne.n	8000a22 <__lesf2+0x86>
 80009e0:	2c00      	cmp	r4, #0
 80009e2:	d11e      	bne.n	8000a22 <__lesf2+0x86>
 80009e4:	2900      	cmp	r1, #0
 80009e6:	d023      	beq.n	8000a30 <__lesf2+0x94>
 80009e8:	0008      	movs	r0, r1
 80009ea:	e006      	b.n	80009fa <__lesf2+0x5e>
 80009ec:	2c00      	cmp	r4, #0
 80009ee:	d103      	bne.n	80009f8 <__lesf2+0x5c>
 80009f0:	28ff      	cmp	r0, #255	@ 0xff
 80009f2:	d1ec      	bne.n	80009ce <__lesf2+0x32>
 80009f4:	2d00      	cmp	r5, #0
 80009f6:	d017      	beq.n	8000a28 <__lesf2+0x8c>
 80009f8:	2002      	movs	r0, #2
 80009fa:	bd30      	pop	{r4, r5, pc}
 80009fc:	2800      	cmp	r0, #0
 80009fe:	d0e6      	beq.n	80009ce <__lesf2+0x32>
 8000a00:	428b      	cmp	r3, r1
 8000a02:	d1e4      	bne.n	80009ce <__lesf2+0x32>
 8000a04:	4282      	cmp	r2, r0
 8000a06:	dce2      	bgt.n	80009ce <__lesf2+0x32>
 8000a08:	db04      	blt.n	8000a14 <__lesf2+0x78>
 8000a0a:	42ac      	cmp	r4, r5
 8000a0c:	d8df      	bhi.n	80009ce <__lesf2+0x32>
 8000a0e:	2000      	movs	r0, #0
 8000a10:	42ac      	cmp	r4, r5
 8000a12:	d2f2      	bcs.n	80009fa <__lesf2+0x5e>
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d00b      	beq.n	8000a30 <__lesf2+0x94>
 8000a18:	0018      	movs	r0, r3
 8000a1a:	e7ee      	b.n	80009fa <__lesf2+0x5e>
 8000a1c:	2c00      	cmp	r4, #0
 8000a1e:	d0ec      	beq.n	80009fa <__lesf2+0x5e>
 8000a20:	e7d5      	b.n	80009ce <__lesf2+0x32>
 8000a22:	428b      	cmp	r3, r1
 8000a24:	d1d3      	bne.n	80009ce <__lesf2+0x32>
 8000a26:	e7f5      	b.n	8000a14 <__lesf2+0x78>
 8000a28:	2000      	movs	r0, #0
 8000a2a:	428b      	cmp	r3, r1
 8000a2c:	d0e5      	beq.n	80009fa <__lesf2+0x5e>
 8000a2e:	e7ce      	b.n	80009ce <__lesf2+0x32>
 8000a30:	2001      	movs	r0, #1
 8000a32:	4240      	negs	r0, r0
 8000a34:	e7e1      	b.n	80009fa <__lesf2+0x5e>
 8000a36:	46c0      	nop			@ (mov r8, r8)

08000a38 <__aeabi_fmul>:
 8000a38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a3a:	464f      	mov	r7, r9
 8000a3c:	4646      	mov	r6, r8
 8000a3e:	46d6      	mov	lr, sl
 8000a40:	0243      	lsls	r3, r0, #9
 8000a42:	0a5b      	lsrs	r3, r3, #9
 8000a44:	0045      	lsls	r5, r0, #1
 8000a46:	b5c0      	push	{r6, r7, lr}
 8000a48:	4699      	mov	r9, r3
 8000a4a:	1c0f      	adds	r7, r1, #0
 8000a4c:	0e2d      	lsrs	r5, r5, #24
 8000a4e:	0fc6      	lsrs	r6, r0, #31
 8000a50:	2d00      	cmp	r5, #0
 8000a52:	d100      	bne.n	8000a56 <__aeabi_fmul+0x1e>
 8000a54:	e088      	b.n	8000b68 <__aeabi_fmul+0x130>
 8000a56:	2dff      	cmp	r5, #255	@ 0xff
 8000a58:	d100      	bne.n	8000a5c <__aeabi_fmul+0x24>
 8000a5a:	e08d      	b.n	8000b78 <__aeabi_fmul+0x140>
 8000a5c:	2280      	movs	r2, #128	@ 0x80
 8000a5e:	00db      	lsls	r3, r3, #3
 8000a60:	04d2      	lsls	r2, r2, #19
 8000a62:	431a      	orrs	r2, r3
 8000a64:	2300      	movs	r3, #0
 8000a66:	4691      	mov	r9, r2
 8000a68:	4698      	mov	r8, r3
 8000a6a:	469a      	mov	sl, r3
 8000a6c:	3d7f      	subs	r5, #127	@ 0x7f
 8000a6e:	027c      	lsls	r4, r7, #9
 8000a70:	007b      	lsls	r3, r7, #1
 8000a72:	0a64      	lsrs	r4, r4, #9
 8000a74:	0e1b      	lsrs	r3, r3, #24
 8000a76:	0fff      	lsrs	r7, r7, #31
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d068      	beq.n	8000b4e <__aeabi_fmul+0x116>
 8000a7c:	2bff      	cmp	r3, #255	@ 0xff
 8000a7e:	d021      	beq.n	8000ac4 <__aeabi_fmul+0x8c>
 8000a80:	2280      	movs	r2, #128	@ 0x80
 8000a82:	00e4      	lsls	r4, r4, #3
 8000a84:	04d2      	lsls	r2, r2, #19
 8000a86:	4314      	orrs	r4, r2
 8000a88:	4642      	mov	r2, r8
 8000a8a:	3b7f      	subs	r3, #127	@ 0x7f
 8000a8c:	195b      	adds	r3, r3, r5
 8000a8e:	2100      	movs	r1, #0
 8000a90:	1c5d      	adds	r5, r3, #1
 8000a92:	2a0a      	cmp	r2, #10
 8000a94:	dc2e      	bgt.n	8000af4 <__aeabi_fmul+0xbc>
 8000a96:	407e      	eors	r6, r7
 8000a98:	4642      	mov	r2, r8
 8000a9a:	2a02      	cmp	r2, #2
 8000a9c:	dc23      	bgt.n	8000ae6 <__aeabi_fmul+0xae>
 8000a9e:	3a01      	subs	r2, #1
 8000aa0:	2a01      	cmp	r2, #1
 8000aa2:	d900      	bls.n	8000aa6 <__aeabi_fmul+0x6e>
 8000aa4:	e0bd      	b.n	8000c22 <__aeabi_fmul+0x1ea>
 8000aa6:	2902      	cmp	r1, #2
 8000aa8:	d06e      	beq.n	8000b88 <__aeabi_fmul+0x150>
 8000aaa:	2901      	cmp	r1, #1
 8000aac:	d12c      	bne.n	8000b08 <__aeabi_fmul+0xd0>
 8000aae:	2000      	movs	r0, #0
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	05c0      	lsls	r0, r0, #23
 8000ab4:	07f6      	lsls	r6, r6, #31
 8000ab6:	4310      	orrs	r0, r2
 8000ab8:	4330      	orrs	r0, r6
 8000aba:	bce0      	pop	{r5, r6, r7}
 8000abc:	46ba      	mov	sl, r7
 8000abe:	46b1      	mov	r9, r6
 8000ac0:	46a8      	mov	r8, r5
 8000ac2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000ac4:	002b      	movs	r3, r5
 8000ac6:	33ff      	adds	r3, #255	@ 0xff
 8000ac8:	2c00      	cmp	r4, #0
 8000aca:	d065      	beq.n	8000b98 <__aeabi_fmul+0x160>
 8000acc:	2203      	movs	r2, #3
 8000ace:	4641      	mov	r1, r8
 8000ad0:	4311      	orrs	r1, r2
 8000ad2:	0032      	movs	r2, r6
 8000ad4:	3501      	adds	r5, #1
 8000ad6:	4688      	mov	r8, r1
 8000ad8:	407a      	eors	r2, r7
 8000ada:	35ff      	adds	r5, #255	@ 0xff
 8000adc:	290a      	cmp	r1, #10
 8000ade:	dd00      	ble.n	8000ae2 <__aeabi_fmul+0xaa>
 8000ae0:	e0d8      	b.n	8000c94 <__aeabi_fmul+0x25c>
 8000ae2:	0016      	movs	r6, r2
 8000ae4:	2103      	movs	r1, #3
 8000ae6:	4640      	mov	r0, r8
 8000ae8:	2201      	movs	r2, #1
 8000aea:	4082      	lsls	r2, r0
 8000aec:	20a6      	movs	r0, #166	@ 0xa6
 8000aee:	00c0      	lsls	r0, r0, #3
 8000af0:	4202      	tst	r2, r0
 8000af2:	d020      	beq.n	8000b36 <__aeabi_fmul+0xfe>
 8000af4:	4653      	mov	r3, sl
 8000af6:	2b02      	cmp	r3, #2
 8000af8:	d046      	beq.n	8000b88 <__aeabi_fmul+0x150>
 8000afa:	2b03      	cmp	r3, #3
 8000afc:	d100      	bne.n	8000b00 <__aeabi_fmul+0xc8>
 8000afe:	e0bb      	b.n	8000c78 <__aeabi_fmul+0x240>
 8000b00:	4651      	mov	r1, sl
 8000b02:	464c      	mov	r4, r9
 8000b04:	2901      	cmp	r1, #1
 8000b06:	d0d2      	beq.n	8000aae <__aeabi_fmul+0x76>
 8000b08:	002b      	movs	r3, r5
 8000b0a:	337f      	adds	r3, #127	@ 0x7f
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	dd70      	ble.n	8000bf2 <__aeabi_fmul+0x1ba>
 8000b10:	0762      	lsls	r2, r4, #29
 8000b12:	d004      	beq.n	8000b1e <__aeabi_fmul+0xe6>
 8000b14:	220f      	movs	r2, #15
 8000b16:	4022      	ands	r2, r4
 8000b18:	2a04      	cmp	r2, #4
 8000b1a:	d000      	beq.n	8000b1e <__aeabi_fmul+0xe6>
 8000b1c:	3404      	adds	r4, #4
 8000b1e:	0122      	lsls	r2, r4, #4
 8000b20:	d503      	bpl.n	8000b2a <__aeabi_fmul+0xf2>
 8000b22:	4b63      	ldr	r3, [pc, #396]	@ (8000cb0 <__aeabi_fmul+0x278>)
 8000b24:	401c      	ands	r4, r3
 8000b26:	002b      	movs	r3, r5
 8000b28:	3380      	adds	r3, #128	@ 0x80
 8000b2a:	2bfe      	cmp	r3, #254	@ 0xfe
 8000b2c:	dc2c      	bgt.n	8000b88 <__aeabi_fmul+0x150>
 8000b2e:	01a2      	lsls	r2, r4, #6
 8000b30:	0a52      	lsrs	r2, r2, #9
 8000b32:	b2d8      	uxtb	r0, r3
 8000b34:	e7bd      	b.n	8000ab2 <__aeabi_fmul+0x7a>
 8000b36:	2090      	movs	r0, #144	@ 0x90
 8000b38:	0080      	lsls	r0, r0, #2
 8000b3a:	4202      	tst	r2, r0
 8000b3c:	d127      	bne.n	8000b8e <__aeabi_fmul+0x156>
 8000b3e:	38b9      	subs	r0, #185	@ 0xb9
 8000b40:	38ff      	subs	r0, #255	@ 0xff
 8000b42:	4210      	tst	r0, r2
 8000b44:	d06d      	beq.n	8000c22 <__aeabi_fmul+0x1ea>
 8000b46:	003e      	movs	r6, r7
 8000b48:	46a1      	mov	r9, r4
 8000b4a:	468a      	mov	sl, r1
 8000b4c:	e7d2      	b.n	8000af4 <__aeabi_fmul+0xbc>
 8000b4e:	2c00      	cmp	r4, #0
 8000b50:	d141      	bne.n	8000bd6 <__aeabi_fmul+0x19e>
 8000b52:	2301      	movs	r3, #1
 8000b54:	4642      	mov	r2, r8
 8000b56:	431a      	orrs	r2, r3
 8000b58:	4690      	mov	r8, r2
 8000b5a:	002b      	movs	r3, r5
 8000b5c:	4642      	mov	r2, r8
 8000b5e:	2101      	movs	r1, #1
 8000b60:	1c5d      	adds	r5, r3, #1
 8000b62:	2a0a      	cmp	r2, #10
 8000b64:	dd97      	ble.n	8000a96 <__aeabi_fmul+0x5e>
 8000b66:	e7c5      	b.n	8000af4 <__aeabi_fmul+0xbc>
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d126      	bne.n	8000bba <__aeabi_fmul+0x182>
 8000b6c:	2304      	movs	r3, #4
 8000b6e:	4698      	mov	r8, r3
 8000b70:	3b03      	subs	r3, #3
 8000b72:	2500      	movs	r5, #0
 8000b74:	469a      	mov	sl, r3
 8000b76:	e77a      	b.n	8000a6e <__aeabi_fmul+0x36>
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d118      	bne.n	8000bae <__aeabi_fmul+0x176>
 8000b7c:	2308      	movs	r3, #8
 8000b7e:	4698      	mov	r8, r3
 8000b80:	3b06      	subs	r3, #6
 8000b82:	25ff      	movs	r5, #255	@ 0xff
 8000b84:	469a      	mov	sl, r3
 8000b86:	e772      	b.n	8000a6e <__aeabi_fmul+0x36>
 8000b88:	20ff      	movs	r0, #255	@ 0xff
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	e791      	b.n	8000ab2 <__aeabi_fmul+0x7a>
 8000b8e:	2280      	movs	r2, #128	@ 0x80
 8000b90:	2600      	movs	r6, #0
 8000b92:	20ff      	movs	r0, #255	@ 0xff
 8000b94:	03d2      	lsls	r2, r2, #15
 8000b96:	e78c      	b.n	8000ab2 <__aeabi_fmul+0x7a>
 8000b98:	4641      	mov	r1, r8
 8000b9a:	2202      	movs	r2, #2
 8000b9c:	3501      	adds	r5, #1
 8000b9e:	4311      	orrs	r1, r2
 8000ba0:	4688      	mov	r8, r1
 8000ba2:	35ff      	adds	r5, #255	@ 0xff
 8000ba4:	290a      	cmp	r1, #10
 8000ba6:	dca5      	bgt.n	8000af4 <__aeabi_fmul+0xbc>
 8000ba8:	2102      	movs	r1, #2
 8000baa:	407e      	eors	r6, r7
 8000bac:	e774      	b.n	8000a98 <__aeabi_fmul+0x60>
 8000bae:	230c      	movs	r3, #12
 8000bb0:	4698      	mov	r8, r3
 8000bb2:	3b09      	subs	r3, #9
 8000bb4:	25ff      	movs	r5, #255	@ 0xff
 8000bb6:	469a      	mov	sl, r3
 8000bb8:	e759      	b.n	8000a6e <__aeabi_fmul+0x36>
 8000bba:	0018      	movs	r0, r3
 8000bbc:	f000 facc 	bl	8001158 <__clzsi2>
 8000bc0:	464a      	mov	r2, r9
 8000bc2:	1f43      	subs	r3, r0, #5
 8000bc4:	2576      	movs	r5, #118	@ 0x76
 8000bc6:	409a      	lsls	r2, r3
 8000bc8:	2300      	movs	r3, #0
 8000bca:	426d      	negs	r5, r5
 8000bcc:	4691      	mov	r9, r2
 8000bce:	4698      	mov	r8, r3
 8000bd0:	469a      	mov	sl, r3
 8000bd2:	1a2d      	subs	r5, r5, r0
 8000bd4:	e74b      	b.n	8000a6e <__aeabi_fmul+0x36>
 8000bd6:	0020      	movs	r0, r4
 8000bd8:	f000 fabe 	bl	8001158 <__clzsi2>
 8000bdc:	4642      	mov	r2, r8
 8000bde:	1f43      	subs	r3, r0, #5
 8000be0:	409c      	lsls	r4, r3
 8000be2:	1a2b      	subs	r3, r5, r0
 8000be4:	3b76      	subs	r3, #118	@ 0x76
 8000be6:	2100      	movs	r1, #0
 8000be8:	1c5d      	adds	r5, r3, #1
 8000bea:	2a0a      	cmp	r2, #10
 8000bec:	dc00      	bgt.n	8000bf0 <__aeabi_fmul+0x1b8>
 8000bee:	e752      	b.n	8000a96 <__aeabi_fmul+0x5e>
 8000bf0:	e780      	b.n	8000af4 <__aeabi_fmul+0xbc>
 8000bf2:	2201      	movs	r2, #1
 8000bf4:	1ad3      	subs	r3, r2, r3
 8000bf6:	2b1b      	cmp	r3, #27
 8000bf8:	dd00      	ble.n	8000bfc <__aeabi_fmul+0x1c4>
 8000bfa:	e758      	b.n	8000aae <__aeabi_fmul+0x76>
 8000bfc:	359e      	adds	r5, #158	@ 0x9e
 8000bfe:	0022      	movs	r2, r4
 8000c00:	40ac      	lsls	r4, r5
 8000c02:	40da      	lsrs	r2, r3
 8000c04:	1e63      	subs	r3, r4, #1
 8000c06:	419c      	sbcs	r4, r3
 8000c08:	4322      	orrs	r2, r4
 8000c0a:	0753      	lsls	r3, r2, #29
 8000c0c:	d004      	beq.n	8000c18 <__aeabi_fmul+0x1e0>
 8000c0e:	230f      	movs	r3, #15
 8000c10:	4013      	ands	r3, r2
 8000c12:	2b04      	cmp	r3, #4
 8000c14:	d000      	beq.n	8000c18 <__aeabi_fmul+0x1e0>
 8000c16:	3204      	adds	r2, #4
 8000c18:	0153      	lsls	r3, r2, #5
 8000c1a:	d537      	bpl.n	8000c8c <__aeabi_fmul+0x254>
 8000c1c:	2001      	movs	r0, #1
 8000c1e:	2200      	movs	r2, #0
 8000c20:	e747      	b.n	8000ab2 <__aeabi_fmul+0x7a>
 8000c22:	0c21      	lsrs	r1, r4, #16
 8000c24:	464a      	mov	r2, r9
 8000c26:	0424      	lsls	r4, r4, #16
 8000c28:	0c24      	lsrs	r4, r4, #16
 8000c2a:	0027      	movs	r7, r4
 8000c2c:	0c10      	lsrs	r0, r2, #16
 8000c2e:	0412      	lsls	r2, r2, #16
 8000c30:	0c12      	lsrs	r2, r2, #16
 8000c32:	4344      	muls	r4, r0
 8000c34:	4357      	muls	r7, r2
 8000c36:	4348      	muls	r0, r1
 8000c38:	4351      	muls	r1, r2
 8000c3a:	0c3a      	lsrs	r2, r7, #16
 8000c3c:	1909      	adds	r1, r1, r4
 8000c3e:	1852      	adds	r2, r2, r1
 8000c40:	4294      	cmp	r4, r2
 8000c42:	d903      	bls.n	8000c4c <__aeabi_fmul+0x214>
 8000c44:	2180      	movs	r1, #128	@ 0x80
 8000c46:	0249      	lsls	r1, r1, #9
 8000c48:	468c      	mov	ip, r1
 8000c4a:	4460      	add	r0, ip
 8000c4c:	043f      	lsls	r7, r7, #16
 8000c4e:	0411      	lsls	r1, r2, #16
 8000c50:	0c3f      	lsrs	r7, r7, #16
 8000c52:	19c9      	adds	r1, r1, r7
 8000c54:	018c      	lsls	r4, r1, #6
 8000c56:	1e67      	subs	r7, r4, #1
 8000c58:	41bc      	sbcs	r4, r7
 8000c5a:	0c12      	lsrs	r2, r2, #16
 8000c5c:	0e89      	lsrs	r1, r1, #26
 8000c5e:	1812      	adds	r2, r2, r0
 8000c60:	430c      	orrs	r4, r1
 8000c62:	0192      	lsls	r2, r2, #6
 8000c64:	4314      	orrs	r4, r2
 8000c66:	0112      	lsls	r2, r2, #4
 8000c68:	d50e      	bpl.n	8000c88 <__aeabi_fmul+0x250>
 8000c6a:	2301      	movs	r3, #1
 8000c6c:	0862      	lsrs	r2, r4, #1
 8000c6e:	401c      	ands	r4, r3
 8000c70:	4314      	orrs	r4, r2
 8000c72:	e749      	b.n	8000b08 <__aeabi_fmul+0xd0>
 8000c74:	003e      	movs	r6, r7
 8000c76:	46a1      	mov	r9, r4
 8000c78:	2280      	movs	r2, #128	@ 0x80
 8000c7a:	464b      	mov	r3, r9
 8000c7c:	03d2      	lsls	r2, r2, #15
 8000c7e:	431a      	orrs	r2, r3
 8000c80:	0252      	lsls	r2, r2, #9
 8000c82:	20ff      	movs	r0, #255	@ 0xff
 8000c84:	0a52      	lsrs	r2, r2, #9
 8000c86:	e714      	b.n	8000ab2 <__aeabi_fmul+0x7a>
 8000c88:	001d      	movs	r5, r3
 8000c8a:	e73d      	b.n	8000b08 <__aeabi_fmul+0xd0>
 8000c8c:	0192      	lsls	r2, r2, #6
 8000c8e:	2000      	movs	r0, #0
 8000c90:	0a52      	lsrs	r2, r2, #9
 8000c92:	e70e      	b.n	8000ab2 <__aeabi_fmul+0x7a>
 8000c94:	290f      	cmp	r1, #15
 8000c96:	d1ed      	bne.n	8000c74 <__aeabi_fmul+0x23c>
 8000c98:	2280      	movs	r2, #128	@ 0x80
 8000c9a:	464b      	mov	r3, r9
 8000c9c:	03d2      	lsls	r2, r2, #15
 8000c9e:	4213      	tst	r3, r2
 8000ca0:	d0ea      	beq.n	8000c78 <__aeabi_fmul+0x240>
 8000ca2:	4214      	tst	r4, r2
 8000ca4:	d1e8      	bne.n	8000c78 <__aeabi_fmul+0x240>
 8000ca6:	003e      	movs	r6, r7
 8000ca8:	20ff      	movs	r0, #255	@ 0xff
 8000caa:	4322      	orrs	r2, r4
 8000cac:	e701      	b.n	8000ab2 <__aeabi_fmul+0x7a>
 8000cae:	46c0      	nop			@ (mov r8, r8)
 8000cb0:	f7ffffff 	.word	0xf7ffffff

08000cb4 <__aeabi_fsub>:
 8000cb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000cb6:	4647      	mov	r7, r8
 8000cb8:	46ce      	mov	lr, r9
 8000cba:	024e      	lsls	r6, r1, #9
 8000cbc:	0243      	lsls	r3, r0, #9
 8000cbe:	0045      	lsls	r5, r0, #1
 8000cc0:	0a72      	lsrs	r2, r6, #9
 8000cc2:	0fc4      	lsrs	r4, r0, #31
 8000cc4:	0048      	lsls	r0, r1, #1
 8000cc6:	b580      	push	{r7, lr}
 8000cc8:	4694      	mov	ip, r2
 8000cca:	0a5f      	lsrs	r7, r3, #9
 8000ccc:	0e2d      	lsrs	r5, r5, #24
 8000cce:	099b      	lsrs	r3, r3, #6
 8000cd0:	0e00      	lsrs	r0, r0, #24
 8000cd2:	0fc9      	lsrs	r1, r1, #31
 8000cd4:	09b6      	lsrs	r6, r6, #6
 8000cd6:	28ff      	cmp	r0, #255	@ 0xff
 8000cd8:	d024      	beq.n	8000d24 <__aeabi_fsub+0x70>
 8000cda:	2201      	movs	r2, #1
 8000cdc:	4051      	eors	r1, r2
 8000cde:	1a2a      	subs	r2, r5, r0
 8000ce0:	428c      	cmp	r4, r1
 8000ce2:	d00f      	beq.n	8000d04 <__aeabi_fsub+0x50>
 8000ce4:	2a00      	cmp	r2, #0
 8000ce6:	dc00      	bgt.n	8000cea <__aeabi_fsub+0x36>
 8000ce8:	e16a      	b.n	8000fc0 <__aeabi_fsub+0x30c>
 8000cea:	2800      	cmp	r0, #0
 8000cec:	d135      	bne.n	8000d5a <__aeabi_fsub+0xa6>
 8000cee:	2e00      	cmp	r6, #0
 8000cf0:	d100      	bne.n	8000cf4 <__aeabi_fsub+0x40>
 8000cf2:	e0a2      	b.n	8000e3a <__aeabi_fsub+0x186>
 8000cf4:	1e51      	subs	r1, r2, #1
 8000cf6:	2a01      	cmp	r2, #1
 8000cf8:	d100      	bne.n	8000cfc <__aeabi_fsub+0x48>
 8000cfa:	e124      	b.n	8000f46 <__aeabi_fsub+0x292>
 8000cfc:	2aff      	cmp	r2, #255	@ 0xff
 8000cfe:	d021      	beq.n	8000d44 <__aeabi_fsub+0x90>
 8000d00:	000a      	movs	r2, r1
 8000d02:	e02f      	b.n	8000d64 <__aeabi_fsub+0xb0>
 8000d04:	2a00      	cmp	r2, #0
 8000d06:	dc00      	bgt.n	8000d0a <__aeabi_fsub+0x56>
 8000d08:	e167      	b.n	8000fda <__aeabi_fsub+0x326>
 8000d0a:	2800      	cmp	r0, #0
 8000d0c:	d05e      	beq.n	8000dcc <__aeabi_fsub+0x118>
 8000d0e:	2dff      	cmp	r5, #255	@ 0xff
 8000d10:	d018      	beq.n	8000d44 <__aeabi_fsub+0x90>
 8000d12:	2180      	movs	r1, #128	@ 0x80
 8000d14:	04c9      	lsls	r1, r1, #19
 8000d16:	430e      	orrs	r6, r1
 8000d18:	2a1b      	cmp	r2, #27
 8000d1a:	dc00      	bgt.n	8000d1e <__aeabi_fsub+0x6a>
 8000d1c:	e076      	b.n	8000e0c <__aeabi_fsub+0x158>
 8000d1e:	002a      	movs	r2, r5
 8000d20:	3301      	adds	r3, #1
 8000d22:	e032      	b.n	8000d8a <__aeabi_fsub+0xd6>
 8000d24:	002a      	movs	r2, r5
 8000d26:	3aff      	subs	r2, #255	@ 0xff
 8000d28:	4691      	mov	r9, r2
 8000d2a:	2e00      	cmp	r6, #0
 8000d2c:	d042      	beq.n	8000db4 <__aeabi_fsub+0x100>
 8000d2e:	428c      	cmp	r4, r1
 8000d30:	d055      	beq.n	8000dde <__aeabi_fsub+0x12a>
 8000d32:	464a      	mov	r2, r9
 8000d34:	2a00      	cmp	r2, #0
 8000d36:	d100      	bne.n	8000d3a <__aeabi_fsub+0x86>
 8000d38:	e09c      	b.n	8000e74 <__aeabi_fsub+0x1c0>
 8000d3a:	2d00      	cmp	r5, #0
 8000d3c:	d100      	bne.n	8000d40 <__aeabi_fsub+0x8c>
 8000d3e:	e077      	b.n	8000e30 <__aeabi_fsub+0x17c>
 8000d40:	000c      	movs	r4, r1
 8000d42:	0033      	movs	r3, r6
 8000d44:	08db      	lsrs	r3, r3, #3
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d100      	bne.n	8000d4c <__aeabi_fsub+0x98>
 8000d4a:	e06e      	b.n	8000e2a <__aeabi_fsub+0x176>
 8000d4c:	2280      	movs	r2, #128	@ 0x80
 8000d4e:	03d2      	lsls	r2, r2, #15
 8000d50:	4313      	orrs	r3, r2
 8000d52:	025b      	lsls	r3, r3, #9
 8000d54:	20ff      	movs	r0, #255	@ 0xff
 8000d56:	0a5b      	lsrs	r3, r3, #9
 8000d58:	e024      	b.n	8000da4 <__aeabi_fsub+0xf0>
 8000d5a:	2dff      	cmp	r5, #255	@ 0xff
 8000d5c:	d0f2      	beq.n	8000d44 <__aeabi_fsub+0x90>
 8000d5e:	2180      	movs	r1, #128	@ 0x80
 8000d60:	04c9      	lsls	r1, r1, #19
 8000d62:	430e      	orrs	r6, r1
 8000d64:	2101      	movs	r1, #1
 8000d66:	2a1b      	cmp	r2, #27
 8000d68:	dc08      	bgt.n	8000d7c <__aeabi_fsub+0xc8>
 8000d6a:	0031      	movs	r1, r6
 8000d6c:	2020      	movs	r0, #32
 8000d6e:	40d1      	lsrs	r1, r2
 8000d70:	1a82      	subs	r2, r0, r2
 8000d72:	4096      	lsls	r6, r2
 8000d74:	0032      	movs	r2, r6
 8000d76:	1e50      	subs	r0, r2, #1
 8000d78:	4182      	sbcs	r2, r0
 8000d7a:	4311      	orrs	r1, r2
 8000d7c:	1a5b      	subs	r3, r3, r1
 8000d7e:	015a      	lsls	r2, r3, #5
 8000d80:	d460      	bmi.n	8000e44 <__aeabi_fsub+0x190>
 8000d82:	2107      	movs	r1, #7
 8000d84:	002a      	movs	r2, r5
 8000d86:	4019      	ands	r1, r3
 8000d88:	d057      	beq.n	8000e3a <__aeabi_fsub+0x186>
 8000d8a:	210f      	movs	r1, #15
 8000d8c:	4019      	ands	r1, r3
 8000d8e:	2904      	cmp	r1, #4
 8000d90:	d000      	beq.n	8000d94 <__aeabi_fsub+0xe0>
 8000d92:	3304      	adds	r3, #4
 8000d94:	0159      	lsls	r1, r3, #5
 8000d96:	d550      	bpl.n	8000e3a <__aeabi_fsub+0x186>
 8000d98:	1c50      	adds	r0, r2, #1
 8000d9a:	2afe      	cmp	r2, #254	@ 0xfe
 8000d9c:	d045      	beq.n	8000e2a <__aeabi_fsub+0x176>
 8000d9e:	019b      	lsls	r3, r3, #6
 8000da0:	b2c0      	uxtb	r0, r0
 8000da2:	0a5b      	lsrs	r3, r3, #9
 8000da4:	05c0      	lsls	r0, r0, #23
 8000da6:	4318      	orrs	r0, r3
 8000da8:	07e4      	lsls	r4, r4, #31
 8000daa:	4320      	orrs	r0, r4
 8000dac:	bcc0      	pop	{r6, r7}
 8000dae:	46b9      	mov	r9, r7
 8000db0:	46b0      	mov	r8, r6
 8000db2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000db4:	2201      	movs	r2, #1
 8000db6:	4051      	eors	r1, r2
 8000db8:	428c      	cmp	r4, r1
 8000dba:	d1ba      	bne.n	8000d32 <__aeabi_fsub+0x7e>
 8000dbc:	464a      	mov	r2, r9
 8000dbe:	2a00      	cmp	r2, #0
 8000dc0:	d010      	beq.n	8000de4 <__aeabi_fsub+0x130>
 8000dc2:	2d00      	cmp	r5, #0
 8000dc4:	d100      	bne.n	8000dc8 <__aeabi_fsub+0x114>
 8000dc6:	e098      	b.n	8000efa <__aeabi_fsub+0x246>
 8000dc8:	2300      	movs	r3, #0
 8000dca:	e7bb      	b.n	8000d44 <__aeabi_fsub+0x90>
 8000dcc:	2e00      	cmp	r6, #0
 8000dce:	d034      	beq.n	8000e3a <__aeabi_fsub+0x186>
 8000dd0:	1e51      	subs	r1, r2, #1
 8000dd2:	2a01      	cmp	r2, #1
 8000dd4:	d06e      	beq.n	8000eb4 <__aeabi_fsub+0x200>
 8000dd6:	2aff      	cmp	r2, #255	@ 0xff
 8000dd8:	d0b4      	beq.n	8000d44 <__aeabi_fsub+0x90>
 8000dda:	000a      	movs	r2, r1
 8000ddc:	e79c      	b.n	8000d18 <__aeabi_fsub+0x64>
 8000dde:	2a00      	cmp	r2, #0
 8000de0:	d000      	beq.n	8000de4 <__aeabi_fsub+0x130>
 8000de2:	e088      	b.n	8000ef6 <__aeabi_fsub+0x242>
 8000de4:	20fe      	movs	r0, #254	@ 0xfe
 8000de6:	1c6a      	adds	r2, r5, #1
 8000de8:	4210      	tst	r0, r2
 8000dea:	d000      	beq.n	8000dee <__aeabi_fsub+0x13a>
 8000dec:	e092      	b.n	8000f14 <__aeabi_fsub+0x260>
 8000dee:	2d00      	cmp	r5, #0
 8000df0:	d000      	beq.n	8000df4 <__aeabi_fsub+0x140>
 8000df2:	e0a4      	b.n	8000f3e <__aeabi_fsub+0x28a>
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d100      	bne.n	8000dfa <__aeabi_fsub+0x146>
 8000df8:	e0cb      	b.n	8000f92 <__aeabi_fsub+0x2de>
 8000dfa:	2e00      	cmp	r6, #0
 8000dfc:	d000      	beq.n	8000e00 <__aeabi_fsub+0x14c>
 8000dfe:	e0ca      	b.n	8000f96 <__aeabi_fsub+0x2e2>
 8000e00:	2200      	movs	r2, #0
 8000e02:	08db      	lsrs	r3, r3, #3
 8000e04:	025b      	lsls	r3, r3, #9
 8000e06:	0a5b      	lsrs	r3, r3, #9
 8000e08:	b2d0      	uxtb	r0, r2
 8000e0a:	e7cb      	b.n	8000da4 <__aeabi_fsub+0xf0>
 8000e0c:	0031      	movs	r1, r6
 8000e0e:	2020      	movs	r0, #32
 8000e10:	40d1      	lsrs	r1, r2
 8000e12:	1a82      	subs	r2, r0, r2
 8000e14:	4096      	lsls	r6, r2
 8000e16:	0032      	movs	r2, r6
 8000e18:	1e50      	subs	r0, r2, #1
 8000e1a:	4182      	sbcs	r2, r0
 8000e1c:	430a      	orrs	r2, r1
 8000e1e:	189b      	adds	r3, r3, r2
 8000e20:	015a      	lsls	r2, r3, #5
 8000e22:	d5ae      	bpl.n	8000d82 <__aeabi_fsub+0xce>
 8000e24:	1c6a      	adds	r2, r5, #1
 8000e26:	2dfe      	cmp	r5, #254	@ 0xfe
 8000e28:	d14a      	bne.n	8000ec0 <__aeabi_fsub+0x20c>
 8000e2a:	20ff      	movs	r0, #255	@ 0xff
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	e7b9      	b.n	8000da4 <__aeabi_fsub+0xf0>
 8000e30:	22ff      	movs	r2, #255	@ 0xff
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d14b      	bne.n	8000ece <__aeabi_fsub+0x21a>
 8000e36:	000c      	movs	r4, r1
 8000e38:	0033      	movs	r3, r6
 8000e3a:	08db      	lsrs	r3, r3, #3
 8000e3c:	2aff      	cmp	r2, #255	@ 0xff
 8000e3e:	d100      	bne.n	8000e42 <__aeabi_fsub+0x18e>
 8000e40:	e781      	b.n	8000d46 <__aeabi_fsub+0x92>
 8000e42:	e7df      	b.n	8000e04 <__aeabi_fsub+0x150>
 8000e44:	019f      	lsls	r7, r3, #6
 8000e46:	09bf      	lsrs	r7, r7, #6
 8000e48:	0038      	movs	r0, r7
 8000e4a:	f000 f985 	bl	8001158 <__clzsi2>
 8000e4e:	3805      	subs	r0, #5
 8000e50:	4087      	lsls	r7, r0
 8000e52:	4285      	cmp	r5, r0
 8000e54:	dc21      	bgt.n	8000e9a <__aeabi_fsub+0x1e6>
 8000e56:	003b      	movs	r3, r7
 8000e58:	2120      	movs	r1, #32
 8000e5a:	1b42      	subs	r2, r0, r5
 8000e5c:	3201      	adds	r2, #1
 8000e5e:	40d3      	lsrs	r3, r2
 8000e60:	1a8a      	subs	r2, r1, r2
 8000e62:	4097      	lsls	r7, r2
 8000e64:	1e7a      	subs	r2, r7, #1
 8000e66:	4197      	sbcs	r7, r2
 8000e68:	2200      	movs	r2, #0
 8000e6a:	433b      	orrs	r3, r7
 8000e6c:	0759      	lsls	r1, r3, #29
 8000e6e:	d000      	beq.n	8000e72 <__aeabi_fsub+0x1be>
 8000e70:	e78b      	b.n	8000d8a <__aeabi_fsub+0xd6>
 8000e72:	e78f      	b.n	8000d94 <__aeabi_fsub+0xe0>
 8000e74:	20fe      	movs	r0, #254	@ 0xfe
 8000e76:	1c6a      	adds	r2, r5, #1
 8000e78:	4210      	tst	r0, r2
 8000e7a:	d112      	bne.n	8000ea2 <__aeabi_fsub+0x1ee>
 8000e7c:	2d00      	cmp	r5, #0
 8000e7e:	d152      	bne.n	8000f26 <__aeabi_fsub+0x272>
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d07c      	beq.n	8000f7e <__aeabi_fsub+0x2ca>
 8000e84:	2e00      	cmp	r6, #0
 8000e86:	d0bb      	beq.n	8000e00 <__aeabi_fsub+0x14c>
 8000e88:	1b9a      	subs	r2, r3, r6
 8000e8a:	0150      	lsls	r0, r2, #5
 8000e8c:	d400      	bmi.n	8000e90 <__aeabi_fsub+0x1dc>
 8000e8e:	e08b      	b.n	8000fa8 <__aeabi_fsub+0x2f4>
 8000e90:	2401      	movs	r4, #1
 8000e92:	2200      	movs	r2, #0
 8000e94:	1af3      	subs	r3, r6, r3
 8000e96:	400c      	ands	r4, r1
 8000e98:	e7e8      	b.n	8000e6c <__aeabi_fsub+0x1b8>
 8000e9a:	4b56      	ldr	r3, [pc, #344]	@ (8000ff4 <__aeabi_fsub+0x340>)
 8000e9c:	1a2a      	subs	r2, r5, r0
 8000e9e:	403b      	ands	r3, r7
 8000ea0:	e7e4      	b.n	8000e6c <__aeabi_fsub+0x1b8>
 8000ea2:	1b9f      	subs	r7, r3, r6
 8000ea4:	017a      	lsls	r2, r7, #5
 8000ea6:	d446      	bmi.n	8000f36 <__aeabi_fsub+0x282>
 8000ea8:	2f00      	cmp	r7, #0
 8000eaa:	d1cd      	bne.n	8000e48 <__aeabi_fsub+0x194>
 8000eac:	2400      	movs	r4, #0
 8000eae:	2000      	movs	r0, #0
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	e777      	b.n	8000da4 <__aeabi_fsub+0xf0>
 8000eb4:	199b      	adds	r3, r3, r6
 8000eb6:	2501      	movs	r5, #1
 8000eb8:	3201      	adds	r2, #1
 8000eba:	0159      	lsls	r1, r3, #5
 8000ebc:	d400      	bmi.n	8000ec0 <__aeabi_fsub+0x20c>
 8000ebe:	e760      	b.n	8000d82 <__aeabi_fsub+0xce>
 8000ec0:	2101      	movs	r1, #1
 8000ec2:	484d      	ldr	r0, [pc, #308]	@ (8000ff8 <__aeabi_fsub+0x344>)
 8000ec4:	4019      	ands	r1, r3
 8000ec6:	085b      	lsrs	r3, r3, #1
 8000ec8:	4003      	ands	r3, r0
 8000eca:	430b      	orrs	r3, r1
 8000ecc:	e7ce      	b.n	8000e6c <__aeabi_fsub+0x1b8>
 8000ece:	1e57      	subs	r7, r2, #1
 8000ed0:	2a01      	cmp	r2, #1
 8000ed2:	d05a      	beq.n	8000f8a <__aeabi_fsub+0x2d6>
 8000ed4:	000c      	movs	r4, r1
 8000ed6:	2aff      	cmp	r2, #255	@ 0xff
 8000ed8:	d033      	beq.n	8000f42 <__aeabi_fsub+0x28e>
 8000eda:	2201      	movs	r2, #1
 8000edc:	2f1b      	cmp	r7, #27
 8000ede:	dc07      	bgt.n	8000ef0 <__aeabi_fsub+0x23c>
 8000ee0:	2120      	movs	r1, #32
 8000ee2:	1bc9      	subs	r1, r1, r7
 8000ee4:	001a      	movs	r2, r3
 8000ee6:	408b      	lsls	r3, r1
 8000ee8:	40fa      	lsrs	r2, r7
 8000eea:	1e59      	subs	r1, r3, #1
 8000eec:	418b      	sbcs	r3, r1
 8000eee:	431a      	orrs	r2, r3
 8000ef0:	0005      	movs	r5, r0
 8000ef2:	1ab3      	subs	r3, r6, r2
 8000ef4:	e743      	b.n	8000d7e <__aeabi_fsub+0xca>
 8000ef6:	2d00      	cmp	r5, #0
 8000ef8:	d123      	bne.n	8000f42 <__aeabi_fsub+0x28e>
 8000efa:	22ff      	movs	r2, #255	@ 0xff
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d09b      	beq.n	8000e38 <__aeabi_fsub+0x184>
 8000f00:	1e51      	subs	r1, r2, #1
 8000f02:	2a01      	cmp	r2, #1
 8000f04:	d0d6      	beq.n	8000eb4 <__aeabi_fsub+0x200>
 8000f06:	2aff      	cmp	r2, #255	@ 0xff
 8000f08:	d01b      	beq.n	8000f42 <__aeabi_fsub+0x28e>
 8000f0a:	291b      	cmp	r1, #27
 8000f0c:	dd2c      	ble.n	8000f68 <__aeabi_fsub+0x2b4>
 8000f0e:	0002      	movs	r2, r0
 8000f10:	1c73      	adds	r3, r6, #1
 8000f12:	e73a      	b.n	8000d8a <__aeabi_fsub+0xd6>
 8000f14:	2aff      	cmp	r2, #255	@ 0xff
 8000f16:	d088      	beq.n	8000e2a <__aeabi_fsub+0x176>
 8000f18:	199b      	adds	r3, r3, r6
 8000f1a:	085b      	lsrs	r3, r3, #1
 8000f1c:	0759      	lsls	r1, r3, #29
 8000f1e:	d000      	beq.n	8000f22 <__aeabi_fsub+0x26e>
 8000f20:	e733      	b.n	8000d8a <__aeabi_fsub+0xd6>
 8000f22:	08db      	lsrs	r3, r3, #3
 8000f24:	e76e      	b.n	8000e04 <__aeabi_fsub+0x150>
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d110      	bne.n	8000f4c <__aeabi_fsub+0x298>
 8000f2a:	2e00      	cmp	r6, #0
 8000f2c:	d043      	beq.n	8000fb6 <__aeabi_fsub+0x302>
 8000f2e:	2401      	movs	r4, #1
 8000f30:	0033      	movs	r3, r6
 8000f32:	400c      	ands	r4, r1
 8000f34:	e706      	b.n	8000d44 <__aeabi_fsub+0x90>
 8000f36:	2401      	movs	r4, #1
 8000f38:	1af7      	subs	r7, r6, r3
 8000f3a:	400c      	ands	r4, r1
 8000f3c:	e784      	b.n	8000e48 <__aeabi_fsub+0x194>
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d104      	bne.n	8000f4c <__aeabi_fsub+0x298>
 8000f42:	0033      	movs	r3, r6
 8000f44:	e6fe      	b.n	8000d44 <__aeabi_fsub+0x90>
 8000f46:	2501      	movs	r5, #1
 8000f48:	1b9b      	subs	r3, r3, r6
 8000f4a:	e718      	b.n	8000d7e <__aeabi_fsub+0xca>
 8000f4c:	2e00      	cmp	r6, #0
 8000f4e:	d100      	bne.n	8000f52 <__aeabi_fsub+0x29e>
 8000f50:	e6f8      	b.n	8000d44 <__aeabi_fsub+0x90>
 8000f52:	2280      	movs	r2, #128	@ 0x80
 8000f54:	03d2      	lsls	r2, r2, #15
 8000f56:	4297      	cmp	r7, r2
 8000f58:	d304      	bcc.n	8000f64 <__aeabi_fsub+0x2b0>
 8000f5a:	4594      	cmp	ip, r2
 8000f5c:	d202      	bcs.n	8000f64 <__aeabi_fsub+0x2b0>
 8000f5e:	2401      	movs	r4, #1
 8000f60:	0033      	movs	r3, r6
 8000f62:	400c      	ands	r4, r1
 8000f64:	08db      	lsrs	r3, r3, #3
 8000f66:	e6f1      	b.n	8000d4c <__aeabi_fsub+0x98>
 8000f68:	001a      	movs	r2, r3
 8000f6a:	2520      	movs	r5, #32
 8000f6c:	40ca      	lsrs	r2, r1
 8000f6e:	1a69      	subs	r1, r5, r1
 8000f70:	408b      	lsls	r3, r1
 8000f72:	1e59      	subs	r1, r3, #1
 8000f74:	418b      	sbcs	r3, r1
 8000f76:	4313      	orrs	r3, r2
 8000f78:	0005      	movs	r5, r0
 8000f7a:	199b      	adds	r3, r3, r6
 8000f7c:	e750      	b.n	8000e20 <__aeabi_fsub+0x16c>
 8000f7e:	2e00      	cmp	r6, #0
 8000f80:	d094      	beq.n	8000eac <__aeabi_fsub+0x1f8>
 8000f82:	2401      	movs	r4, #1
 8000f84:	0033      	movs	r3, r6
 8000f86:	400c      	ands	r4, r1
 8000f88:	e73a      	b.n	8000e00 <__aeabi_fsub+0x14c>
 8000f8a:	000c      	movs	r4, r1
 8000f8c:	2501      	movs	r5, #1
 8000f8e:	1af3      	subs	r3, r6, r3
 8000f90:	e6f5      	b.n	8000d7e <__aeabi_fsub+0xca>
 8000f92:	0033      	movs	r3, r6
 8000f94:	e734      	b.n	8000e00 <__aeabi_fsub+0x14c>
 8000f96:	199b      	adds	r3, r3, r6
 8000f98:	2200      	movs	r2, #0
 8000f9a:	0159      	lsls	r1, r3, #5
 8000f9c:	d5c1      	bpl.n	8000f22 <__aeabi_fsub+0x26e>
 8000f9e:	4a15      	ldr	r2, [pc, #84]	@ (8000ff4 <__aeabi_fsub+0x340>)
 8000fa0:	4013      	ands	r3, r2
 8000fa2:	08db      	lsrs	r3, r3, #3
 8000fa4:	2201      	movs	r2, #1
 8000fa6:	e72d      	b.n	8000e04 <__aeabi_fsub+0x150>
 8000fa8:	2a00      	cmp	r2, #0
 8000faa:	d100      	bne.n	8000fae <__aeabi_fsub+0x2fa>
 8000fac:	e77e      	b.n	8000eac <__aeabi_fsub+0x1f8>
 8000fae:	0013      	movs	r3, r2
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	08db      	lsrs	r3, r3, #3
 8000fb4:	e726      	b.n	8000e04 <__aeabi_fsub+0x150>
 8000fb6:	2380      	movs	r3, #128	@ 0x80
 8000fb8:	2400      	movs	r4, #0
 8000fba:	20ff      	movs	r0, #255	@ 0xff
 8000fbc:	03db      	lsls	r3, r3, #15
 8000fbe:	e6f1      	b.n	8000da4 <__aeabi_fsub+0xf0>
 8000fc0:	2a00      	cmp	r2, #0
 8000fc2:	d100      	bne.n	8000fc6 <__aeabi_fsub+0x312>
 8000fc4:	e756      	b.n	8000e74 <__aeabi_fsub+0x1c0>
 8000fc6:	1b47      	subs	r7, r0, r5
 8000fc8:	003a      	movs	r2, r7
 8000fca:	2d00      	cmp	r5, #0
 8000fcc:	d100      	bne.n	8000fd0 <__aeabi_fsub+0x31c>
 8000fce:	e730      	b.n	8000e32 <__aeabi_fsub+0x17e>
 8000fd0:	2280      	movs	r2, #128	@ 0x80
 8000fd2:	04d2      	lsls	r2, r2, #19
 8000fd4:	000c      	movs	r4, r1
 8000fd6:	4313      	orrs	r3, r2
 8000fd8:	e77f      	b.n	8000eda <__aeabi_fsub+0x226>
 8000fda:	2a00      	cmp	r2, #0
 8000fdc:	d100      	bne.n	8000fe0 <__aeabi_fsub+0x32c>
 8000fde:	e701      	b.n	8000de4 <__aeabi_fsub+0x130>
 8000fe0:	1b41      	subs	r1, r0, r5
 8000fe2:	2d00      	cmp	r5, #0
 8000fe4:	d101      	bne.n	8000fea <__aeabi_fsub+0x336>
 8000fe6:	000a      	movs	r2, r1
 8000fe8:	e788      	b.n	8000efc <__aeabi_fsub+0x248>
 8000fea:	2280      	movs	r2, #128	@ 0x80
 8000fec:	04d2      	lsls	r2, r2, #19
 8000fee:	4313      	orrs	r3, r2
 8000ff0:	e78b      	b.n	8000f0a <__aeabi_fsub+0x256>
 8000ff2:	46c0      	nop			@ (mov r8, r8)
 8000ff4:	fbffffff 	.word	0xfbffffff
 8000ff8:	7dffffff 	.word	0x7dffffff

08000ffc <__aeabi_f2iz>:
 8000ffc:	0241      	lsls	r1, r0, #9
 8000ffe:	0042      	lsls	r2, r0, #1
 8001000:	0fc3      	lsrs	r3, r0, #31
 8001002:	0a49      	lsrs	r1, r1, #9
 8001004:	2000      	movs	r0, #0
 8001006:	0e12      	lsrs	r2, r2, #24
 8001008:	2a7e      	cmp	r2, #126	@ 0x7e
 800100a:	dd03      	ble.n	8001014 <__aeabi_f2iz+0x18>
 800100c:	2a9d      	cmp	r2, #157	@ 0x9d
 800100e:	dd02      	ble.n	8001016 <__aeabi_f2iz+0x1a>
 8001010:	4a09      	ldr	r2, [pc, #36]	@ (8001038 <__aeabi_f2iz+0x3c>)
 8001012:	1898      	adds	r0, r3, r2
 8001014:	4770      	bx	lr
 8001016:	2080      	movs	r0, #128	@ 0x80
 8001018:	0400      	lsls	r0, r0, #16
 800101a:	4301      	orrs	r1, r0
 800101c:	2a95      	cmp	r2, #149	@ 0x95
 800101e:	dc07      	bgt.n	8001030 <__aeabi_f2iz+0x34>
 8001020:	2096      	movs	r0, #150	@ 0x96
 8001022:	1a82      	subs	r2, r0, r2
 8001024:	40d1      	lsrs	r1, r2
 8001026:	4248      	negs	r0, r1
 8001028:	2b00      	cmp	r3, #0
 800102a:	d1f3      	bne.n	8001014 <__aeabi_f2iz+0x18>
 800102c:	0008      	movs	r0, r1
 800102e:	e7f1      	b.n	8001014 <__aeabi_f2iz+0x18>
 8001030:	3a96      	subs	r2, #150	@ 0x96
 8001032:	4091      	lsls	r1, r2
 8001034:	e7f7      	b.n	8001026 <__aeabi_f2iz+0x2a>
 8001036:	46c0      	nop			@ (mov r8, r8)
 8001038:	7fffffff 	.word	0x7fffffff

0800103c <__aeabi_i2f>:
 800103c:	b570      	push	{r4, r5, r6, lr}
 800103e:	2800      	cmp	r0, #0
 8001040:	d013      	beq.n	800106a <__aeabi_i2f+0x2e>
 8001042:	17c3      	asrs	r3, r0, #31
 8001044:	18c5      	adds	r5, r0, r3
 8001046:	405d      	eors	r5, r3
 8001048:	0fc4      	lsrs	r4, r0, #31
 800104a:	0028      	movs	r0, r5
 800104c:	f000 f884 	bl	8001158 <__clzsi2>
 8001050:	239e      	movs	r3, #158	@ 0x9e
 8001052:	0001      	movs	r1, r0
 8001054:	1a1b      	subs	r3, r3, r0
 8001056:	2b96      	cmp	r3, #150	@ 0x96
 8001058:	dc0f      	bgt.n	800107a <__aeabi_i2f+0x3e>
 800105a:	2808      	cmp	r0, #8
 800105c:	d034      	beq.n	80010c8 <__aeabi_i2f+0x8c>
 800105e:	3908      	subs	r1, #8
 8001060:	408d      	lsls	r5, r1
 8001062:	026d      	lsls	r5, r5, #9
 8001064:	0a6d      	lsrs	r5, r5, #9
 8001066:	b2d8      	uxtb	r0, r3
 8001068:	e002      	b.n	8001070 <__aeabi_i2f+0x34>
 800106a:	2400      	movs	r4, #0
 800106c:	2000      	movs	r0, #0
 800106e:	2500      	movs	r5, #0
 8001070:	05c0      	lsls	r0, r0, #23
 8001072:	4328      	orrs	r0, r5
 8001074:	07e4      	lsls	r4, r4, #31
 8001076:	4320      	orrs	r0, r4
 8001078:	bd70      	pop	{r4, r5, r6, pc}
 800107a:	2b99      	cmp	r3, #153	@ 0x99
 800107c:	dc16      	bgt.n	80010ac <__aeabi_i2f+0x70>
 800107e:	1f42      	subs	r2, r0, #5
 8001080:	2805      	cmp	r0, #5
 8001082:	d000      	beq.n	8001086 <__aeabi_i2f+0x4a>
 8001084:	4095      	lsls	r5, r2
 8001086:	002a      	movs	r2, r5
 8001088:	4811      	ldr	r0, [pc, #68]	@ (80010d0 <__aeabi_i2f+0x94>)
 800108a:	4002      	ands	r2, r0
 800108c:	076e      	lsls	r6, r5, #29
 800108e:	d009      	beq.n	80010a4 <__aeabi_i2f+0x68>
 8001090:	260f      	movs	r6, #15
 8001092:	4035      	ands	r5, r6
 8001094:	2d04      	cmp	r5, #4
 8001096:	d005      	beq.n	80010a4 <__aeabi_i2f+0x68>
 8001098:	3204      	adds	r2, #4
 800109a:	0155      	lsls	r5, r2, #5
 800109c:	d502      	bpl.n	80010a4 <__aeabi_i2f+0x68>
 800109e:	239f      	movs	r3, #159	@ 0x9f
 80010a0:	4002      	ands	r2, r0
 80010a2:	1a5b      	subs	r3, r3, r1
 80010a4:	0192      	lsls	r2, r2, #6
 80010a6:	0a55      	lsrs	r5, r2, #9
 80010a8:	b2d8      	uxtb	r0, r3
 80010aa:	e7e1      	b.n	8001070 <__aeabi_i2f+0x34>
 80010ac:	2205      	movs	r2, #5
 80010ae:	1a12      	subs	r2, r2, r0
 80010b0:	0028      	movs	r0, r5
 80010b2:	40d0      	lsrs	r0, r2
 80010b4:	0002      	movs	r2, r0
 80010b6:	0008      	movs	r0, r1
 80010b8:	301b      	adds	r0, #27
 80010ba:	4085      	lsls	r5, r0
 80010bc:	0028      	movs	r0, r5
 80010be:	1e45      	subs	r5, r0, #1
 80010c0:	41a8      	sbcs	r0, r5
 80010c2:	4302      	orrs	r2, r0
 80010c4:	0015      	movs	r5, r2
 80010c6:	e7de      	b.n	8001086 <__aeabi_i2f+0x4a>
 80010c8:	026d      	lsls	r5, r5, #9
 80010ca:	2096      	movs	r0, #150	@ 0x96
 80010cc:	0a6d      	lsrs	r5, r5, #9
 80010ce:	e7cf      	b.n	8001070 <__aeabi_i2f+0x34>
 80010d0:	fbffffff 	.word	0xfbffffff

080010d4 <__aeabi_ui2f>:
 80010d4:	b570      	push	{r4, r5, r6, lr}
 80010d6:	1e04      	subs	r4, r0, #0
 80010d8:	d00e      	beq.n	80010f8 <__aeabi_ui2f+0x24>
 80010da:	f000 f83d 	bl	8001158 <__clzsi2>
 80010de:	239e      	movs	r3, #158	@ 0x9e
 80010e0:	0001      	movs	r1, r0
 80010e2:	1a1b      	subs	r3, r3, r0
 80010e4:	2b96      	cmp	r3, #150	@ 0x96
 80010e6:	dc0c      	bgt.n	8001102 <__aeabi_ui2f+0x2e>
 80010e8:	2808      	cmp	r0, #8
 80010ea:	d02f      	beq.n	800114c <__aeabi_ui2f+0x78>
 80010ec:	3908      	subs	r1, #8
 80010ee:	408c      	lsls	r4, r1
 80010f0:	0264      	lsls	r4, r4, #9
 80010f2:	0a64      	lsrs	r4, r4, #9
 80010f4:	b2d8      	uxtb	r0, r3
 80010f6:	e001      	b.n	80010fc <__aeabi_ui2f+0x28>
 80010f8:	2000      	movs	r0, #0
 80010fa:	2400      	movs	r4, #0
 80010fc:	05c0      	lsls	r0, r0, #23
 80010fe:	4320      	orrs	r0, r4
 8001100:	bd70      	pop	{r4, r5, r6, pc}
 8001102:	2b99      	cmp	r3, #153	@ 0x99
 8001104:	dc16      	bgt.n	8001134 <__aeabi_ui2f+0x60>
 8001106:	1f42      	subs	r2, r0, #5
 8001108:	2805      	cmp	r0, #5
 800110a:	d000      	beq.n	800110e <__aeabi_ui2f+0x3a>
 800110c:	4094      	lsls	r4, r2
 800110e:	0022      	movs	r2, r4
 8001110:	4810      	ldr	r0, [pc, #64]	@ (8001154 <__aeabi_ui2f+0x80>)
 8001112:	4002      	ands	r2, r0
 8001114:	0765      	lsls	r5, r4, #29
 8001116:	d009      	beq.n	800112c <__aeabi_ui2f+0x58>
 8001118:	250f      	movs	r5, #15
 800111a:	402c      	ands	r4, r5
 800111c:	2c04      	cmp	r4, #4
 800111e:	d005      	beq.n	800112c <__aeabi_ui2f+0x58>
 8001120:	3204      	adds	r2, #4
 8001122:	0154      	lsls	r4, r2, #5
 8001124:	d502      	bpl.n	800112c <__aeabi_ui2f+0x58>
 8001126:	239f      	movs	r3, #159	@ 0x9f
 8001128:	4002      	ands	r2, r0
 800112a:	1a5b      	subs	r3, r3, r1
 800112c:	0192      	lsls	r2, r2, #6
 800112e:	0a54      	lsrs	r4, r2, #9
 8001130:	b2d8      	uxtb	r0, r3
 8001132:	e7e3      	b.n	80010fc <__aeabi_ui2f+0x28>
 8001134:	0002      	movs	r2, r0
 8001136:	0020      	movs	r0, r4
 8001138:	321b      	adds	r2, #27
 800113a:	4090      	lsls	r0, r2
 800113c:	0002      	movs	r2, r0
 800113e:	1e50      	subs	r0, r2, #1
 8001140:	4182      	sbcs	r2, r0
 8001142:	2005      	movs	r0, #5
 8001144:	1a40      	subs	r0, r0, r1
 8001146:	40c4      	lsrs	r4, r0
 8001148:	4314      	orrs	r4, r2
 800114a:	e7e0      	b.n	800110e <__aeabi_ui2f+0x3a>
 800114c:	0264      	lsls	r4, r4, #9
 800114e:	2096      	movs	r0, #150	@ 0x96
 8001150:	0a64      	lsrs	r4, r4, #9
 8001152:	e7d3      	b.n	80010fc <__aeabi_ui2f+0x28>
 8001154:	fbffffff 	.word	0xfbffffff

08001158 <__clzsi2>:
 8001158:	211c      	movs	r1, #28
 800115a:	2301      	movs	r3, #1
 800115c:	041b      	lsls	r3, r3, #16
 800115e:	4298      	cmp	r0, r3
 8001160:	d301      	bcc.n	8001166 <__clzsi2+0xe>
 8001162:	0c00      	lsrs	r0, r0, #16
 8001164:	3910      	subs	r1, #16
 8001166:	0a1b      	lsrs	r3, r3, #8
 8001168:	4298      	cmp	r0, r3
 800116a:	d301      	bcc.n	8001170 <__clzsi2+0x18>
 800116c:	0a00      	lsrs	r0, r0, #8
 800116e:	3908      	subs	r1, #8
 8001170:	091b      	lsrs	r3, r3, #4
 8001172:	4298      	cmp	r0, r3
 8001174:	d301      	bcc.n	800117a <__clzsi2+0x22>
 8001176:	0900      	lsrs	r0, r0, #4
 8001178:	3904      	subs	r1, #4
 800117a:	a202      	add	r2, pc, #8	@ (adr r2, 8001184 <__clzsi2+0x2c>)
 800117c:	5c10      	ldrb	r0, [r2, r0]
 800117e:	1840      	adds	r0, r0, r1
 8001180:	4770      	bx	lr
 8001182:	46c0      	nop			@ (mov r8, r8)
 8001184:	02020304 	.word	0x02020304
 8001188:	01010101 	.word	0x01010101
	...

08001194 <__clzdi2>:
 8001194:	b510      	push	{r4, lr}
 8001196:	2900      	cmp	r1, #0
 8001198:	d103      	bne.n	80011a2 <__clzdi2+0xe>
 800119a:	f7ff ffdd 	bl	8001158 <__clzsi2>
 800119e:	3020      	adds	r0, #32
 80011a0:	e002      	b.n	80011a8 <__clzdi2+0x14>
 80011a2:	0008      	movs	r0, r1
 80011a4:	f7ff ffd8 	bl	8001158 <__clzsi2>
 80011a8:	bd10      	pop	{r4, pc}
 80011aa:	46c0      	nop			@ (mov r8, r8)

080011ac <SetCellPWM>:
 */
#include "Control.h"


void SetCellPWM(uint8_t duty_percent)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b084      	sub	sp, #16
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	0002      	movs	r2, r0
 80011b4:	1dfb      	adds	r3, r7, #7
 80011b6:	701a      	strb	r2, [r3, #0]
    if (duty_percent > 100) duty_percent = 100;
 80011b8:	1dfb      	adds	r3, r7, #7
 80011ba:	781b      	ldrb	r3, [r3, #0]
 80011bc:	2b64      	cmp	r3, #100	@ 0x64
 80011be:	d902      	bls.n	80011c6 <SetCellPWM+0x1a>
 80011c0:	1dfb      	adds	r3, r7, #7
 80011c2:	2264      	movs	r2, #100	@ 0x64
 80011c4:	701a      	strb	r2, [r3, #0]

    uint32_t arr = __HAL_TIM_GET_AUTORELOAD(&htim1);
 80011c6:	4b1a      	ldr	r3, [pc, #104]	@ (8001230 <SetCellPWM+0x84>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80011cc:	60fb      	str	r3, [r7, #12]
    uint32_t compare = duty_percent * (arr + 1) / 100;
 80011ce:	1dfb      	adds	r3, r7, #7
 80011d0:	781b      	ldrb	r3, [r3, #0]
 80011d2:	68fa      	ldr	r2, [r7, #12]
 80011d4:	3201      	adds	r2, #1
 80011d6:	4353      	muls	r3, r2
 80011d8:	2164      	movs	r1, #100	@ 0x64
 80011da:	0018      	movs	r0, r3
 80011dc:	f7fe ff92 	bl	8000104 <__udivsi3>
 80011e0:	0003      	movs	r3, r0
 80011e2:	60bb      	str	r3, [r7, #8]

    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, compare);
 80011e4:	4b12      	ldr	r3, [pc, #72]	@ (8001230 <SetCellPWM+0x84>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	68ba      	ldr	r2, [r7, #8]
 80011ea:	63da      	str	r2, [r3, #60]	@ 0x3c

    if (duty_percent == 0)
 80011ec:	1dfb      	adds	r3, r7, #7
 80011ee:	781b      	ldrb	r3, [r3, #0]
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d10e      	bne.n	8001212 <SetCellPWM+0x66>
    {
        __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 80011f4:	4b0e      	ldr	r3, [pc, #56]	@ (8001230 <SetCellPWM+0x84>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	2200      	movs	r2, #0
 80011fa:	63da      	str	r2, [r3, #60]	@ 0x3c
        HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 80011fc:	4b0c      	ldr	r3, [pc, #48]	@ (8001230 <SetCellPWM+0x84>)
 80011fe:	2108      	movs	r1, #8
 8001200:	0018      	movs	r0, r3
 8001202:	f003 f9df 	bl	80045c4 <HAL_TIM_PWM_Stop>
        HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_3);
 8001206:	4b0a      	ldr	r3, [pc, #40]	@ (8001230 <SetCellPWM+0x84>)
 8001208:	2108      	movs	r1, #8
 800120a:	0018      	movs	r0, r3
 800120c:	f003 ff80 	bl	8005110 <HAL_TIMEx_PWMN_Stop>
    else
    {
        HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
        HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
    }
}
 8001210:	e009      	b.n	8001226 <SetCellPWM+0x7a>
        HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8001212:	4b07      	ldr	r3, [pc, #28]	@ (8001230 <SetCellPWM+0x84>)
 8001214:	2108      	movs	r1, #8
 8001216:	0018      	movs	r0, r3
 8001218:	f003 f8ea 	bl	80043f0 <HAL_TIM_PWM_Start>
        HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 800121c:	4b04      	ldr	r3, [pc, #16]	@ (8001230 <SetCellPWM+0x84>)
 800121e:	2108      	movs	r1, #8
 8001220:	0018      	movs	r0, r3
 8001222:	f003 fed1 	bl	8004fc8 <HAL_TIMEx_PWMN_Start>
}
 8001226:	46c0      	nop			@ (mov r8, r8)
 8001228:	46bd      	mov	sp, r7
 800122a:	b004      	add	sp, #16
 800122c:	bd80      	pop	{r7, pc}
 800122e:	46c0      	nop			@ (mov r8, r8)
 8001230:	20000090 	.word	0x20000090

08001234 <BLOWER>:

void BLOWER(uint8_t duty_percent){
 8001234:	b590      	push	{r4, r7, lr}
 8001236:	b083      	sub	sp, #12
 8001238:	af00      	add	r7, sp, #0
 800123a:	0002      	movs	r2, r0
 800123c:	1dfb      	adds	r3, r7, #7
 800123e:	701a      	strb	r2, [r3, #0]


	    if (duty_percent > 100) duty_percent = 100;
 8001240:	1dfb      	adds	r3, r7, #7
 8001242:	781b      	ldrb	r3, [r3, #0]
 8001244:	2b64      	cmp	r3, #100	@ 0x64
 8001246:	d902      	bls.n	800124e <BLOWER+0x1a>
 8001248:	1dfb      	adds	r3, r7, #7
 800124a:	2264      	movs	r2, #100	@ 0x64
 800124c:	701a      	strb	r2, [r3, #0]
	    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, duty_percent * (__HAL_TIM_GET_AUTORELOAD(&htim3) + 1) / 100);
 800124e:	1dfb      	adds	r3, r7, #7
 8001250:	781a      	ldrb	r2, [r3, #0]
 8001252:	4b08      	ldr	r3, [pc, #32]	@ (8001274 <BLOWER+0x40>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001258:	3301      	adds	r3, #1
 800125a:	435a      	muls	r2, r3
 800125c:	4b05      	ldr	r3, [pc, #20]	@ (8001274 <BLOWER+0x40>)
 800125e:	681c      	ldr	r4, [r3, #0]
 8001260:	2164      	movs	r1, #100	@ 0x64
 8001262:	0010      	movs	r0, r2
 8001264:	f7fe ff4e 	bl	8000104 <__udivsi3>
 8001268:	0003      	movs	r3, r0
 800126a:	63e3      	str	r3, [r4, #60]	@ 0x3c

}
 800126c:	46c0      	nop			@ (mov r8, r8)
 800126e:	46bd      	mov	sp, r7
 8001270:	b003      	add	sp, #12
 8001272:	bd90      	pop	{r4, r7, pc}
 8001274:	200000dc 	.word	0x200000dc

08001278 <Controlsystem>:

void Controlsystem(void){
 8001278:	b580      	push	{r7, lr}
 800127a:	b086      	sub	sp, #24
 800127c:	af00      	add	r7, sp, #0
	Read_ADC_Channels();
 800127e:	f000 fbfb 	bl	8001a78 <Read_ADC_Channels>
	static bool LoadFLAG;
    //float temperature = Convert_ADC_to_Temperature(adc_vals[0]);
	float CapacitorVoltage = Convert_ADC_to_CapacitorVoltage(adc_vals[3]);
 8001282:	4b34      	ldr	r3, [pc, #208]	@ (8001354 <Controlsystem+0xdc>)
 8001284:	68db      	ldr	r3, [r3, #12]
 8001286:	1c18      	adds	r0, r3, #0
 8001288:	f7ff f90c 	bl	80004a4 <__aeabi_f2uiz>
 800128c:	0003      	movs	r3, r0
 800128e:	b29b      	uxth	r3, r3
 8001290:	0018      	movs	r0, r3
 8001292:	f000 f869 	bl	8001368 <Convert_ADC_to_CapacitorVoltage>
 8001296:	1c03      	adds	r3, r0, #0
 8001298:	617b      	str	r3, [r7, #20]
	float CellVoltage = Convert_ADC_to_CellVoltage(adc_vals[1]);
 800129a:	4b2e      	ldr	r3, [pc, #184]	@ (8001354 <Controlsystem+0xdc>)
 800129c:	685b      	ldr	r3, [r3, #4]
 800129e:	1c18      	adds	r0, r3, #0
 80012a0:	f7ff f900 	bl	80004a4 <__aeabi_f2uiz>
 80012a4:	0003      	movs	r3, r0
 80012a6:	b29b      	uxth	r3, r3
 80012a8:	0018      	movs	r0, r3
 80012aa:	f000 f885 	bl	80013b8 <Convert_ADC_to_CellVoltage>
 80012ae:	1c03      	adds	r3, r0, #0
 80012b0:	613b      	str	r3, [r7, #16]
	float CellCurrent = Convert_ADC_to_CellCurrent(adc_vals[2]);
 80012b2:	4b28      	ldr	r3, [pc, #160]	@ (8001354 <Controlsystem+0xdc>)
 80012b4:	689b      	ldr	r3, [r3, #8]
 80012b6:	1c18      	adds	r0, r3, #0
 80012b8:	f7ff f8f4 	bl	80004a4 <__aeabi_f2uiz>
 80012bc:	0003      	movs	r3, r0
 80012be:	b29b      	uxth	r3, r3
 80012c0:	0018      	movs	r0, r3
 80012c2:	f000 f8a1 	bl	8001408 <Convert_ADC_to_CellCurrent>
 80012c6:	1c03      	adds	r3, r0, #0
 80012c8:	60fb      	str	r3, [r7, #12]

	float POWER_CELL = CellVoltage * CellCurrent;
 80012ca:	68f9      	ldr	r1, [r7, #12]
 80012cc:	6938      	ldr	r0, [r7, #16]
 80012ce:	f7ff fbb3 	bl	8000a38 <__aeabi_fmul>
 80012d2:	1c03      	adds	r3, r0, #0
 80012d4:	60bb      	str	r3, [r7, #8]


	if (CapacitorVoltage < CAPACITOR_LOW_LEVEL)
 80012d6:	4920      	ldr	r1, [pc, #128]	@ (8001358 <Controlsystem+0xe0>)
 80012d8:	6978      	ldr	r0, [r7, #20]
 80012da:	f7ff f89b 	bl	8000414 <__aeabi_fcmplt>
 80012de:	1e03      	subs	r3, r0, #0
 80012e0:	d003      	beq.n	80012ea <Controlsystem+0x72>
	{
		LoadFLAG = true;
 80012e2:	4b1e      	ldr	r3, [pc, #120]	@ (800135c <Controlsystem+0xe4>)
 80012e4:	2201      	movs	r2, #1
 80012e6:	701a      	strb	r2, [r3, #0]
 80012e8:	e008      	b.n	80012fc <Controlsystem+0x84>
	}
	else if (CapacitorVoltage > CAPACITOR_HIGH_LEVEL)
 80012ea:	491d      	ldr	r1, [pc, #116]	@ (8001360 <Controlsystem+0xe8>)
 80012ec:	6978      	ldr	r0, [r7, #20]
 80012ee:	f7ff f8a5 	bl	800043c <__aeabi_fcmpgt>
 80012f2:	1e03      	subs	r3, r0, #0
 80012f4:	d002      	beq.n	80012fc <Controlsystem+0x84>
	{
		LoadFLAG = false;
 80012f6:	4b19      	ldr	r3, [pc, #100]	@ (800135c <Controlsystem+0xe4>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	701a      	strb	r2, [r3, #0]
	}

	 bool manualOverride = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_0) == GPIO_PIN_SET;
 80012fc:	4b19      	ldr	r3, [pc, #100]	@ (8001364 <Controlsystem+0xec>)
 80012fe:	2101      	movs	r1, #1
 8001300:	0018      	movs	r0, r3
 8001302:	f002 f91b 	bl	800353c <HAL_GPIO_ReadPin>
 8001306:	0003      	movs	r3, r0
 8001308:	001a      	movs	r2, r3
 800130a:	1dfb      	adds	r3, r7, #7
 800130c:	3a01      	subs	r2, #1
 800130e:	4251      	negs	r1, r2
 8001310:	414a      	adcs	r2, r1
 8001312:	701a      	strb	r2, [r3, #0]

	    if (LoadFLAG || manualOverride)
 8001314:	4b11      	ldr	r3, [pc, #68]	@ (800135c <Controlsystem+0xe4>)
 8001316:	781b      	ldrb	r3, [r3, #0]
 8001318:	2b00      	cmp	r3, #0
 800131a:	d103      	bne.n	8001324 <Controlsystem+0xac>
 800131c:	1dfb      	adds	r3, r7, #7
 800131e:	781b      	ldrb	r3, [r3, #0]
 8001320:	2b00      	cmp	r3, #0
 8001322:	d006      	beq.n	8001332 <Controlsystem+0xba>
	        // Aktywacja systemu
	         // Hydrogen valve



	        BLOWER(30);
 8001324:	201e      	movs	r0, #30
 8001326:	f7ff ff85 	bl	8001234 <BLOWER>
	        SetCellPWM(100);
 800132a:	2064      	movs	r0, #100	@ 0x64
 800132c:	f7ff ff3e 	bl	80011ac <SetCellPWM>
 8001330:	e00c      	b.n	800134c <Controlsystem+0xd4>
	    }
	    else
	    {
	        // Dezaktywacja systemu
	    	SetCellPWM(0);
 8001332:	2000      	movs	r0, #0
 8001334:	f7ff ff3a 	bl	80011ac <SetCellPWM>

	    	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_RESET);
 8001338:	4b0a      	ldr	r3, [pc, #40]	@ (8001364 <Controlsystem+0xec>)
 800133a:	2200      	movs	r2, #0
 800133c:	2110      	movs	r1, #16
 800133e:	0018      	movs	r0, r3
 8001340:	f002 f919 	bl	8003576 <HAL_GPIO_WritePin>

	        BLOWER(0);
 8001344:	2000      	movs	r0, #0
 8001346:	f7ff ff75 	bl	8001234 <BLOWER>
	    }


}
 800134a:	46c0      	nop			@ (mov r8, r8)
 800134c:	46c0      	nop			@ (mov r8, r8)
 800134e:	46bd      	mov	sp, r7
 8001350:	b006      	add	sp, #24
 8001352:	bd80      	pop	{r7, pc}
 8001354:	200001c0 	.word	0x200001c0
 8001358:	41700000 	.word	0x41700000
 800135c:	20000028 	.word	0x20000028
 8001360:	41c80000 	.word	0x41c80000
 8001364:	50000c00 	.word	0x50000c00

08001368 <Convert_ADC_to_CapacitorVoltage>:

//float Convert_ADC_to_Temperature(uint16_t adc_value){

//}
#define CAPACITOR_DIVIDER 13.56f
float Convert_ADC_to_CapacitorVoltage(uint16_t adc_value){
 8001368:	b580      	push	{r7, lr}
 800136a:	b084      	sub	sp, #16
 800136c:	af00      	add	r7, sp, #0
 800136e:	0002      	movs	r2, r0
 8001370:	1dbb      	adds	r3, r7, #6
 8001372:	801a      	strh	r2, [r3, #0]
	float CapacitorVoltage=((adc_value / ADC_MAX) * VREF)*CAPACITOR_DIVIDER;
 8001374:	1dbb      	adds	r3, r7, #6
 8001376:	881b      	ldrh	r3, [r3, #0]
 8001378:	0018      	movs	r0, r3
 800137a:	f7ff fe5f 	bl	800103c <__aeabi_i2f>
 800137e:	1c03      	adds	r3, r0, #0
 8001380:	490a      	ldr	r1, [pc, #40]	@ (80013ac <Convert_ADC_to_CapacitorVoltage+0x44>)
 8001382:	1c18      	adds	r0, r3, #0
 8001384:	f7ff f972 	bl	800066c <__aeabi_fdiv>
 8001388:	1c03      	adds	r3, r0, #0
 800138a:	4909      	ldr	r1, [pc, #36]	@ (80013b0 <Convert_ADC_to_CapacitorVoltage+0x48>)
 800138c:	1c18      	adds	r0, r3, #0
 800138e:	f7ff fb53 	bl	8000a38 <__aeabi_fmul>
 8001392:	1c03      	adds	r3, r0, #0
 8001394:	4907      	ldr	r1, [pc, #28]	@ (80013b4 <Convert_ADC_to_CapacitorVoltage+0x4c>)
 8001396:	1c18      	adds	r0, r3, #0
 8001398:	f7ff fb4e 	bl	8000a38 <__aeabi_fmul>
 800139c:	1c03      	adds	r3, r0, #0
 800139e:	60fb      	str	r3, [r7, #12]
	return CapacitorVoltage;
 80013a0:	68fb      	ldr	r3, [r7, #12]
}
 80013a2:	1c18      	adds	r0, r3, #0
 80013a4:	46bd      	mov	sp, r7
 80013a6:	b004      	add	sp, #16
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	46c0      	nop			@ (mov r8, r8)
 80013ac:	457ff000 	.word	0x457ff000
 80013b0:	40533333 	.word	0x40533333
 80013b4:	4158f5c3 	.word	0x4158f5c3

080013b8 <Convert_ADC_to_CellVoltage>:


#define CELL_DIVIDER 9.41f
float Convert_ADC_to_CellVoltage(uint16_t adc_value){
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b084      	sub	sp, #16
 80013bc:	af00      	add	r7, sp, #0
 80013be:	0002      	movs	r2, r0
 80013c0:	1dbb      	adds	r3, r7, #6
 80013c2:	801a      	strh	r2, [r3, #0]
	float CellVoltage=((adc_value / ADC_MAX) * VREF)*CELL_DIVIDER;
 80013c4:	1dbb      	adds	r3, r7, #6
 80013c6:	881b      	ldrh	r3, [r3, #0]
 80013c8:	0018      	movs	r0, r3
 80013ca:	f7ff fe37 	bl	800103c <__aeabi_i2f>
 80013ce:	1c03      	adds	r3, r0, #0
 80013d0:	490a      	ldr	r1, [pc, #40]	@ (80013fc <Convert_ADC_to_CellVoltage+0x44>)
 80013d2:	1c18      	adds	r0, r3, #0
 80013d4:	f7ff f94a 	bl	800066c <__aeabi_fdiv>
 80013d8:	1c03      	adds	r3, r0, #0
 80013da:	4909      	ldr	r1, [pc, #36]	@ (8001400 <Convert_ADC_to_CellVoltage+0x48>)
 80013dc:	1c18      	adds	r0, r3, #0
 80013de:	f7ff fb2b 	bl	8000a38 <__aeabi_fmul>
 80013e2:	1c03      	adds	r3, r0, #0
 80013e4:	4907      	ldr	r1, [pc, #28]	@ (8001404 <Convert_ADC_to_CellVoltage+0x4c>)
 80013e6:	1c18      	adds	r0, r3, #0
 80013e8:	f7ff fb26 	bl	8000a38 <__aeabi_fmul>
 80013ec:	1c03      	adds	r3, r0, #0
 80013ee:	60fb      	str	r3, [r7, #12]
	return CellVoltage;
 80013f0:	68fb      	ldr	r3, [r7, #12]
}
 80013f2:	1c18      	adds	r0, r3, #0
 80013f4:	46bd      	mov	sp, r7
 80013f6:	b004      	add	sp, #16
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	46c0      	nop			@ (mov r8, r8)
 80013fc:	457ff000 	.word	0x457ff000
 8001400:	40533333 	.word	0x40533333
 8001404:	41168f5c 	.word	0x41168f5c

08001408 <Convert_ADC_to_CellCurrent>:

#define ACS_SENS 0.0203f
float Convert_ADC_to_CellCurrent(uint16_t adc_value){
 8001408:	b580      	push	{r7, lr}
 800140a:	b084      	sub	sp, #16
 800140c:	af00      	add	r7, sp, #0
 800140e:	0002      	movs	r2, r0
 8001410:	1dbb      	adds	r3, r7, #6
 8001412:	801a      	strh	r2, [r3, #0]
	float voltage = ((adc_value / ADC_MAX) * VREF);
 8001414:	1dbb      	adds	r3, r7, #6
 8001416:	881b      	ldrh	r3, [r3, #0]
 8001418:	0018      	movs	r0, r3
 800141a:	f7ff fe0f 	bl	800103c <__aeabi_i2f>
 800141e:	1c03      	adds	r3, r0, #0
 8001420:	490d      	ldr	r1, [pc, #52]	@ (8001458 <Convert_ADC_to_CellCurrent+0x50>)
 8001422:	1c18      	adds	r0, r3, #0
 8001424:	f7ff f922 	bl	800066c <__aeabi_fdiv>
 8001428:	1c03      	adds	r3, r0, #0
 800142a:	490c      	ldr	r1, [pc, #48]	@ (800145c <Convert_ADC_to_CellCurrent+0x54>)
 800142c:	1c18      	adds	r0, r3, #0
 800142e:	f7ff fb03 	bl	8000a38 <__aeabi_fmul>
 8001432:	1c03      	adds	r3, r0, #0
 8001434:	60fb      	str	r3, [r7, #12]
	float CellCurrent = (1.65f-voltage) / ACS_SENS;
 8001436:	68f9      	ldr	r1, [r7, #12]
 8001438:	4809      	ldr	r0, [pc, #36]	@ (8001460 <Convert_ADC_to_CellCurrent+0x58>)
 800143a:	f7ff fc3b 	bl	8000cb4 <__aeabi_fsub>
 800143e:	1c03      	adds	r3, r0, #0
 8001440:	4908      	ldr	r1, [pc, #32]	@ (8001464 <Convert_ADC_to_CellCurrent+0x5c>)
 8001442:	1c18      	adds	r0, r3, #0
 8001444:	f7ff f912 	bl	800066c <__aeabi_fdiv>
 8001448:	1c03      	adds	r3, r0, #0
 800144a:	60bb      	str	r3, [r7, #8]
	return CellCurrent;
 800144c:	68bb      	ldr	r3, [r7, #8]
}
 800144e:	1c18      	adds	r0, r3, #0
 8001450:	46bd      	mov	sp, r7
 8001452:	b004      	add	sp, #16
 8001454:	bd80      	pop	{r7, pc}
 8001456:	46c0      	nop			@ (mov r8, r8)
 8001458:	457ff000 	.word	0x457ff000
 800145c:	40533333 	.word	0x40533333
 8001460:	3fd33333 	.word	0x3fd33333
 8001464:	3ca64c30 	.word	0x3ca64c30

08001468 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800146c:	f000 fcfa 	bl	8001e64 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001470:	f000 f846 	bl	8001500 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001474:	f000 fa8c 	bl	8001990 <MX_GPIO_Init>
  MX_ADC1_Init();
 8001478:	f000 f88a 	bl	8001590 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 800147c:	f000 fa3a 	bl	80018f4 <MX_USART1_UART_Init>
  MX_TIM3_Init();
 8001480:	f000 f9d6 	bl	8001830 <MX_TIM3_Init>
  MX_TIM1_Init();
 8001484:	f000 f928 	bl	80016d8 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADCEx_Calibration_Start(&hadc1);
 8001488:	4b15      	ldr	r3, [pc, #84]	@ (80014e0 <main+0x78>)
 800148a:	0018      	movs	r0, r3
 800148c:	f001 fd42 	bl	8002f14 <HAL_ADCEx_Calibration_Start>

  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8001490:	4b14      	ldr	r3, [pc, #80]	@ (80014e4 <main+0x7c>)
 8001492:	2108      	movs	r1, #8
 8001494:	0018      	movs	r0, r3
 8001496:	f002 ffab 	bl	80043f0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);      // główne wyjście
 800149a:	4b13      	ldr	r3, [pc, #76]	@ (80014e8 <main+0x80>)
 800149c:	2108      	movs	r1, #8
 800149e:	0018      	movs	r0, r3
 80014a0:	f002 ffa6 	bl	80043f0 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 80014a4:	4b10      	ldr	r3, [pc, #64]	@ (80014e8 <main+0x80>)
 80014a6:	2108      	movs	r1, #8
 80014a8:	0018      	movs	r0, r3
 80014aa:	f003 fd8d 	bl	8004fc8 <HAL_TIMEx_PWMN_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  Controlsystem();
 80014ae:	f7ff fee3 	bl	8001278 <Controlsystem>
	  voltage1=((adc_vals[1] / 4095.0f) * 3.3f*9.41f);
 80014b2:	4b0e      	ldr	r3, [pc, #56]	@ (80014ec <main+0x84>)
 80014b4:	685b      	ldr	r3, [r3, #4]
 80014b6:	490e      	ldr	r1, [pc, #56]	@ (80014f0 <main+0x88>)
 80014b8:	1c18      	adds	r0, r3, #0
 80014ba:	f7ff f8d7 	bl	800066c <__aeabi_fdiv>
 80014be:	1c03      	adds	r3, r0, #0
 80014c0:	490c      	ldr	r1, [pc, #48]	@ (80014f4 <main+0x8c>)
 80014c2:	1c18      	adds	r0, r3, #0
 80014c4:	f7ff fab8 	bl	8000a38 <__aeabi_fmul>
 80014c8:	1c03      	adds	r3, r0, #0
 80014ca:	490b      	ldr	r1, [pc, #44]	@ (80014f8 <main+0x90>)
 80014cc:	1c18      	adds	r0, r3, #0
 80014ce:	f7ff fab3 	bl	8000a38 <__aeabi_fmul>
 80014d2:	1c03      	adds	r3, r0, #0
 80014d4:	1c1a      	adds	r2, r3, #0
 80014d6:	4b09      	ldr	r3, [pc, #36]	@ (80014fc <main+0x94>)
 80014d8:	601a      	str	r2, [r3, #0]
  {
 80014da:	46c0      	nop			@ (mov r8, r8)
 80014dc:	e7e7      	b.n	80014ae <main+0x46>
 80014de:	46c0      	nop			@ (mov r8, r8)
 80014e0:	2000002c 	.word	0x2000002c
 80014e4:	200000dc 	.word	0x200000dc
 80014e8:	20000090 	.word	0x20000090
 80014ec:	200001c0 	.word	0x200001c0
 80014f0:	457ff000 	.word	0x457ff000
 80014f4:	40533333 	.word	0x40533333
 80014f8:	41168f5c 	.word	0x41168f5c
 80014fc:	200001bc 	.word	0x200001bc

08001500 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001500:	b590      	push	{r4, r7, lr}
 8001502:	b093      	sub	sp, #76	@ 0x4c
 8001504:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001506:	2410      	movs	r4, #16
 8001508:	193b      	adds	r3, r7, r4
 800150a:	0018      	movs	r0, r3
 800150c:	2338      	movs	r3, #56	@ 0x38
 800150e:	001a      	movs	r2, r3
 8001510:	2100      	movs	r1, #0
 8001512:	f004 fde9 	bl	80060e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001516:	003b      	movs	r3, r7
 8001518:	0018      	movs	r0, r3
 800151a:	2310      	movs	r3, #16
 800151c:	001a      	movs	r2, r3
 800151e:	2100      	movs	r1, #0
 8001520:	f004 fde2 	bl	80060e8 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001524:	2380      	movs	r3, #128	@ 0x80
 8001526:	009b      	lsls	r3, r3, #2
 8001528:	0018      	movs	r0, r3
 800152a:	f002 f841 	bl	80035b0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800152e:	193b      	adds	r3, r7, r4
 8001530:	2202      	movs	r2, #2
 8001532:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001534:	193b      	adds	r3, r7, r4
 8001536:	2280      	movs	r2, #128	@ 0x80
 8001538:	0052      	lsls	r2, r2, #1
 800153a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 800153c:	193b      	adds	r3, r7, r4
 800153e:	2200      	movs	r2, #0
 8001540:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001542:	193b      	adds	r3, r7, r4
 8001544:	2240      	movs	r2, #64	@ 0x40
 8001546:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001548:	193b      	adds	r3, r7, r4
 800154a:	2200      	movs	r2, #0
 800154c:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800154e:	193b      	adds	r3, r7, r4
 8001550:	0018      	movs	r0, r3
 8001552:	f002 f879 	bl	8003648 <HAL_RCC_OscConfig>
 8001556:	1e03      	subs	r3, r0, #0
 8001558:	d001      	beq.n	800155e <SystemClock_Config+0x5e>
  {
    Error_Handler();
 800155a:	f000 fa87 	bl	8001a6c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800155e:	003b      	movs	r3, r7
 8001560:	2207      	movs	r2, #7
 8001562:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001564:	003b      	movs	r3, r7
 8001566:	2200      	movs	r2, #0
 8001568:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800156a:	003b      	movs	r3, r7
 800156c:	2200      	movs	r2, #0
 800156e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001570:	003b      	movs	r3, r7
 8001572:	2200      	movs	r2, #0
 8001574:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001576:	003b      	movs	r3, r7
 8001578:	2100      	movs	r1, #0
 800157a:	0018      	movs	r0, r3
 800157c:	f002 fb7e 	bl	8003c7c <HAL_RCC_ClockConfig>
 8001580:	1e03      	subs	r3, r0, #0
 8001582:	d001      	beq.n	8001588 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8001584:	f000 fa72 	bl	8001a6c <Error_Handler>
  }
}
 8001588:	46c0      	nop			@ (mov r8, r8)
 800158a:	46bd      	mov	sp, r7
 800158c:	b013      	add	sp, #76	@ 0x4c
 800158e:	bd90      	pop	{r4, r7, pc}

08001590 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b084      	sub	sp, #16
 8001594:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001596:	1d3b      	adds	r3, r7, #4
 8001598:	0018      	movs	r0, r3
 800159a:	230c      	movs	r3, #12
 800159c:	001a      	movs	r2, r3
 800159e:	2100      	movs	r1, #0
 80015a0:	f004 fda2 	bl	80060e8 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80015a4:	4b46      	ldr	r3, [pc, #280]	@ (80016c0 <MX_ADC1_Init+0x130>)
 80015a6:	4a47      	ldr	r2, [pc, #284]	@ (80016c4 <MX_ADC1_Init+0x134>)
 80015a8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80015aa:	4b45      	ldr	r3, [pc, #276]	@ (80016c0 <MX_ADC1_Init+0x130>)
 80015ac:	2280      	movs	r2, #128	@ 0x80
 80015ae:	05d2      	lsls	r2, r2, #23
 80015b0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80015b2:	4b43      	ldr	r3, [pc, #268]	@ (80016c0 <MX_ADC1_Init+0x130>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80015b8:	4b41      	ldr	r3, [pc, #260]	@ (80016c0 <MX_ADC1_Init+0x130>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80015be:	4b40      	ldr	r3, [pc, #256]	@ (80016c0 <MX_ADC1_Init+0x130>)
 80015c0:	2280      	movs	r2, #128	@ 0x80
 80015c2:	0392      	lsls	r2, r2, #14
 80015c4:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80015c6:	4b3e      	ldr	r3, [pc, #248]	@ (80016c0 <MX_ADC1_Init+0x130>)
 80015c8:	2204      	movs	r2, #4
 80015ca:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80015cc:	4b3c      	ldr	r3, [pc, #240]	@ (80016c0 <MX_ADC1_Init+0x130>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 80015d2:	4b3b      	ldr	r3, [pc, #236]	@ (80016c0 <MX_ADC1_Init+0x130>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80015d8:	4b39      	ldr	r3, [pc, #228]	@ (80016c0 <MX_ADC1_Init+0x130>)
 80015da:	2200      	movs	r2, #0
 80015dc:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 4;
 80015de:	4b38      	ldr	r3, [pc, #224]	@ (80016c0 <MX_ADC1_Init+0x130>)
 80015e0:	2204      	movs	r2, #4
 80015e2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80015e4:	4b36      	ldr	r3, [pc, #216]	@ (80016c0 <MX_ADC1_Init+0x130>)
 80015e6:	2220      	movs	r2, #32
 80015e8:	2100      	movs	r1, #0
 80015ea:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80015ec:	4b34      	ldr	r3, [pc, #208]	@ (80016c0 <MX_ADC1_Init+0x130>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80015f2:	4b33      	ldr	r3, [pc, #204]	@ (80016c0 <MX_ADC1_Init+0x130>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80015f8:	4b31      	ldr	r3, [pc, #196]	@ (80016c0 <MX_ADC1_Init+0x130>)
 80015fa:	222c      	movs	r2, #44	@ 0x2c
 80015fc:	2100      	movs	r1, #0
 80015fe:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001600:	4b2f      	ldr	r3, [pc, #188]	@ (80016c0 <MX_ADC1_Init+0x130>)
 8001602:	2200      	movs	r2, #0
 8001604:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
 8001606:	4b2e      	ldr	r3, [pc, #184]	@ (80016c0 <MX_ADC1_Init+0x130>)
 8001608:	2207      	movs	r2, #7
 800160a:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 800160c:	4b2c      	ldr	r3, [pc, #176]	@ (80016c0 <MX_ADC1_Init+0x130>)
 800160e:	2200      	movs	r2, #0
 8001610:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8001612:	4b2b      	ldr	r3, [pc, #172]	@ (80016c0 <MX_ADC1_Init+0x130>)
 8001614:	223c      	movs	r2, #60	@ 0x3c
 8001616:	2100      	movs	r1, #0
 8001618:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 800161a:	4b29      	ldr	r3, [pc, #164]	@ (80016c0 <MX_ADC1_Init+0x130>)
 800161c:	2200      	movs	r2, #0
 800161e:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001620:	4b27      	ldr	r3, [pc, #156]	@ (80016c0 <MX_ADC1_Init+0x130>)
 8001622:	0018      	movs	r0, r3
 8001624:	f000 fe0e 	bl	8002244 <HAL_ADC_Init>
 8001628:	1e03      	subs	r3, r0, #0
 800162a:	d001      	beq.n	8001630 <MX_ADC1_Init+0xa0>
  {
    Error_Handler();
 800162c:	f000 fa1e 	bl	8001a6c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001630:	1d3b      	adds	r3, r7, #4
 8001632:	4a25      	ldr	r2, [pc, #148]	@ (80016c8 <MX_ADC1_Init+0x138>)
 8001634:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001636:	1d3b      	adds	r3, r7, #4
 8001638:	2200      	movs	r2, #0
 800163a:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 800163c:	1d3b      	adds	r3, r7, #4
 800163e:	2200      	movs	r2, #0
 8001640:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001642:	1d3a      	adds	r2, r7, #4
 8001644:	4b1e      	ldr	r3, [pc, #120]	@ (80016c0 <MX_ADC1_Init+0x130>)
 8001646:	0011      	movs	r1, r2
 8001648:	0018      	movs	r0, r3
 800164a:	f001 f8cd 	bl	80027e8 <HAL_ADC_ConfigChannel>
 800164e:	1e03      	subs	r3, r0, #0
 8001650:	d001      	beq.n	8001656 <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 8001652:	f000 fa0b 	bl	8001a6c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001656:	1d3b      	adds	r3, r7, #4
 8001658:	4a1c      	ldr	r2, [pc, #112]	@ (80016cc <MX_ADC1_Init+0x13c>)
 800165a:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800165c:	1d3b      	adds	r3, r7, #4
 800165e:	2204      	movs	r2, #4
 8001660:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001662:	1d3a      	adds	r2, r7, #4
 8001664:	4b16      	ldr	r3, [pc, #88]	@ (80016c0 <MX_ADC1_Init+0x130>)
 8001666:	0011      	movs	r1, r2
 8001668:	0018      	movs	r0, r3
 800166a:	f001 f8bd 	bl	80027e8 <HAL_ADC_ConfigChannel>
 800166e:	1e03      	subs	r3, r0, #0
 8001670:	d001      	beq.n	8001676 <MX_ADC1_Init+0xe6>
  {
    Error_Handler();
 8001672:	f000 f9fb 	bl	8001a6c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001676:	1d3b      	adds	r3, r7, #4
 8001678:	4a15      	ldr	r2, [pc, #84]	@ (80016d0 <MX_ADC1_Init+0x140>)
 800167a:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800167c:	1d3b      	adds	r3, r7, #4
 800167e:	2208      	movs	r2, #8
 8001680:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001682:	1d3a      	adds	r2, r7, #4
 8001684:	4b0e      	ldr	r3, [pc, #56]	@ (80016c0 <MX_ADC1_Init+0x130>)
 8001686:	0011      	movs	r1, r2
 8001688:	0018      	movs	r0, r3
 800168a:	f001 f8ad 	bl	80027e8 <HAL_ADC_ConfigChannel>
 800168e:	1e03      	subs	r3, r0, #0
 8001690:	d001      	beq.n	8001696 <MX_ADC1_Init+0x106>
  {
    Error_Handler();
 8001692:	f000 f9eb 	bl	8001a6c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001696:	1d3b      	adds	r3, r7, #4
 8001698:	4a0e      	ldr	r2, [pc, #56]	@ (80016d4 <MX_ADC1_Init+0x144>)
 800169a:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800169c:	1d3b      	adds	r3, r7, #4
 800169e:	220c      	movs	r2, #12
 80016a0:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80016a2:	1d3a      	adds	r2, r7, #4
 80016a4:	4b06      	ldr	r3, [pc, #24]	@ (80016c0 <MX_ADC1_Init+0x130>)
 80016a6:	0011      	movs	r1, r2
 80016a8:	0018      	movs	r0, r3
 80016aa:	f001 f89d 	bl	80027e8 <HAL_ADC_ConfigChannel>
 80016ae:	1e03      	subs	r3, r0, #0
 80016b0:	d001      	beq.n	80016b6 <MX_ADC1_Init+0x126>
  {
    Error_Handler();
 80016b2:	f000 f9db 	bl	8001a6c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80016b6:	46c0      	nop			@ (mov r8, r8)
 80016b8:	46bd      	mov	sp, r7
 80016ba:	b004      	add	sp, #16
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	46c0      	nop			@ (mov r8, r8)
 80016c0:	2000002c 	.word	0x2000002c
 80016c4:	40012400 	.word	0x40012400
 80016c8:	04000002 	.word	0x04000002
 80016cc:	08000004 	.word	0x08000004
 80016d0:	0c000008 	.word	0x0c000008
 80016d4:	10000010 	.word	0x10000010

080016d8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b098      	sub	sp, #96	@ 0x60
 80016dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016de:	2354      	movs	r3, #84	@ 0x54
 80016e0:	18fb      	adds	r3, r7, r3
 80016e2:	0018      	movs	r0, r3
 80016e4:	230c      	movs	r3, #12
 80016e6:	001a      	movs	r2, r3
 80016e8:	2100      	movs	r1, #0
 80016ea:	f004 fcfd 	bl	80060e8 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80016ee:	2338      	movs	r3, #56	@ 0x38
 80016f0:	18fb      	adds	r3, r7, r3
 80016f2:	0018      	movs	r0, r3
 80016f4:	231c      	movs	r3, #28
 80016f6:	001a      	movs	r2, r3
 80016f8:	2100      	movs	r1, #0
 80016fa:	f004 fcf5 	bl	80060e8 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80016fe:	1d3b      	adds	r3, r7, #4
 8001700:	0018      	movs	r0, r3
 8001702:	2334      	movs	r3, #52	@ 0x34
 8001704:	001a      	movs	r2, r3
 8001706:	2100      	movs	r1, #0
 8001708:	f004 fcee 	bl	80060e8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800170c:	4b45      	ldr	r3, [pc, #276]	@ (8001824 <MX_TIM1_Init+0x14c>)
 800170e:	4a46      	ldr	r2, [pc, #280]	@ (8001828 <MX_TIM1_Init+0x150>)
 8001710:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001712:	4b44      	ldr	r3, [pc, #272]	@ (8001824 <MX_TIM1_Init+0x14c>)
 8001714:	2200      	movs	r2, #0
 8001716:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001718:	4b42      	ldr	r3, [pc, #264]	@ (8001824 <MX_TIM1_Init+0x14c>)
 800171a:	2200      	movs	r2, #0
 800171c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800171e:	4b41      	ldr	r3, [pc, #260]	@ (8001824 <MX_TIM1_Init+0x14c>)
 8001720:	4a42      	ldr	r2, [pc, #264]	@ (800182c <MX_TIM1_Init+0x154>)
 8001722:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001724:	4b3f      	ldr	r3, [pc, #252]	@ (8001824 <MX_TIM1_Init+0x14c>)
 8001726:	2200      	movs	r2, #0
 8001728:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800172a:	4b3e      	ldr	r3, [pc, #248]	@ (8001824 <MX_TIM1_Init+0x14c>)
 800172c:	2200      	movs	r2, #0
 800172e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001730:	4b3c      	ldr	r3, [pc, #240]	@ (8001824 <MX_TIM1_Init+0x14c>)
 8001732:	2200      	movs	r2, #0
 8001734:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001736:	4b3b      	ldr	r3, [pc, #236]	@ (8001824 <MX_TIM1_Init+0x14c>)
 8001738:	0018      	movs	r0, r3
 800173a:	f002 fe01 	bl	8004340 <HAL_TIM_PWM_Init>
 800173e:	1e03      	subs	r3, r0, #0
 8001740:	d001      	beq.n	8001746 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8001742:	f000 f993 	bl	8001a6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001746:	2154      	movs	r1, #84	@ 0x54
 8001748:	187b      	adds	r3, r7, r1
 800174a:	2200      	movs	r2, #0
 800174c:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800174e:	187b      	adds	r3, r7, r1
 8001750:	2200      	movs	r2, #0
 8001752:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001754:	187b      	adds	r3, r7, r1
 8001756:	2200      	movs	r2, #0
 8001758:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800175a:	187a      	adds	r2, r7, r1
 800175c:	4b31      	ldr	r3, [pc, #196]	@ (8001824 <MX_TIM1_Init+0x14c>)
 800175e:	0011      	movs	r1, r2
 8001760:	0018      	movs	r0, r3
 8001762:	f003 fd31 	bl	80051c8 <HAL_TIMEx_MasterConfigSynchronization>
 8001766:	1e03      	subs	r3, r0, #0
 8001768:	d001      	beq.n	800176e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800176a:	f000 f97f 	bl	8001a6c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800176e:	2138      	movs	r1, #56	@ 0x38
 8001770:	187b      	adds	r3, r7, r1
 8001772:	2260      	movs	r2, #96	@ 0x60
 8001774:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8001776:	187b      	adds	r3, r7, r1
 8001778:	2200      	movs	r2, #0
 800177a:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800177c:	187b      	adds	r3, r7, r1
 800177e:	2200      	movs	r2, #0
 8001780:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001782:	187b      	adds	r3, r7, r1
 8001784:	2200      	movs	r2, #0
 8001786:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001788:	187b      	adds	r3, r7, r1
 800178a:	2200      	movs	r2, #0
 800178c:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800178e:	187b      	adds	r3, r7, r1
 8001790:	2200      	movs	r2, #0
 8001792:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001794:	187b      	adds	r3, r7, r1
 8001796:	2200      	movs	r2, #0
 8001798:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800179a:	1879      	adds	r1, r7, r1
 800179c:	4b21      	ldr	r3, [pc, #132]	@ (8001824 <MX_TIM1_Init+0x14c>)
 800179e:	2208      	movs	r2, #8
 80017a0:	0018      	movs	r0, r3
 80017a2:	f002 ff9b 	bl	80046dc <HAL_TIM_PWM_ConfigChannel>
 80017a6:	1e03      	subs	r3, r0, #0
 80017a8:	d001      	beq.n	80017ae <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 80017aa:	f000 f95f 	bl	8001a6c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80017ae:	1d3b      	adds	r3, r7, #4
 80017b0:	2200      	movs	r2, #0
 80017b2:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80017b4:	1d3b      	adds	r3, r7, #4
 80017b6:	2200      	movs	r2, #0
 80017b8:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80017ba:	1d3b      	adds	r3, r7, #4
 80017bc:	2200      	movs	r2, #0
 80017be:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80017c0:	1d3b      	adds	r3, r7, #4
 80017c2:	2200      	movs	r2, #0
 80017c4:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80017c6:	1d3b      	adds	r3, r7, #4
 80017c8:	2200      	movs	r2, #0
 80017ca:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80017cc:	1d3b      	adds	r3, r7, #4
 80017ce:	2280      	movs	r2, #128	@ 0x80
 80017d0:	0192      	lsls	r2, r2, #6
 80017d2:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80017d4:	1d3b      	adds	r3, r7, #4
 80017d6:	2200      	movs	r2, #0
 80017d8:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80017da:	1d3b      	adds	r3, r7, #4
 80017dc:	2200      	movs	r2, #0
 80017de:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80017e0:	1d3b      	adds	r3, r7, #4
 80017e2:	2200      	movs	r2, #0
 80017e4:	621a      	str	r2, [r3, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80017e6:	1d3b      	adds	r3, r7, #4
 80017e8:	2280      	movs	r2, #128	@ 0x80
 80017ea:	0492      	lsls	r2, r2, #18
 80017ec:	625a      	str	r2, [r3, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80017ee:	1d3b      	adds	r3, r7, #4
 80017f0:	2200      	movs	r2, #0
 80017f2:	629a      	str	r2, [r3, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80017f4:	1d3b      	adds	r3, r7, #4
 80017f6:	2200      	movs	r2, #0
 80017f8:	62da      	str	r2, [r3, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80017fa:	1d3b      	adds	r3, r7, #4
 80017fc:	2200      	movs	r2, #0
 80017fe:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001800:	1d3a      	adds	r2, r7, #4
 8001802:	4b08      	ldr	r3, [pc, #32]	@ (8001824 <MX_TIM1_Init+0x14c>)
 8001804:	0011      	movs	r1, r2
 8001806:	0018      	movs	r0, r3
 8001808:	f003 fd4c 	bl	80052a4 <HAL_TIMEx_ConfigBreakDeadTime>
 800180c:	1e03      	subs	r3, r0, #0
 800180e:	d001      	beq.n	8001814 <MX_TIM1_Init+0x13c>
  {
    Error_Handler();
 8001810:	f000 f92c 	bl	8001a6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001814:	4b03      	ldr	r3, [pc, #12]	@ (8001824 <MX_TIM1_Init+0x14c>)
 8001816:	0018      	movs	r0, r3
 8001818:	f000 fa10 	bl	8001c3c <HAL_TIM_MspPostInit>

}
 800181c:	46c0      	nop			@ (mov r8, r8)
 800181e:	46bd      	mov	sp, r7
 8001820:	b018      	add	sp, #96	@ 0x60
 8001822:	bd80      	pop	{r7, pc}
 8001824:	20000090 	.word	0x20000090
 8001828:	40012c00 	.word	0x40012c00
 800182c:	0000ffff 	.word	0x0000ffff

08001830 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b08a      	sub	sp, #40	@ 0x28
 8001834:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001836:	231c      	movs	r3, #28
 8001838:	18fb      	adds	r3, r7, r3
 800183a:	0018      	movs	r0, r3
 800183c:	230c      	movs	r3, #12
 800183e:	001a      	movs	r2, r3
 8001840:	2100      	movs	r1, #0
 8001842:	f004 fc51 	bl	80060e8 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001846:	003b      	movs	r3, r7
 8001848:	0018      	movs	r0, r3
 800184a:	231c      	movs	r3, #28
 800184c:	001a      	movs	r2, r3
 800184e:	2100      	movs	r1, #0
 8001850:	f004 fc4a 	bl	80060e8 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001854:	4b24      	ldr	r3, [pc, #144]	@ (80018e8 <MX_TIM3_Init+0xb8>)
 8001856:	4a25      	ldr	r2, [pc, #148]	@ (80018ec <MX_TIM3_Init+0xbc>)
 8001858:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800185a:	4b23      	ldr	r3, [pc, #140]	@ (80018e8 <MX_TIM3_Init+0xb8>)
 800185c:	2200      	movs	r2, #0
 800185e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001860:	4b21      	ldr	r3, [pc, #132]	@ (80018e8 <MX_TIM3_Init+0xb8>)
 8001862:	2200      	movs	r2, #0
 8001864:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1500;
 8001866:	4b20      	ldr	r3, [pc, #128]	@ (80018e8 <MX_TIM3_Init+0xb8>)
 8001868:	4a21      	ldr	r2, [pc, #132]	@ (80018f0 <MX_TIM3_Init+0xc0>)
 800186a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800186c:	4b1e      	ldr	r3, [pc, #120]	@ (80018e8 <MX_TIM3_Init+0xb8>)
 800186e:	2200      	movs	r2, #0
 8001870:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001872:	4b1d      	ldr	r3, [pc, #116]	@ (80018e8 <MX_TIM3_Init+0xb8>)
 8001874:	2200      	movs	r2, #0
 8001876:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001878:	4b1b      	ldr	r3, [pc, #108]	@ (80018e8 <MX_TIM3_Init+0xb8>)
 800187a:	0018      	movs	r0, r3
 800187c:	f002 fd60 	bl	8004340 <HAL_TIM_PWM_Init>
 8001880:	1e03      	subs	r3, r0, #0
 8001882:	d001      	beq.n	8001888 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8001884:	f000 f8f2 	bl	8001a6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001888:	211c      	movs	r1, #28
 800188a:	187b      	adds	r3, r7, r1
 800188c:	2200      	movs	r2, #0
 800188e:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001890:	187b      	adds	r3, r7, r1
 8001892:	2200      	movs	r2, #0
 8001894:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001896:	187a      	adds	r2, r7, r1
 8001898:	4b13      	ldr	r3, [pc, #76]	@ (80018e8 <MX_TIM3_Init+0xb8>)
 800189a:	0011      	movs	r1, r2
 800189c:	0018      	movs	r0, r3
 800189e:	f003 fc93 	bl	80051c8 <HAL_TIMEx_MasterConfigSynchronization>
 80018a2:	1e03      	subs	r3, r0, #0
 80018a4:	d001      	beq.n	80018aa <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 80018a6:	f000 f8e1 	bl	8001a6c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80018aa:	003b      	movs	r3, r7
 80018ac:	2260      	movs	r2, #96	@ 0x60
 80018ae:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80018b0:	003b      	movs	r3, r7
 80018b2:	2200      	movs	r2, #0
 80018b4:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80018b6:	003b      	movs	r3, r7
 80018b8:	2200      	movs	r2, #0
 80018ba:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80018bc:	003b      	movs	r3, r7
 80018be:	2200      	movs	r2, #0
 80018c0:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80018c2:	0039      	movs	r1, r7
 80018c4:	4b08      	ldr	r3, [pc, #32]	@ (80018e8 <MX_TIM3_Init+0xb8>)
 80018c6:	2208      	movs	r2, #8
 80018c8:	0018      	movs	r0, r3
 80018ca:	f002 ff07 	bl	80046dc <HAL_TIM_PWM_ConfigChannel>
 80018ce:	1e03      	subs	r3, r0, #0
 80018d0:	d001      	beq.n	80018d6 <MX_TIM3_Init+0xa6>
  {
    Error_Handler();
 80018d2:	f000 f8cb 	bl	8001a6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80018d6:	4b04      	ldr	r3, [pc, #16]	@ (80018e8 <MX_TIM3_Init+0xb8>)
 80018d8:	0018      	movs	r0, r3
 80018da:	f000 f9af 	bl	8001c3c <HAL_TIM_MspPostInit>

}
 80018de:	46c0      	nop			@ (mov r8, r8)
 80018e0:	46bd      	mov	sp, r7
 80018e2:	b00a      	add	sp, #40	@ 0x28
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	46c0      	nop			@ (mov r8, r8)
 80018e8:	200000dc 	.word	0x200000dc
 80018ec:	40000400 	.word	0x40000400
 80018f0:	000005dc 	.word	0x000005dc

080018f4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80018f8:	4b23      	ldr	r3, [pc, #140]	@ (8001988 <MX_USART1_UART_Init+0x94>)
 80018fa:	4a24      	ldr	r2, [pc, #144]	@ (800198c <MX_USART1_UART_Init+0x98>)
 80018fc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80018fe:	4b22      	ldr	r3, [pc, #136]	@ (8001988 <MX_USART1_UART_Init+0x94>)
 8001900:	22e1      	movs	r2, #225	@ 0xe1
 8001902:	0252      	lsls	r2, r2, #9
 8001904:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001906:	4b20      	ldr	r3, [pc, #128]	@ (8001988 <MX_USART1_UART_Init+0x94>)
 8001908:	2200      	movs	r2, #0
 800190a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800190c:	4b1e      	ldr	r3, [pc, #120]	@ (8001988 <MX_USART1_UART_Init+0x94>)
 800190e:	2200      	movs	r2, #0
 8001910:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001912:	4b1d      	ldr	r3, [pc, #116]	@ (8001988 <MX_USART1_UART_Init+0x94>)
 8001914:	2200      	movs	r2, #0
 8001916:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001918:	4b1b      	ldr	r3, [pc, #108]	@ (8001988 <MX_USART1_UART_Init+0x94>)
 800191a:	220c      	movs	r2, #12
 800191c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800191e:	4b1a      	ldr	r3, [pc, #104]	@ (8001988 <MX_USART1_UART_Init+0x94>)
 8001920:	2200      	movs	r2, #0
 8001922:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001924:	4b18      	ldr	r3, [pc, #96]	@ (8001988 <MX_USART1_UART_Init+0x94>)
 8001926:	2200      	movs	r2, #0
 8001928:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800192a:	4b17      	ldr	r3, [pc, #92]	@ (8001988 <MX_USART1_UART_Init+0x94>)
 800192c:	2200      	movs	r2, #0
 800192e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001930:	4b15      	ldr	r3, [pc, #84]	@ (8001988 <MX_USART1_UART_Init+0x94>)
 8001932:	2200      	movs	r2, #0
 8001934:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001936:	4b14      	ldr	r3, [pc, #80]	@ (8001988 <MX_USART1_UART_Init+0x94>)
 8001938:	2200      	movs	r2, #0
 800193a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800193c:	4b12      	ldr	r3, [pc, #72]	@ (8001988 <MX_USART1_UART_Init+0x94>)
 800193e:	0018      	movs	r0, r3
 8001940:	f003 fd70 	bl	8005424 <HAL_UART_Init>
 8001944:	1e03      	subs	r3, r0, #0
 8001946:	d001      	beq.n	800194c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001948:	f000 f890 	bl	8001a6c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800194c:	4b0e      	ldr	r3, [pc, #56]	@ (8001988 <MX_USART1_UART_Init+0x94>)
 800194e:	2100      	movs	r1, #0
 8001950:	0018      	movs	r0, r3
 8001952:	f004 fae9 	bl	8005f28 <HAL_UARTEx_SetTxFifoThreshold>
 8001956:	1e03      	subs	r3, r0, #0
 8001958:	d001      	beq.n	800195e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800195a:	f000 f887 	bl	8001a6c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800195e:	4b0a      	ldr	r3, [pc, #40]	@ (8001988 <MX_USART1_UART_Init+0x94>)
 8001960:	2100      	movs	r1, #0
 8001962:	0018      	movs	r0, r3
 8001964:	f004 fb20 	bl	8005fa8 <HAL_UARTEx_SetRxFifoThreshold>
 8001968:	1e03      	subs	r3, r0, #0
 800196a:	d001      	beq.n	8001970 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 800196c:	f000 f87e 	bl	8001a6c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001970:	4b05      	ldr	r3, [pc, #20]	@ (8001988 <MX_USART1_UART_Init+0x94>)
 8001972:	0018      	movs	r0, r3
 8001974:	f004 fa9e 	bl	8005eb4 <HAL_UARTEx_DisableFifoMode>
 8001978:	1e03      	subs	r3, r0, #0
 800197a:	d001      	beq.n	8001980 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 800197c:	f000 f876 	bl	8001a6c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001980:	46c0      	nop			@ (mov r8, r8)
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}
 8001986:	46c0      	nop			@ (mov r8, r8)
 8001988:	20000128 	.word	0x20000128
 800198c:	40013800 	.word	0x40013800

08001990 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001990:	b590      	push	{r4, r7, lr}
 8001992:	b08b      	sub	sp, #44	@ 0x2c
 8001994:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001996:	2414      	movs	r4, #20
 8001998:	193b      	adds	r3, r7, r4
 800199a:	0018      	movs	r0, r3
 800199c:	2314      	movs	r3, #20
 800199e:	001a      	movs	r2, r3
 80019a0:	2100      	movs	r1, #0
 80019a2:	f004 fba1 	bl	80060e8 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019a6:	4b2f      	ldr	r3, [pc, #188]	@ (8001a64 <MX_GPIO_Init+0xd4>)
 80019a8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80019aa:	4b2e      	ldr	r3, [pc, #184]	@ (8001a64 <MX_GPIO_Init+0xd4>)
 80019ac:	2101      	movs	r1, #1
 80019ae:	430a      	orrs	r2, r1
 80019b0:	635a      	str	r2, [r3, #52]	@ 0x34
 80019b2:	4b2c      	ldr	r3, [pc, #176]	@ (8001a64 <MX_GPIO_Init+0xd4>)
 80019b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80019b6:	2201      	movs	r2, #1
 80019b8:	4013      	ands	r3, r2
 80019ba:	613b      	str	r3, [r7, #16]
 80019bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019be:	4b29      	ldr	r3, [pc, #164]	@ (8001a64 <MX_GPIO_Init+0xd4>)
 80019c0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80019c2:	4b28      	ldr	r3, [pc, #160]	@ (8001a64 <MX_GPIO_Init+0xd4>)
 80019c4:	2104      	movs	r1, #4
 80019c6:	430a      	orrs	r2, r1
 80019c8:	635a      	str	r2, [r3, #52]	@ 0x34
 80019ca:	4b26      	ldr	r3, [pc, #152]	@ (8001a64 <MX_GPIO_Init+0xd4>)
 80019cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80019ce:	2204      	movs	r2, #4
 80019d0:	4013      	ands	r3, r2
 80019d2:	60fb      	str	r3, [r7, #12]
 80019d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019d6:	4b23      	ldr	r3, [pc, #140]	@ (8001a64 <MX_GPIO_Init+0xd4>)
 80019d8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80019da:	4b22      	ldr	r3, [pc, #136]	@ (8001a64 <MX_GPIO_Init+0xd4>)
 80019dc:	2102      	movs	r1, #2
 80019de:	430a      	orrs	r2, r1
 80019e0:	635a      	str	r2, [r3, #52]	@ 0x34
 80019e2:	4b20      	ldr	r3, [pc, #128]	@ (8001a64 <MX_GPIO_Init+0xd4>)
 80019e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80019e6:	2202      	movs	r2, #2
 80019e8:	4013      	ands	r3, r2
 80019ea:	60bb      	str	r3, [r7, #8]
 80019ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80019ee:	4b1d      	ldr	r3, [pc, #116]	@ (8001a64 <MX_GPIO_Init+0xd4>)
 80019f0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80019f2:	4b1c      	ldr	r3, [pc, #112]	@ (8001a64 <MX_GPIO_Init+0xd4>)
 80019f4:	2108      	movs	r1, #8
 80019f6:	430a      	orrs	r2, r1
 80019f8:	635a      	str	r2, [r3, #52]	@ 0x34
 80019fa:	4b1a      	ldr	r3, [pc, #104]	@ (8001a64 <MX_GPIO_Init+0xd4>)
 80019fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80019fe:	2208      	movs	r2, #8
 8001a00:	4013      	ands	r3, r2
 8001a02:	607b      	str	r3, [r7, #4]
 8001a04:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_3|GPIO_PIN_5, GPIO_PIN_RESET);
 8001a06:	2394      	movs	r3, #148	@ 0x94
 8001a08:	005b      	lsls	r3, r3, #1
 8001a0a:	4817      	ldr	r0, [pc, #92]	@ (8001a68 <MX_GPIO_Init+0xd8>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	0019      	movs	r1, r3
 8001a10:	f001 fdb1 	bl	8003576 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD8 PD3 PD5 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_3|GPIO_PIN_5;
 8001a14:	193b      	adds	r3, r7, r4
 8001a16:	2294      	movs	r2, #148	@ 0x94
 8001a18:	0052      	lsls	r2, r2, #1
 8001a1a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a1c:	193b      	adds	r3, r7, r4
 8001a1e:	2201      	movs	r2, #1
 8001a20:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a22:	193b      	adds	r3, r7, r4
 8001a24:	2200      	movs	r2, #0
 8001a26:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a28:	193b      	adds	r3, r7, r4
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a2e:	193b      	adds	r3, r7, r4
 8001a30:	4a0d      	ldr	r2, [pc, #52]	@ (8001a68 <MX_GPIO_Init+0xd8>)
 8001a32:	0019      	movs	r1, r3
 8001a34:	0010      	movs	r0, r2
 8001a36:	f001 fc1d 	bl	8003274 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001a3a:	0021      	movs	r1, r4
 8001a3c:	187b      	adds	r3, r7, r1
 8001a3e:	2201      	movs	r2, #1
 8001a40:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a42:	187b      	adds	r3, r7, r1
 8001a44:	2200      	movs	r2, #0
 8001a46:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001a48:	187b      	adds	r3, r7, r1
 8001a4a:	2202      	movs	r2, #2
 8001a4c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a4e:	187b      	adds	r3, r7, r1
 8001a50:	4a05      	ldr	r2, [pc, #20]	@ (8001a68 <MX_GPIO_Init+0xd8>)
 8001a52:	0019      	movs	r1, r3
 8001a54:	0010      	movs	r0, r2
 8001a56:	f001 fc0d 	bl	8003274 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001a5a:	46c0      	nop			@ (mov r8, r8)
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	b00b      	add	sp, #44	@ 0x2c
 8001a60:	bd90      	pop	{r4, r7, pc}
 8001a62:	46c0      	nop			@ (mov r8, r8)
 8001a64:	40021000 	.word	0x40021000
 8001a68:	50000c00 	.word	0x50000c00

08001a6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a70:	b672      	cpsid	i
}
 8001a72:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a74:	46c0      	nop			@ (mov r8, r8)
 8001a76:	e7fd      	b.n	8001a74 <Error_Handler+0x8>

08001a78 <Read_ADC_Channels>:
extern ADC_HandleTypeDef hadc1;

float adc_vals[4];

void Read_ADC_Channels(void)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b082      	sub	sp, #8
 8001a7c:	af00      	add	r7, sp, #0
    HAL_ADC_Start(&hadc1);
 8001a7e:	4b14      	ldr	r3, [pc, #80]	@ (8001ad0 <Read_ADC_Channels+0x58>)
 8001a80:	0018      	movs	r0, r3
 8001a82:	f000 fd87 	bl	8002594 <HAL_ADC_Start>

    for (int i = 0; i < 4; i++)
 8001a86:	2300      	movs	r3, #0
 8001a88:	607b      	str	r3, [r7, #4]
 8001a8a:	e016      	b.n	8001aba <Read_ADC_Channels+0x42>
    {
        HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	425a      	negs	r2, r3
 8001a90:	4b0f      	ldr	r3, [pc, #60]	@ (8001ad0 <Read_ADC_Channels+0x58>)
 8001a92:	0011      	movs	r1, r2
 8001a94:	0018      	movs	r0, r3
 8001a96:	f000 fe07 	bl	80026a8 <HAL_ADC_PollForConversion>
        adc_vals[i] = HAL_ADC_GetValue(&hadc1);
 8001a9a:	4b0d      	ldr	r3, [pc, #52]	@ (8001ad0 <Read_ADC_Channels+0x58>)
 8001a9c:	0018      	movs	r0, r3
 8001a9e:	f000 fe97 	bl	80027d0 <HAL_ADC_GetValue>
 8001aa2:	0003      	movs	r3, r0
 8001aa4:	0018      	movs	r0, r3
 8001aa6:	f7ff fb15 	bl	80010d4 <__aeabi_ui2f>
 8001aaa:	1c01      	adds	r1, r0, #0
 8001aac:	4b09      	ldr	r3, [pc, #36]	@ (8001ad4 <Read_ADC_Channels+0x5c>)
 8001aae:	687a      	ldr	r2, [r7, #4]
 8001ab0:	0092      	lsls	r2, r2, #2
 8001ab2:	50d1      	str	r1, [r2, r3]
    for (int i = 0; i < 4; i++)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	3301      	adds	r3, #1
 8001ab8:	607b      	str	r3, [r7, #4]
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	2b03      	cmp	r3, #3
 8001abe:	dde5      	ble.n	8001a8c <Read_ADC_Channels+0x14>
    }

    HAL_ADC_Stop(&hadc1);
 8001ac0:	4b03      	ldr	r3, [pc, #12]	@ (8001ad0 <Read_ADC_Channels+0x58>)
 8001ac2:	0018      	movs	r0, r3
 8001ac4:	f000 fdb4 	bl	8002630 <HAL_ADC_Stop>
}
 8001ac8:	46c0      	nop			@ (mov r8, r8)
 8001aca:	46bd      	mov	sp, r7
 8001acc:	b002      	add	sp, #8
 8001ace:	bd80      	pop	{r7, pc}
 8001ad0:	2000002c 	.word	0x2000002c
 8001ad4:	200001c0 	.word	0x200001c0

08001ad8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b082      	sub	sp, #8
 8001adc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ade:	4b0f      	ldr	r3, [pc, #60]	@ (8001b1c <HAL_MspInit+0x44>)
 8001ae0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001ae2:	4b0e      	ldr	r3, [pc, #56]	@ (8001b1c <HAL_MspInit+0x44>)
 8001ae4:	2101      	movs	r1, #1
 8001ae6:	430a      	orrs	r2, r1
 8001ae8:	641a      	str	r2, [r3, #64]	@ 0x40
 8001aea:	4b0c      	ldr	r3, [pc, #48]	@ (8001b1c <HAL_MspInit+0x44>)
 8001aec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aee:	2201      	movs	r2, #1
 8001af0:	4013      	ands	r3, r2
 8001af2:	607b      	str	r3, [r7, #4]
 8001af4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001af6:	4b09      	ldr	r3, [pc, #36]	@ (8001b1c <HAL_MspInit+0x44>)
 8001af8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001afa:	4b08      	ldr	r3, [pc, #32]	@ (8001b1c <HAL_MspInit+0x44>)
 8001afc:	2180      	movs	r1, #128	@ 0x80
 8001afe:	0549      	lsls	r1, r1, #21
 8001b00:	430a      	orrs	r2, r1
 8001b02:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001b04:	4b05      	ldr	r3, [pc, #20]	@ (8001b1c <HAL_MspInit+0x44>)
 8001b06:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001b08:	2380      	movs	r3, #128	@ 0x80
 8001b0a:	055b      	lsls	r3, r3, #21
 8001b0c:	4013      	ands	r3, r2
 8001b0e:	603b      	str	r3, [r7, #0]
 8001b10:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b12:	46c0      	nop			@ (mov r8, r8)
 8001b14:	46bd      	mov	sp, r7
 8001b16:	b002      	add	sp, #8
 8001b18:	bd80      	pop	{r7, pc}
 8001b1a:	46c0      	nop			@ (mov r8, r8)
 8001b1c:	40021000 	.word	0x40021000

08001b20 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001b20:	b590      	push	{r4, r7, lr}
 8001b22:	b08b      	sub	sp, #44	@ 0x2c
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b28:	2414      	movs	r4, #20
 8001b2a:	193b      	adds	r3, r7, r4
 8001b2c:	0018      	movs	r0, r3
 8001b2e:	2314      	movs	r3, #20
 8001b30:	001a      	movs	r2, r3
 8001b32:	2100      	movs	r1, #0
 8001b34:	f004 fad8 	bl	80060e8 <memset>
  if(hadc->Instance==ADC1)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4a18      	ldr	r2, [pc, #96]	@ (8001ba0 <HAL_ADC_MspInit+0x80>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d129      	bne.n	8001b96 <HAL_ADC_MspInit+0x76>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001b42:	4b18      	ldr	r3, [pc, #96]	@ (8001ba4 <HAL_ADC_MspInit+0x84>)
 8001b44:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001b46:	4b17      	ldr	r3, [pc, #92]	@ (8001ba4 <HAL_ADC_MspInit+0x84>)
 8001b48:	2180      	movs	r1, #128	@ 0x80
 8001b4a:	0349      	lsls	r1, r1, #13
 8001b4c:	430a      	orrs	r2, r1
 8001b4e:	641a      	str	r2, [r3, #64]	@ 0x40
 8001b50:	4b14      	ldr	r3, [pc, #80]	@ (8001ba4 <HAL_ADC_MspInit+0x84>)
 8001b52:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001b54:	2380      	movs	r3, #128	@ 0x80
 8001b56:	035b      	lsls	r3, r3, #13
 8001b58:	4013      	ands	r3, r2
 8001b5a:	613b      	str	r3, [r7, #16]
 8001b5c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b5e:	4b11      	ldr	r3, [pc, #68]	@ (8001ba4 <HAL_ADC_MspInit+0x84>)
 8001b60:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001b62:	4b10      	ldr	r3, [pc, #64]	@ (8001ba4 <HAL_ADC_MspInit+0x84>)
 8001b64:	2101      	movs	r1, #1
 8001b66:	430a      	orrs	r2, r1
 8001b68:	635a      	str	r2, [r3, #52]	@ 0x34
 8001b6a:	4b0e      	ldr	r3, [pc, #56]	@ (8001ba4 <HAL_ADC_MspInit+0x84>)
 8001b6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b6e:	2201      	movs	r2, #1
 8001b70:	4013      	ands	r3, r2
 8001b72:	60fb      	str	r3, [r7, #12]
 8001b74:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 8001b76:	193b      	adds	r3, r7, r4
 8001b78:	221e      	movs	r2, #30
 8001b7a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b7c:	193b      	adds	r3, r7, r4
 8001b7e:	2203      	movs	r2, #3
 8001b80:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b82:	193b      	adds	r3, r7, r4
 8001b84:	2200      	movs	r2, #0
 8001b86:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b88:	193a      	adds	r2, r7, r4
 8001b8a:	23a0      	movs	r3, #160	@ 0xa0
 8001b8c:	05db      	lsls	r3, r3, #23
 8001b8e:	0011      	movs	r1, r2
 8001b90:	0018      	movs	r0, r3
 8001b92:	f001 fb6f 	bl	8003274 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001b96:	46c0      	nop			@ (mov r8, r8)
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	b00b      	add	sp, #44	@ 0x2c
 8001b9c:	bd90      	pop	{r4, r7, pc}
 8001b9e:	46c0      	nop			@ (mov r8, r8)
 8001ba0:	40012400 	.word	0x40012400
 8001ba4:	40021000 	.word	0x40021000

08001ba8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001ba8:	b590      	push	{r4, r7, lr}
 8001baa:	b093      	sub	sp, #76	@ 0x4c
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001bb0:	2414      	movs	r4, #20
 8001bb2:	193b      	adds	r3, r7, r4
 8001bb4:	0018      	movs	r0, r3
 8001bb6:	2334      	movs	r3, #52	@ 0x34
 8001bb8:	001a      	movs	r2, r3
 8001bba:	2100      	movs	r1, #0
 8001bbc:	f004 fa94 	bl	80060e8 <memset>
  if(htim_pwm->Instance==TIM1)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4a1a      	ldr	r2, [pc, #104]	@ (8001c30 <HAL_TIM_PWM_MspInit+0x88>)
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d11d      	bne.n	8001c06 <HAL_TIM_PWM_MspInit+0x5e>

  /* USER CODE END TIM1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 8001bca:	193b      	adds	r3, r7, r4
 8001bcc:	2280      	movs	r2, #128	@ 0x80
 8001bce:	0392      	lsls	r2, r2, #14
 8001bd0:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLKSOURCE_PCLK1;
 8001bd2:	193b      	adds	r3, r7, r4
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	629a      	str	r2, [r3, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001bd8:	193b      	adds	r3, r7, r4
 8001bda:	0018      	movs	r0, r3
 8001bdc:	f002 f9f8 	bl	8003fd0 <HAL_RCCEx_PeriphCLKConfig>
 8001be0:	1e03      	subs	r3, r0, #0
 8001be2:	d001      	beq.n	8001be8 <HAL_TIM_PWM_MspInit+0x40>
    {
      Error_Handler();
 8001be4:	f7ff ff42 	bl	8001a6c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001be8:	4b12      	ldr	r3, [pc, #72]	@ (8001c34 <HAL_TIM_PWM_MspInit+0x8c>)
 8001bea:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001bec:	4b11      	ldr	r3, [pc, #68]	@ (8001c34 <HAL_TIM_PWM_MspInit+0x8c>)
 8001bee:	2180      	movs	r1, #128	@ 0x80
 8001bf0:	0109      	lsls	r1, r1, #4
 8001bf2:	430a      	orrs	r2, r1
 8001bf4:	641a      	str	r2, [r3, #64]	@ 0x40
 8001bf6:	4b0f      	ldr	r3, [pc, #60]	@ (8001c34 <HAL_TIM_PWM_MspInit+0x8c>)
 8001bf8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001bfa:	2380      	movs	r3, #128	@ 0x80
 8001bfc:	011b      	lsls	r3, r3, #4
 8001bfe:	4013      	ands	r3, r2
 8001c00:	613b      	str	r3, [r7, #16]
 8001c02:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001c04:	e010      	b.n	8001c28 <HAL_TIM_PWM_MspInit+0x80>
  else if(htim_pwm->Instance==TIM3)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4a0b      	ldr	r2, [pc, #44]	@ (8001c38 <HAL_TIM_PWM_MspInit+0x90>)
 8001c0c:	4293      	cmp	r3, r2
 8001c0e:	d10b      	bne.n	8001c28 <HAL_TIM_PWM_MspInit+0x80>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001c10:	4b08      	ldr	r3, [pc, #32]	@ (8001c34 <HAL_TIM_PWM_MspInit+0x8c>)
 8001c12:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001c14:	4b07      	ldr	r3, [pc, #28]	@ (8001c34 <HAL_TIM_PWM_MspInit+0x8c>)
 8001c16:	2102      	movs	r1, #2
 8001c18:	430a      	orrs	r2, r1
 8001c1a:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001c1c:	4b05      	ldr	r3, [pc, #20]	@ (8001c34 <HAL_TIM_PWM_MspInit+0x8c>)
 8001c1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c20:	2202      	movs	r2, #2
 8001c22:	4013      	ands	r3, r2
 8001c24:	60fb      	str	r3, [r7, #12]
 8001c26:	68fb      	ldr	r3, [r7, #12]
}
 8001c28:	46c0      	nop			@ (mov r8, r8)
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	b013      	add	sp, #76	@ 0x4c
 8001c2e:	bd90      	pop	{r4, r7, pc}
 8001c30:	40012c00 	.word	0x40012c00
 8001c34:	40021000 	.word	0x40021000
 8001c38:	40000400 	.word	0x40000400

08001c3c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001c3c:	b590      	push	{r4, r7, lr}
 8001c3e:	b08b      	sub	sp, #44	@ 0x2c
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c44:	2414      	movs	r4, #20
 8001c46:	193b      	adds	r3, r7, r4
 8001c48:	0018      	movs	r0, r3
 8001c4a:	2314      	movs	r3, #20
 8001c4c:	001a      	movs	r2, r3
 8001c4e:	2100      	movs	r1, #0
 8001c50:	f004 fa4a 	bl	80060e8 <memset>
  if(htim->Instance==TIM1)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4a28      	ldr	r2, [pc, #160]	@ (8001cfc <HAL_TIM_MspPostInit+0xc0>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d122      	bne.n	8001ca4 <HAL_TIM_MspPostInit+0x68>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c5e:	4b28      	ldr	r3, [pc, #160]	@ (8001d00 <HAL_TIM_MspPostInit+0xc4>)
 8001c60:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001c62:	4b27      	ldr	r3, [pc, #156]	@ (8001d00 <HAL_TIM_MspPostInit+0xc4>)
 8001c64:	2108      	movs	r1, #8
 8001c66:	430a      	orrs	r2, r1
 8001c68:	635a      	str	r2, [r3, #52]	@ 0x34
 8001c6a:	4b25      	ldr	r3, [pc, #148]	@ (8001d00 <HAL_TIM_MspPostInit+0xc4>)
 8001c6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c6e:	2208      	movs	r2, #8
 8001c70:	4013      	ands	r3, r2
 8001c72:	613b      	str	r3, [r7, #16]
 8001c74:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PD4     ------> TIM1_CH3N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001c76:	0021      	movs	r1, r4
 8001c78:	187b      	adds	r3, r7, r1
 8001c7a:	2210      	movs	r2, #16
 8001c7c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c7e:	187b      	adds	r3, r7, r1
 8001c80:	2202      	movs	r2, #2
 8001c82:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c84:	187b      	adds	r3, r7, r1
 8001c86:	2200      	movs	r2, #0
 8001c88:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c8a:	187b      	adds	r3, r7, r1
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8001c90:	187b      	adds	r3, r7, r1
 8001c92:	2202      	movs	r2, #2
 8001c94:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c96:	187b      	adds	r3, r7, r1
 8001c98:	4a1a      	ldr	r2, [pc, #104]	@ (8001d04 <HAL_TIM_MspPostInit+0xc8>)
 8001c9a:	0019      	movs	r1, r3
 8001c9c:	0010      	movs	r0, r2
 8001c9e:	f001 fae9 	bl	8003274 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001ca2:	e026      	b.n	8001cf2 <HAL_TIM_MspPostInit+0xb6>
  else if(htim->Instance==TIM3)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4a17      	ldr	r2, [pc, #92]	@ (8001d08 <HAL_TIM_MspPostInit+0xcc>)
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d121      	bne.n	8001cf2 <HAL_TIM_MspPostInit+0xb6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cae:	4b14      	ldr	r3, [pc, #80]	@ (8001d00 <HAL_TIM_MspPostInit+0xc4>)
 8001cb0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001cb2:	4b13      	ldr	r3, [pc, #76]	@ (8001d00 <HAL_TIM_MspPostInit+0xc4>)
 8001cb4:	2102      	movs	r1, #2
 8001cb6:	430a      	orrs	r2, r1
 8001cb8:	635a      	str	r2, [r3, #52]	@ 0x34
 8001cba:	4b11      	ldr	r3, [pc, #68]	@ (8001d00 <HAL_TIM_MspPostInit+0xc4>)
 8001cbc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001cbe:	2202      	movs	r2, #2
 8001cc0:	4013      	ands	r3, r2
 8001cc2:	60fb      	str	r3, [r7, #12]
 8001cc4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001cc6:	2114      	movs	r1, #20
 8001cc8:	187b      	adds	r3, r7, r1
 8001cca:	2201      	movs	r2, #1
 8001ccc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cce:	187b      	adds	r3, r7, r1
 8001cd0:	2202      	movs	r2, #2
 8001cd2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd4:	187b      	adds	r3, r7, r1
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cda:	187b      	adds	r3, r7, r1
 8001cdc:	2200      	movs	r2, #0
 8001cde:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8001ce0:	187b      	adds	r3, r7, r1
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ce6:	187b      	adds	r3, r7, r1
 8001ce8:	4a08      	ldr	r2, [pc, #32]	@ (8001d0c <HAL_TIM_MspPostInit+0xd0>)
 8001cea:	0019      	movs	r1, r3
 8001cec:	0010      	movs	r0, r2
 8001cee:	f001 fac1 	bl	8003274 <HAL_GPIO_Init>
}
 8001cf2:	46c0      	nop			@ (mov r8, r8)
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	b00b      	add	sp, #44	@ 0x2c
 8001cf8:	bd90      	pop	{r4, r7, pc}
 8001cfa:	46c0      	nop			@ (mov r8, r8)
 8001cfc:	40012c00 	.word	0x40012c00
 8001d00:	40021000 	.word	0x40021000
 8001d04:	50000c00 	.word	0x50000c00
 8001d08:	40000400 	.word	0x40000400
 8001d0c:	50000400 	.word	0x50000400

08001d10 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d10:	b590      	push	{r4, r7, lr}
 8001d12:	b097      	sub	sp, #92	@ 0x5c
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d18:	2344      	movs	r3, #68	@ 0x44
 8001d1a:	18fb      	adds	r3, r7, r3
 8001d1c:	0018      	movs	r0, r3
 8001d1e:	2314      	movs	r3, #20
 8001d20:	001a      	movs	r2, r3
 8001d22:	2100      	movs	r1, #0
 8001d24:	f004 f9e0 	bl	80060e8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001d28:	2410      	movs	r4, #16
 8001d2a:	193b      	adds	r3, r7, r4
 8001d2c:	0018      	movs	r0, r3
 8001d2e:	2334      	movs	r3, #52	@ 0x34
 8001d30:	001a      	movs	r2, r3
 8001d32:	2100      	movs	r1, #0
 8001d34:	f004 f9d8 	bl	80060e8 <memset>
  if(huart->Instance==USART1)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4a22      	ldr	r2, [pc, #136]	@ (8001dc8 <HAL_UART_MspInit+0xb8>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d13d      	bne.n	8001dbe <HAL_UART_MspInit+0xae>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001d42:	193b      	adds	r3, r7, r4
 8001d44:	2201      	movs	r2, #1
 8001d46:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8001d48:	193b      	adds	r3, r7, r4
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d4e:	193b      	adds	r3, r7, r4
 8001d50:	0018      	movs	r0, r3
 8001d52:	f002 f93d 	bl	8003fd0 <HAL_RCCEx_PeriphCLKConfig>
 8001d56:	1e03      	subs	r3, r0, #0
 8001d58:	d001      	beq.n	8001d5e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001d5a:	f7ff fe87 	bl	8001a6c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001d5e:	4b1b      	ldr	r3, [pc, #108]	@ (8001dcc <HAL_UART_MspInit+0xbc>)
 8001d60:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001d62:	4b1a      	ldr	r3, [pc, #104]	@ (8001dcc <HAL_UART_MspInit+0xbc>)
 8001d64:	2180      	movs	r1, #128	@ 0x80
 8001d66:	01c9      	lsls	r1, r1, #7
 8001d68:	430a      	orrs	r2, r1
 8001d6a:	641a      	str	r2, [r3, #64]	@ 0x40
 8001d6c:	4b17      	ldr	r3, [pc, #92]	@ (8001dcc <HAL_UART_MspInit+0xbc>)
 8001d6e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001d70:	2380      	movs	r3, #128	@ 0x80
 8001d72:	01db      	lsls	r3, r3, #7
 8001d74:	4013      	ands	r3, r2
 8001d76:	60fb      	str	r3, [r7, #12]
 8001d78:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d7a:	4b14      	ldr	r3, [pc, #80]	@ (8001dcc <HAL_UART_MspInit+0xbc>)
 8001d7c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001d7e:	4b13      	ldr	r3, [pc, #76]	@ (8001dcc <HAL_UART_MspInit+0xbc>)
 8001d80:	2104      	movs	r1, #4
 8001d82:	430a      	orrs	r2, r1
 8001d84:	635a      	str	r2, [r3, #52]	@ 0x34
 8001d86:	4b11      	ldr	r3, [pc, #68]	@ (8001dcc <HAL_UART_MspInit+0xbc>)
 8001d88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d8a:	2204      	movs	r2, #4
 8001d8c:	4013      	ands	r3, r2
 8001d8e:	60bb      	str	r3, [r7, #8]
 8001d90:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001d92:	2144      	movs	r1, #68	@ 0x44
 8001d94:	187b      	adds	r3, r7, r1
 8001d96:	2230      	movs	r2, #48	@ 0x30
 8001d98:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d9a:	187b      	adds	r3, r7, r1
 8001d9c:	2202      	movs	r2, #2
 8001d9e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da0:	187b      	adds	r3, r7, r1
 8001da2:	2200      	movs	r2, #0
 8001da4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001da6:	187b      	adds	r3, r7, r1
 8001da8:	2200      	movs	r2, #0
 8001daa:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8001dac:	187b      	adds	r3, r7, r1
 8001dae:	2201      	movs	r2, #1
 8001db0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001db2:	187b      	adds	r3, r7, r1
 8001db4:	4a06      	ldr	r2, [pc, #24]	@ (8001dd0 <HAL_UART_MspInit+0xc0>)
 8001db6:	0019      	movs	r1, r3
 8001db8:	0010      	movs	r0, r2
 8001dba:	f001 fa5b 	bl	8003274 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8001dbe:	46c0      	nop			@ (mov r8, r8)
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	b017      	add	sp, #92	@ 0x5c
 8001dc4:	bd90      	pop	{r4, r7, pc}
 8001dc6:	46c0      	nop			@ (mov r8, r8)
 8001dc8:	40013800 	.word	0x40013800
 8001dcc:	40021000 	.word	0x40021000
 8001dd0:	50000800 	.word	0x50000800

08001dd4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001dd8:	46c0      	nop			@ (mov r8, r8)
 8001dda:	e7fd      	b.n	8001dd8 <NMI_Handler+0x4>

08001ddc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001de0:	46c0      	nop			@ (mov r8, r8)
 8001de2:	e7fd      	b.n	8001de0 <HardFault_Handler+0x4>

08001de4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001de8:	46c0      	nop			@ (mov r8, r8)
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}

08001dee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001dee:	b580      	push	{r7, lr}
 8001df0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001df2:	46c0      	nop			@ (mov r8, r8)
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bd80      	pop	{r7, pc}

08001df8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001dfc:	f000 f89c 	bl	8001f38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e00:	46c0      	nop			@ (mov r8, r8)
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}

08001e06 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e06:	b580      	push	{r7, lr}
 8001e08:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e0a:	46c0      	nop			@ (mov r8, r8)
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bd80      	pop	{r7, pc}

08001e10 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001e10:	480d      	ldr	r0, [pc, #52]	@ (8001e48 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001e12:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001e14:	f7ff fff7 	bl	8001e06 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e18:	480c      	ldr	r0, [pc, #48]	@ (8001e4c <LoopForever+0x6>)
  ldr r1, =_edata
 8001e1a:	490d      	ldr	r1, [pc, #52]	@ (8001e50 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001e1c:	4a0d      	ldr	r2, [pc, #52]	@ (8001e54 <LoopForever+0xe>)
  movs r3, #0
 8001e1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e20:	e002      	b.n	8001e28 <LoopCopyDataInit>

08001e22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e26:	3304      	adds	r3, #4

08001e28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e2c:	d3f9      	bcc.n	8001e22 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e2e:	4a0a      	ldr	r2, [pc, #40]	@ (8001e58 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001e30:	4c0a      	ldr	r4, [pc, #40]	@ (8001e5c <LoopForever+0x16>)
  movs r3, #0
 8001e32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e34:	e001      	b.n	8001e3a <LoopFillZerobss>

08001e36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e38:	3204      	adds	r2, #4

08001e3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e3c:	d3fb      	bcc.n	8001e36 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001e3e:	f004 f95b 	bl	80060f8 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8001e42:	f7ff fb11 	bl	8001468 <main>

08001e46 <LoopForever>:

LoopForever:
  b LoopForever
 8001e46:	e7fe      	b.n	8001e46 <LoopForever>
  ldr   r0, =_estack
 8001e48:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8001e4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e50:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001e54:	080062c0 	.word	0x080062c0
  ldr r2, =_sbss
 8001e58:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001e5c:	200001d4 	.word	0x200001d4

08001e60 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001e60:	e7fe      	b.n	8001e60 <ADC1_COMP_IRQHandler>
	...

08001e64 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b082      	sub	sp, #8
 8001e68:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001e6a:	1dfb      	adds	r3, r7, #7
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e70:	4b0b      	ldr	r3, [pc, #44]	@ (8001ea0 <HAL_Init+0x3c>)
 8001e72:	681a      	ldr	r2, [r3, #0]
 8001e74:	4b0a      	ldr	r3, [pc, #40]	@ (8001ea0 <HAL_Init+0x3c>)
 8001e76:	2180      	movs	r1, #128	@ 0x80
 8001e78:	0049      	lsls	r1, r1, #1
 8001e7a:	430a      	orrs	r2, r1
 8001e7c:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001e7e:	2003      	movs	r0, #3
 8001e80:	f000 f810 	bl	8001ea4 <HAL_InitTick>
 8001e84:	1e03      	subs	r3, r0, #0
 8001e86:	d003      	beq.n	8001e90 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001e88:	1dfb      	adds	r3, r7, #7
 8001e8a:	2201      	movs	r2, #1
 8001e8c:	701a      	strb	r2, [r3, #0]
 8001e8e:	e001      	b.n	8001e94 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8001e90:	f7ff fe22 	bl	8001ad8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001e94:	1dfb      	adds	r3, r7, #7
 8001e96:	781b      	ldrb	r3, [r3, #0]
}
 8001e98:	0018      	movs	r0, r3
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	b002      	add	sp, #8
 8001e9e:	bd80      	pop	{r7, pc}
 8001ea0:	40022000 	.word	0x40022000

08001ea4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ea4:	b590      	push	{r4, r7, lr}
 8001ea6:	b085      	sub	sp, #20
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001eac:	230f      	movs	r3, #15
 8001eae:	18fb      	adds	r3, r7, r3
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8001eb4:	4b1d      	ldr	r3, [pc, #116]	@ (8001f2c <HAL_InitTick+0x88>)
 8001eb6:	781b      	ldrb	r3, [r3, #0]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d02b      	beq.n	8001f14 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8001ebc:	4b1c      	ldr	r3, [pc, #112]	@ (8001f30 <HAL_InitTick+0x8c>)
 8001ebe:	681c      	ldr	r4, [r3, #0]
 8001ec0:	4b1a      	ldr	r3, [pc, #104]	@ (8001f2c <HAL_InitTick+0x88>)
 8001ec2:	781b      	ldrb	r3, [r3, #0]
 8001ec4:	0019      	movs	r1, r3
 8001ec6:	23fa      	movs	r3, #250	@ 0xfa
 8001ec8:	0098      	lsls	r0, r3, #2
 8001eca:	f7fe f91b 	bl	8000104 <__udivsi3>
 8001ece:	0003      	movs	r3, r0
 8001ed0:	0019      	movs	r1, r3
 8001ed2:	0020      	movs	r0, r4
 8001ed4:	f7fe f916 	bl	8000104 <__udivsi3>
 8001ed8:	0003      	movs	r3, r0
 8001eda:	0018      	movs	r0, r3
 8001edc:	f001 f9bd 	bl	800325a <HAL_SYSTICK_Config>
 8001ee0:	1e03      	subs	r3, r0, #0
 8001ee2:	d112      	bne.n	8001f0a <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2b03      	cmp	r3, #3
 8001ee8:	d80a      	bhi.n	8001f00 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001eea:	6879      	ldr	r1, [r7, #4]
 8001eec:	2301      	movs	r3, #1
 8001eee:	425b      	negs	r3, r3
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	0018      	movs	r0, r3
 8001ef4:	f001 f99c 	bl	8003230 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001ef8:	4b0e      	ldr	r3, [pc, #56]	@ (8001f34 <HAL_InitTick+0x90>)
 8001efa:	687a      	ldr	r2, [r7, #4]
 8001efc:	601a      	str	r2, [r3, #0]
 8001efe:	e00d      	b.n	8001f1c <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001f00:	230f      	movs	r3, #15
 8001f02:	18fb      	adds	r3, r7, r3
 8001f04:	2201      	movs	r2, #1
 8001f06:	701a      	strb	r2, [r3, #0]
 8001f08:	e008      	b.n	8001f1c <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001f0a:	230f      	movs	r3, #15
 8001f0c:	18fb      	adds	r3, r7, r3
 8001f0e:	2201      	movs	r2, #1
 8001f10:	701a      	strb	r2, [r3, #0]
 8001f12:	e003      	b.n	8001f1c <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001f14:	230f      	movs	r3, #15
 8001f16:	18fb      	adds	r3, r7, r3
 8001f18:	2201      	movs	r2, #1
 8001f1a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001f1c:	230f      	movs	r3, #15
 8001f1e:	18fb      	adds	r3, r7, r3
 8001f20:	781b      	ldrb	r3, [r3, #0]
}
 8001f22:	0018      	movs	r0, r3
 8001f24:	46bd      	mov	sp, r7
 8001f26:	b005      	add	sp, #20
 8001f28:	bd90      	pop	{r4, r7, pc}
 8001f2a:	46c0      	nop			@ (mov r8, r8)
 8001f2c:	20000008 	.word	0x20000008
 8001f30:	20000000 	.word	0x20000000
 8001f34:	20000004 	.word	0x20000004

08001f38 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001f3c:	4b05      	ldr	r3, [pc, #20]	@ (8001f54 <HAL_IncTick+0x1c>)
 8001f3e:	781b      	ldrb	r3, [r3, #0]
 8001f40:	001a      	movs	r2, r3
 8001f42:	4b05      	ldr	r3, [pc, #20]	@ (8001f58 <HAL_IncTick+0x20>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	18d2      	adds	r2, r2, r3
 8001f48:	4b03      	ldr	r3, [pc, #12]	@ (8001f58 <HAL_IncTick+0x20>)
 8001f4a:	601a      	str	r2, [r3, #0]
}
 8001f4c:	46c0      	nop			@ (mov r8, r8)
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}
 8001f52:	46c0      	nop			@ (mov r8, r8)
 8001f54:	20000008 	.word	0x20000008
 8001f58:	200001d0 	.word	0x200001d0

08001f5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	af00      	add	r7, sp, #0
  return uwTick;
 8001f60:	4b02      	ldr	r3, [pc, #8]	@ (8001f6c <HAL_GetTick+0x10>)
 8001f62:	681b      	ldr	r3, [r3, #0]
}
 8001f64:	0018      	movs	r0, r3
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}
 8001f6a:	46c0      	nop			@ (mov r8, r8)
 8001f6c:	200001d0 	.word	0x200001d0

08001f70 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b082      	sub	sp, #8
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
 8001f78:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4a05      	ldr	r2, [pc, #20]	@ (8001f94 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8001f80:	401a      	ands	r2, r3
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	431a      	orrs	r2, r3
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	601a      	str	r2, [r3, #0]
}
 8001f8a:	46c0      	nop			@ (mov r8, r8)
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	b002      	add	sp, #8
 8001f90:	bd80      	pop	{r7, pc}
 8001f92:	46c0      	nop			@ (mov r8, r8)
 8001f94:	fe3fffff 	.word	0xfe3fffff

08001f98 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b082      	sub	sp, #8
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681a      	ldr	r2, [r3, #0]
 8001fa4:	23e0      	movs	r3, #224	@ 0xe0
 8001fa6:	045b      	lsls	r3, r3, #17
 8001fa8:	4013      	ands	r3, r2
}
 8001faa:	0018      	movs	r0, r3
 8001fac:	46bd      	mov	sp, r7
 8001fae:	b002      	add	sp, #8
 8001fb0:	bd80      	pop	{r7, pc}

08001fb2 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8001fb2:	b580      	push	{r7, lr}
 8001fb4:	b084      	sub	sp, #16
 8001fb6:	af00      	add	r7, sp, #0
 8001fb8:	60f8      	str	r0, [r7, #12]
 8001fba:	60b9      	str	r1, [r7, #8]
 8001fbc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	695b      	ldr	r3, [r3, #20]
 8001fc2:	68ba      	ldr	r2, [r7, #8]
 8001fc4:	2104      	movs	r1, #4
 8001fc6:	400a      	ands	r2, r1
 8001fc8:	2107      	movs	r1, #7
 8001fca:	4091      	lsls	r1, r2
 8001fcc:	000a      	movs	r2, r1
 8001fce:	43d2      	mvns	r2, r2
 8001fd0:	401a      	ands	r2, r3
 8001fd2:	68bb      	ldr	r3, [r7, #8]
 8001fd4:	2104      	movs	r1, #4
 8001fd6:	400b      	ands	r3, r1
 8001fd8:	6879      	ldr	r1, [r7, #4]
 8001fda:	4099      	lsls	r1, r3
 8001fdc:	000b      	movs	r3, r1
 8001fde:	431a      	orrs	r2, r3
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8001fe4:	46c0      	nop			@ (mov r8, r8)
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	b004      	add	sp, #16
 8001fea:	bd80      	pop	{r7, pc}

08001fec <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(const ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b082      	sub	sp, #8
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
 8001ff4:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	695b      	ldr	r3, [r3, #20]
 8001ffa:	683a      	ldr	r2, [r7, #0]
 8001ffc:	2104      	movs	r1, #4
 8001ffe:	400a      	ands	r2, r1
 8002000:	2107      	movs	r1, #7
 8002002:	4091      	lsls	r1, r2
 8002004:	000a      	movs	r2, r1
 8002006:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	2104      	movs	r1, #4
 800200c:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 800200e:	40da      	lsrs	r2, r3
 8002010:	0013      	movs	r3, r2
}
 8002012:	0018      	movs	r0, r3
 8002014:	46bd      	mov	sp, r7
 8002016:	b002      	add	sp, #8
 8002018:	bd80      	pop	{r7, pc}

0800201a <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800201a:	b580      	push	{r7, lr}
 800201c:	b082      	sub	sp, #8
 800201e:	af00      	add	r7, sp, #0
 8002020:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	68da      	ldr	r2, [r3, #12]
 8002026:	23c0      	movs	r3, #192	@ 0xc0
 8002028:	011b      	lsls	r3, r3, #4
 800202a:	4013      	ands	r3, r2
 800202c:	d101      	bne.n	8002032 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800202e:	2301      	movs	r3, #1
 8002030:	e000      	b.n	8002034 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002032:	2300      	movs	r3, #0
}
 8002034:	0018      	movs	r0, r3
 8002036:	46bd      	mov	sp, r7
 8002038:	b002      	add	sp, #8
 800203a:	bd80      	pop	{r7, pc}

0800203c <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b084      	sub	sp, #16
 8002040:	af00      	add	r7, sp, #0
 8002042:	60f8      	str	r0, [r7, #12]
 8002044:	60b9      	str	r1, [r7, #8]
 8002046:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800204c:	68ba      	ldr	r2, [r7, #8]
 800204e:	211f      	movs	r1, #31
 8002050:	400a      	ands	r2, r1
 8002052:	210f      	movs	r1, #15
 8002054:	4091      	lsls	r1, r2
 8002056:	000a      	movs	r2, r1
 8002058:	43d2      	mvns	r2, r2
 800205a:	401a      	ands	r2, r3
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	0e9b      	lsrs	r3, r3, #26
 8002060:	210f      	movs	r1, #15
 8002062:	4019      	ands	r1, r3
 8002064:	68bb      	ldr	r3, [r7, #8]
 8002066:	201f      	movs	r0, #31
 8002068:	4003      	ands	r3, r0
 800206a:	4099      	lsls	r1, r3
 800206c:	000b      	movs	r3, r1
 800206e:	431a      	orrs	r2, r3
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002074:	46c0      	nop			@ (mov r8, r8)
 8002076:	46bd      	mov	sp, r7
 8002078:	b004      	add	sp, #16
 800207a:	bd80      	pop	{r7, pc}

0800207c <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b082      	sub	sp, #8
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
 8002084:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	035b      	lsls	r3, r3, #13
 800208e:	0b5b      	lsrs	r3, r3, #13
 8002090:	431a      	orrs	r2, r3
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002096:	46c0      	nop			@ (mov r8, r8)
 8002098:	46bd      	mov	sp, r7
 800209a:	b002      	add	sp, #8
 800209c:	bd80      	pop	{r7, pc}

0800209e <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 800209e:	b580      	push	{r7, lr}
 80020a0:	b082      	sub	sp, #8
 80020a2:	af00      	add	r7, sp, #0
 80020a4:	6078      	str	r0, [r7, #4]
 80020a6:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020ac:	683a      	ldr	r2, [r7, #0]
 80020ae:	0352      	lsls	r2, r2, #13
 80020b0:	0b52      	lsrs	r2, r2, #13
 80020b2:	43d2      	mvns	r2, r2
 80020b4:	401a      	ands	r2, r3
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80020ba:	46c0      	nop			@ (mov r8, r8)
 80020bc:	46bd      	mov	sp, r7
 80020be:	b002      	add	sp, #8
 80020c0:	bd80      	pop	{r7, pc}
	...

080020c4 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b084      	sub	sp, #16
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	60f8      	str	r0, [r7, #12]
 80020cc:	60b9      	str	r1, [r7, #8]
 80020ce:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	695b      	ldr	r3, [r3, #20]
 80020d4:	68ba      	ldr	r2, [r7, #8]
 80020d6:	0212      	lsls	r2, r2, #8
 80020d8:	43d2      	mvns	r2, r2
 80020da:	401a      	ands	r2, r3
 80020dc:	68bb      	ldr	r3, [r7, #8]
 80020de:	021b      	lsls	r3, r3, #8
 80020e0:	6879      	ldr	r1, [r7, #4]
 80020e2:	400b      	ands	r3, r1
 80020e4:	4904      	ldr	r1, [pc, #16]	@ (80020f8 <LL_ADC_SetChannelSamplingTime+0x34>)
 80020e6:	400b      	ands	r3, r1
 80020e8:	431a      	orrs	r2, r3
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 80020ee:	46c0      	nop			@ (mov r8, r8)
 80020f0:	46bd      	mov	sp, r7
 80020f2:	b004      	add	sp, #16
 80020f4:	bd80      	pop	{r7, pc}
 80020f6:	46c0      	nop			@ (mov r8, r8)
 80020f8:	07ffff00 	.word	0x07ffff00

080020fc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b082      	sub	sp, #8
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	689b      	ldr	r3, [r3, #8]
 8002108:	4a05      	ldr	r2, [pc, #20]	@ (8002120 <LL_ADC_EnableInternalRegulator+0x24>)
 800210a:	4013      	ands	r3, r2
 800210c:	2280      	movs	r2, #128	@ 0x80
 800210e:	0552      	lsls	r2, r2, #21
 8002110:	431a      	orrs	r2, r3
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002116:	46c0      	nop			@ (mov r8, r8)
 8002118:	46bd      	mov	sp, r7
 800211a:	b002      	add	sp, #8
 800211c:	bd80      	pop	{r7, pc}
 800211e:	46c0      	nop			@ (mov r8, r8)
 8002120:	6fffffe8 	.word	0x6fffffe8

08002124 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b082      	sub	sp, #8
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	689a      	ldr	r2, [r3, #8]
 8002130:	2380      	movs	r3, #128	@ 0x80
 8002132:	055b      	lsls	r3, r3, #21
 8002134:	401a      	ands	r2, r3
 8002136:	2380      	movs	r3, #128	@ 0x80
 8002138:	055b      	lsls	r3, r3, #21
 800213a:	429a      	cmp	r2, r3
 800213c:	d101      	bne.n	8002142 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 800213e:	2301      	movs	r3, #1
 8002140:	e000      	b.n	8002144 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8002142:	2300      	movs	r3, #0
}
 8002144:	0018      	movs	r0, r3
 8002146:	46bd      	mov	sp, r7
 8002148:	b002      	add	sp, #8
 800214a:	bd80      	pop	{r7, pc}

0800214c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b082      	sub	sp, #8
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	689b      	ldr	r3, [r3, #8]
 8002158:	4a04      	ldr	r2, [pc, #16]	@ (800216c <LL_ADC_Enable+0x20>)
 800215a:	4013      	ands	r3, r2
 800215c:	2201      	movs	r2, #1
 800215e:	431a      	orrs	r2, r3
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002164:	46c0      	nop			@ (mov r8, r8)
 8002166:	46bd      	mov	sp, r7
 8002168:	b002      	add	sp, #8
 800216a:	bd80      	pop	{r7, pc}
 800216c:	7fffffe8 	.word	0x7fffffe8

08002170 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b082      	sub	sp, #8
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	689b      	ldr	r3, [r3, #8]
 800217c:	4a04      	ldr	r2, [pc, #16]	@ (8002190 <LL_ADC_Disable+0x20>)
 800217e:	4013      	ands	r3, r2
 8002180:	2202      	movs	r2, #2
 8002182:	431a      	orrs	r2, r3
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002188:	46c0      	nop			@ (mov r8, r8)
 800218a:	46bd      	mov	sp, r7
 800218c:	b002      	add	sp, #8
 800218e:	bd80      	pop	{r7, pc}
 8002190:	7fffffe8 	.word	0x7fffffe8

08002194 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b082      	sub	sp, #8
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	689b      	ldr	r3, [r3, #8]
 80021a0:	2201      	movs	r2, #1
 80021a2:	4013      	ands	r3, r2
 80021a4:	2b01      	cmp	r3, #1
 80021a6:	d101      	bne.n	80021ac <LL_ADC_IsEnabled+0x18>
 80021a8:	2301      	movs	r3, #1
 80021aa:	e000      	b.n	80021ae <LL_ADC_IsEnabled+0x1a>
 80021ac:	2300      	movs	r3, #0
}
 80021ae:	0018      	movs	r0, r3
 80021b0:	46bd      	mov	sp, r7
 80021b2:	b002      	add	sp, #8
 80021b4:	bd80      	pop	{r7, pc}

080021b6 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 80021b6:	b580      	push	{r7, lr}
 80021b8:	b082      	sub	sp, #8
 80021ba:	af00      	add	r7, sp, #0
 80021bc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	689b      	ldr	r3, [r3, #8]
 80021c2:	2202      	movs	r2, #2
 80021c4:	4013      	ands	r3, r2
 80021c6:	2b02      	cmp	r3, #2
 80021c8:	d101      	bne.n	80021ce <LL_ADC_IsDisableOngoing+0x18>
 80021ca:	2301      	movs	r3, #1
 80021cc:	e000      	b.n	80021d0 <LL_ADC_IsDisableOngoing+0x1a>
 80021ce:	2300      	movs	r3, #0
}
 80021d0:	0018      	movs	r0, r3
 80021d2:	46bd      	mov	sp, r7
 80021d4:	b002      	add	sp, #8
 80021d6:	bd80      	pop	{r7, pc}

080021d8 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b082      	sub	sp, #8
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	689b      	ldr	r3, [r3, #8]
 80021e4:	4a04      	ldr	r2, [pc, #16]	@ (80021f8 <LL_ADC_REG_StartConversion+0x20>)
 80021e6:	4013      	ands	r3, r2
 80021e8:	2204      	movs	r2, #4
 80021ea:	431a      	orrs	r2, r3
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80021f0:	46c0      	nop			@ (mov r8, r8)
 80021f2:	46bd      	mov	sp, r7
 80021f4:	b002      	add	sp, #8
 80021f6:	bd80      	pop	{r7, pc}
 80021f8:	7fffffe8 	.word	0x7fffffe8

080021fc <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b082      	sub	sp, #8
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	689b      	ldr	r3, [r3, #8]
 8002208:	4a04      	ldr	r2, [pc, #16]	@ (800221c <LL_ADC_REG_StopConversion+0x20>)
 800220a:	4013      	ands	r3, r2
 800220c:	2210      	movs	r2, #16
 800220e:	431a      	orrs	r2, r3
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8002214:	46c0      	nop			@ (mov r8, r8)
 8002216:	46bd      	mov	sp, r7
 8002218:	b002      	add	sp, #8
 800221a:	bd80      	pop	{r7, pc}
 800221c:	7fffffe8 	.word	0x7fffffe8

08002220 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b082      	sub	sp, #8
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	689b      	ldr	r3, [r3, #8]
 800222c:	2204      	movs	r2, #4
 800222e:	4013      	ands	r3, r2
 8002230:	2b04      	cmp	r3, #4
 8002232:	d101      	bne.n	8002238 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002234:	2301      	movs	r3, #1
 8002236:	e000      	b.n	800223a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002238:	2300      	movs	r3, #0
}
 800223a:	0018      	movs	r0, r3
 800223c:	46bd      	mov	sp, r7
 800223e:	b002      	add	sp, #8
 8002240:	bd80      	pop	{r7, pc}
	...

08002244 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b088      	sub	sp, #32
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800224c:	231f      	movs	r3, #31
 800224e:	18fb      	adds	r3, r7, r3
 8002250:	2200      	movs	r2, #0
 8002252:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_cfgr1 = 0UL;
 8002254:	2300      	movs	r3, #0
 8002256:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr2 = 0UL;
 8002258:	2300      	movs	r3, #0
 800225a:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800225c:	2300      	movs	r3, #0
 800225e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d101      	bne.n	800226a <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8002266:	2301      	movs	r3, #1
 8002268:	e17f      	b.n	800256a <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800226e:	2b00      	cmp	r3, #0
 8002270:	d10a      	bne.n	8002288 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	0018      	movs	r0, r3
 8002276:	f7ff fc53 	bl	8001b20 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2200      	movs	r2, #0
 800227e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2254      	movs	r2, #84	@ 0x54
 8002284:	2100      	movs	r1, #0
 8002286:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	0018      	movs	r0, r3
 800228e:	f7ff ff49 	bl	8002124 <LL_ADC_IsInternalRegulatorEnabled>
 8002292:	1e03      	subs	r3, r0, #0
 8002294:	d115      	bne.n	80022c2 <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	0018      	movs	r0, r3
 800229c:	f7ff ff2e 	bl	80020fc <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80022a0:	4bb4      	ldr	r3, [pc, #720]	@ (8002574 <HAL_ADC_Init+0x330>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	49b4      	ldr	r1, [pc, #720]	@ (8002578 <HAL_ADC_Init+0x334>)
 80022a6:	0018      	movs	r0, r3
 80022a8:	f7fd ff2c 	bl	8000104 <__udivsi3>
 80022ac:	0003      	movs	r3, r0
 80022ae:	3301      	adds	r3, #1
 80022b0:	005b      	lsls	r3, r3, #1
 80022b2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80022b4:	e002      	b.n	80022bc <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	3b01      	subs	r3, #1
 80022ba:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d1f9      	bne.n	80022b6 <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	0018      	movs	r0, r3
 80022c8:	f7ff ff2c 	bl	8002124 <LL_ADC_IsInternalRegulatorEnabled>
 80022cc:	1e03      	subs	r3, r0, #0
 80022ce:	d10f      	bne.n	80022f0 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022d4:	2210      	movs	r2, #16
 80022d6:	431a      	orrs	r2, r3
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022e0:	2201      	movs	r2, #1
 80022e2:	431a      	orrs	r2, r3
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80022e8:	231f      	movs	r3, #31
 80022ea:	18fb      	adds	r3, r7, r3
 80022ec:	2201      	movs	r2, #1
 80022ee:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	0018      	movs	r0, r3
 80022f6:	f7ff ff93 	bl	8002220 <LL_ADC_REG_IsConversionOngoing>
 80022fa:	0003      	movs	r3, r0
 80022fc:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002302:	2210      	movs	r2, #16
 8002304:	4013      	ands	r3, r2
 8002306:	d000      	beq.n	800230a <HAL_ADC_Init+0xc6>
 8002308:	e122      	b.n	8002550 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800230a:	693b      	ldr	r3, [r7, #16]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d000      	beq.n	8002312 <HAL_ADC_Init+0xce>
 8002310:	e11e      	b.n	8002550 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002316:	4a99      	ldr	r2, [pc, #612]	@ (800257c <HAL_ADC_Init+0x338>)
 8002318:	4013      	ands	r3, r2
 800231a:	2202      	movs	r2, #2
 800231c:	431a      	orrs	r2, r3
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	0018      	movs	r0, r3
 8002328:	f7ff ff34 	bl	8002194 <LL_ADC_IsEnabled>
 800232c:	1e03      	subs	r3, r0, #0
 800232e:	d000      	beq.n	8002332 <HAL_ADC_Init+0xee>
 8002330:	e0ad      	b.n	800248e <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	689a      	ldr	r2, [r3, #8]
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	7e1b      	ldrb	r3, [r3, #24]
 800233a:	039b      	lsls	r3, r3, #14
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 800233c:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	7e5b      	ldrb	r3, [r3, #25]
 8002342:	03db      	lsls	r3, r3, #15
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8002344:	431a      	orrs	r2, r3
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	7e9b      	ldrb	r3, [r3, #26]
 800234a:	035b      	lsls	r3, r3, #13
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800234c:	431a      	orrs	r2, r3
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002352:	2b00      	cmp	r3, #0
 8002354:	d002      	beq.n	800235c <HAL_ADC_Init+0x118>
 8002356:	2380      	movs	r3, #128	@ 0x80
 8002358:	015b      	lsls	r3, r3, #5
 800235a:	e000      	b.n	800235e <HAL_ADC_Init+0x11a>
 800235c:	2300      	movs	r3, #0
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800235e:	431a      	orrs	r2, r3
                    hadc->Init.DataAlign                                           |
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	68db      	ldr	r3, [r3, #12]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8002364:	431a      	orrs	r2, r3
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	691b      	ldr	r3, [r3, #16]
 800236a:	2b00      	cmp	r3, #0
 800236c:	da04      	bge.n	8002378 <HAL_ADC_Init+0x134>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	691b      	ldr	r3, [r3, #16]
 8002372:	005b      	lsls	r3, r3, #1
 8002374:	085b      	lsrs	r3, r3, #1
 8002376:	e001      	b.n	800237c <HAL_ADC_Init+0x138>
 8002378:	2380      	movs	r3, #128	@ 0x80
 800237a:	039b      	lsls	r3, r3, #14
                    hadc->Init.DataAlign                                           |
 800237c:	431a      	orrs	r2, r3
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	212c      	movs	r1, #44	@ 0x2c
 8002382:	5c5b      	ldrb	r3, [r3, r1]
 8002384:	005b      	lsls	r3, r3, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8002386:	4313      	orrs	r3, r2
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8002388:	69ba      	ldr	r2, [r7, #24]
 800238a:	4313      	orrs	r3, r2
 800238c:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2220      	movs	r2, #32
 8002392:	5c9b      	ldrb	r3, [r3, r2]
 8002394:	2b01      	cmp	r3, #1
 8002396:	d115      	bne.n	80023c4 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	7e9b      	ldrb	r3, [r3, #26]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d105      	bne.n	80023ac <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 80023a0:	69bb      	ldr	r3, [r7, #24]
 80023a2:	2280      	movs	r2, #128	@ 0x80
 80023a4:	0252      	lsls	r2, r2, #9
 80023a6:	4313      	orrs	r3, r2
 80023a8:	61bb      	str	r3, [r7, #24]
 80023aa:	e00b      	b.n	80023c4 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023b0:	2220      	movs	r2, #32
 80023b2:	431a      	orrs	r2, r3
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023bc:	2201      	movs	r2, #1
 80023be:	431a      	orrs	r2, r3
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d00a      	beq.n	80023e2 <HAL_ADC_Init+0x19e>
      {
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80023d0:	23e0      	movs	r3, #224	@ 0xe0
 80023d2:	005b      	lsls	r3, r3, #1
 80023d4:	401a      	ands	r2, r3
                      hadc->Init.ExternalTrigConvEdge);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80023da:	4313      	orrs	r3, r2
 80023dc:	69ba      	ldr	r2, [r7, #24]
 80023de:	4313      	orrs	r3, r2
 80023e0:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	68db      	ldr	r3, [r3, #12]
 80023e8:	4a65      	ldr	r2, [pc, #404]	@ (8002580 <HAL_ADC_Init+0x33c>)
 80023ea:	4013      	ands	r3, r2
 80023ec:	0019      	movs	r1, r3
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	69ba      	ldr	r2, [r7, #24]
 80023f4:	430a      	orrs	r2, r1
 80023f6:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN     |
                 ADC_CFGR1_SCANDIR   |
                 ADC_CFGR1_DMACFG,
                 tmp_cfgr1);

      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	0f9b      	lsrs	r3, r3, #30
 80023fe:	079a      	lsls	r2, r3, #30
                    hadc->Init.TriggerFrequencyMode
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002404:	4313      	orrs	r3, r2
 8002406:	697a      	ldr	r2, [r7, #20]
 8002408:	4313      	orrs	r3, r2
 800240a:	617b      	str	r3, [r7, #20]
                   );

      if (hadc->Init.OversamplingMode == ENABLE)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	223c      	movs	r2, #60	@ 0x3c
 8002410:	5c9b      	ldrb	r3, [r3, r2]
 8002412:	2b01      	cmp	r3, #1
 8002414:	d111      	bne.n	800243a <HAL_ADC_Init+0x1f6>
      {
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	0f9b      	lsrs	r3, r3, #30
 800241c:	079a      	lsls	r2, r3, #30
                      hadc->Init.Oversampling.Ratio         |
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002422:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.RightBitShift |
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                      hadc->Init.Oversampling.Ratio         |
 8002428:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.TriggeredMode
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                      hadc->Init.Oversampling.RightBitShift |
 800242e:	431a      	orrs	r2, r3
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 8002430:	697b      	ldr	r3, [r7, #20]
 8002432:	4313      	orrs	r3, r2
 8002434:	2201      	movs	r2, #1
 8002436:	4313      	orrs	r3, r2
 8002438:	617b      	str	r3, [r7, #20]
                     );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	691b      	ldr	r3, [r3, #16]
 8002440:	4a50      	ldr	r2, [pc, #320]	@ (8002584 <HAL_ADC_Init+0x340>)
 8002442:	4013      	ands	r3, r2
 8002444:	0019      	movs	r1, r3
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	697a      	ldr	r2, [r7, #20]
 800244c:	430a      	orrs	r2, r1
 800244e:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmp_cfgr2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	685a      	ldr	r2, [r3, #4]
 8002454:	23c0      	movs	r3, #192	@ 0xc0
 8002456:	061b      	lsls	r3, r3, #24
 8002458:	429a      	cmp	r2, r3
 800245a:	d018      	beq.n	800248e <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8002460:	2380      	movs	r3, #128	@ 0x80
 8002462:	05db      	lsls	r3, r3, #23
 8002464:	429a      	cmp	r2, r3
 8002466:	d012      	beq.n	800248e <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 800246c:	2380      	movs	r3, #128	@ 0x80
 800246e:	061b      	lsls	r3, r3, #24
 8002470:	429a      	cmp	r2, r3
 8002472:	d00c      	beq.n	800248e <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8002474:	4b44      	ldr	r3, [pc, #272]	@ (8002588 <HAL_ADC_Init+0x344>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4a44      	ldr	r2, [pc, #272]	@ (800258c <HAL_ADC_Init+0x348>)
 800247a:	4013      	ands	r3, r2
 800247c:	0019      	movs	r1, r3
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	685a      	ldr	r2, [r3, #4]
 8002482:	23f0      	movs	r3, #240	@ 0xf0
 8002484:	039b      	lsls	r3, r3, #14
 8002486:	401a      	ands	r2, r3
 8002488:	4b3f      	ldr	r3, [pc, #252]	@ (8002588 <HAL_ADC_Init+0x344>)
 800248a:	430a      	orrs	r2, r1
 800248c:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6818      	ldr	r0, [r3, #0]
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002496:	001a      	movs	r2, r3
 8002498:	2100      	movs	r1, #0
 800249a:	f7ff fd8a 	bl	8001fb2 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6818      	ldr	r0, [r3, #0]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024a6:	493a      	ldr	r1, [pc, #232]	@ (8002590 <HAL_ADC_Init+0x34c>)
 80024a8:	001a      	movs	r2, r3
 80024aa:	f7ff fd82 	bl	8001fb2 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	691b      	ldr	r3, [r3, #16]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d109      	bne.n	80024ca <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	2110      	movs	r1, #16
 80024c2:	4249      	negs	r1, r1
 80024c4:	430a      	orrs	r2, r1
 80024c6:	629a      	str	r2, [r3, #40]	@ 0x28
 80024c8:	e018      	b.n	80024fc <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	691a      	ldr	r2, [r3, #16]
 80024ce:	2380      	movs	r3, #128	@ 0x80
 80024d0:	039b      	lsls	r3, r3, #14
 80024d2:	429a      	cmp	r2, r3
 80024d4:	d112      	bne.n	80024fc <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	69db      	ldr	r3, [r3, #28]
 80024e0:	3b01      	subs	r3, #1
 80024e2:	009b      	lsls	r3, r3, #2
 80024e4:	221c      	movs	r2, #28
 80024e6:	4013      	ands	r3, r2
 80024e8:	2210      	movs	r2, #16
 80024ea:	4252      	negs	r2, r2
 80024ec:	409a      	lsls	r2, r3
 80024ee:	0011      	movs	r1, r2
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	430a      	orrs	r2, r1
 80024fa:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	2100      	movs	r1, #0
 8002502:	0018      	movs	r0, r3
 8002504:	f7ff fd72 	bl	8001fec <LL_ADC_GetSamplingTimeCommonChannels>
 8002508:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800250e:	429a      	cmp	r2, r3
 8002510:	d10b      	bne.n	800252a <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2200      	movs	r2, #0
 8002516:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800251c:	2203      	movs	r2, #3
 800251e:	4393      	bics	r3, r2
 8002520:	2201      	movs	r2, #1
 8002522:	431a      	orrs	r2, r3
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	659a      	str	r2, [r3, #88]	@ 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002528:	e01c      	b.n	8002564 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800252e:	2212      	movs	r2, #18
 8002530:	4393      	bics	r3, r2
 8002532:	2210      	movs	r2, #16
 8002534:	431a      	orrs	r2, r3
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800253e:	2201      	movs	r2, #1
 8002540:	431a      	orrs	r2, r3
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 8002546:	231f      	movs	r3, #31
 8002548:	18fb      	adds	r3, r7, r3
 800254a:	2201      	movs	r2, #1
 800254c:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800254e:	e009      	b.n	8002564 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002554:	2210      	movs	r2, #16
 8002556:	431a      	orrs	r2, r3
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800255c:	231f      	movs	r3, #31
 800255e:	18fb      	adds	r3, r7, r3
 8002560:	2201      	movs	r2, #1
 8002562:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8002564:	231f      	movs	r3, #31
 8002566:	18fb      	adds	r3, r7, r3
 8002568:	781b      	ldrb	r3, [r3, #0]
}
 800256a:	0018      	movs	r0, r3
 800256c:	46bd      	mov	sp, r7
 800256e:	b008      	add	sp, #32
 8002570:	bd80      	pop	{r7, pc}
 8002572:	46c0      	nop			@ (mov r8, r8)
 8002574:	20000000 	.word	0x20000000
 8002578:	00030d40 	.word	0x00030d40
 800257c:	fffffefd 	.word	0xfffffefd
 8002580:	ffde0201 	.word	0xffde0201
 8002584:	1ffffc02 	.word	0x1ffffc02
 8002588:	40012708 	.word	0x40012708
 800258c:	ffc3ffff 	.word	0xffc3ffff
 8002590:	07ffff04 	.word	0x07ffff04

08002594 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002594:	b5b0      	push	{r4, r5, r7, lr}
 8002596:	b084      	sub	sp, #16
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	0018      	movs	r0, r3
 80025a2:	f7ff fe3d 	bl	8002220 <LL_ADC_REG_IsConversionOngoing>
 80025a6:	1e03      	subs	r3, r0, #0
 80025a8:	d135      	bne.n	8002616 <HAL_ADC_Start+0x82>
  {
    __HAL_LOCK(hadc);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2254      	movs	r2, #84	@ 0x54
 80025ae:	5c9b      	ldrb	r3, [r3, r2]
 80025b0:	2b01      	cmp	r3, #1
 80025b2:	d101      	bne.n	80025b8 <HAL_ADC_Start+0x24>
 80025b4:	2302      	movs	r3, #2
 80025b6:	e035      	b.n	8002624 <HAL_ADC_Start+0x90>
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2254      	movs	r2, #84	@ 0x54
 80025bc:	2101      	movs	r1, #1
 80025be:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80025c0:	250f      	movs	r5, #15
 80025c2:	197c      	adds	r4, r7, r5
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	0018      	movs	r0, r3
 80025c8:	f000 fb28 	bl	8002c1c <ADC_Enable>
 80025cc:	0003      	movs	r3, r0
 80025ce:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80025d0:	197b      	adds	r3, r7, r5
 80025d2:	781b      	ldrb	r3, [r3, #0]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d119      	bne.n	800260c <HAL_ADC_Start+0x78>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025dc:	4a13      	ldr	r2, [pc, #76]	@ (800262c <HAL_ADC_Start+0x98>)
 80025de:	4013      	ands	r3, r2
 80025e0:	2280      	movs	r2, #128	@ 0x80
 80025e2:	0052      	lsls	r2, r2, #1
 80025e4:	431a      	orrs	r2, r3
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2200      	movs	r2, #0
 80025ee:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	221c      	movs	r2, #28
 80025f6:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2254      	movs	r2, #84	@ 0x54
 80025fc:	2100      	movs	r1, #0
 80025fe:	5499      	strb	r1, [r3, r2]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	0018      	movs	r0, r3
 8002606:	f7ff fde7 	bl	80021d8 <LL_ADC_REG_StartConversion>
 800260a:	e008      	b.n	800261e <HAL_ADC_Start+0x8a>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2254      	movs	r2, #84	@ 0x54
 8002610:	2100      	movs	r1, #0
 8002612:	5499      	strb	r1, [r3, r2]
 8002614:	e003      	b.n	800261e <HAL_ADC_Start+0x8a>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002616:	230f      	movs	r3, #15
 8002618:	18fb      	adds	r3, r7, r3
 800261a:	2202      	movs	r2, #2
 800261c:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 800261e:	230f      	movs	r3, #15
 8002620:	18fb      	adds	r3, r7, r3
 8002622:	781b      	ldrb	r3, [r3, #0]
}
 8002624:	0018      	movs	r0, r3
 8002626:	46bd      	mov	sp, r7
 8002628:	b004      	add	sp, #16
 800262a:	bdb0      	pop	{r4, r5, r7, pc}
 800262c:	fffff0fe 	.word	0xfffff0fe

08002630 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8002630:	b5b0      	push	{r4, r5, r7, lr}
 8002632:	b084      	sub	sp, #16
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2254      	movs	r2, #84	@ 0x54
 800263c:	5c9b      	ldrb	r3, [r3, r2]
 800263e:	2b01      	cmp	r3, #1
 8002640:	d101      	bne.n	8002646 <HAL_ADC_Stop+0x16>
 8002642:	2302      	movs	r3, #2
 8002644:	e029      	b.n	800269a <HAL_ADC_Stop+0x6a>
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2254      	movs	r2, #84	@ 0x54
 800264a:	2101      	movs	r1, #1
 800264c:	5499      	strb	r1, [r3, r2]

  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 800264e:	250f      	movs	r5, #15
 8002650:	197c      	adds	r4, r7, r5
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	0018      	movs	r0, r3
 8002656:	f000 fa9f 	bl	8002b98 <ADC_ConversionStop>
 800265a:	0003      	movs	r3, r0
 800265c:	7023      	strb	r3, [r4, #0]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800265e:	197b      	adds	r3, r7, r5
 8002660:	781b      	ldrb	r3, [r3, #0]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d112      	bne.n	800268c <HAL_ADC_Stop+0x5c>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8002666:	197c      	adds	r4, r7, r5
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	0018      	movs	r0, r3
 800266c:	f000 fb5c 	bl	8002d28 <ADC_Disable>
 8002670:	0003      	movs	r3, r0
 8002672:	7023      	strb	r3, [r4, #0]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8002674:	197b      	adds	r3, r7, r5
 8002676:	781b      	ldrb	r3, [r3, #0]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d107      	bne.n	800268c <HAL_ADC_Stop+0x5c>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002680:	4a08      	ldr	r2, [pc, #32]	@ (80026a4 <HAL_ADC_Stop+0x74>)
 8002682:	4013      	ands	r3, r2
 8002684:	2201      	movs	r2, #1
 8002686:	431a      	orrs	r2, r3
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_REG_BUSY,
                        HAL_ADC_STATE_READY);
    }
  }

  __HAL_UNLOCK(hadc);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2254      	movs	r2, #84	@ 0x54
 8002690:	2100      	movs	r1, #0
 8002692:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8002694:	230f      	movs	r3, #15
 8002696:	18fb      	adds	r3, r7, r3
 8002698:	781b      	ldrb	r3, [r3, #0]
}
 800269a:	0018      	movs	r0, r3
 800269c:	46bd      	mov	sp, r7
 800269e:	b004      	add	sp, #16
 80026a0:	bdb0      	pop	{r4, r5, r7, pc}
 80026a2:	46c0      	nop			@ (mov r8, r8)
 80026a4:	fffffefe 	.word	0xfffffefe

080026a8 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b084      	sub	sp, #16
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
 80026b0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	695b      	ldr	r3, [r3, #20]
 80026b6:	2b08      	cmp	r3, #8
 80026b8:	d102      	bne.n	80026c0 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 80026ba:	2308      	movs	r3, #8
 80026bc:	60fb      	str	r3, [r7, #12]
 80026be:	e00f      	b.n	80026e0 <HAL_ADC_PollForConversion+0x38>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	68db      	ldr	r3, [r3, #12]
 80026c6:	2201      	movs	r2, #1
 80026c8:	4013      	ands	r3, r2
 80026ca:	d007      	beq.n	80026dc <HAL_ADC_PollForConversion+0x34>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026d0:	2220      	movs	r2, #32
 80026d2:	431a      	orrs	r2, r3
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 80026d8:	2301      	movs	r3, #1
 80026da:	e072      	b.n	80027c2 <HAL_ADC_PollForConversion+0x11a>
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 80026dc:	2304      	movs	r3, #4
 80026de:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80026e0:	f7ff fc3c 	bl	8001f5c <HAL_GetTick>
 80026e4:	0003      	movs	r3, r0
 80026e6:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 80026e8:	e01f      	b.n	800272a <HAL_ADC_PollForConversion+0x82>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	3301      	adds	r3, #1
 80026ee:	d01c      	beq.n	800272a <HAL_ADC_PollForConversion+0x82>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80026f0:	f7ff fc34 	bl	8001f5c <HAL_GetTick>
 80026f4:	0002      	movs	r2, r0
 80026f6:	68bb      	ldr	r3, [r7, #8]
 80026f8:	1ad3      	subs	r3, r2, r3
 80026fa:	683a      	ldr	r2, [r7, #0]
 80026fc:	429a      	cmp	r2, r3
 80026fe:	d302      	bcc.n	8002706 <HAL_ADC_PollForConversion+0x5e>
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d111      	bne.n	800272a <HAL_ADC_PollForConversion+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	68fa      	ldr	r2, [r7, #12]
 800270e:	4013      	ands	r3, r2
 8002710:	d10b      	bne.n	800272a <HAL_ADC_PollForConversion+0x82>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002716:	2204      	movs	r2, #4
 8002718:	431a      	orrs	r2, r3
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	659a      	str	r2, [r3, #88]	@ 0x58

          __HAL_UNLOCK(hadc);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2254      	movs	r2, #84	@ 0x54
 8002722:	2100      	movs	r1, #0
 8002724:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002726:	2303      	movs	r3, #3
 8002728:	e04b      	b.n	80027c2 <HAL_ADC_PollForConversion+0x11a>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	68fa      	ldr	r2, [r7, #12]
 8002732:	4013      	ands	r3, r2
 8002734:	d0d9      	beq.n	80026ea <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800273a:	2280      	movs	r2, #128	@ 0x80
 800273c:	0092      	lsls	r2, r2, #2
 800273e:	431a      	orrs	r2, r3
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	0018      	movs	r0, r3
 800274a:	f7ff fc66 	bl	800201a <LL_ADC_REG_IsTriggerSourceSWStart>
 800274e:	1e03      	subs	r3, r0, #0
 8002750:	d02e      	beq.n	80027b0 <HAL_ADC_PollForConversion+0x108>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	7e9b      	ldrb	r3, [r3, #26]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d12a      	bne.n	80027b0 <HAL_ADC_PollForConversion+0x108>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	2208      	movs	r2, #8
 8002762:	4013      	ands	r3, r2
 8002764:	2b08      	cmp	r3, #8
 8002766:	d123      	bne.n	80027b0 <HAL_ADC_PollForConversion+0x108>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	0018      	movs	r0, r3
 800276e:	f7ff fd57 	bl	8002220 <LL_ADC_REG_IsConversionOngoing>
 8002772:	1e03      	subs	r3, r0, #0
 8002774:	d110      	bne.n	8002798 <HAL_ADC_PollForConversion+0xf0>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	685a      	ldr	r2, [r3, #4]
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	210c      	movs	r1, #12
 8002782:	438a      	bics	r2, r1
 8002784:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800278a:	4a10      	ldr	r2, [pc, #64]	@ (80027cc <HAL_ADC_PollForConversion+0x124>)
 800278c:	4013      	ands	r3, r2
 800278e:	2201      	movs	r2, #1
 8002790:	431a      	orrs	r2, r3
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	659a      	str	r2, [r3, #88]	@ 0x58
 8002796:	e00b      	b.n	80027b0 <HAL_ADC_PollForConversion+0x108>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800279c:	2220      	movs	r2, #32
 800279e:	431a      	orrs	r2, r3
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027a8:	2201      	movs	r2, #1
 80027aa:	431a      	orrs	r2, r3
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	7e1b      	ldrb	r3, [r3, #24]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d103      	bne.n	80027c0 <HAL_ADC_PollForConversion+0x118>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	220c      	movs	r2, #12
 80027be:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80027c0:	2300      	movs	r3, #0
}
 80027c2:	0018      	movs	r0, r3
 80027c4:	46bd      	mov	sp, r7
 80027c6:	b004      	add	sp, #16
 80027c8:	bd80      	pop	{r7, pc}
 80027ca:	46c0      	nop			@ (mov r8, r8)
 80027cc:	fffffefe 	.word	0xfffffefe

080027d0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b082      	sub	sp, #8
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 80027de:	0018      	movs	r0, r3
 80027e0:	46bd      	mov	sp, r7
 80027e2:	b002      	add	sp, #8
 80027e4:	bd80      	pop	{r7, pc}
	...

080027e8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b086      	sub	sp, #24
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
 80027f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80027f2:	2317      	movs	r3, #23
 80027f4:	18fb      	adds	r3, r7, r3
 80027f6:	2200      	movs	r2, #0
 80027f8:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80027fa:	2300      	movs	r3, #0
 80027fc:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2254      	movs	r2, #84	@ 0x54
 8002802:	5c9b      	ldrb	r3, [r3, r2]
 8002804:	2b01      	cmp	r3, #1
 8002806:	d101      	bne.n	800280c <HAL_ADC_ConfigChannel+0x24>
 8002808:	2302      	movs	r3, #2
 800280a:	e1c0      	b.n	8002b8e <HAL_ADC_ConfigChannel+0x3a6>
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2254      	movs	r2, #84	@ 0x54
 8002810:	2101      	movs	r1, #1
 8002812:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	0018      	movs	r0, r3
 800281a:	f7ff fd01 	bl	8002220 <LL_ADC_REG_IsConversionOngoing>
 800281e:	1e03      	subs	r3, r0, #0
 8002820:	d000      	beq.n	8002824 <HAL_ADC_ConfigChannel+0x3c>
 8002822:	e1a3      	b.n	8002b6c <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	2b02      	cmp	r3, #2
 800282a:	d100      	bne.n	800282e <HAL_ADC_ConfigChannel+0x46>
 800282c:	e143      	b.n	8002ab6 <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	691a      	ldr	r2, [r3, #16]
 8002832:	2380      	movs	r3, #128	@ 0x80
 8002834:	061b      	lsls	r3, r3, #24
 8002836:	429a      	cmp	r2, r3
 8002838:	d004      	beq.n	8002844 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800283e:	4ac1      	ldr	r2, [pc, #772]	@ (8002b44 <HAL_ADC_ConfigChannel+0x35c>)
 8002840:	4293      	cmp	r3, r2
 8002842:	d108      	bne.n	8002856 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681a      	ldr	r2, [r3, #0]
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	0019      	movs	r1, r3
 800284e:	0010      	movs	r0, r2
 8002850:	f7ff fc14 	bl	800207c <LL_ADC_REG_SetSequencerChAdd>
 8002854:	e0c9      	b.n	80029ea <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	211f      	movs	r1, #31
 8002860:	400b      	ands	r3, r1
 8002862:	210f      	movs	r1, #15
 8002864:	4099      	lsls	r1, r3
 8002866:	000b      	movs	r3, r1
 8002868:	43db      	mvns	r3, r3
 800286a:	4013      	ands	r3, r2
 800286c:	0019      	movs	r1, r3
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	035b      	lsls	r3, r3, #13
 8002874:	0b5b      	lsrs	r3, r3, #13
 8002876:	d105      	bne.n	8002884 <HAL_ADC_ConfigChannel+0x9c>
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	0e9b      	lsrs	r3, r3, #26
 800287e:	221f      	movs	r2, #31
 8002880:	4013      	ands	r3, r2
 8002882:	e098      	b.n	80029b6 <HAL_ADC_ConfigChannel+0x1ce>
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	2201      	movs	r2, #1
 800288a:	4013      	ands	r3, r2
 800288c:	d000      	beq.n	8002890 <HAL_ADC_ConfigChannel+0xa8>
 800288e:	e091      	b.n	80029b4 <HAL_ADC_ConfigChannel+0x1cc>
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	2202      	movs	r2, #2
 8002896:	4013      	ands	r3, r2
 8002898:	d000      	beq.n	800289c <HAL_ADC_ConfigChannel+0xb4>
 800289a:	e089      	b.n	80029b0 <HAL_ADC_ConfigChannel+0x1c8>
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	2204      	movs	r2, #4
 80028a2:	4013      	ands	r3, r2
 80028a4:	d000      	beq.n	80028a8 <HAL_ADC_ConfigChannel+0xc0>
 80028a6:	e081      	b.n	80029ac <HAL_ADC_ConfigChannel+0x1c4>
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	2208      	movs	r2, #8
 80028ae:	4013      	ands	r3, r2
 80028b0:	d000      	beq.n	80028b4 <HAL_ADC_ConfigChannel+0xcc>
 80028b2:	e079      	b.n	80029a8 <HAL_ADC_ConfigChannel+0x1c0>
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	2210      	movs	r2, #16
 80028ba:	4013      	ands	r3, r2
 80028bc:	d000      	beq.n	80028c0 <HAL_ADC_ConfigChannel+0xd8>
 80028be:	e071      	b.n	80029a4 <HAL_ADC_ConfigChannel+0x1bc>
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	2220      	movs	r2, #32
 80028c6:	4013      	ands	r3, r2
 80028c8:	d000      	beq.n	80028cc <HAL_ADC_ConfigChannel+0xe4>
 80028ca:	e069      	b.n	80029a0 <HAL_ADC_ConfigChannel+0x1b8>
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	2240      	movs	r2, #64	@ 0x40
 80028d2:	4013      	ands	r3, r2
 80028d4:	d000      	beq.n	80028d8 <HAL_ADC_ConfigChannel+0xf0>
 80028d6:	e061      	b.n	800299c <HAL_ADC_ConfigChannel+0x1b4>
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	2280      	movs	r2, #128	@ 0x80
 80028de:	4013      	ands	r3, r2
 80028e0:	d000      	beq.n	80028e4 <HAL_ADC_ConfigChannel+0xfc>
 80028e2:	e059      	b.n	8002998 <HAL_ADC_ConfigChannel+0x1b0>
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	681a      	ldr	r2, [r3, #0]
 80028e8:	2380      	movs	r3, #128	@ 0x80
 80028ea:	005b      	lsls	r3, r3, #1
 80028ec:	4013      	ands	r3, r2
 80028ee:	d151      	bne.n	8002994 <HAL_ADC_ConfigChannel+0x1ac>
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	681a      	ldr	r2, [r3, #0]
 80028f4:	2380      	movs	r3, #128	@ 0x80
 80028f6:	009b      	lsls	r3, r3, #2
 80028f8:	4013      	ands	r3, r2
 80028fa:	d149      	bne.n	8002990 <HAL_ADC_ConfigChannel+0x1a8>
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	681a      	ldr	r2, [r3, #0]
 8002900:	2380      	movs	r3, #128	@ 0x80
 8002902:	00db      	lsls	r3, r3, #3
 8002904:	4013      	ands	r3, r2
 8002906:	d141      	bne.n	800298c <HAL_ADC_ConfigChannel+0x1a4>
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	681a      	ldr	r2, [r3, #0]
 800290c:	2380      	movs	r3, #128	@ 0x80
 800290e:	011b      	lsls	r3, r3, #4
 8002910:	4013      	ands	r3, r2
 8002912:	d139      	bne.n	8002988 <HAL_ADC_ConfigChannel+0x1a0>
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	681a      	ldr	r2, [r3, #0]
 8002918:	2380      	movs	r3, #128	@ 0x80
 800291a:	015b      	lsls	r3, r3, #5
 800291c:	4013      	ands	r3, r2
 800291e:	d131      	bne.n	8002984 <HAL_ADC_ConfigChannel+0x19c>
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	681a      	ldr	r2, [r3, #0]
 8002924:	2380      	movs	r3, #128	@ 0x80
 8002926:	019b      	lsls	r3, r3, #6
 8002928:	4013      	ands	r3, r2
 800292a:	d129      	bne.n	8002980 <HAL_ADC_ConfigChannel+0x198>
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	681a      	ldr	r2, [r3, #0]
 8002930:	2380      	movs	r3, #128	@ 0x80
 8002932:	01db      	lsls	r3, r3, #7
 8002934:	4013      	ands	r3, r2
 8002936:	d121      	bne.n	800297c <HAL_ADC_ConfigChannel+0x194>
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	681a      	ldr	r2, [r3, #0]
 800293c:	2380      	movs	r3, #128	@ 0x80
 800293e:	021b      	lsls	r3, r3, #8
 8002940:	4013      	ands	r3, r2
 8002942:	d119      	bne.n	8002978 <HAL_ADC_ConfigChannel+0x190>
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	681a      	ldr	r2, [r3, #0]
 8002948:	2380      	movs	r3, #128	@ 0x80
 800294a:	025b      	lsls	r3, r3, #9
 800294c:	4013      	ands	r3, r2
 800294e:	d111      	bne.n	8002974 <HAL_ADC_ConfigChannel+0x18c>
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	681a      	ldr	r2, [r3, #0]
 8002954:	2380      	movs	r3, #128	@ 0x80
 8002956:	029b      	lsls	r3, r3, #10
 8002958:	4013      	ands	r3, r2
 800295a:	d109      	bne.n	8002970 <HAL_ADC_ConfigChannel+0x188>
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	681a      	ldr	r2, [r3, #0]
 8002960:	2380      	movs	r3, #128	@ 0x80
 8002962:	02db      	lsls	r3, r3, #11
 8002964:	4013      	ands	r3, r2
 8002966:	d001      	beq.n	800296c <HAL_ADC_ConfigChannel+0x184>
 8002968:	2312      	movs	r3, #18
 800296a:	e024      	b.n	80029b6 <HAL_ADC_ConfigChannel+0x1ce>
 800296c:	2300      	movs	r3, #0
 800296e:	e022      	b.n	80029b6 <HAL_ADC_ConfigChannel+0x1ce>
 8002970:	2311      	movs	r3, #17
 8002972:	e020      	b.n	80029b6 <HAL_ADC_ConfigChannel+0x1ce>
 8002974:	2310      	movs	r3, #16
 8002976:	e01e      	b.n	80029b6 <HAL_ADC_ConfigChannel+0x1ce>
 8002978:	230f      	movs	r3, #15
 800297a:	e01c      	b.n	80029b6 <HAL_ADC_ConfigChannel+0x1ce>
 800297c:	230e      	movs	r3, #14
 800297e:	e01a      	b.n	80029b6 <HAL_ADC_ConfigChannel+0x1ce>
 8002980:	230d      	movs	r3, #13
 8002982:	e018      	b.n	80029b6 <HAL_ADC_ConfigChannel+0x1ce>
 8002984:	230c      	movs	r3, #12
 8002986:	e016      	b.n	80029b6 <HAL_ADC_ConfigChannel+0x1ce>
 8002988:	230b      	movs	r3, #11
 800298a:	e014      	b.n	80029b6 <HAL_ADC_ConfigChannel+0x1ce>
 800298c:	230a      	movs	r3, #10
 800298e:	e012      	b.n	80029b6 <HAL_ADC_ConfigChannel+0x1ce>
 8002990:	2309      	movs	r3, #9
 8002992:	e010      	b.n	80029b6 <HAL_ADC_ConfigChannel+0x1ce>
 8002994:	2308      	movs	r3, #8
 8002996:	e00e      	b.n	80029b6 <HAL_ADC_ConfigChannel+0x1ce>
 8002998:	2307      	movs	r3, #7
 800299a:	e00c      	b.n	80029b6 <HAL_ADC_ConfigChannel+0x1ce>
 800299c:	2306      	movs	r3, #6
 800299e:	e00a      	b.n	80029b6 <HAL_ADC_ConfigChannel+0x1ce>
 80029a0:	2305      	movs	r3, #5
 80029a2:	e008      	b.n	80029b6 <HAL_ADC_ConfigChannel+0x1ce>
 80029a4:	2304      	movs	r3, #4
 80029a6:	e006      	b.n	80029b6 <HAL_ADC_ConfigChannel+0x1ce>
 80029a8:	2303      	movs	r3, #3
 80029aa:	e004      	b.n	80029b6 <HAL_ADC_ConfigChannel+0x1ce>
 80029ac:	2302      	movs	r3, #2
 80029ae:	e002      	b.n	80029b6 <HAL_ADC_ConfigChannel+0x1ce>
 80029b0:	2301      	movs	r3, #1
 80029b2:	e000      	b.n	80029b6 <HAL_ADC_ConfigChannel+0x1ce>
 80029b4:	2300      	movs	r3, #0
 80029b6:	683a      	ldr	r2, [r7, #0]
 80029b8:	6852      	ldr	r2, [r2, #4]
 80029ba:	201f      	movs	r0, #31
 80029bc:	4002      	ands	r2, r0
 80029be:	4093      	lsls	r3, r2
 80029c0:	000a      	movs	r2, r1
 80029c2:	431a      	orrs	r2, r3
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	089b      	lsrs	r3, r3, #2
 80029ce:	1c5a      	adds	r2, r3, #1
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	69db      	ldr	r3, [r3, #28]
 80029d4:	429a      	cmp	r2, r3
 80029d6:	d808      	bhi.n	80029ea <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6818      	ldr	r0, [r3, #0]
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	6859      	ldr	r1, [r3, #4]
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	001a      	movs	r2, r3
 80029e6:	f7ff fb29 	bl	800203c <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6818      	ldr	r0, [r3, #0]
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	6819      	ldr	r1, [r3, #0]
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	689b      	ldr	r3, [r3, #8]
 80029f6:	001a      	movs	r2, r3
 80029f8:	f7ff fb64 	bl	80020c4 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	db00      	blt.n	8002a06 <HAL_ADC_ConfigChannel+0x21e>
 8002a04:	e0bc      	b.n	8002b80 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002a06:	4b50      	ldr	r3, [pc, #320]	@ (8002b48 <HAL_ADC_ConfigChannel+0x360>)
 8002a08:	0018      	movs	r0, r3
 8002a0a:	f7ff fac5 	bl	8001f98 <LL_ADC_GetCommonPathInternalCh>
 8002a0e:	0003      	movs	r3, r0
 8002a10:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4a4d      	ldr	r2, [pc, #308]	@ (8002b4c <HAL_ADC_ConfigChannel+0x364>)
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d122      	bne.n	8002a62 <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002a1c:	693a      	ldr	r2, [r7, #16]
 8002a1e:	2380      	movs	r3, #128	@ 0x80
 8002a20:	041b      	lsls	r3, r3, #16
 8002a22:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002a24:	d11d      	bne.n	8002a62 <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002a26:	693b      	ldr	r3, [r7, #16]
 8002a28:	2280      	movs	r2, #128	@ 0x80
 8002a2a:	0412      	lsls	r2, r2, #16
 8002a2c:	4313      	orrs	r3, r2
 8002a2e:	4a46      	ldr	r2, [pc, #280]	@ (8002b48 <HAL_ADC_ConfigChannel+0x360>)
 8002a30:	0019      	movs	r1, r3
 8002a32:	0010      	movs	r0, r2
 8002a34:	f7ff fa9c 	bl	8001f70 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002a38:	4b45      	ldr	r3, [pc, #276]	@ (8002b50 <HAL_ADC_ConfigChannel+0x368>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4945      	ldr	r1, [pc, #276]	@ (8002b54 <HAL_ADC_ConfigChannel+0x36c>)
 8002a3e:	0018      	movs	r0, r3
 8002a40:	f7fd fb60 	bl	8000104 <__udivsi3>
 8002a44:	0003      	movs	r3, r0
 8002a46:	1c5a      	adds	r2, r3, #1
 8002a48:	0013      	movs	r3, r2
 8002a4a:	005b      	lsls	r3, r3, #1
 8002a4c:	189b      	adds	r3, r3, r2
 8002a4e:	009b      	lsls	r3, r3, #2
 8002a50:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002a52:	e002      	b.n	8002a5a <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	3b01      	subs	r3, #1
 8002a58:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d1f9      	bne.n	8002a54 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002a60:	e08e      	b.n	8002b80 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4a3c      	ldr	r2, [pc, #240]	@ (8002b58 <HAL_ADC_ConfigChannel+0x370>)
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d10e      	bne.n	8002a8a <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002a6c:	693a      	ldr	r2, [r7, #16]
 8002a6e:	2380      	movs	r3, #128	@ 0x80
 8002a70:	045b      	lsls	r3, r3, #17
 8002a72:	4013      	ands	r3, r2
 8002a74:	d109      	bne.n	8002a8a <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002a76:	693b      	ldr	r3, [r7, #16]
 8002a78:	2280      	movs	r2, #128	@ 0x80
 8002a7a:	0452      	lsls	r2, r2, #17
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	4a32      	ldr	r2, [pc, #200]	@ (8002b48 <HAL_ADC_ConfigChannel+0x360>)
 8002a80:	0019      	movs	r1, r3
 8002a82:	0010      	movs	r0, r2
 8002a84:	f7ff fa74 	bl	8001f70 <LL_ADC_SetCommonPathInternalCh>
 8002a88:	e07a      	b.n	8002b80 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4a33      	ldr	r2, [pc, #204]	@ (8002b5c <HAL_ADC_ConfigChannel+0x374>)
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d000      	beq.n	8002a96 <HAL_ADC_ConfigChannel+0x2ae>
 8002a94:	e074      	b.n	8002b80 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002a96:	693a      	ldr	r2, [r7, #16]
 8002a98:	2380      	movs	r3, #128	@ 0x80
 8002a9a:	03db      	lsls	r3, r3, #15
 8002a9c:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8002a9e:	d000      	beq.n	8002aa2 <HAL_ADC_ConfigChannel+0x2ba>
 8002aa0:	e06e      	b.n	8002b80 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002aa2:	693b      	ldr	r3, [r7, #16]
 8002aa4:	2280      	movs	r2, #128	@ 0x80
 8002aa6:	03d2      	lsls	r2, r2, #15
 8002aa8:	4313      	orrs	r3, r2
 8002aaa:	4a27      	ldr	r2, [pc, #156]	@ (8002b48 <HAL_ADC_ConfigChannel+0x360>)
 8002aac:	0019      	movs	r1, r3
 8002aae:	0010      	movs	r0, r2
 8002ab0:	f7ff fa5e 	bl	8001f70 <LL_ADC_SetCommonPathInternalCh>
 8002ab4:	e064      	b.n	8002b80 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	691a      	ldr	r2, [r3, #16]
 8002aba:	2380      	movs	r3, #128	@ 0x80
 8002abc:	061b      	lsls	r3, r3, #24
 8002abe:	429a      	cmp	r2, r3
 8002ac0:	d004      	beq.n	8002acc <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002ac6:	4a1f      	ldr	r2, [pc, #124]	@ (8002b44 <HAL_ADC_ConfigChannel+0x35c>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d107      	bne.n	8002adc <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681a      	ldr	r2, [r3, #0]
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	0019      	movs	r1, r3
 8002ad6:	0010      	movs	r0, r2
 8002ad8:	f7ff fae1 	bl	800209e <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	da4d      	bge.n	8002b80 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002ae4:	4b18      	ldr	r3, [pc, #96]	@ (8002b48 <HAL_ADC_ConfigChannel+0x360>)
 8002ae6:	0018      	movs	r0, r3
 8002ae8:	f7ff fa56 	bl	8001f98 <LL_ADC_GetCommonPathInternalCh>
 8002aec:	0003      	movs	r3, r0
 8002aee:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4a15      	ldr	r2, [pc, #84]	@ (8002b4c <HAL_ADC_ConfigChannel+0x364>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d108      	bne.n	8002b0c <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002afa:	693b      	ldr	r3, [r7, #16]
 8002afc:	4a18      	ldr	r2, [pc, #96]	@ (8002b60 <HAL_ADC_ConfigChannel+0x378>)
 8002afe:	4013      	ands	r3, r2
 8002b00:	4a11      	ldr	r2, [pc, #68]	@ (8002b48 <HAL_ADC_ConfigChannel+0x360>)
 8002b02:	0019      	movs	r1, r3
 8002b04:	0010      	movs	r0, r2
 8002b06:	f7ff fa33 	bl	8001f70 <LL_ADC_SetCommonPathInternalCh>
 8002b0a:	e039      	b.n	8002b80 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a11      	ldr	r2, [pc, #68]	@ (8002b58 <HAL_ADC_ConfigChannel+0x370>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d108      	bne.n	8002b28 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002b16:	693b      	ldr	r3, [r7, #16]
 8002b18:	4a12      	ldr	r2, [pc, #72]	@ (8002b64 <HAL_ADC_ConfigChannel+0x37c>)
 8002b1a:	4013      	ands	r3, r2
 8002b1c:	4a0a      	ldr	r2, [pc, #40]	@ (8002b48 <HAL_ADC_ConfigChannel+0x360>)
 8002b1e:	0019      	movs	r1, r3
 8002b20:	0010      	movs	r0, r2
 8002b22:	f7ff fa25 	bl	8001f70 <LL_ADC_SetCommonPathInternalCh>
 8002b26:	e02b      	b.n	8002b80 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4a0b      	ldr	r2, [pc, #44]	@ (8002b5c <HAL_ADC_ConfigChannel+0x374>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d126      	bne.n	8002b80 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002b32:	693b      	ldr	r3, [r7, #16]
 8002b34:	4a0c      	ldr	r2, [pc, #48]	@ (8002b68 <HAL_ADC_ConfigChannel+0x380>)
 8002b36:	4013      	ands	r3, r2
 8002b38:	4a03      	ldr	r2, [pc, #12]	@ (8002b48 <HAL_ADC_ConfigChannel+0x360>)
 8002b3a:	0019      	movs	r1, r3
 8002b3c:	0010      	movs	r0, r2
 8002b3e:	f7ff fa17 	bl	8001f70 <LL_ADC_SetCommonPathInternalCh>
 8002b42:	e01d      	b.n	8002b80 <HAL_ADC_ConfigChannel+0x398>
 8002b44:	80000004 	.word	0x80000004
 8002b48:	40012708 	.word	0x40012708
 8002b4c:	b0001000 	.word	0xb0001000
 8002b50:	20000000 	.word	0x20000000
 8002b54:	00030d40 	.word	0x00030d40
 8002b58:	b8004000 	.word	0xb8004000
 8002b5c:	b4002000 	.word	0xb4002000
 8002b60:	ff7fffff 	.word	0xff7fffff
 8002b64:	feffffff 	.word	0xfeffffff
 8002b68:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b70:	2220      	movs	r2, #32
 8002b72:	431a      	orrs	r2, r3
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002b78:	2317      	movs	r3, #23
 8002b7a:	18fb      	adds	r3, r7, r3
 8002b7c:	2201      	movs	r2, #1
 8002b7e:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2254      	movs	r2, #84	@ 0x54
 8002b84:	2100      	movs	r1, #0
 8002b86:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8002b88:	2317      	movs	r3, #23
 8002b8a:	18fb      	adds	r3, r7, r3
 8002b8c:	781b      	ldrb	r3, [r3, #0]
}
 8002b8e:	0018      	movs	r0, r3
 8002b90:	46bd      	mov	sp, r7
 8002b92:	b006      	add	sp, #24
 8002b94:	bd80      	pop	{r7, pc}
 8002b96:	46c0      	nop			@ (mov r8, r8)

08002b98 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b084      	sub	sp, #16
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	0018      	movs	r0, r3
 8002ba6:	f7ff fb3b 	bl	8002220 <LL_ADC_REG_IsConversionOngoing>
 8002baa:	1e03      	subs	r3, r0, #0
 8002bac:	d031      	beq.n	8002c12 <ADC_ConversionStop+0x7a>
  {
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	0018      	movs	r0, r3
 8002bb4:	f7ff faff 	bl	80021b6 <LL_ADC_IsDisableOngoing>
 8002bb8:	1e03      	subs	r3, r0, #0
 8002bba:	d104      	bne.n	8002bc6 <ADC_ConversionStop+0x2e>
    {
      /* Stop ADC group regular conversion */
      LL_ADC_REG_StopConversion(hadc->Instance);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	0018      	movs	r0, r3
 8002bc2:	f7ff fb1b 	bl	80021fc <LL_ADC_REG_StopConversion>
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002bc6:	f7ff f9c9 	bl	8001f5c <HAL_GetTick>
 8002bca:	0003      	movs	r3, r0
 8002bcc:	60fb      	str	r3, [r7, #12]

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8002bce:	e01a      	b.n	8002c06 <ADC_ConversionStop+0x6e>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8002bd0:	f7ff f9c4 	bl	8001f5c <HAL_GetTick>
 8002bd4:	0002      	movs	r2, r0
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	1ad3      	subs	r3, r2, r3
 8002bda:	2b02      	cmp	r3, #2
 8002bdc:	d913      	bls.n	8002c06 <ADC_ConversionStop+0x6e>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	689b      	ldr	r3, [r3, #8]
 8002be4:	2204      	movs	r2, #4
 8002be6:	4013      	ands	r3, r2
 8002be8:	d00d      	beq.n	8002c06 <ADC_ConversionStop+0x6e>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bee:	2210      	movs	r2, #16
 8002bf0:	431a      	orrs	r2, r3
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bfa:	2201      	movs	r2, #1
 8002bfc:	431a      	orrs	r2, r3
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8002c02:	2301      	movs	r3, #1
 8002c04:	e006      	b.n	8002c14 <ADC_ConversionStop+0x7c>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	689b      	ldr	r3, [r3, #8]
 8002c0c:	2204      	movs	r2, #4
 8002c0e:	4013      	ands	r3, r2
 8002c10:	d1de      	bne.n	8002bd0 <ADC_ConversionStop+0x38>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8002c12:	2300      	movs	r3, #0
}
 8002c14:	0018      	movs	r0, r3
 8002c16:	46bd      	mov	sp, r7
 8002c18:	b004      	add	sp, #16
 8002c1a:	bd80      	pop	{r7, pc}

08002c1c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b084      	sub	sp, #16
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002c24:	2300      	movs	r3, #0
 8002c26:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	0018      	movs	r0, r3
 8002c2e:	f7ff fab1 	bl	8002194 <LL_ADC_IsEnabled>
 8002c32:	1e03      	subs	r3, r0, #0
 8002c34:	d000      	beq.n	8002c38 <ADC_Enable+0x1c>
 8002c36:	e069      	b.n	8002d0c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	689b      	ldr	r3, [r3, #8]
 8002c3e:	4a36      	ldr	r2, [pc, #216]	@ (8002d18 <ADC_Enable+0xfc>)
 8002c40:	4013      	ands	r3, r2
 8002c42:	d00d      	beq.n	8002c60 <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c48:	2210      	movs	r2, #16
 8002c4a:	431a      	orrs	r2, r3
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c54:	2201      	movs	r2, #1
 8002c56:	431a      	orrs	r2, r3
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	e056      	b.n	8002d0e <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	0018      	movs	r0, r3
 8002c66:	f7ff fa71 	bl	800214c <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR)
 8002c6a:	4b2c      	ldr	r3, [pc, #176]	@ (8002d1c <ADC_Enable+0x100>)
 8002c6c:	0018      	movs	r0, r3
 8002c6e:	f7ff f993 	bl	8001f98 <LL_ADC_GetCommonPathInternalCh>
 8002c72:	0002      	movs	r2, r0
 8002c74:	2380      	movs	r3, #128	@ 0x80
 8002c76:	041b      	lsls	r3, r3, #16
 8002c78:	4013      	ands	r3, r2
 8002c7a:	d00f      	beq.n	8002c9c <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002c7c:	4b28      	ldr	r3, [pc, #160]	@ (8002d20 <ADC_Enable+0x104>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4928      	ldr	r1, [pc, #160]	@ (8002d24 <ADC_Enable+0x108>)
 8002c82:	0018      	movs	r0, r3
 8002c84:	f7fd fa3e 	bl	8000104 <__udivsi3>
 8002c88:	0003      	movs	r3, r0
 8002c8a:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
 8002c8c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002c8e:	e002      	b.n	8002c96 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8002c90:	68bb      	ldr	r3, [r7, #8]
 8002c92:	3b01      	subs	r3, #1
 8002c94:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002c96:	68bb      	ldr	r3, [r7, #8]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d1f9      	bne.n	8002c90 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	7e5b      	ldrb	r3, [r3, #25]
 8002ca0:	2b01      	cmp	r3, #1
 8002ca2:	d033      	beq.n	8002d0c <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8002ca4:	f7ff f95a 	bl	8001f5c <HAL_GetTick>
 8002ca8:	0003      	movs	r3, r0
 8002caa:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002cac:	e027      	b.n	8002cfe <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	0018      	movs	r0, r3
 8002cb4:	f7ff fa6e 	bl	8002194 <LL_ADC_IsEnabled>
 8002cb8:	1e03      	subs	r3, r0, #0
 8002cba:	d104      	bne.n	8002cc6 <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	0018      	movs	r0, r3
 8002cc2:	f7ff fa43 	bl	800214c <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002cc6:	f7ff f949 	bl	8001f5c <HAL_GetTick>
 8002cca:	0002      	movs	r2, r0
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	1ad3      	subs	r3, r2, r3
 8002cd0:	2b02      	cmp	r3, #2
 8002cd2:	d914      	bls.n	8002cfe <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	2201      	movs	r2, #1
 8002cdc:	4013      	ands	r3, r2
 8002cde:	2b01      	cmp	r3, #1
 8002ce0:	d00d      	beq.n	8002cfe <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ce6:	2210      	movs	r2, #16
 8002ce8:	431a      	orrs	r2, r3
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	659a      	str	r2, [r3, #88]	@ 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cf2:	2201      	movs	r2, #1
 8002cf4:	431a      	orrs	r2, r3
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	65da      	str	r2, [r3, #92]	@ 0x5c

            return HAL_ERROR;
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	e007      	b.n	8002d0e <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	2201      	movs	r2, #1
 8002d06:	4013      	ands	r3, r2
 8002d08:	2b01      	cmp	r3, #1
 8002d0a:	d1d0      	bne.n	8002cae <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002d0c:	2300      	movs	r3, #0
}
 8002d0e:	0018      	movs	r0, r3
 8002d10:	46bd      	mov	sp, r7
 8002d12:	b004      	add	sp, #16
 8002d14:	bd80      	pop	{r7, pc}
 8002d16:	46c0      	nop			@ (mov r8, r8)
 8002d18:	80000017 	.word	0x80000017
 8002d1c:	40012708 	.word	0x40012708
 8002d20:	20000000 	.word	0x20000000
 8002d24:	00030d40 	.word	0x00030d40

08002d28 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b084      	sub	sp, #16
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	0018      	movs	r0, r3
 8002d36:	f7ff fa3e 	bl	80021b6 <LL_ADC_IsDisableOngoing>
 8002d3a:	0003      	movs	r3, r0
 8002d3c:	60fb      	str	r3, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	0018      	movs	r0, r3
 8002d44:	f7ff fa26 	bl	8002194 <LL_ADC_IsEnabled>
 8002d48:	1e03      	subs	r3, r0, #0
 8002d4a:	d046      	beq.n	8002dda <ADC_Disable+0xb2>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d143      	bne.n	8002dda <ADC_Disable+0xb2>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	689b      	ldr	r3, [r3, #8]
 8002d58:	2205      	movs	r2, #5
 8002d5a:	4013      	ands	r3, r2
 8002d5c:	2b01      	cmp	r3, #1
 8002d5e:	d10d      	bne.n	8002d7c <ADC_Disable+0x54>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	0018      	movs	r0, r3
 8002d66:	f7ff fa03 	bl	8002170 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	2203      	movs	r2, #3
 8002d70:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002d72:	f7ff f8f3 	bl	8001f5c <HAL_GetTick>
 8002d76:	0003      	movs	r3, r0
 8002d78:	60bb      	str	r3, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002d7a:	e028      	b.n	8002dce <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d80:	2210      	movs	r2, #16
 8002d82:	431a      	orrs	r2, r3
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	659a      	str	r2, [r3, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d8c:	2201      	movs	r2, #1
 8002d8e:	431a      	orrs	r2, r3
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 8002d94:	2301      	movs	r3, #1
 8002d96:	e021      	b.n	8002ddc <ADC_Disable+0xb4>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002d98:	f7ff f8e0 	bl	8001f5c <HAL_GetTick>
 8002d9c:	0002      	movs	r2, r0
 8002d9e:	68bb      	ldr	r3, [r7, #8]
 8002da0:	1ad3      	subs	r3, r2, r3
 8002da2:	2b02      	cmp	r3, #2
 8002da4:	d913      	bls.n	8002dce <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	689b      	ldr	r3, [r3, #8]
 8002dac:	2201      	movs	r2, #1
 8002dae:	4013      	ands	r3, r2
 8002db0:	d00d      	beq.n	8002dce <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002db6:	2210      	movs	r2, #16
 8002db8:	431a      	orrs	r2, r3
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002dc2:	2201      	movs	r2, #1
 8002dc4:	431a      	orrs	r2, r3
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	e006      	b.n	8002ddc <ADC_Disable+0xb4>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	689b      	ldr	r3, [r3, #8]
 8002dd4:	2201      	movs	r2, #1
 8002dd6:	4013      	ands	r3, r2
 8002dd8:	d1de      	bne.n	8002d98 <ADC_Disable+0x70>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002dda:	2300      	movs	r3, #0
}
 8002ddc:	0018      	movs	r0, r3
 8002dde:	46bd      	mov	sp, r7
 8002de0:	b004      	add	sp, #16
 8002de2:	bd80      	pop	{r7, pc}

08002de4 <LL_ADC_GetCommonClock>:
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b082      	sub	sp, #8
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_PRESC));
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681a      	ldr	r2, [r3, #0]
 8002df0:	23f0      	movs	r3, #240	@ 0xf0
 8002df2:	039b      	lsls	r3, r3, #14
 8002df4:	4013      	ands	r3, r2
}
 8002df6:	0018      	movs	r0, r3
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	b002      	add	sp, #8
 8002dfc:	bd80      	pop	{r7, pc}

08002dfe <LL_ADC_GetClock>:
{
 8002dfe:	b580      	push	{r7, lr}
 8002e00:	b082      	sub	sp, #8
 8002e02:	af00      	add	r7, sp, #0
 8002e04:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR2, ADC_CFGR2_CKMODE));
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	691b      	ldr	r3, [r3, #16]
 8002e0a:	0f9b      	lsrs	r3, r3, #30
 8002e0c:	079b      	lsls	r3, r3, #30
}
 8002e0e:	0018      	movs	r0, r3
 8002e10:	46bd      	mov	sp, r7
 8002e12:	b002      	add	sp, #8
 8002e14:	bd80      	pop	{r7, pc}

08002e16 <LL_ADC_SetCalibrationFactor>:
{
 8002e16:	b580      	push	{r7, lr}
 8002e18:	b082      	sub	sp, #8
 8002e1a:	af00      	add	r7, sp, #0
 8002e1c:	6078      	str	r0, [r7, #4]
 8002e1e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CALFACT,
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	22b4      	movs	r2, #180	@ 0xb4
 8002e24:	589b      	ldr	r3, [r3, r2]
 8002e26:	227f      	movs	r2, #127	@ 0x7f
 8002e28:	4393      	bics	r3, r2
 8002e2a:	001a      	movs	r2, r3
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	431a      	orrs	r2, r3
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	21b4      	movs	r1, #180	@ 0xb4
 8002e34:	505a      	str	r2, [r3, r1]
}
 8002e36:	46c0      	nop			@ (mov r8, r8)
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	b002      	add	sp, #8
 8002e3c:	bd80      	pop	{r7, pc}

08002e3e <LL_ADC_GetCalibrationFactor>:
{
 8002e3e:	b580      	push	{r7, lr}
 8002e40:	b082      	sub	sp, #8
 8002e42:	af00      	add	r7, sp, #0
 8002e44:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	22b4      	movs	r2, #180	@ 0xb4
 8002e4a:	589b      	ldr	r3, [r3, r2]
 8002e4c:	227f      	movs	r2, #127	@ 0x7f
 8002e4e:	4013      	ands	r3, r2
}
 8002e50:	0018      	movs	r0, r3
 8002e52:	46bd      	mov	sp, r7
 8002e54:	b002      	add	sp, #8
 8002e56:	bd80      	pop	{r7, pc}

08002e58 <LL_ADC_Enable>:
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b082      	sub	sp, #8
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	689b      	ldr	r3, [r3, #8]
 8002e64:	4a04      	ldr	r2, [pc, #16]	@ (8002e78 <LL_ADC_Enable+0x20>)
 8002e66:	4013      	ands	r3, r2
 8002e68:	2201      	movs	r2, #1
 8002e6a:	431a      	orrs	r2, r3
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	609a      	str	r2, [r3, #8]
}
 8002e70:	46c0      	nop			@ (mov r8, r8)
 8002e72:	46bd      	mov	sp, r7
 8002e74:	b002      	add	sp, #8
 8002e76:	bd80      	pop	{r7, pc}
 8002e78:	7fffffe8 	.word	0x7fffffe8

08002e7c <LL_ADC_Disable>:
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b082      	sub	sp, #8
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	689b      	ldr	r3, [r3, #8]
 8002e88:	4a04      	ldr	r2, [pc, #16]	@ (8002e9c <LL_ADC_Disable+0x20>)
 8002e8a:	4013      	ands	r3, r2
 8002e8c:	2202      	movs	r2, #2
 8002e8e:	431a      	orrs	r2, r3
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	609a      	str	r2, [r3, #8]
}
 8002e94:	46c0      	nop			@ (mov r8, r8)
 8002e96:	46bd      	mov	sp, r7
 8002e98:	b002      	add	sp, #8
 8002e9a:	bd80      	pop	{r7, pc}
 8002e9c:	7fffffe8 	.word	0x7fffffe8

08002ea0 <LL_ADC_IsEnabled>:
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b082      	sub	sp, #8
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	689b      	ldr	r3, [r3, #8]
 8002eac:	2201      	movs	r2, #1
 8002eae:	4013      	ands	r3, r2
 8002eb0:	2b01      	cmp	r3, #1
 8002eb2:	d101      	bne.n	8002eb8 <LL_ADC_IsEnabled+0x18>
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	e000      	b.n	8002eba <LL_ADC_IsEnabled+0x1a>
 8002eb8:	2300      	movs	r3, #0
}
 8002eba:	0018      	movs	r0, r3
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	b002      	add	sp, #8
 8002ec0:	bd80      	pop	{r7, pc}
	...

08002ec4 <LL_ADC_StartCalibration>:
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b082      	sub	sp, #8
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	689b      	ldr	r3, [r3, #8]
 8002ed0:	4a05      	ldr	r2, [pc, #20]	@ (8002ee8 <LL_ADC_StartCalibration+0x24>)
 8002ed2:	4013      	ands	r3, r2
 8002ed4:	2280      	movs	r2, #128	@ 0x80
 8002ed6:	0612      	lsls	r2, r2, #24
 8002ed8:	431a      	orrs	r2, r3
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	609a      	str	r2, [r3, #8]
}
 8002ede:	46c0      	nop			@ (mov r8, r8)
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	b002      	add	sp, #8
 8002ee4:	bd80      	pop	{r7, pc}
 8002ee6:	46c0      	nop			@ (mov r8, r8)
 8002ee8:	7fffffe8 	.word	0x7fffffe8

08002eec <LL_ADC_IsCalibrationOnGoing>:
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b082      	sub	sp, #8
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	689b      	ldr	r3, [r3, #8]
 8002ef8:	0fdb      	lsrs	r3, r3, #31
 8002efa:	07da      	lsls	r2, r3, #31
 8002efc:	2380      	movs	r3, #128	@ 0x80
 8002efe:	061b      	lsls	r3, r3, #24
 8002f00:	429a      	cmp	r2, r3
 8002f02:	d101      	bne.n	8002f08 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8002f04:	2301      	movs	r3, #1
 8002f06:	e000      	b.n	8002f0a <LL_ADC_IsCalibrationOnGoing+0x1e>
 8002f08:	2300      	movs	r3, #0
}
 8002f0a:	0018      	movs	r0, r3
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	b002      	add	sp, #8
 8002f10:	bd80      	pop	{r7, pc}
	...

08002f14 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 8002f14:	b590      	push	{r4, r7, lr}
 8002f16:	b08b      	sub	sp, #44	@ 0x2c
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	60fb      	str	r3, [r7, #12]
  uint32_t backup_setting_cfgr1;
  uint32_t calibration_index;
  uint32_t calibration_factor_accumulated = 0;
 8002f20:	2300      	movs	r3, #0
 8002f22:	623b      	str	r3, [r7, #32]
  __IO uint32_t delay_cpu_cycles;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2254      	movs	r2, #84	@ 0x54
 8002f28:	5c9b      	ldrb	r3, [r3, r2]
 8002f2a:	2b01      	cmp	r3, #1
 8002f2c:	d101      	bne.n	8002f32 <HAL_ADCEx_Calibration_Start+0x1e>
 8002f2e:	2302      	movs	r3, #2
 8002f30:	e0dd      	b.n	80030ee <HAL_ADCEx_Calibration_Start+0x1da>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2254      	movs	r2, #84	@ 0x54
 8002f36:	2101      	movs	r1, #1
 8002f38:	5499      	strb	r1, [r3, r2]

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8002f3a:	231f      	movs	r3, #31
 8002f3c:	18fc      	adds	r4, r7, r3
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	0018      	movs	r0, r3
 8002f42:	f7ff fef1 	bl	8002d28 <ADC_Disable>
 8002f46:	0003      	movs	r3, r0
 8002f48:	7023      	strb	r3, [r4, #0]

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	0018      	movs	r0, r3
 8002f50:	f7ff ffa6 	bl	8002ea0 <LL_ADC_IsEnabled>
 8002f54:	1e03      	subs	r3, r0, #0
 8002f56:	d000      	beq.n	8002f5a <HAL_ADCEx_Calibration_Start+0x46>
 8002f58:	e0bc      	b.n	80030d4 <HAL_ADCEx_Calibration_Start+0x1c0>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f5e:	4a66      	ldr	r2, [pc, #408]	@ (80030f8 <HAL_ADCEx_Calibration_Start+0x1e4>)
 8002f60:	4013      	ands	r3, r2
 8002f62:	2202      	movs	r2, #2
 8002f64:	431a      	orrs	r2, r3
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	68db      	ldr	r3, [r3, #12]
 8002f70:	4a62      	ldr	r2, [pc, #392]	@ (80030fc <HAL_ADCEx_Calibration_Start+0x1e8>)
 8002f72:	4013      	ands	r3, r2
 8002f74:	61bb      	str	r3, [r7, #24]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	68da      	ldr	r2, [r3, #12]
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	495f      	ldr	r1, [pc, #380]	@ (8003100 <HAL_ADCEx_Calibration_Start+0x1ec>)
 8002f82:	400a      	ands	r2, r1
 8002f84:	60da      	str	r2, [r3, #12]

    /* ADC calibration procedure */
    /* Note: Perform an averaging of 8 calibrations for optimized accuracy */
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8002f86:	2300      	movs	r3, #0
 8002f88:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f8a:	e02d      	b.n	8002fe8 <HAL_ADCEx_Calibration_Start+0xd4>
    {
      /* Start ADC calibration */
      LL_ADC_StartCalibration(hadc->Instance);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	0018      	movs	r0, r3
 8002f92:	f7ff ff97 	bl	8002ec4 <LL_ADC_StartCalibration>

      /* Wait for calibration completion */
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002f96:	e014      	b.n	8002fc2 <HAL_ADCEx_Calibration_Start+0xae>
      {
        wait_loop_index++;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	3301      	adds	r3, #1
 8002f9c:	60fb      	str	r3, [r7, #12]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	4a58      	ldr	r2, [pc, #352]	@ (8003104 <HAL_ADCEx_Calibration_Start+0x1f0>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d90d      	bls.n	8002fc2 <HAL_ADCEx_Calibration_Start+0xae>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002faa:	2212      	movs	r2, #18
 8002fac:	4393      	bics	r3, r2
 8002fae:	2210      	movs	r2, #16
 8002fb0:	431a      	orrs	r2, r3
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	659a      	str	r2, [r3, #88]	@ 0x58
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          __HAL_UNLOCK(hadc);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2254      	movs	r2, #84	@ 0x54
 8002fba:	2100      	movs	r1, #0
 8002fbc:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	e095      	b.n	80030ee <HAL_ADCEx_Calibration_Start+0x1da>
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	0018      	movs	r0, r3
 8002fc8:	f7ff ff90 	bl	8002eec <LL_ADC_IsCalibrationOnGoing>
 8002fcc:	1e03      	subs	r3, r0, #0
 8002fce:	d1e3      	bne.n	8002f98 <HAL_ADCEx_Calibration_Start+0x84>
        }
      }

      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	0018      	movs	r0, r3
 8002fd6:	f7ff ff32 	bl	8002e3e <LL_ADC_GetCalibrationFactor>
 8002fda:	0002      	movs	r2, r0
 8002fdc:	6a3b      	ldr	r3, [r7, #32]
 8002fde:	189b      	adds	r3, r3, r2
 8002fe0:	623b      	str	r3, [r7, #32]
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8002fe2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fe4:	3301      	adds	r3, #1
 8002fe6:	627b      	str	r3, [r7, #36]	@ 0x24
 8002fe8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fea:	2b07      	cmp	r3, #7
 8002fec:	d9ce      	bls.n	8002f8c <HAL_ADCEx_Calibration_Start+0x78>
    }
    /* Compute average */
    calibration_factor_accumulated /= calibration_index;
 8002fee:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002ff0:	6a38      	ldr	r0, [r7, #32]
 8002ff2:	f7fd f887 	bl	8000104 <__udivsi3>
 8002ff6:	0003      	movs	r3, r0
 8002ff8:	623b      	str	r3, [r7, #32]

    /* Apply calibration factor (requires ADC enable and disable process) */
    LL_ADC_Enable(hadc->Instance);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	0018      	movs	r0, r3
 8003000:	f7ff ff2a 	bl	8002e58 <LL_ADC_Enable>

    /* Case of ADC clocked at low frequency: Delay required between ADC enable and disable actions */
    if (LL_ADC_GetClock(hadc->Instance) == LL_ADC_CLOCK_ASYNC)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	0018      	movs	r0, r3
 800300a:	f7ff fef8 	bl	8002dfe <LL_ADC_GetClock>
 800300e:	1e03      	subs	r3, r0, #0
 8003010:	d11b      	bne.n	800304a <HAL_ADCEx_Calibration_Start+0x136>
    {
      adc_clk_async_presc = LL_ADC_GetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003012:	4b3d      	ldr	r3, [pc, #244]	@ (8003108 <HAL_ADCEx_Calibration_Start+0x1f4>)
 8003014:	0018      	movs	r0, r3
 8003016:	f7ff fee5 	bl	8002de4 <LL_ADC_GetCommonClock>
 800301a:	0003      	movs	r3, r0
 800301c:	617b      	str	r3, [r7, #20]

      if (adc_clk_async_presc >= LL_ADC_CLOCK_ASYNC_DIV16)
 800301e:	697a      	ldr	r2, [r7, #20]
 8003020:	23e0      	movs	r3, #224	@ 0xe0
 8003022:	035b      	lsls	r3, r3, #13
 8003024:	429a      	cmp	r2, r3
 8003026:	d310      	bcc.n	800304a <HAL_ADCEx_Calibration_Start+0x136>
      {
        /* Delay loop initialization and execution */
        /* Delay depends on ADC clock prescaler: Compute ADC clock asynchronous prescaler to decimal format */
        delay_cpu_cycles = (1UL << ((adc_clk_async_presc >> ADC_CCR_PRESC_Pos) - 3UL));
 8003028:	697b      	ldr	r3, [r7, #20]
 800302a:	0c9b      	lsrs	r3, r3, #18
 800302c:	3b03      	subs	r3, #3
 800302e:	2201      	movs	r2, #1
 8003030:	409a      	lsls	r2, r3
 8003032:	0013      	movs	r3, r2
 8003034:	60bb      	str	r3, [r7, #8]
        /* Divide variable by 2 to compensate partially CPU processing cycles */
        delay_cpu_cycles >>= 1UL;
 8003036:	68bb      	ldr	r3, [r7, #8]
 8003038:	085b      	lsrs	r3, r3, #1
 800303a:	60bb      	str	r3, [r7, #8]

        while (delay_cpu_cycles != 0UL)
 800303c:	e002      	b.n	8003044 <HAL_ADCEx_Calibration_Start+0x130>
        {
          delay_cpu_cycles--;
 800303e:	68bb      	ldr	r3, [r7, #8]
 8003040:	3b01      	subs	r3, #1
 8003042:	60bb      	str	r3, [r7, #8]
        while (delay_cpu_cycles != 0UL)
 8003044:	68bb      	ldr	r3, [r7, #8]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d1f9      	bne.n	800303e <HAL_ADCEx_Calibration_Start+0x12a>
        }
      }
    }

    LL_ADC_SetCalibrationFactor(hadc->Instance, calibration_factor_accumulated);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	6a3a      	ldr	r2, [r7, #32]
 8003050:	0011      	movs	r1, r2
 8003052:	0018      	movs	r0, r3
 8003054:	f7ff fedf 	bl	8002e16 <LL_ADC_SetCalibrationFactor>
    LL_ADC_Disable(hadc->Instance);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	0018      	movs	r0, r3
 800305e:	f7ff ff0d 	bl	8002e7c <LL_ADC_Disable>

    /* Wait for ADC effectively disabled before changing configuration */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003062:	f7fe ff7b 	bl	8001f5c <HAL_GetTick>
 8003066:	0003      	movs	r3, r0
 8003068:	613b      	str	r3, [r7, #16]

    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800306a:	e01b      	b.n	80030a4 <HAL_ADCEx_Calibration_Start+0x190>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800306c:	f7fe ff76 	bl	8001f5c <HAL_GetTick>
 8003070:	0002      	movs	r2, r0
 8003072:	693b      	ldr	r3, [r7, #16]
 8003074:	1ad3      	subs	r3, r2, r3
 8003076:	2b02      	cmp	r3, #2
 8003078:	d914      	bls.n	80030a4 <HAL_ADCEx_Calibration_Start+0x190>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	0018      	movs	r0, r3
 8003080:	f7ff ff0e 	bl	8002ea0 <LL_ADC_IsEnabled>
 8003084:	1e03      	subs	r3, r0, #0
 8003086:	d00d      	beq.n	80030a4 <HAL_ADCEx_Calibration_Start+0x190>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800308c:	2210      	movs	r2, #16
 800308e:	431a      	orrs	r2, r3
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003098:	2201      	movs	r2, #1
 800309a:	431a      	orrs	r2, r3
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 80030a0:	2301      	movs	r3, #1
 80030a2:	e024      	b.n	80030ee <HAL_ADCEx_Calibration_Start+0x1da>
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	0018      	movs	r0, r3
 80030aa:	f7ff fef9 	bl	8002ea0 <LL_ADC_IsEnabled>
 80030ae:	1e03      	subs	r3, r0, #0
 80030b0:	d1dc      	bne.n	800306c <HAL_ADCEx_Calibration_Start+0x158>
        }
      }
    }

    /* Restore configuration after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	68d9      	ldr	r1, [r3, #12]
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	69ba      	ldr	r2, [r7, #24]
 80030be:	430a      	orrs	r2, r1
 80030c0:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030c6:	2203      	movs	r2, #3
 80030c8:	4393      	bics	r3, r2
 80030ca:	2201      	movs	r2, #1
 80030cc:	431a      	orrs	r2, r3
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	659a      	str	r2, [r3, #88]	@ 0x58
 80030d2:	e005      	b.n	80030e0 <HAL_ADCEx_Calibration_Start+0x1cc>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030d8:	2210      	movs	r2, #16
 80030da:	431a      	orrs	r2, r3
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2254      	movs	r2, #84	@ 0x54
 80030e4:	2100      	movs	r1, #0
 80030e6:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 80030e8:	231f      	movs	r3, #31
 80030ea:	18fb      	adds	r3, r7, r3
 80030ec:	781b      	ldrb	r3, [r3, #0]
}
 80030ee:	0018      	movs	r0, r3
 80030f0:	46bd      	mov	sp, r7
 80030f2:	b00b      	add	sp, #44	@ 0x2c
 80030f4:	bd90      	pop	{r4, r7, pc}
 80030f6:	46c0      	nop			@ (mov r8, r8)
 80030f8:	fffffefd 	.word	0xfffffefd
 80030fc:	00008003 	.word	0x00008003
 8003100:	ffff7ffc 	.word	0xffff7ffc
 8003104:	0002f1ff 	.word	0x0002f1ff
 8003108:	40012708 	.word	0x40012708

0800310c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800310c:	b590      	push	{r4, r7, lr}
 800310e:	b083      	sub	sp, #12
 8003110:	af00      	add	r7, sp, #0
 8003112:	0002      	movs	r2, r0
 8003114:	6039      	str	r1, [r7, #0]
 8003116:	1dfb      	adds	r3, r7, #7
 8003118:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800311a:	1dfb      	adds	r3, r7, #7
 800311c:	781b      	ldrb	r3, [r3, #0]
 800311e:	2b7f      	cmp	r3, #127	@ 0x7f
 8003120:	d828      	bhi.n	8003174 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003122:	4a2f      	ldr	r2, [pc, #188]	@ (80031e0 <__NVIC_SetPriority+0xd4>)
 8003124:	1dfb      	adds	r3, r7, #7
 8003126:	781b      	ldrb	r3, [r3, #0]
 8003128:	b25b      	sxtb	r3, r3
 800312a:	089b      	lsrs	r3, r3, #2
 800312c:	33c0      	adds	r3, #192	@ 0xc0
 800312e:	009b      	lsls	r3, r3, #2
 8003130:	589b      	ldr	r3, [r3, r2]
 8003132:	1dfa      	adds	r2, r7, #7
 8003134:	7812      	ldrb	r2, [r2, #0]
 8003136:	0011      	movs	r1, r2
 8003138:	2203      	movs	r2, #3
 800313a:	400a      	ands	r2, r1
 800313c:	00d2      	lsls	r2, r2, #3
 800313e:	21ff      	movs	r1, #255	@ 0xff
 8003140:	4091      	lsls	r1, r2
 8003142:	000a      	movs	r2, r1
 8003144:	43d2      	mvns	r2, r2
 8003146:	401a      	ands	r2, r3
 8003148:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	019b      	lsls	r3, r3, #6
 800314e:	22ff      	movs	r2, #255	@ 0xff
 8003150:	401a      	ands	r2, r3
 8003152:	1dfb      	adds	r3, r7, #7
 8003154:	781b      	ldrb	r3, [r3, #0]
 8003156:	0018      	movs	r0, r3
 8003158:	2303      	movs	r3, #3
 800315a:	4003      	ands	r3, r0
 800315c:	00db      	lsls	r3, r3, #3
 800315e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003160:	481f      	ldr	r0, [pc, #124]	@ (80031e0 <__NVIC_SetPriority+0xd4>)
 8003162:	1dfb      	adds	r3, r7, #7
 8003164:	781b      	ldrb	r3, [r3, #0]
 8003166:	b25b      	sxtb	r3, r3
 8003168:	089b      	lsrs	r3, r3, #2
 800316a:	430a      	orrs	r2, r1
 800316c:	33c0      	adds	r3, #192	@ 0xc0
 800316e:	009b      	lsls	r3, r3, #2
 8003170:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8003172:	e031      	b.n	80031d8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003174:	4a1b      	ldr	r2, [pc, #108]	@ (80031e4 <__NVIC_SetPriority+0xd8>)
 8003176:	1dfb      	adds	r3, r7, #7
 8003178:	781b      	ldrb	r3, [r3, #0]
 800317a:	0019      	movs	r1, r3
 800317c:	230f      	movs	r3, #15
 800317e:	400b      	ands	r3, r1
 8003180:	3b08      	subs	r3, #8
 8003182:	089b      	lsrs	r3, r3, #2
 8003184:	3306      	adds	r3, #6
 8003186:	009b      	lsls	r3, r3, #2
 8003188:	18d3      	adds	r3, r2, r3
 800318a:	3304      	adds	r3, #4
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	1dfa      	adds	r2, r7, #7
 8003190:	7812      	ldrb	r2, [r2, #0]
 8003192:	0011      	movs	r1, r2
 8003194:	2203      	movs	r2, #3
 8003196:	400a      	ands	r2, r1
 8003198:	00d2      	lsls	r2, r2, #3
 800319a:	21ff      	movs	r1, #255	@ 0xff
 800319c:	4091      	lsls	r1, r2
 800319e:	000a      	movs	r2, r1
 80031a0:	43d2      	mvns	r2, r2
 80031a2:	401a      	ands	r2, r3
 80031a4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	019b      	lsls	r3, r3, #6
 80031aa:	22ff      	movs	r2, #255	@ 0xff
 80031ac:	401a      	ands	r2, r3
 80031ae:	1dfb      	adds	r3, r7, #7
 80031b0:	781b      	ldrb	r3, [r3, #0]
 80031b2:	0018      	movs	r0, r3
 80031b4:	2303      	movs	r3, #3
 80031b6:	4003      	ands	r3, r0
 80031b8:	00db      	lsls	r3, r3, #3
 80031ba:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80031bc:	4809      	ldr	r0, [pc, #36]	@ (80031e4 <__NVIC_SetPriority+0xd8>)
 80031be:	1dfb      	adds	r3, r7, #7
 80031c0:	781b      	ldrb	r3, [r3, #0]
 80031c2:	001c      	movs	r4, r3
 80031c4:	230f      	movs	r3, #15
 80031c6:	4023      	ands	r3, r4
 80031c8:	3b08      	subs	r3, #8
 80031ca:	089b      	lsrs	r3, r3, #2
 80031cc:	430a      	orrs	r2, r1
 80031ce:	3306      	adds	r3, #6
 80031d0:	009b      	lsls	r3, r3, #2
 80031d2:	18c3      	adds	r3, r0, r3
 80031d4:	3304      	adds	r3, #4
 80031d6:	601a      	str	r2, [r3, #0]
}
 80031d8:	46c0      	nop			@ (mov r8, r8)
 80031da:	46bd      	mov	sp, r7
 80031dc:	b003      	add	sp, #12
 80031de:	bd90      	pop	{r4, r7, pc}
 80031e0:	e000e100 	.word	0xe000e100
 80031e4:	e000ed00 	.word	0xe000ed00

080031e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b082      	sub	sp, #8
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	1e5a      	subs	r2, r3, #1
 80031f4:	2380      	movs	r3, #128	@ 0x80
 80031f6:	045b      	lsls	r3, r3, #17
 80031f8:	429a      	cmp	r2, r3
 80031fa:	d301      	bcc.n	8003200 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80031fc:	2301      	movs	r3, #1
 80031fe:	e010      	b.n	8003222 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003200:	4b0a      	ldr	r3, [pc, #40]	@ (800322c <SysTick_Config+0x44>)
 8003202:	687a      	ldr	r2, [r7, #4]
 8003204:	3a01      	subs	r2, #1
 8003206:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003208:	2301      	movs	r3, #1
 800320a:	425b      	negs	r3, r3
 800320c:	2103      	movs	r1, #3
 800320e:	0018      	movs	r0, r3
 8003210:	f7ff ff7c 	bl	800310c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003214:	4b05      	ldr	r3, [pc, #20]	@ (800322c <SysTick_Config+0x44>)
 8003216:	2200      	movs	r2, #0
 8003218:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800321a:	4b04      	ldr	r3, [pc, #16]	@ (800322c <SysTick_Config+0x44>)
 800321c:	2207      	movs	r2, #7
 800321e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003220:	2300      	movs	r3, #0
}
 8003222:	0018      	movs	r0, r3
 8003224:	46bd      	mov	sp, r7
 8003226:	b002      	add	sp, #8
 8003228:	bd80      	pop	{r7, pc}
 800322a:	46c0      	nop			@ (mov r8, r8)
 800322c:	e000e010 	.word	0xe000e010

08003230 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b084      	sub	sp, #16
 8003234:	af00      	add	r7, sp, #0
 8003236:	60b9      	str	r1, [r7, #8]
 8003238:	607a      	str	r2, [r7, #4]
 800323a:	210f      	movs	r1, #15
 800323c:	187b      	adds	r3, r7, r1
 800323e:	1c02      	adds	r2, r0, #0
 8003240:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8003242:	68ba      	ldr	r2, [r7, #8]
 8003244:	187b      	adds	r3, r7, r1
 8003246:	781b      	ldrb	r3, [r3, #0]
 8003248:	b25b      	sxtb	r3, r3
 800324a:	0011      	movs	r1, r2
 800324c:	0018      	movs	r0, r3
 800324e:	f7ff ff5d 	bl	800310c <__NVIC_SetPriority>
}
 8003252:	46c0      	nop			@ (mov r8, r8)
 8003254:	46bd      	mov	sp, r7
 8003256:	b004      	add	sp, #16
 8003258:	bd80      	pop	{r7, pc}

0800325a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800325a:	b580      	push	{r7, lr}
 800325c:	b082      	sub	sp, #8
 800325e:	af00      	add	r7, sp, #0
 8003260:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	0018      	movs	r0, r3
 8003266:	f7ff ffbf 	bl	80031e8 <SysTick_Config>
 800326a:	0003      	movs	r3, r0
}
 800326c:	0018      	movs	r0, r3
 800326e:	46bd      	mov	sp, r7
 8003270:	b002      	add	sp, #8
 8003272:	bd80      	pop	{r7, pc}

08003274 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b086      	sub	sp, #24
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
 800327c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800327e:	2300      	movs	r3, #0
 8003280:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003282:	e147      	b.n	8003514 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	2101      	movs	r1, #1
 800328a:	697a      	ldr	r2, [r7, #20]
 800328c:	4091      	lsls	r1, r2
 800328e:	000a      	movs	r2, r1
 8003290:	4013      	ands	r3, r2
 8003292:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d100      	bne.n	800329c <HAL_GPIO_Init+0x28>
 800329a:	e138      	b.n	800350e <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	2203      	movs	r2, #3
 80032a2:	4013      	ands	r3, r2
 80032a4:	2b01      	cmp	r3, #1
 80032a6:	d005      	beq.n	80032b4 <HAL_GPIO_Init+0x40>
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	2203      	movs	r2, #3
 80032ae:	4013      	ands	r3, r2
 80032b0:	2b02      	cmp	r3, #2
 80032b2:	d130      	bne.n	8003316 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	689b      	ldr	r3, [r3, #8]
 80032b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80032ba:	697b      	ldr	r3, [r7, #20]
 80032bc:	005b      	lsls	r3, r3, #1
 80032be:	2203      	movs	r2, #3
 80032c0:	409a      	lsls	r2, r3
 80032c2:	0013      	movs	r3, r2
 80032c4:	43da      	mvns	r2, r3
 80032c6:	693b      	ldr	r3, [r7, #16]
 80032c8:	4013      	ands	r3, r2
 80032ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	68da      	ldr	r2, [r3, #12]
 80032d0:	697b      	ldr	r3, [r7, #20]
 80032d2:	005b      	lsls	r3, r3, #1
 80032d4:	409a      	lsls	r2, r3
 80032d6:	0013      	movs	r3, r2
 80032d8:	693a      	ldr	r2, [r7, #16]
 80032da:	4313      	orrs	r3, r2
 80032dc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	693a      	ldr	r2, [r7, #16]
 80032e2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80032ea:	2201      	movs	r2, #1
 80032ec:	697b      	ldr	r3, [r7, #20]
 80032ee:	409a      	lsls	r2, r3
 80032f0:	0013      	movs	r3, r2
 80032f2:	43da      	mvns	r2, r3
 80032f4:	693b      	ldr	r3, [r7, #16]
 80032f6:	4013      	ands	r3, r2
 80032f8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	685b      	ldr	r3, [r3, #4]
 80032fe:	091b      	lsrs	r3, r3, #4
 8003300:	2201      	movs	r2, #1
 8003302:	401a      	ands	r2, r3
 8003304:	697b      	ldr	r3, [r7, #20]
 8003306:	409a      	lsls	r2, r3
 8003308:	0013      	movs	r3, r2
 800330a:	693a      	ldr	r2, [r7, #16]
 800330c:	4313      	orrs	r3, r2
 800330e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	693a      	ldr	r2, [r7, #16]
 8003314:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	2203      	movs	r2, #3
 800331c:	4013      	ands	r3, r2
 800331e:	2b03      	cmp	r3, #3
 8003320:	d017      	beq.n	8003352 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	68db      	ldr	r3, [r3, #12]
 8003326:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003328:	697b      	ldr	r3, [r7, #20]
 800332a:	005b      	lsls	r3, r3, #1
 800332c:	2203      	movs	r2, #3
 800332e:	409a      	lsls	r2, r3
 8003330:	0013      	movs	r3, r2
 8003332:	43da      	mvns	r2, r3
 8003334:	693b      	ldr	r3, [r7, #16]
 8003336:	4013      	ands	r3, r2
 8003338:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	689a      	ldr	r2, [r3, #8]
 800333e:	697b      	ldr	r3, [r7, #20]
 8003340:	005b      	lsls	r3, r3, #1
 8003342:	409a      	lsls	r2, r3
 8003344:	0013      	movs	r3, r2
 8003346:	693a      	ldr	r2, [r7, #16]
 8003348:	4313      	orrs	r3, r2
 800334a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	693a      	ldr	r2, [r7, #16]
 8003350:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	2203      	movs	r2, #3
 8003358:	4013      	ands	r3, r2
 800335a:	2b02      	cmp	r3, #2
 800335c:	d123      	bne.n	80033a6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800335e:	697b      	ldr	r3, [r7, #20]
 8003360:	08da      	lsrs	r2, r3, #3
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	3208      	adds	r2, #8
 8003366:	0092      	lsls	r2, r2, #2
 8003368:	58d3      	ldr	r3, [r2, r3]
 800336a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800336c:	697b      	ldr	r3, [r7, #20]
 800336e:	2207      	movs	r2, #7
 8003370:	4013      	ands	r3, r2
 8003372:	009b      	lsls	r3, r3, #2
 8003374:	220f      	movs	r2, #15
 8003376:	409a      	lsls	r2, r3
 8003378:	0013      	movs	r3, r2
 800337a:	43da      	mvns	r2, r3
 800337c:	693b      	ldr	r3, [r7, #16]
 800337e:	4013      	ands	r3, r2
 8003380:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	691a      	ldr	r2, [r3, #16]
 8003386:	697b      	ldr	r3, [r7, #20]
 8003388:	2107      	movs	r1, #7
 800338a:	400b      	ands	r3, r1
 800338c:	009b      	lsls	r3, r3, #2
 800338e:	409a      	lsls	r2, r3
 8003390:	0013      	movs	r3, r2
 8003392:	693a      	ldr	r2, [r7, #16]
 8003394:	4313      	orrs	r3, r2
 8003396:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003398:	697b      	ldr	r3, [r7, #20]
 800339a:	08da      	lsrs	r2, r3, #3
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	3208      	adds	r2, #8
 80033a0:	0092      	lsls	r2, r2, #2
 80033a2:	6939      	ldr	r1, [r7, #16]
 80033a4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80033ac:	697b      	ldr	r3, [r7, #20]
 80033ae:	005b      	lsls	r3, r3, #1
 80033b0:	2203      	movs	r2, #3
 80033b2:	409a      	lsls	r2, r3
 80033b4:	0013      	movs	r3, r2
 80033b6:	43da      	mvns	r2, r3
 80033b8:	693b      	ldr	r3, [r7, #16]
 80033ba:	4013      	ands	r3, r2
 80033bc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	2203      	movs	r2, #3
 80033c4:	401a      	ands	r2, r3
 80033c6:	697b      	ldr	r3, [r7, #20]
 80033c8:	005b      	lsls	r3, r3, #1
 80033ca:	409a      	lsls	r2, r3
 80033cc:	0013      	movs	r3, r2
 80033ce:	693a      	ldr	r2, [r7, #16]
 80033d0:	4313      	orrs	r3, r2
 80033d2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	693a      	ldr	r2, [r7, #16]
 80033d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	685a      	ldr	r2, [r3, #4]
 80033de:	23c0      	movs	r3, #192	@ 0xc0
 80033e0:	029b      	lsls	r3, r3, #10
 80033e2:	4013      	ands	r3, r2
 80033e4:	d100      	bne.n	80033e8 <HAL_GPIO_Init+0x174>
 80033e6:	e092      	b.n	800350e <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80033e8:	4a50      	ldr	r2, [pc, #320]	@ (800352c <HAL_GPIO_Init+0x2b8>)
 80033ea:	697b      	ldr	r3, [r7, #20]
 80033ec:	089b      	lsrs	r3, r3, #2
 80033ee:	3318      	adds	r3, #24
 80033f0:	009b      	lsls	r3, r3, #2
 80033f2:	589b      	ldr	r3, [r3, r2]
 80033f4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80033f6:	697b      	ldr	r3, [r7, #20]
 80033f8:	2203      	movs	r2, #3
 80033fa:	4013      	ands	r3, r2
 80033fc:	00db      	lsls	r3, r3, #3
 80033fe:	220f      	movs	r2, #15
 8003400:	409a      	lsls	r2, r3
 8003402:	0013      	movs	r3, r2
 8003404:	43da      	mvns	r2, r3
 8003406:	693b      	ldr	r3, [r7, #16]
 8003408:	4013      	ands	r3, r2
 800340a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 800340c:	687a      	ldr	r2, [r7, #4]
 800340e:	23a0      	movs	r3, #160	@ 0xa0
 8003410:	05db      	lsls	r3, r3, #23
 8003412:	429a      	cmp	r2, r3
 8003414:	d013      	beq.n	800343e <HAL_GPIO_Init+0x1ca>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	4a45      	ldr	r2, [pc, #276]	@ (8003530 <HAL_GPIO_Init+0x2bc>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d00d      	beq.n	800343a <HAL_GPIO_Init+0x1c6>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	4a44      	ldr	r2, [pc, #272]	@ (8003534 <HAL_GPIO_Init+0x2c0>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d007      	beq.n	8003436 <HAL_GPIO_Init+0x1c2>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	4a43      	ldr	r2, [pc, #268]	@ (8003538 <HAL_GPIO_Init+0x2c4>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d101      	bne.n	8003432 <HAL_GPIO_Init+0x1be>
 800342e:	2303      	movs	r3, #3
 8003430:	e006      	b.n	8003440 <HAL_GPIO_Init+0x1cc>
 8003432:	2305      	movs	r3, #5
 8003434:	e004      	b.n	8003440 <HAL_GPIO_Init+0x1cc>
 8003436:	2302      	movs	r3, #2
 8003438:	e002      	b.n	8003440 <HAL_GPIO_Init+0x1cc>
 800343a:	2301      	movs	r3, #1
 800343c:	e000      	b.n	8003440 <HAL_GPIO_Init+0x1cc>
 800343e:	2300      	movs	r3, #0
 8003440:	697a      	ldr	r2, [r7, #20]
 8003442:	2103      	movs	r1, #3
 8003444:	400a      	ands	r2, r1
 8003446:	00d2      	lsls	r2, r2, #3
 8003448:	4093      	lsls	r3, r2
 800344a:	693a      	ldr	r2, [r7, #16]
 800344c:	4313      	orrs	r3, r2
 800344e:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8003450:	4936      	ldr	r1, [pc, #216]	@ (800352c <HAL_GPIO_Init+0x2b8>)
 8003452:	697b      	ldr	r3, [r7, #20]
 8003454:	089b      	lsrs	r3, r3, #2
 8003456:	3318      	adds	r3, #24
 8003458:	009b      	lsls	r3, r3, #2
 800345a:	693a      	ldr	r2, [r7, #16]
 800345c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800345e:	4b33      	ldr	r3, [pc, #204]	@ (800352c <HAL_GPIO_Init+0x2b8>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	43da      	mvns	r2, r3
 8003468:	693b      	ldr	r3, [r7, #16]
 800346a:	4013      	ands	r3, r2
 800346c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	685a      	ldr	r2, [r3, #4]
 8003472:	2380      	movs	r3, #128	@ 0x80
 8003474:	035b      	lsls	r3, r3, #13
 8003476:	4013      	ands	r3, r2
 8003478:	d003      	beq.n	8003482 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 800347a:	693a      	ldr	r2, [r7, #16]
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	4313      	orrs	r3, r2
 8003480:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003482:	4b2a      	ldr	r3, [pc, #168]	@ (800352c <HAL_GPIO_Init+0x2b8>)
 8003484:	693a      	ldr	r2, [r7, #16]
 8003486:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8003488:	4b28      	ldr	r3, [pc, #160]	@ (800352c <HAL_GPIO_Init+0x2b8>)
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	43da      	mvns	r2, r3
 8003492:	693b      	ldr	r3, [r7, #16]
 8003494:	4013      	ands	r3, r2
 8003496:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	685a      	ldr	r2, [r3, #4]
 800349c:	2380      	movs	r3, #128	@ 0x80
 800349e:	039b      	lsls	r3, r3, #14
 80034a0:	4013      	ands	r3, r2
 80034a2:	d003      	beq.n	80034ac <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 80034a4:	693a      	ldr	r2, [r7, #16]
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	4313      	orrs	r3, r2
 80034aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80034ac:	4b1f      	ldr	r3, [pc, #124]	@ (800352c <HAL_GPIO_Init+0x2b8>)
 80034ae:	693a      	ldr	r2, [r7, #16]
 80034b0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80034b2:	4a1e      	ldr	r2, [pc, #120]	@ (800352c <HAL_GPIO_Init+0x2b8>)
 80034b4:	2384      	movs	r3, #132	@ 0x84
 80034b6:	58d3      	ldr	r3, [r2, r3]
 80034b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	43da      	mvns	r2, r3
 80034be:	693b      	ldr	r3, [r7, #16]
 80034c0:	4013      	ands	r3, r2
 80034c2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	685a      	ldr	r2, [r3, #4]
 80034c8:	2380      	movs	r3, #128	@ 0x80
 80034ca:	029b      	lsls	r3, r3, #10
 80034cc:	4013      	ands	r3, r2
 80034ce:	d003      	beq.n	80034d8 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80034d0:	693a      	ldr	r2, [r7, #16]
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	4313      	orrs	r3, r2
 80034d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80034d8:	4914      	ldr	r1, [pc, #80]	@ (800352c <HAL_GPIO_Init+0x2b8>)
 80034da:	2284      	movs	r2, #132	@ 0x84
 80034dc:	693b      	ldr	r3, [r7, #16]
 80034de:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80034e0:	4a12      	ldr	r2, [pc, #72]	@ (800352c <HAL_GPIO_Init+0x2b8>)
 80034e2:	2380      	movs	r3, #128	@ 0x80
 80034e4:	58d3      	ldr	r3, [r2, r3]
 80034e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	43da      	mvns	r2, r3
 80034ec:	693b      	ldr	r3, [r7, #16]
 80034ee:	4013      	ands	r3, r2
 80034f0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	685a      	ldr	r2, [r3, #4]
 80034f6:	2380      	movs	r3, #128	@ 0x80
 80034f8:	025b      	lsls	r3, r3, #9
 80034fa:	4013      	ands	r3, r2
 80034fc:	d003      	beq.n	8003506 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 80034fe:	693a      	ldr	r2, [r7, #16]
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	4313      	orrs	r3, r2
 8003504:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003506:	4909      	ldr	r1, [pc, #36]	@ (800352c <HAL_GPIO_Init+0x2b8>)
 8003508:	2280      	movs	r2, #128	@ 0x80
 800350a:	693b      	ldr	r3, [r7, #16]
 800350c:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800350e:	697b      	ldr	r3, [r7, #20]
 8003510:	3301      	adds	r3, #1
 8003512:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	681a      	ldr	r2, [r3, #0]
 8003518:	697b      	ldr	r3, [r7, #20]
 800351a:	40da      	lsrs	r2, r3
 800351c:	1e13      	subs	r3, r2, #0
 800351e:	d000      	beq.n	8003522 <HAL_GPIO_Init+0x2ae>
 8003520:	e6b0      	b.n	8003284 <HAL_GPIO_Init+0x10>
  }
}
 8003522:	46c0      	nop			@ (mov r8, r8)
 8003524:	46c0      	nop			@ (mov r8, r8)
 8003526:	46bd      	mov	sp, r7
 8003528:	b006      	add	sp, #24
 800352a:	bd80      	pop	{r7, pc}
 800352c:	40021800 	.word	0x40021800
 8003530:	50000400 	.word	0x50000400
 8003534:	50000800 	.word	0x50000800
 8003538:	50000c00 	.word	0x50000c00

0800353c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b084      	sub	sp, #16
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
 8003544:	000a      	movs	r2, r1
 8003546:	1cbb      	adds	r3, r7, #2
 8003548:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	691b      	ldr	r3, [r3, #16]
 800354e:	1cba      	adds	r2, r7, #2
 8003550:	8812      	ldrh	r2, [r2, #0]
 8003552:	4013      	ands	r3, r2
 8003554:	d004      	beq.n	8003560 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8003556:	230f      	movs	r3, #15
 8003558:	18fb      	adds	r3, r7, r3
 800355a:	2201      	movs	r2, #1
 800355c:	701a      	strb	r2, [r3, #0]
 800355e:	e003      	b.n	8003568 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003560:	230f      	movs	r3, #15
 8003562:	18fb      	adds	r3, r7, r3
 8003564:	2200      	movs	r2, #0
 8003566:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8003568:	230f      	movs	r3, #15
 800356a:	18fb      	adds	r3, r7, r3
 800356c:	781b      	ldrb	r3, [r3, #0]
}
 800356e:	0018      	movs	r0, r3
 8003570:	46bd      	mov	sp, r7
 8003572:	b004      	add	sp, #16
 8003574:	bd80      	pop	{r7, pc}

08003576 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003576:	b580      	push	{r7, lr}
 8003578:	b082      	sub	sp, #8
 800357a:	af00      	add	r7, sp, #0
 800357c:	6078      	str	r0, [r7, #4]
 800357e:	0008      	movs	r0, r1
 8003580:	0011      	movs	r1, r2
 8003582:	1cbb      	adds	r3, r7, #2
 8003584:	1c02      	adds	r2, r0, #0
 8003586:	801a      	strh	r2, [r3, #0]
 8003588:	1c7b      	adds	r3, r7, #1
 800358a:	1c0a      	adds	r2, r1, #0
 800358c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800358e:	1c7b      	adds	r3, r7, #1
 8003590:	781b      	ldrb	r3, [r3, #0]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d004      	beq.n	80035a0 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003596:	1cbb      	adds	r3, r7, #2
 8003598:	881a      	ldrh	r2, [r3, #0]
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800359e:	e003      	b.n	80035a8 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80035a0:	1cbb      	adds	r3, r7, #2
 80035a2:	881a      	ldrh	r2, [r3, #0]
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80035a8:	46c0      	nop			@ (mov r8, r8)
 80035aa:	46bd      	mov	sp, r7
 80035ac:	b002      	add	sp, #8
 80035ae:	bd80      	pop	{r7, pc}

080035b0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b084      	sub	sp, #16
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80035b8:	4b19      	ldr	r3, [pc, #100]	@ (8003620 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4a19      	ldr	r2, [pc, #100]	@ (8003624 <HAL_PWREx_ControlVoltageScaling+0x74>)
 80035be:	4013      	ands	r3, r2
 80035c0:	0019      	movs	r1, r3
 80035c2:	4b17      	ldr	r3, [pc, #92]	@ (8003620 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80035c4:	687a      	ldr	r2, [r7, #4]
 80035c6:	430a      	orrs	r2, r1
 80035c8:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80035ca:	687a      	ldr	r2, [r7, #4]
 80035cc:	2380      	movs	r3, #128	@ 0x80
 80035ce:	009b      	lsls	r3, r3, #2
 80035d0:	429a      	cmp	r2, r3
 80035d2:	d11f      	bne.n	8003614 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80035d4:	4b14      	ldr	r3, [pc, #80]	@ (8003628 <HAL_PWREx_ControlVoltageScaling+0x78>)
 80035d6:	681a      	ldr	r2, [r3, #0]
 80035d8:	0013      	movs	r3, r2
 80035da:	005b      	lsls	r3, r3, #1
 80035dc:	189b      	adds	r3, r3, r2
 80035de:	005b      	lsls	r3, r3, #1
 80035e0:	4912      	ldr	r1, [pc, #72]	@ (800362c <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80035e2:	0018      	movs	r0, r3
 80035e4:	f7fc fd8e 	bl	8000104 <__udivsi3>
 80035e8:	0003      	movs	r3, r0
 80035ea:	3301      	adds	r3, #1
 80035ec:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80035ee:	e008      	b.n	8003602 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d003      	beq.n	80035fe <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	3b01      	subs	r3, #1
 80035fa:	60fb      	str	r3, [r7, #12]
 80035fc:	e001      	b.n	8003602 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80035fe:	2303      	movs	r3, #3
 8003600:	e009      	b.n	8003616 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003602:	4b07      	ldr	r3, [pc, #28]	@ (8003620 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003604:	695a      	ldr	r2, [r3, #20]
 8003606:	2380      	movs	r3, #128	@ 0x80
 8003608:	00db      	lsls	r3, r3, #3
 800360a:	401a      	ands	r2, r3
 800360c:	2380      	movs	r3, #128	@ 0x80
 800360e:	00db      	lsls	r3, r3, #3
 8003610:	429a      	cmp	r2, r3
 8003612:	d0ed      	beq.n	80035f0 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8003614:	2300      	movs	r3, #0
}
 8003616:	0018      	movs	r0, r3
 8003618:	46bd      	mov	sp, r7
 800361a:	b004      	add	sp, #16
 800361c:	bd80      	pop	{r7, pc}
 800361e:	46c0      	nop			@ (mov r8, r8)
 8003620:	40007000 	.word	0x40007000
 8003624:	fffff9ff 	.word	0xfffff9ff
 8003628:	20000000 	.word	0x20000000
 800362c:	000f4240 	.word	0x000f4240

08003630 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8003634:	4b03      	ldr	r3, [pc, #12]	@ (8003644 <LL_RCC_GetAPB1Prescaler+0x14>)
 8003636:	689a      	ldr	r2, [r3, #8]
 8003638:	23e0      	movs	r3, #224	@ 0xe0
 800363a:	01db      	lsls	r3, r3, #7
 800363c:	4013      	ands	r3, r2
}
 800363e:	0018      	movs	r0, r3
 8003640:	46bd      	mov	sp, r7
 8003642:	bd80      	pop	{r7, pc}
 8003644:	40021000 	.word	0x40021000

08003648 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b088      	sub	sp, #32
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d101      	bne.n	800365a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003656:	2301      	movs	r3, #1
 8003658:	e2fe      	b.n	8003c58 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	2201      	movs	r2, #1
 8003660:	4013      	ands	r3, r2
 8003662:	d100      	bne.n	8003666 <HAL_RCC_OscConfig+0x1e>
 8003664:	e07c      	b.n	8003760 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003666:	4bc3      	ldr	r3, [pc, #780]	@ (8003974 <HAL_RCC_OscConfig+0x32c>)
 8003668:	689b      	ldr	r3, [r3, #8]
 800366a:	2238      	movs	r2, #56	@ 0x38
 800366c:	4013      	ands	r3, r2
 800366e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003670:	4bc0      	ldr	r3, [pc, #768]	@ (8003974 <HAL_RCC_OscConfig+0x32c>)
 8003672:	68db      	ldr	r3, [r3, #12]
 8003674:	2203      	movs	r2, #3
 8003676:	4013      	ands	r3, r2
 8003678:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 800367a:	69bb      	ldr	r3, [r7, #24]
 800367c:	2b10      	cmp	r3, #16
 800367e:	d102      	bne.n	8003686 <HAL_RCC_OscConfig+0x3e>
 8003680:	697b      	ldr	r3, [r7, #20]
 8003682:	2b03      	cmp	r3, #3
 8003684:	d002      	beq.n	800368c <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8003686:	69bb      	ldr	r3, [r7, #24]
 8003688:	2b08      	cmp	r3, #8
 800368a:	d10b      	bne.n	80036a4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800368c:	4bb9      	ldr	r3, [pc, #740]	@ (8003974 <HAL_RCC_OscConfig+0x32c>)
 800368e:	681a      	ldr	r2, [r3, #0]
 8003690:	2380      	movs	r3, #128	@ 0x80
 8003692:	029b      	lsls	r3, r3, #10
 8003694:	4013      	ands	r3, r2
 8003696:	d062      	beq.n	800375e <HAL_RCC_OscConfig+0x116>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d15e      	bne.n	800375e <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 80036a0:	2301      	movs	r3, #1
 80036a2:	e2d9      	b.n	8003c58 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	685a      	ldr	r2, [r3, #4]
 80036a8:	2380      	movs	r3, #128	@ 0x80
 80036aa:	025b      	lsls	r3, r3, #9
 80036ac:	429a      	cmp	r2, r3
 80036ae:	d107      	bne.n	80036c0 <HAL_RCC_OscConfig+0x78>
 80036b0:	4bb0      	ldr	r3, [pc, #704]	@ (8003974 <HAL_RCC_OscConfig+0x32c>)
 80036b2:	681a      	ldr	r2, [r3, #0]
 80036b4:	4baf      	ldr	r3, [pc, #700]	@ (8003974 <HAL_RCC_OscConfig+0x32c>)
 80036b6:	2180      	movs	r1, #128	@ 0x80
 80036b8:	0249      	lsls	r1, r1, #9
 80036ba:	430a      	orrs	r2, r1
 80036bc:	601a      	str	r2, [r3, #0]
 80036be:	e020      	b.n	8003702 <HAL_RCC_OscConfig+0xba>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	685a      	ldr	r2, [r3, #4]
 80036c4:	23a0      	movs	r3, #160	@ 0xa0
 80036c6:	02db      	lsls	r3, r3, #11
 80036c8:	429a      	cmp	r2, r3
 80036ca:	d10e      	bne.n	80036ea <HAL_RCC_OscConfig+0xa2>
 80036cc:	4ba9      	ldr	r3, [pc, #676]	@ (8003974 <HAL_RCC_OscConfig+0x32c>)
 80036ce:	681a      	ldr	r2, [r3, #0]
 80036d0:	4ba8      	ldr	r3, [pc, #672]	@ (8003974 <HAL_RCC_OscConfig+0x32c>)
 80036d2:	2180      	movs	r1, #128	@ 0x80
 80036d4:	02c9      	lsls	r1, r1, #11
 80036d6:	430a      	orrs	r2, r1
 80036d8:	601a      	str	r2, [r3, #0]
 80036da:	4ba6      	ldr	r3, [pc, #664]	@ (8003974 <HAL_RCC_OscConfig+0x32c>)
 80036dc:	681a      	ldr	r2, [r3, #0]
 80036de:	4ba5      	ldr	r3, [pc, #660]	@ (8003974 <HAL_RCC_OscConfig+0x32c>)
 80036e0:	2180      	movs	r1, #128	@ 0x80
 80036e2:	0249      	lsls	r1, r1, #9
 80036e4:	430a      	orrs	r2, r1
 80036e6:	601a      	str	r2, [r3, #0]
 80036e8:	e00b      	b.n	8003702 <HAL_RCC_OscConfig+0xba>
 80036ea:	4ba2      	ldr	r3, [pc, #648]	@ (8003974 <HAL_RCC_OscConfig+0x32c>)
 80036ec:	681a      	ldr	r2, [r3, #0]
 80036ee:	4ba1      	ldr	r3, [pc, #644]	@ (8003974 <HAL_RCC_OscConfig+0x32c>)
 80036f0:	49a1      	ldr	r1, [pc, #644]	@ (8003978 <HAL_RCC_OscConfig+0x330>)
 80036f2:	400a      	ands	r2, r1
 80036f4:	601a      	str	r2, [r3, #0]
 80036f6:	4b9f      	ldr	r3, [pc, #636]	@ (8003974 <HAL_RCC_OscConfig+0x32c>)
 80036f8:	681a      	ldr	r2, [r3, #0]
 80036fa:	4b9e      	ldr	r3, [pc, #632]	@ (8003974 <HAL_RCC_OscConfig+0x32c>)
 80036fc:	499f      	ldr	r1, [pc, #636]	@ (800397c <HAL_RCC_OscConfig+0x334>)
 80036fe:	400a      	ands	r2, r1
 8003700:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	685b      	ldr	r3, [r3, #4]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d014      	beq.n	8003734 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800370a:	f7fe fc27 	bl	8001f5c <HAL_GetTick>
 800370e:	0003      	movs	r3, r0
 8003710:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003712:	e008      	b.n	8003726 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003714:	f7fe fc22 	bl	8001f5c <HAL_GetTick>
 8003718:	0002      	movs	r2, r0
 800371a:	693b      	ldr	r3, [r7, #16]
 800371c:	1ad3      	subs	r3, r2, r3
 800371e:	2b64      	cmp	r3, #100	@ 0x64
 8003720:	d901      	bls.n	8003726 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8003722:	2303      	movs	r3, #3
 8003724:	e298      	b.n	8003c58 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003726:	4b93      	ldr	r3, [pc, #588]	@ (8003974 <HAL_RCC_OscConfig+0x32c>)
 8003728:	681a      	ldr	r2, [r3, #0]
 800372a:	2380      	movs	r3, #128	@ 0x80
 800372c:	029b      	lsls	r3, r3, #10
 800372e:	4013      	ands	r3, r2
 8003730:	d0f0      	beq.n	8003714 <HAL_RCC_OscConfig+0xcc>
 8003732:	e015      	b.n	8003760 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003734:	f7fe fc12 	bl	8001f5c <HAL_GetTick>
 8003738:	0003      	movs	r3, r0
 800373a:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800373c:	e008      	b.n	8003750 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800373e:	f7fe fc0d 	bl	8001f5c <HAL_GetTick>
 8003742:	0002      	movs	r2, r0
 8003744:	693b      	ldr	r3, [r7, #16]
 8003746:	1ad3      	subs	r3, r2, r3
 8003748:	2b64      	cmp	r3, #100	@ 0x64
 800374a:	d901      	bls.n	8003750 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 800374c:	2303      	movs	r3, #3
 800374e:	e283      	b.n	8003c58 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003750:	4b88      	ldr	r3, [pc, #544]	@ (8003974 <HAL_RCC_OscConfig+0x32c>)
 8003752:	681a      	ldr	r2, [r3, #0]
 8003754:	2380      	movs	r3, #128	@ 0x80
 8003756:	029b      	lsls	r3, r3, #10
 8003758:	4013      	ands	r3, r2
 800375a:	d1f0      	bne.n	800373e <HAL_RCC_OscConfig+0xf6>
 800375c:	e000      	b.n	8003760 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800375e:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	2202      	movs	r2, #2
 8003766:	4013      	ands	r3, r2
 8003768:	d100      	bne.n	800376c <HAL_RCC_OscConfig+0x124>
 800376a:	e099      	b.n	80038a0 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800376c:	4b81      	ldr	r3, [pc, #516]	@ (8003974 <HAL_RCC_OscConfig+0x32c>)
 800376e:	689b      	ldr	r3, [r3, #8]
 8003770:	2238      	movs	r2, #56	@ 0x38
 8003772:	4013      	ands	r3, r2
 8003774:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003776:	4b7f      	ldr	r3, [pc, #508]	@ (8003974 <HAL_RCC_OscConfig+0x32c>)
 8003778:	68db      	ldr	r3, [r3, #12]
 800377a:	2203      	movs	r2, #3
 800377c:	4013      	ands	r3, r2
 800377e:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8003780:	69bb      	ldr	r3, [r7, #24]
 8003782:	2b10      	cmp	r3, #16
 8003784:	d102      	bne.n	800378c <HAL_RCC_OscConfig+0x144>
 8003786:	697b      	ldr	r3, [r7, #20]
 8003788:	2b02      	cmp	r3, #2
 800378a:	d002      	beq.n	8003792 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 800378c:	69bb      	ldr	r3, [r7, #24]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d135      	bne.n	80037fe <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003792:	4b78      	ldr	r3, [pc, #480]	@ (8003974 <HAL_RCC_OscConfig+0x32c>)
 8003794:	681a      	ldr	r2, [r3, #0]
 8003796:	2380      	movs	r3, #128	@ 0x80
 8003798:	00db      	lsls	r3, r3, #3
 800379a:	4013      	ands	r3, r2
 800379c:	d005      	beq.n	80037aa <HAL_RCC_OscConfig+0x162>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	68db      	ldr	r3, [r3, #12]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d101      	bne.n	80037aa <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 80037a6:	2301      	movs	r3, #1
 80037a8:	e256      	b.n	8003c58 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037aa:	4b72      	ldr	r3, [pc, #456]	@ (8003974 <HAL_RCC_OscConfig+0x32c>)
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	4a74      	ldr	r2, [pc, #464]	@ (8003980 <HAL_RCC_OscConfig+0x338>)
 80037b0:	4013      	ands	r3, r2
 80037b2:	0019      	movs	r1, r3
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	695b      	ldr	r3, [r3, #20]
 80037b8:	021a      	lsls	r2, r3, #8
 80037ba:	4b6e      	ldr	r3, [pc, #440]	@ (8003974 <HAL_RCC_OscConfig+0x32c>)
 80037bc:	430a      	orrs	r2, r1
 80037be:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80037c0:	69bb      	ldr	r3, [r7, #24]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d112      	bne.n	80037ec <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80037c6:	4b6b      	ldr	r3, [pc, #428]	@ (8003974 <HAL_RCC_OscConfig+0x32c>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	4a6e      	ldr	r2, [pc, #440]	@ (8003984 <HAL_RCC_OscConfig+0x33c>)
 80037cc:	4013      	ands	r3, r2
 80037ce:	0019      	movs	r1, r3
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	691a      	ldr	r2, [r3, #16]
 80037d4:	4b67      	ldr	r3, [pc, #412]	@ (8003974 <HAL_RCC_OscConfig+0x32c>)
 80037d6:	430a      	orrs	r2, r1
 80037d8:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80037da:	4b66      	ldr	r3, [pc, #408]	@ (8003974 <HAL_RCC_OscConfig+0x32c>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	0adb      	lsrs	r3, r3, #11
 80037e0:	2207      	movs	r2, #7
 80037e2:	4013      	ands	r3, r2
 80037e4:	4a68      	ldr	r2, [pc, #416]	@ (8003988 <HAL_RCC_OscConfig+0x340>)
 80037e6:	40da      	lsrs	r2, r3
 80037e8:	4b68      	ldr	r3, [pc, #416]	@ (800398c <HAL_RCC_OscConfig+0x344>)
 80037ea:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80037ec:	4b68      	ldr	r3, [pc, #416]	@ (8003990 <HAL_RCC_OscConfig+0x348>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	0018      	movs	r0, r3
 80037f2:	f7fe fb57 	bl	8001ea4 <HAL_InitTick>
 80037f6:	1e03      	subs	r3, r0, #0
 80037f8:	d051      	beq.n	800389e <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80037fa:	2301      	movs	r3, #1
 80037fc:	e22c      	b.n	8003c58 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	68db      	ldr	r3, [r3, #12]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d030      	beq.n	8003868 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003806:	4b5b      	ldr	r3, [pc, #364]	@ (8003974 <HAL_RCC_OscConfig+0x32c>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4a5e      	ldr	r2, [pc, #376]	@ (8003984 <HAL_RCC_OscConfig+0x33c>)
 800380c:	4013      	ands	r3, r2
 800380e:	0019      	movs	r1, r3
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	691a      	ldr	r2, [r3, #16]
 8003814:	4b57      	ldr	r3, [pc, #348]	@ (8003974 <HAL_RCC_OscConfig+0x32c>)
 8003816:	430a      	orrs	r2, r1
 8003818:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800381a:	4b56      	ldr	r3, [pc, #344]	@ (8003974 <HAL_RCC_OscConfig+0x32c>)
 800381c:	681a      	ldr	r2, [r3, #0]
 800381e:	4b55      	ldr	r3, [pc, #340]	@ (8003974 <HAL_RCC_OscConfig+0x32c>)
 8003820:	2180      	movs	r1, #128	@ 0x80
 8003822:	0049      	lsls	r1, r1, #1
 8003824:	430a      	orrs	r2, r1
 8003826:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003828:	f7fe fb98 	bl	8001f5c <HAL_GetTick>
 800382c:	0003      	movs	r3, r0
 800382e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003830:	e008      	b.n	8003844 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003832:	f7fe fb93 	bl	8001f5c <HAL_GetTick>
 8003836:	0002      	movs	r2, r0
 8003838:	693b      	ldr	r3, [r7, #16]
 800383a:	1ad3      	subs	r3, r2, r3
 800383c:	2b02      	cmp	r3, #2
 800383e:	d901      	bls.n	8003844 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8003840:	2303      	movs	r3, #3
 8003842:	e209      	b.n	8003c58 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003844:	4b4b      	ldr	r3, [pc, #300]	@ (8003974 <HAL_RCC_OscConfig+0x32c>)
 8003846:	681a      	ldr	r2, [r3, #0]
 8003848:	2380      	movs	r3, #128	@ 0x80
 800384a:	00db      	lsls	r3, r3, #3
 800384c:	4013      	ands	r3, r2
 800384e:	d0f0      	beq.n	8003832 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003850:	4b48      	ldr	r3, [pc, #288]	@ (8003974 <HAL_RCC_OscConfig+0x32c>)
 8003852:	685b      	ldr	r3, [r3, #4]
 8003854:	4a4a      	ldr	r2, [pc, #296]	@ (8003980 <HAL_RCC_OscConfig+0x338>)
 8003856:	4013      	ands	r3, r2
 8003858:	0019      	movs	r1, r3
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	695b      	ldr	r3, [r3, #20]
 800385e:	021a      	lsls	r2, r3, #8
 8003860:	4b44      	ldr	r3, [pc, #272]	@ (8003974 <HAL_RCC_OscConfig+0x32c>)
 8003862:	430a      	orrs	r2, r1
 8003864:	605a      	str	r2, [r3, #4]
 8003866:	e01b      	b.n	80038a0 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8003868:	4b42      	ldr	r3, [pc, #264]	@ (8003974 <HAL_RCC_OscConfig+0x32c>)
 800386a:	681a      	ldr	r2, [r3, #0]
 800386c:	4b41      	ldr	r3, [pc, #260]	@ (8003974 <HAL_RCC_OscConfig+0x32c>)
 800386e:	4949      	ldr	r1, [pc, #292]	@ (8003994 <HAL_RCC_OscConfig+0x34c>)
 8003870:	400a      	ands	r2, r1
 8003872:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003874:	f7fe fb72 	bl	8001f5c <HAL_GetTick>
 8003878:	0003      	movs	r3, r0
 800387a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800387c:	e008      	b.n	8003890 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800387e:	f7fe fb6d 	bl	8001f5c <HAL_GetTick>
 8003882:	0002      	movs	r2, r0
 8003884:	693b      	ldr	r3, [r7, #16]
 8003886:	1ad3      	subs	r3, r2, r3
 8003888:	2b02      	cmp	r3, #2
 800388a:	d901      	bls.n	8003890 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800388c:	2303      	movs	r3, #3
 800388e:	e1e3      	b.n	8003c58 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003890:	4b38      	ldr	r3, [pc, #224]	@ (8003974 <HAL_RCC_OscConfig+0x32c>)
 8003892:	681a      	ldr	r2, [r3, #0]
 8003894:	2380      	movs	r3, #128	@ 0x80
 8003896:	00db      	lsls	r3, r3, #3
 8003898:	4013      	ands	r3, r2
 800389a:	d1f0      	bne.n	800387e <HAL_RCC_OscConfig+0x236>
 800389c:	e000      	b.n	80038a0 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800389e:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	2208      	movs	r2, #8
 80038a6:	4013      	ands	r3, r2
 80038a8:	d047      	beq.n	800393a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80038aa:	4b32      	ldr	r3, [pc, #200]	@ (8003974 <HAL_RCC_OscConfig+0x32c>)
 80038ac:	689b      	ldr	r3, [r3, #8]
 80038ae:	2238      	movs	r2, #56	@ 0x38
 80038b0:	4013      	ands	r3, r2
 80038b2:	2b18      	cmp	r3, #24
 80038b4:	d10a      	bne.n	80038cc <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80038b6:	4b2f      	ldr	r3, [pc, #188]	@ (8003974 <HAL_RCC_OscConfig+0x32c>)
 80038b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038ba:	2202      	movs	r2, #2
 80038bc:	4013      	ands	r3, r2
 80038be:	d03c      	beq.n	800393a <HAL_RCC_OscConfig+0x2f2>
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	699b      	ldr	r3, [r3, #24]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d138      	bne.n	800393a <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80038c8:	2301      	movs	r3, #1
 80038ca:	e1c5      	b.n	8003c58 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	699b      	ldr	r3, [r3, #24]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d019      	beq.n	8003908 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80038d4:	4b27      	ldr	r3, [pc, #156]	@ (8003974 <HAL_RCC_OscConfig+0x32c>)
 80038d6:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80038d8:	4b26      	ldr	r3, [pc, #152]	@ (8003974 <HAL_RCC_OscConfig+0x32c>)
 80038da:	2101      	movs	r1, #1
 80038dc:	430a      	orrs	r2, r1
 80038de:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038e0:	f7fe fb3c 	bl	8001f5c <HAL_GetTick>
 80038e4:	0003      	movs	r3, r0
 80038e6:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80038e8:	e008      	b.n	80038fc <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80038ea:	f7fe fb37 	bl	8001f5c <HAL_GetTick>
 80038ee:	0002      	movs	r2, r0
 80038f0:	693b      	ldr	r3, [r7, #16]
 80038f2:	1ad3      	subs	r3, r2, r3
 80038f4:	2b02      	cmp	r3, #2
 80038f6:	d901      	bls.n	80038fc <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80038f8:	2303      	movs	r3, #3
 80038fa:	e1ad      	b.n	8003c58 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80038fc:	4b1d      	ldr	r3, [pc, #116]	@ (8003974 <HAL_RCC_OscConfig+0x32c>)
 80038fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003900:	2202      	movs	r2, #2
 8003902:	4013      	ands	r3, r2
 8003904:	d0f1      	beq.n	80038ea <HAL_RCC_OscConfig+0x2a2>
 8003906:	e018      	b.n	800393a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8003908:	4b1a      	ldr	r3, [pc, #104]	@ (8003974 <HAL_RCC_OscConfig+0x32c>)
 800390a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800390c:	4b19      	ldr	r3, [pc, #100]	@ (8003974 <HAL_RCC_OscConfig+0x32c>)
 800390e:	2101      	movs	r1, #1
 8003910:	438a      	bics	r2, r1
 8003912:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003914:	f7fe fb22 	bl	8001f5c <HAL_GetTick>
 8003918:	0003      	movs	r3, r0
 800391a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800391c:	e008      	b.n	8003930 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800391e:	f7fe fb1d 	bl	8001f5c <HAL_GetTick>
 8003922:	0002      	movs	r2, r0
 8003924:	693b      	ldr	r3, [r7, #16]
 8003926:	1ad3      	subs	r3, r2, r3
 8003928:	2b02      	cmp	r3, #2
 800392a:	d901      	bls.n	8003930 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 800392c:	2303      	movs	r3, #3
 800392e:	e193      	b.n	8003c58 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003930:	4b10      	ldr	r3, [pc, #64]	@ (8003974 <HAL_RCC_OscConfig+0x32c>)
 8003932:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003934:	2202      	movs	r2, #2
 8003936:	4013      	ands	r3, r2
 8003938:	d1f1      	bne.n	800391e <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	2204      	movs	r2, #4
 8003940:	4013      	ands	r3, r2
 8003942:	d100      	bne.n	8003946 <HAL_RCC_OscConfig+0x2fe>
 8003944:	e0c6      	b.n	8003ad4 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003946:	231f      	movs	r3, #31
 8003948:	18fb      	adds	r3, r7, r3
 800394a:	2200      	movs	r2, #0
 800394c:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800394e:	4b09      	ldr	r3, [pc, #36]	@ (8003974 <HAL_RCC_OscConfig+0x32c>)
 8003950:	689b      	ldr	r3, [r3, #8]
 8003952:	2238      	movs	r2, #56	@ 0x38
 8003954:	4013      	ands	r3, r2
 8003956:	2b20      	cmp	r3, #32
 8003958:	d11e      	bne.n	8003998 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800395a:	4b06      	ldr	r3, [pc, #24]	@ (8003974 <HAL_RCC_OscConfig+0x32c>)
 800395c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800395e:	2202      	movs	r2, #2
 8003960:	4013      	ands	r3, r2
 8003962:	d100      	bne.n	8003966 <HAL_RCC_OscConfig+0x31e>
 8003964:	e0b6      	b.n	8003ad4 <HAL_RCC_OscConfig+0x48c>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	689b      	ldr	r3, [r3, #8]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d000      	beq.n	8003970 <HAL_RCC_OscConfig+0x328>
 800396e:	e0b1      	b.n	8003ad4 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8003970:	2301      	movs	r3, #1
 8003972:	e171      	b.n	8003c58 <HAL_RCC_OscConfig+0x610>
 8003974:	40021000 	.word	0x40021000
 8003978:	fffeffff 	.word	0xfffeffff
 800397c:	fffbffff 	.word	0xfffbffff
 8003980:	ffff80ff 	.word	0xffff80ff
 8003984:	ffffc7ff 	.word	0xffffc7ff
 8003988:	00f42400 	.word	0x00f42400
 800398c:	20000000 	.word	0x20000000
 8003990:	20000004 	.word	0x20000004
 8003994:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003998:	4bb1      	ldr	r3, [pc, #708]	@ (8003c60 <HAL_RCC_OscConfig+0x618>)
 800399a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800399c:	2380      	movs	r3, #128	@ 0x80
 800399e:	055b      	lsls	r3, r3, #21
 80039a0:	4013      	ands	r3, r2
 80039a2:	d101      	bne.n	80039a8 <HAL_RCC_OscConfig+0x360>
 80039a4:	2301      	movs	r3, #1
 80039a6:	e000      	b.n	80039aa <HAL_RCC_OscConfig+0x362>
 80039a8:	2300      	movs	r3, #0
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d011      	beq.n	80039d2 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80039ae:	4bac      	ldr	r3, [pc, #688]	@ (8003c60 <HAL_RCC_OscConfig+0x618>)
 80039b0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80039b2:	4bab      	ldr	r3, [pc, #684]	@ (8003c60 <HAL_RCC_OscConfig+0x618>)
 80039b4:	2180      	movs	r1, #128	@ 0x80
 80039b6:	0549      	lsls	r1, r1, #21
 80039b8:	430a      	orrs	r2, r1
 80039ba:	63da      	str	r2, [r3, #60]	@ 0x3c
 80039bc:	4ba8      	ldr	r3, [pc, #672]	@ (8003c60 <HAL_RCC_OscConfig+0x618>)
 80039be:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80039c0:	2380      	movs	r3, #128	@ 0x80
 80039c2:	055b      	lsls	r3, r3, #21
 80039c4:	4013      	ands	r3, r2
 80039c6:	60fb      	str	r3, [r7, #12]
 80039c8:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80039ca:	231f      	movs	r3, #31
 80039cc:	18fb      	adds	r3, r7, r3
 80039ce:	2201      	movs	r2, #1
 80039d0:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80039d2:	4ba4      	ldr	r3, [pc, #656]	@ (8003c64 <HAL_RCC_OscConfig+0x61c>)
 80039d4:	681a      	ldr	r2, [r3, #0]
 80039d6:	2380      	movs	r3, #128	@ 0x80
 80039d8:	005b      	lsls	r3, r3, #1
 80039da:	4013      	ands	r3, r2
 80039dc:	d11a      	bne.n	8003a14 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80039de:	4ba1      	ldr	r3, [pc, #644]	@ (8003c64 <HAL_RCC_OscConfig+0x61c>)
 80039e0:	681a      	ldr	r2, [r3, #0]
 80039e2:	4ba0      	ldr	r3, [pc, #640]	@ (8003c64 <HAL_RCC_OscConfig+0x61c>)
 80039e4:	2180      	movs	r1, #128	@ 0x80
 80039e6:	0049      	lsls	r1, r1, #1
 80039e8:	430a      	orrs	r2, r1
 80039ea:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80039ec:	f7fe fab6 	bl	8001f5c <HAL_GetTick>
 80039f0:	0003      	movs	r3, r0
 80039f2:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80039f4:	e008      	b.n	8003a08 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039f6:	f7fe fab1 	bl	8001f5c <HAL_GetTick>
 80039fa:	0002      	movs	r2, r0
 80039fc:	693b      	ldr	r3, [r7, #16]
 80039fe:	1ad3      	subs	r3, r2, r3
 8003a00:	2b02      	cmp	r3, #2
 8003a02:	d901      	bls.n	8003a08 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8003a04:	2303      	movs	r3, #3
 8003a06:	e127      	b.n	8003c58 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a08:	4b96      	ldr	r3, [pc, #600]	@ (8003c64 <HAL_RCC_OscConfig+0x61c>)
 8003a0a:	681a      	ldr	r2, [r3, #0]
 8003a0c:	2380      	movs	r3, #128	@ 0x80
 8003a0e:	005b      	lsls	r3, r3, #1
 8003a10:	4013      	ands	r3, r2
 8003a12:	d0f0      	beq.n	80039f6 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	689b      	ldr	r3, [r3, #8]
 8003a18:	2b01      	cmp	r3, #1
 8003a1a:	d106      	bne.n	8003a2a <HAL_RCC_OscConfig+0x3e2>
 8003a1c:	4b90      	ldr	r3, [pc, #576]	@ (8003c60 <HAL_RCC_OscConfig+0x618>)
 8003a1e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003a20:	4b8f      	ldr	r3, [pc, #572]	@ (8003c60 <HAL_RCC_OscConfig+0x618>)
 8003a22:	2101      	movs	r1, #1
 8003a24:	430a      	orrs	r2, r1
 8003a26:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003a28:	e01c      	b.n	8003a64 <HAL_RCC_OscConfig+0x41c>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	689b      	ldr	r3, [r3, #8]
 8003a2e:	2b05      	cmp	r3, #5
 8003a30:	d10c      	bne.n	8003a4c <HAL_RCC_OscConfig+0x404>
 8003a32:	4b8b      	ldr	r3, [pc, #556]	@ (8003c60 <HAL_RCC_OscConfig+0x618>)
 8003a34:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003a36:	4b8a      	ldr	r3, [pc, #552]	@ (8003c60 <HAL_RCC_OscConfig+0x618>)
 8003a38:	2104      	movs	r1, #4
 8003a3a:	430a      	orrs	r2, r1
 8003a3c:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003a3e:	4b88      	ldr	r3, [pc, #544]	@ (8003c60 <HAL_RCC_OscConfig+0x618>)
 8003a40:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003a42:	4b87      	ldr	r3, [pc, #540]	@ (8003c60 <HAL_RCC_OscConfig+0x618>)
 8003a44:	2101      	movs	r1, #1
 8003a46:	430a      	orrs	r2, r1
 8003a48:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003a4a:	e00b      	b.n	8003a64 <HAL_RCC_OscConfig+0x41c>
 8003a4c:	4b84      	ldr	r3, [pc, #528]	@ (8003c60 <HAL_RCC_OscConfig+0x618>)
 8003a4e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003a50:	4b83      	ldr	r3, [pc, #524]	@ (8003c60 <HAL_RCC_OscConfig+0x618>)
 8003a52:	2101      	movs	r1, #1
 8003a54:	438a      	bics	r2, r1
 8003a56:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003a58:	4b81      	ldr	r3, [pc, #516]	@ (8003c60 <HAL_RCC_OscConfig+0x618>)
 8003a5a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003a5c:	4b80      	ldr	r3, [pc, #512]	@ (8003c60 <HAL_RCC_OscConfig+0x618>)
 8003a5e:	2104      	movs	r1, #4
 8003a60:	438a      	bics	r2, r1
 8003a62:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	689b      	ldr	r3, [r3, #8]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d014      	beq.n	8003a96 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a6c:	f7fe fa76 	bl	8001f5c <HAL_GetTick>
 8003a70:	0003      	movs	r3, r0
 8003a72:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a74:	e009      	b.n	8003a8a <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a76:	f7fe fa71 	bl	8001f5c <HAL_GetTick>
 8003a7a:	0002      	movs	r2, r0
 8003a7c:	693b      	ldr	r3, [r7, #16]
 8003a7e:	1ad3      	subs	r3, r2, r3
 8003a80:	4a79      	ldr	r2, [pc, #484]	@ (8003c68 <HAL_RCC_OscConfig+0x620>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d901      	bls.n	8003a8a <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8003a86:	2303      	movs	r3, #3
 8003a88:	e0e6      	b.n	8003c58 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a8a:	4b75      	ldr	r3, [pc, #468]	@ (8003c60 <HAL_RCC_OscConfig+0x618>)
 8003a8c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a8e:	2202      	movs	r2, #2
 8003a90:	4013      	ands	r3, r2
 8003a92:	d0f0      	beq.n	8003a76 <HAL_RCC_OscConfig+0x42e>
 8003a94:	e013      	b.n	8003abe <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a96:	f7fe fa61 	bl	8001f5c <HAL_GetTick>
 8003a9a:	0003      	movs	r3, r0
 8003a9c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003a9e:	e009      	b.n	8003ab4 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003aa0:	f7fe fa5c 	bl	8001f5c <HAL_GetTick>
 8003aa4:	0002      	movs	r2, r0
 8003aa6:	693b      	ldr	r3, [r7, #16]
 8003aa8:	1ad3      	subs	r3, r2, r3
 8003aaa:	4a6f      	ldr	r2, [pc, #444]	@ (8003c68 <HAL_RCC_OscConfig+0x620>)
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d901      	bls.n	8003ab4 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8003ab0:	2303      	movs	r3, #3
 8003ab2:	e0d1      	b.n	8003c58 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003ab4:	4b6a      	ldr	r3, [pc, #424]	@ (8003c60 <HAL_RCC_OscConfig+0x618>)
 8003ab6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ab8:	2202      	movs	r2, #2
 8003aba:	4013      	ands	r3, r2
 8003abc:	d1f0      	bne.n	8003aa0 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8003abe:	231f      	movs	r3, #31
 8003ac0:	18fb      	adds	r3, r7, r3
 8003ac2:	781b      	ldrb	r3, [r3, #0]
 8003ac4:	2b01      	cmp	r3, #1
 8003ac6:	d105      	bne.n	8003ad4 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8003ac8:	4b65      	ldr	r3, [pc, #404]	@ (8003c60 <HAL_RCC_OscConfig+0x618>)
 8003aca:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003acc:	4b64      	ldr	r3, [pc, #400]	@ (8003c60 <HAL_RCC_OscConfig+0x618>)
 8003ace:	4967      	ldr	r1, [pc, #412]	@ (8003c6c <HAL_RCC_OscConfig+0x624>)
 8003ad0:	400a      	ands	r2, r1
 8003ad2:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	69db      	ldr	r3, [r3, #28]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d100      	bne.n	8003ade <HAL_RCC_OscConfig+0x496>
 8003adc:	e0bb      	b.n	8003c56 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003ade:	4b60      	ldr	r3, [pc, #384]	@ (8003c60 <HAL_RCC_OscConfig+0x618>)
 8003ae0:	689b      	ldr	r3, [r3, #8]
 8003ae2:	2238      	movs	r2, #56	@ 0x38
 8003ae4:	4013      	ands	r3, r2
 8003ae6:	2b10      	cmp	r3, #16
 8003ae8:	d100      	bne.n	8003aec <HAL_RCC_OscConfig+0x4a4>
 8003aea:	e07b      	b.n	8003be4 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	69db      	ldr	r3, [r3, #28]
 8003af0:	2b02      	cmp	r3, #2
 8003af2:	d156      	bne.n	8003ba2 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003af4:	4b5a      	ldr	r3, [pc, #360]	@ (8003c60 <HAL_RCC_OscConfig+0x618>)
 8003af6:	681a      	ldr	r2, [r3, #0]
 8003af8:	4b59      	ldr	r3, [pc, #356]	@ (8003c60 <HAL_RCC_OscConfig+0x618>)
 8003afa:	495d      	ldr	r1, [pc, #372]	@ (8003c70 <HAL_RCC_OscConfig+0x628>)
 8003afc:	400a      	ands	r2, r1
 8003afe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b00:	f7fe fa2c 	bl	8001f5c <HAL_GetTick>
 8003b04:	0003      	movs	r3, r0
 8003b06:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b08:	e008      	b.n	8003b1c <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b0a:	f7fe fa27 	bl	8001f5c <HAL_GetTick>
 8003b0e:	0002      	movs	r2, r0
 8003b10:	693b      	ldr	r3, [r7, #16]
 8003b12:	1ad3      	subs	r3, r2, r3
 8003b14:	2b02      	cmp	r3, #2
 8003b16:	d901      	bls.n	8003b1c <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8003b18:	2303      	movs	r3, #3
 8003b1a:	e09d      	b.n	8003c58 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b1c:	4b50      	ldr	r3, [pc, #320]	@ (8003c60 <HAL_RCC_OscConfig+0x618>)
 8003b1e:	681a      	ldr	r2, [r3, #0]
 8003b20:	2380      	movs	r3, #128	@ 0x80
 8003b22:	049b      	lsls	r3, r3, #18
 8003b24:	4013      	ands	r3, r2
 8003b26:	d1f0      	bne.n	8003b0a <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003b28:	4b4d      	ldr	r3, [pc, #308]	@ (8003c60 <HAL_RCC_OscConfig+0x618>)
 8003b2a:	68db      	ldr	r3, [r3, #12]
 8003b2c:	4a51      	ldr	r2, [pc, #324]	@ (8003c74 <HAL_RCC_OscConfig+0x62c>)
 8003b2e:	4013      	ands	r3, r2
 8003b30:	0019      	movs	r1, r3
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6a1a      	ldr	r2, [r3, #32]
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b3a:	431a      	orrs	r2, r3
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b40:	021b      	lsls	r3, r3, #8
 8003b42:	431a      	orrs	r2, r3
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b48:	431a      	orrs	r2, r3
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b4e:	431a      	orrs	r2, r3
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b54:	431a      	orrs	r2, r3
 8003b56:	4b42      	ldr	r3, [pc, #264]	@ (8003c60 <HAL_RCC_OscConfig+0x618>)
 8003b58:	430a      	orrs	r2, r1
 8003b5a:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b5c:	4b40      	ldr	r3, [pc, #256]	@ (8003c60 <HAL_RCC_OscConfig+0x618>)
 8003b5e:	681a      	ldr	r2, [r3, #0]
 8003b60:	4b3f      	ldr	r3, [pc, #252]	@ (8003c60 <HAL_RCC_OscConfig+0x618>)
 8003b62:	2180      	movs	r1, #128	@ 0x80
 8003b64:	0449      	lsls	r1, r1, #17
 8003b66:	430a      	orrs	r2, r1
 8003b68:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8003b6a:	4b3d      	ldr	r3, [pc, #244]	@ (8003c60 <HAL_RCC_OscConfig+0x618>)
 8003b6c:	68da      	ldr	r2, [r3, #12]
 8003b6e:	4b3c      	ldr	r3, [pc, #240]	@ (8003c60 <HAL_RCC_OscConfig+0x618>)
 8003b70:	2180      	movs	r1, #128	@ 0x80
 8003b72:	0549      	lsls	r1, r1, #21
 8003b74:	430a      	orrs	r2, r1
 8003b76:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b78:	f7fe f9f0 	bl	8001f5c <HAL_GetTick>
 8003b7c:	0003      	movs	r3, r0
 8003b7e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b80:	e008      	b.n	8003b94 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b82:	f7fe f9eb 	bl	8001f5c <HAL_GetTick>
 8003b86:	0002      	movs	r2, r0
 8003b88:	693b      	ldr	r3, [r7, #16]
 8003b8a:	1ad3      	subs	r3, r2, r3
 8003b8c:	2b02      	cmp	r3, #2
 8003b8e:	d901      	bls.n	8003b94 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8003b90:	2303      	movs	r3, #3
 8003b92:	e061      	b.n	8003c58 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b94:	4b32      	ldr	r3, [pc, #200]	@ (8003c60 <HAL_RCC_OscConfig+0x618>)
 8003b96:	681a      	ldr	r2, [r3, #0]
 8003b98:	2380      	movs	r3, #128	@ 0x80
 8003b9a:	049b      	lsls	r3, r3, #18
 8003b9c:	4013      	ands	r3, r2
 8003b9e:	d0f0      	beq.n	8003b82 <HAL_RCC_OscConfig+0x53a>
 8003ba0:	e059      	b.n	8003c56 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ba2:	4b2f      	ldr	r3, [pc, #188]	@ (8003c60 <HAL_RCC_OscConfig+0x618>)
 8003ba4:	681a      	ldr	r2, [r3, #0]
 8003ba6:	4b2e      	ldr	r3, [pc, #184]	@ (8003c60 <HAL_RCC_OscConfig+0x618>)
 8003ba8:	4931      	ldr	r1, [pc, #196]	@ (8003c70 <HAL_RCC_OscConfig+0x628>)
 8003baa:	400a      	ands	r2, r1
 8003bac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bae:	f7fe f9d5 	bl	8001f5c <HAL_GetTick>
 8003bb2:	0003      	movs	r3, r0
 8003bb4:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003bb6:	e008      	b.n	8003bca <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bb8:	f7fe f9d0 	bl	8001f5c <HAL_GetTick>
 8003bbc:	0002      	movs	r2, r0
 8003bbe:	693b      	ldr	r3, [r7, #16]
 8003bc0:	1ad3      	subs	r3, r2, r3
 8003bc2:	2b02      	cmp	r3, #2
 8003bc4:	d901      	bls.n	8003bca <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8003bc6:	2303      	movs	r3, #3
 8003bc8:	e046      	b.n	8003c58 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003bca:	4b25      	ldr	r3, [pc, #148]	@ (8003c60 <HAL_RCC_OscConfig+0x618>)
 8003bcc:	681a      	ldr	r2, [r3, #0]
 8003bce:	2380      	movs	r3, #128	@ 0x80
 8003bd0:	049b      	lsls	r3, r3, #18
 8003bd2:	4013      	ands	r3, r2
 8003bd4:	d1f0      	bne.n	8003bb8 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8003bd6:	4b22      	ldr	r3, [pc, #136]	@ (8003c60 <HAL_RCC_OscConfig+0x618>)
 8003bd8:	68da      	ldr	r2, [r3, #12]
 8003bda:	4b21      	ldr	r3, [pc, #132]	@ (8003c60 <HAL_RCC_OscConfig+0x618>)
 8003bdc:	4926      	ldr	r1, [pc, #152]	@ (8003c78 <HAL_RCC_OscConfig+0x630>)
 8003bde:	400a      	ands	r2, r1
 8003be0:	60da      	str	r2, [r3, #12]
 8003be2:	e038      	b.n	8003c56 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	69db      	ldr	r3, [r3, #28]
 8003be8:	2b01      	cmp	r3, #1
 8003bea:	d101      	bne.n	8003bf0 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8003bec:	2301      	movs	r3, #1
 8003bee:	e033      	b.n	8003c58 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8003bf0:	4b1b      	ldr	r3, [pc, #108]	@ (8003c60 <HAL_RCC_OscConfig+0x618>)
 8003bf2:	68db      	ldr	r3, [r3, #12]
 8003bf4:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bf6:	697b      	ldr	r3, [r7, #20]
 8003bf8:	2203      	movs	r2, #3
 8003bfa:	401a      	ands	r2, r3
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6a1b      	ldr	r3, [r3, #32]
 8003c00:	429a      	cmp	r2, r3
 8003c02:	d126      	bne.n	8003c52 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003c04:	697b      	ldr	r3, [r7, #20]
 8003c06:	2270      	movs	r2, #112	@ 0x70
 8003c08:	401a      	ands	r2, r3
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c0e:	429a      	cmp	r2, r3
 8003c10:	d11f      	bne.n	8003c52 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003c12:	697a      	ldr	r2, [r7, #20]
 8003c14:	23fe      	movs	r3, #254	@ 0xfe
 8003c16:	01db      	lsls	r3, r3, #7
 8003c18:	401a      	ands	r2, r3
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c1e:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003c20:	429a      	cmp	r2, r3
 8003c22:	d116      	bne.n	8003c52 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003c24:	697a      	ldr	r2, [r7, #20]
 8003c26:	23f8      	movs	r3, #248	@ 0xf8
 8003c28:	039b      	lsls	r3, r3, #14
 8003c2a:	401a      	ands	r2, r3
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003c30:	429a      	cmp	r2, r3
 8003c32:	d10e      	bne.n	8003c52 <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003c34:	697a      	ldr	r2, [r7, #20]
 8003c36:	23e0      	movs	r3, #224	@ 0xe0
 8003c38:	051b      	lsls	r3, r3, #20
 8003c3a:	401a      	ands	r2, r3
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003c40:	429a      	cmp	r2, r3
 8003c42:	d106      	bne.n	8003c52 <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8003c44:	697b      	ldr	r3, [r7, #20]
 8003c46:	0f5b      	lsrs	r3, r3, #29
 8003c48:	075a      	lsls	r2, r3, #29
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003c4e:	429a      	cmp	r2, r3
 8003c50:	d001      	beq.n	8003c56 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8003c52:	2301      	movs	r3, #1
 8003c54:	e000      	b.n	8003c58 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8003c56:	2300      	movs	r3, #0
}
 8003c58:	0018      	movs	r0, r3
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	b008      	add	sp, #32
 8003c5e:	bd80      	pop	{r7, pc}
 8003c60:	40021000 	.word	0x40021000
 8003c64:	40007000 	.word	0x40007000
 8003c68:	00001388 	.word	0x00001388
 8003c6c:	efffffff 	.word	0xefffffff
 8003c70:	feffffff 	.word	0xfeffffff
 8003c74:	11c1808c 	.word	0x11c1808c
 8003c78:	eefefffc 	.word	0xeefefffc

08003c7c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b084      	sub	sp, #16
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
 8003c84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d101      	bne.n	8003c90 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c8c:	2301      	movs	r3, #1
 8003c8e:	e0e9      	b.n	8003e64 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003c90:	4b76      	ldr	r3, [pc, #472]	@ (8003e6c <HAL_RCC_ClockConfig+0x1f0>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	2207      	movs	r2, #7
 8003c96:	4013      	ands	r3, r2
 8003c98:	683a      	ldr	r2, [r7, #0]
 8003c9a:	429a      	cmp	r2, r3
 8003c9c:	d91e      	bls.n	8003cdc <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c9e:	4b73      	ldr	r3, [pc, #460]	@ (8003e6c <HAL_RCC_ClockConfig+0x1f0>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	2207      	movs	r2, #7
 8003ca4:	4393      	bics	r3, r2
 8003ca6:	0019      	movs	r1, r3
 8003ca8:	4b70      	ldr	r3, [pc, #448]	@ (8003e6c <HAL_RCC_ClockConfig+0x1f0>)
 8003caa:	683a      	ldr	r2, [r7, #0]
 8003cac:	430a      	orrs	r2, r1
 8003cae:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003cb0:	f7fe f954 	bl	8001f5c <HAL_GetTick>
 8003cb4:	0003      	movs	r3, r0
 8003cb6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003cb8:	e009      	b.n	8003cce <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003cba:	f7fe f94f 	bl	8001f5c <HAL_GetTick>
 8003cbe:	0002      	movs	r2, r0
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	1ad3      	subs	r3, r2, r3
 8003cc4:	4a6a      	ldr	r2, [pc, #424]	@ (8003e70 <HAL_RCC_ClockConfig+0x1f4>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d901      	bls.n	8003cce <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8003cca:	2303      	movs	r3, #3
 8003ccc:	e0ca      	b.n	8003e64 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003cce:	4b67      	ldr	r3, [pc, #412]	@ (8003e6c <HAL_RCC_ClockConfig+0x1f0>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	2207      	movs	r2, #7
 8003cd4:	4013      	ands	r3, r2
 8003cd6:	683a      	ldr	r2, [r7, #0]
 8003cd8:	429a      	cmp	r2, r3
 8003cda:	d1ee      	bne.n	8003cba <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	2202      	movs	r2, #2
 8003ce2:	4013      	ands	r3, r2
 8003ce4:	d015      	beq.n	8003d12 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	2204      	movs	r2, #4
 8003cec:	4013      	ands	r3, r2
 8003cee:	d006      	beq.n	8003cfe <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003cf0:	4b60      	ldr	r3, [pc, #384]	@ (8003e74 <HAL_RCC_ClockConfig+0x1f8>)
 8003cf2:	689a      	ldr	r2, [r3, #8]
 8003cf4:	4b5f      	ldr	r3, [pc, #380]	@ (8003e74 <HAL_RCC_ClockConfig+0x1f8>)
 8003cf6:	21e0      	movs	r1, #224	@ 0xe0
 8003cf8:	01c9      	lsls	r1, r1, #7
 8003cfa:	430a      	orrs	r2, r1
 8003cfc:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003cfe:	4b5d      	ldr	r3, [pc, #372]	@ (8003e74 <HAL_RCC_ClockConfig+0x1f8>)
 8003d00:	689b      	ldr	r3, [r3, #8]
 8003d02:	4a5d      	ldr	r2, [pc, #372]	@ (8003e78 <HAL_RCC_ClockConfig+0x1fc>)
 8003d04:	4013      	ands	r3, r2
 8003d06:	0019      	movs	r1, r3
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	689a      	ldr	r2, [r3, #8]
 8003d0c:	4b59      	ldr	r3, [pc, #356]	@ (8003e74 <HAL_RCC_ClockConfig+0x1f8>)
 8003d0e:	430a      	orrs	r2, r1
 8003d10:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	2201      	movs	r2, #1
 8003d18:	4013      	ands	r3, r2
 8003d1a:	d057      	beq.n	8003dcc <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	685b      	ldr	r3, [r3, #4]
 8003d20:	2b01      	cmp	r3, #1
 8003d22:	d107      	bne.n	8003d34 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003d24:	4b53      	ldr	r3, [pc, #332]	@ (8003e74 <HAL_RCC_ClockConfig+0x1f8>)
 8003d26:	681a      	ldr	r2, [r3, #0]
 8003d28:	2380      	movs	r3, #128	@ 0x80
 8003d2a:	029b      	lsls	r3, r3, #10
 8003d2c:	4013      	ands	r3, r2
 8003d2e:	d12b      	bne.n	8003d88 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003d30:	2301      	movs	r3, #1
 8003d32:	e097      	b.n	8003e64 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	685b      	ldr	r3, [r3, #4]
 8003d38:	2b02      	cmp	r3, #2
 8003d3a:	d107      	bne.n	8003d4c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d3c:	4b4d      	ldr	r3, [pc, #308]	@ (8003e74 <HAL_RCC_ClockConfig+0x1f8>)
 8003d3e:	681a      	ldr	r2, [r3, #0]
 8003d40:	2380      	movs	r3, #128	@ 0x80
 8003d42:	049b      	lsls	r3, r3, #18
 8003d44:	4013      	ands	r3, r2
 8003d46:	d11f      	bne.n	8003d88 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003d48:	2301      	movs	r3, #1
 8003d4a:	e08b      	b.n	8003e64 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	685b      	ldr	r3, [r3, #4]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d107      	bne.n	8003d64 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003d54:	4b47      	ldr	r3, [pc, #284]	@ (8003e74 <HAL_RCC_ClockConfig+0x1f8>)
 8003d56:	681a      	ldr	r2, [r3, #0]
 8003d58:	2380      	movs	r3, #128	@ 0x80
 8003d5a:	00db      	lsls	r3, r3, #3
 8003d5c:	4013      	ands	r3, r2
 8003d5e:	d113      	bne.n	8003d88 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003d60:	2301      	movs	r3, #1
 8003d62:	e07f      	b.n	8003e64 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	685b      	ldr	r3, [r3, #4]
 8003d68:	2b03      	cmp	r3, #3
 8003d6a:	d106      	bne.n	8003d7a <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003d6c:	4b41      	ldr	r3, [pc, #260]	@ (8003e74 <HAL_RCC_ClockConfig+0x1f8>)
 8003d6e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d70:	2202      	movs	r2, #2
 8003d72:	4013      	ands	r3, r2
 8003d74:	d108      	bne.n	8003d88 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003d76:	2301      	movs	r3, #1
 8003d78:	e074      	b.n	8003e64 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d7a:	4b3e      	ldr	r3, [pc, #248]	@ (8003e74 <HAL_RCC_ClockConfig+0x1f8>)
 8003d7c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d7e:	2202      	movs	r2, #2
 8003d80:	4013      	ands	r3, r2
 8003d82:	d101      	bne.n	8003d88 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003d84:	2301      	movs	r3, #1
 8003d86:	e06d      	b.n	8003e64 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003d88:	4b3a      	ldr	r3, [pc, #232]	@ (8003e74 <HAL_RCC_ClockConfig+0x1f8>)
 8003d8a:	689b      	ldr	r3, [r3, #8]
 8003d8c:	2207      	movs	r2, #7
 8003d8e:	4393      	bics	r3, r2
 8003d90:	0019      	movs	r1, r3
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	685a      	ldr	r2, [r3, #4]
 8003d96:	4b37      	ldr	r3, [pc, #220]	@ (8003e74 <HAL_RCC_ClockConfig+0x1f8>)
 8003d98:	430a      	orrs	r2, r1
 8003d9a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d9c:	f7fe f8de 	bl	8001f5c <HAL_GetTick>
 8003da0:	0003      	movs	r3, r0
 8003da2:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003da4:	e009      	b.n	8003dba <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003da6:	f7fe f8d9 	bl	8001f5c <HAL_GetTick>
 8003daa:	0002      	movs	r2, r0
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	1ad3      	subs	r3, r2, r3
 8003db0:	4a2f      	ldr	r2, [pc, #188]	@ (8003e70 <HAL_RCC_ClockConfig+0x1f4>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d901      	bls.n	8003dba <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8003db6:	2303      	movs	r3, #3
 8003db8:	e054      	b.n	8003e64 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003dba:	4b2e      	ldr	r3, [pc, #184]	@ (8003e74 <HAL_RCC_ClockConfig+0x1f8>)
 8003dbc:	689b      	ldr	r3, [r3, #8]
 8003dbe:	2238      	movs	r2, #56	@ 0x38
 8003dc0:	401a      	ands	r2, r3
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	685b      	ldr	r3, [r3, #4]
 8003dc6:	00db      	lsls	r3, r3, #3
 8003dc8:	429a      	cmp	r2, r3
 8003dca:	d1ec      	bne.n	8003da6 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003dcc:	4b27      	ldr	r3, [pc, #156]	@ (8003e6c <HAL_RCC_ClockConfig+0x1f0>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	2207      	movs	r2, #7
 8003dd2:	4013      	ands	r3, r2
 8003dd4:	683a      	ldr	r2, [r7, #0]
 8003dd6:	429a      	cmp	r2, r3
 8003dd8:	d21e      	bcs.n	8003e18 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003dda:	4b24      	ldr	r3, [pc, #144]	@ (8003e6c <HAL_RCC_ClockConfig+0x1f0>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	2207      	movs	r2, #7
 8003de0:	4393      	bics	r3, r2
 8003de2:	0019      	movs	r1, r3
 8003de4:	4b21      	ldr	r3, [pc, #132]	@ (8003e6c <HAL_RCC_ClockConfig+0x1f0>)
 8003de6:	683a      	ldr	r2, [r7, #0]
 8003de8:	430a      	orrs	r2, r1
 8003dea:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003dec:	f7fe f8b6 	bl	8001f5c <HAL_GetTick>
 8003df0:	0003      	movs	r3, r0
 8003df2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003df4:	e009      	b.n	8003e0a <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003df6:	f7fe f8b1 	bl	8001f5c <HAL_GetTick>
 8003dfa:	0002      	movs	r2, r0
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	1ad3      	subs	r3, r2, r3
 8003e00:	4a1b      	ldr	r2, [pc, #108]	@ (8003e70 <HAL_RCC_ClockConfig+0x1f4>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d901      	bls.n	8003e0a <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8003e06:	2303      	movs	r3, #3
 8003e08:	e02c      	b.n	8003e64 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003e0a:	4b18      	ldr	r3, [pc, #96]	@ (8003e6c <HAL_RCC_ClockConfig+0x1f0>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	2207      	movs	r2, #7
 8003e10:	4013      	ands	r3, r2
 8003e12:	683a      	ldr	r2, [r7, #0]
 8003e14:	429a      	cmp	r2, r3
 8003e16:	d1ee      	bne.n	8003df6 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	2204      	movs	r2, #4
 8003e1e:	4013      	ands	r3, r2
 8003e20:	d009      	beq.n	8003e36 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003e22:	4b14      	ldr	r3, [pc, #80]	@ (8003e74 <HAL_RCC_ClockConfig+0x1f8>)
 8003e24:	689b      	ldr	r3, [r3, #8]
 8003e26:	4a15      	ldr	r2, [pc, #84]	@ (8003e7c <HAL_RCC_ClockConfig+0x200>)
 8003e28:	4013      	ands	r3, r2
 8003e2a:	0019      	movs	r1, r3
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	68da      	ldr	r2, [r3, #12]
 8003e30:	4b10      	ldr	r3, [pc, #64]	@ (8003e74 <HAL_RCC_ClockConfig+0x1f8>)
 8003e32:	430a      	orrs	r2, r1
 8003e34:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8003e36:	f000 f829 	bl	8003e8c <HAL_RCC_GetSysClockFreq>
 8003e3a:	0001      	movs	r1, r0
 8003e3c:	4b0d      	ldr	r3, [pc, #52]	@ (8003e74 <HAL_RCC_ClockConfig+0x1f8>)
 8003e3e:	689b      	ldr	r3, [r3, #8]
 8003e40:	0a1b      	lsrs	r3, r3, #8
 8003e42:	220f      	movs	r2, #15
 8003e44:	401a      	ands	r2, r3
 8003e46:	4b0e      	ldr	r3, [pc, #56]	@ (8003e80 <HAL_RCC_ClockConfig+0x204>)
 8003e48:	0092      	lsls	r2, r2, #2
 8003e4a:	58d3      	ldr	r3, [r2, r3]
 8003e4c:	221f      	movs	r2, #31
 8003e4e:	4013      	ands	r3, r2
 8003e50:	000a      	movs	r2, r1
 8003e52:	40da      	lsrs	r2, r3
 8003e54:	4b0b      	ldr	r3, [pc, #44]	@ (8003e84 <HAL_RCC_ClockConfig+0x208>)
 8003e56:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003e58:	4b0b      	ldr	r3, [pc, #44]	@ (8003e88 <HAL_RCC_ClockConfig+0x20c>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	0018      	movs	r0, r3
 8003e5e:	f7fe f821 	bl	8001ea4 <HAL_InitTick>
 8003e62:	0003      	movs	r3, r0
}
 8003e64:	0018      	movs	r0, r3
 8003e66:	46bd      	mov	sp, r7
 8003e68:	b004      	add	sp, #16
 8003e6a:	bd80      	pop	{r7, pc}
 8003e6c:	40022000 	.word	0x40022000
 8003e70:	00001388 	.word	0x00001388
 8003e74:	40021000 	.word	0x40021000
 8003e78:	fffff0ff 	.word	0xfffff0ff
 8003e7c:	ffff8fff 	.word	0xffff8fff
 8003e80:	080061d4 	.word	0x080061d4
 8003e84:	20000000 	.word	0x20000000
 8003e88:	20000004 	.word	0x20000004

08003e8c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b086      	sub	sp, #24
 8003e90:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003e92:	4b3c      	ldr	r3, [pc, #240]	@ (8003f84 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003e94:	689b      	ldr	r3, [r3, #8]
 8003e96:	2238      	movs	r2, #56	@ 0x38
 8003e98:	4013      	ands	r3, r2
 8003e9a:	d10f      	bne.n	8003ebc <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8003e9c:	4b39      	ldr	r3, [pc, #228]	@ (8003f84 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	0adb      	lsrs	r3, r3, #11
 8003ea2:	2207      	movs	r2, #7
 8003ea4:	4013      	ands	r3, r2
 8003ea6:	2201      	movs	r2, #1
 8003ea8:	409a      	lsls	r2, r3
 8003eaa:	0013      	movs	r3, r2
 8003eac:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8003eae:	6839      	ldr	r1, [r7, #0]
 8003eb0:	4835      	ldr	r0, [pc, #212]	@ (8003f88 <HAL_RCC_GetSysClockFreq+0xfc>)
 8003eb2:	f7fc f927 	bl	8000104 <__udivsi3>
 8003eb6:	0003      	movs	r3, r0
 8003eb8:	613b      	str	r3, [r7, #16]
 8003eba:	e05d      	b.n	8003f78 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003ebc:	4b31      	ldr	r3, [pc, #196]	@ (8003f84 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003ebe:	689b      	ldr	r3, [r3, #8]
 8003ec0:	2238      	movs	r2, #56	@ 0x38
 8003ec2:	4013      	ands	r3, r2
 8003ec4:	2b08      	cmp	r3, #8
 8003ec6:	d102      	bne.n	8003ece <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003ec8:	4b30      	ldr	r3, [pc, #192]	@ (8003f8c <HAL_RCC_GetSysClockFreq+0x100>)
 8003eca:	613b      	str	r3, [r7, #16]
 8003ecc:	e054      	b.n	8003f78 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003ece:	4b2d      	ldr	r3, [pc, #180]	@ (8003f84 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003ed0:	689b      	ldr	r3, [r3, #8]
 8003ed2:	2238      	movs	r2, #56	@ 0x38
 8003ed4:	4013      	ands	r3, r2
 8003ed6:	2b10      	cmp	r3, #16
 8003ed8:	d138      	bne.n	8003f4c <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8003eda:	4b2a      	ldr	r3, [pc, #168]	@ (8003f84 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003edc:	68db      	ldr	r3, [r3, #12]
 8003ede:	2203      	movs	r2, #3
 8003ee0:	4013      	ands	r3, r2
 8003ee2:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003ee4:	4b27      	ldr	r3, [pc, #156]	@ (8003f84 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003ee6:	68db      	ldr	r3, [r3, #12]
 8003ee8:	091b      	lsrs	r3, r3, #4
 8003eea:	2207      	movs	r2, #7
 8003eec:	4013      	ands	r3, r2
 8003eee:	3301      	adds	r3, #1
 8003ef0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	2b03      	cmp	r3, #3
 8003ef6:	d10d      	bne.n	8003f14 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003ef8:	68b9      	ldr	r1, [r7, #8]
 8003efa:	4824      	ldr	r0, [pc, #144]	@ (8003f8c <HAL_RCC_GetSysClockFreq+0x100>)
 8003efc:	f7fc f902 	bl	8000104 <__udivsi3>
 8003f00:	0003      	movs	r3, r0
 8003f02:	0019      	movs	r1, r3
 8003f04:	4b1f      	ldr	r3, [pc, #124]	@ (8003f84 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003f06:	68db      	ldr	r3, [r3, #12]
 8003f08:	0a1b      	lsrs	r3, r3, #8
 8003f0a:	227f      	movs	r2, #127	@ 0x7f
 8003f0c:	4013      	ands	r3, r2
 8003f0e:	434b      	muls	r3, r1
 8003f10:	617b      	str	r3, [r7, #20]
        break;
 8003f12:	e00d      	b.n	8003f30 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8003f14:	68b9      	ldr	r1, [r7, #8]
 8003f16:	481c      	ldr	r0, [pc, #112]	@ (8003f88 <HAL_RCC_GetSysClockFreq+0xfc>)
 8003f18:	f7fc f8f4 	bl	8000104 <__udivsi3>
 8003f1c:	0003      	movs	r3, r0
 8003f1e:	0019      	movs	r1, r3
 8003f20:	4b18      	ldr	r3, [pc, #96]	@ (8003f84 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003f22:	68db      	ldr	r3, [r3, #12]
 8003f24:	0a1b      	lsrs	r3, r3, #8
 8003f26:	227f      	movs	r2, #127	@ 0x7f
 8003f28:	4013      	ands	r3, r2
 8003f2a:	434b      	muls	r3, r1
 8003f2c:	617b      	str	r3, [r7, #20]
        break;
 8003f2e:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8003f30:	4b14      	ldr	r3, [pc, #80]	@ (8003f84 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003f32:	68db      	ldr	r3, [r3, #12]
 8003f34:	0f5b      	lsrs	r3, r3, #29
 8003f36:	2207      	movs	r2, #7
 8003f38:	4013      	ands	r3, r2
 8003f3a:	3301      	adds	r3, #1
 8003f3c:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8003f3e:	6879      	ldr	r1, [r7, #4]
 8003f40:	6978      	ldr	r0, [r7, #20]
 8003f42:	f7fc f8df 	bl	8000104 <__udivsi3>
 8003f46:	0003      	movs	r3, r0
 8003f48:	613b      	str	r3, [r7, #16]
 8003f4a:	e015      	b.n	8003f78 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003f4c:	4b0d      	ldr	r3, [pc, #52]	@ (8003f84 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003f4e:	689b      	ldr	r3, [r3, #8]
 8003f50:	2238      	movs	r2, #56	@ 0x38
 8003f52:	4013      	ands	r3, r2
 8003f54:	2b20      	cmp	r3, #32
 8003f56:	d103      	bne.n	8003f60 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8003f58:	2380      	movs	r3, #128	@ 0x80
 8003f5a:	021b      	lsls	r3, r3, #8
 8003f5c:	613b      	str	r3, [r7, #16]
 8003f5e:	e00b      	b.n	8003f78 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003f60:	4b08      	ldr	r3, [pc, #32]	@ (8003f84 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003f62:	689b      	ldr	r3, [r3, #8]
 8003f64:	2238      	movs	r2, #56	@ 0x38
 8003f66:	4013      	ands	r3, r2
 8003f68:	2b18      	cmp	r3, #24
 8003f6a:	d103      	bne.n	8003f74 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8003f6c:	23fa      	movs	r3, #250	@ 0xfa
 8003f6e:	01db      	lsls	r3, r3, #7
 8003f70:	613b      	str	r3, [r7, #16]
 8003f72:	e001      	b.n	8003f78 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8003f74:	2300      	movs	r3, #0
 8003f76:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003f78:	693b      	ldr	r3, [r7, #16]
}
 8003f7a:	0018      	movs	r0, r3
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	b006      	add	sp, #24
 8003f80:	bd80      	pop	{r7, pc}
 8003f82:	46c0      	nop			@ (mov r8, r8)
 8003f84:	40021000 	.word	0x40021000
 8003f88:	00f42400 	.word	0x00f42400
 8003f8c:	007a1200 	.word	0x007a1200

08003f90 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f94:	4b02      	ldr	r3, [pc, #8]	@ (8003fa0 <HAL_RCC_GetHCLKFreq+0x10>)
 8003f96:	681b      	ldr	r3, [r3, #0]
}
 8003f98:	0018      	movs	r0, r3
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	bd80      	pop	{r7, pc}
 8003f9e:	46c0      	nop			@ (mov r8, r8)
 8003fa0:	20000000 	.word	0x20000000

08003fa4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003fa4:	b5b0      	push	{r4, r5, r7, lr}
 8003fa6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8003fa8:	f7ff fff2 	bl	8003f90 <HAL_RCC_GetHCLKFreq>
 8003fac:	0004      	movs	r4, r0
 8003fae:	f7ff fb3f 	bl	8003630 <LL_RCC_GetAPB1Prescaler>
 8003fb2:	0003      	movs	r3, r0
 8003fb4:	0b1a      	lsrs	r2, r3, #12
 8003fb6:	4b05      	ldr	r3, [pc, #20]	@ (8003fcc <HAL_RCC_GetPCLK1Freq+0x28>)
 8003fb8:	0092      	lsls	r2, r2, #2
 8003fba:	58d3      	ldr	r3, [r2, r3]
 8003fbc:	221f      	movs	r2, #31
 8003fbe:	4013      	ands	r3, r2
 8003fc0:	40dc      	lsrs	r4, r3
 8003fc2:	0023      	movs	r3, r4
}
 8003fc4:	0018      	movs	r0, r3
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	bdb0      	pop	{r4, r5, r7, pc}
 8003fca:	46c0      	nop			@ (mov r8, r8)
 8003fcc:	08006214 	.word	0x08006214

08003fd0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b086      	sub	sp, #24
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8003fd8:	2313      	movs	r3, #19
 8003fda:	18fb      	adds	r3, r7, r3
 8003fdc:	2200      	movs	r2, #0
 8003fde:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003fe0:	2312      	movs	r3, #18
 8003fe2:	18fb      	adds	r3, r7, r3
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681a      	ldr	r2, [r3, #0]
 8003fec:	2380      	movs	r3, #128	@ 0x80
 8003fee:	029b      	lsls	r3, r3, #10
 8003ff0:	4013      	ands	r3, r2
 8003ff2:	d100      	bne.n	8003ff6 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8003ff4:	e0a3      	b.n	800413e <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ff6:	2011      	movs	r0, #17
 8003ff8:	183b      	adds	r3, r7, r0
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ffe:	4bc3      	ldr	r3, [pc, #780]	@ (800430c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004000:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004002:	2380      	movs	r3, #128	@ 0x80
 8004004:	055b      	lsls	r3, r3, #21
 8004006:	4013      	ands	r3, r2
 8004008:	d110      	bne.n	800402c <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800400a:	4bc0      	ldr	r3, [pc, #768]	@ (800430c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800400c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800400e:	4bbf      	ldr	r3, [pc, #764]	@ (800430c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004010:	2180      	movs	r1, #128	@ 0x80
 8004012:	0549      	lsls	r1, r1, #21
 8004014:	430a      	orrs	r2, r1
 8004016:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004018:	4bbc      	ldr	r3, [pc, #752]	@ (800430c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800401a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800401c:	2380      	movs	r3, #128	@ 0x80
 800401e:	055b      	lsls	r3, r3, #21
 8004020:	4013      	ands	r3, r2
 8004022:	60bb      	str	r3, [r7, #8]
 8004024:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004026:	183b      	adds	r3, r7, r0
 8004028:	2201      	movs	r2, #1
 800402a:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800402c:	4bb8      	ldr	r3, [pc, #736]	@ (8004310 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800402e:	681a      	ldr	r2, [r3, #0]
 8004030:	4bb7      	ldr	r3, [pc, #732]	@ (8004310 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8004032:	2180      	movs	r1, #128	@ 0x80
 8004034:	0049      	lsls	r1, r1, #1
 8004036:	430a      	orrs	r2, r1
 8004038:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800403a:	f7fd ff8f 	bl	8001f5c <HAL_GetTick>
 800403e:	0003      	movs	r3, r0
 8004040:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004042:	e00b      	b.n	800405c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004044:	f7fd ff8a 	bl	8001f5c <HAL_GetTick>
 8004048:	0002      	movs	r2, r0
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	1ad3      	subs	r3, r2, r3
 800404e:	2b02      	cmp	r3, #2
 8004050:	d904      	bls.n	800405c <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8004052:	2313      	movs	r3, #19
 8004054:	18fb      	adds	r3, r7, r3
 8004056:	2203      	movs	r2, #3
 8004058:	701a      	strb	r2, [r3, #0]
        break;
 800405a:	e005      	b.n	8004068 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800405c:	4bac      	ldr	r3, [pc, #688]	@ (8004310 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800405e:	681a      	ldr	r2, [r3, #0]
 8004060:	2380      	movs	r3, #128	@ 0x80
 8004062:	005b      	lsls	r3, r3, #1
 8004064:	4013      	ands	r3, r2
 8004066:	d0ed      	beq.n	8004044 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8004068:	2313      	movs	r3, #19
 800406a:	18fb      	adds	r3, r7, r3
 800406c:	781b      	ldrb	r3, [r3, #0]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d154      	bne.n	800411c <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004072:	4ba6      	ldr	r3, [pc, #664]	@ (800430c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004074:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004076:	23c0      	movs	r3, #192	@ 0xc0
 8004078:	009b      	lsls	r3, r3, #2
 800407a:	4013      	ands	r3, r2
 800407c:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800407e:	697b      	ldr	r3, [r7, #20]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d019      	beq.n	80040b8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004088:	697a      	ldr	r2, [r7, #20]
 800408a:	429a      	cmp	r2, r3
 800408c:	d014      	beq.n	80040b8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800408e:	4b9f      	ldr	r3, [pc, #636]	@ (800430c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004090:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004092:	4aa0      	ldr	r2, [pc, #640]	@ (8004314 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8004094:	4013      	ands	r3, r2
 8004096:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004098:	4b9c      	ldr	r3, [pc, #624]	@ (800430c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800409a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800409c:	4b9b      	ldr	r3, [pc, #620]	@ (800430c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800409e:	2180      	movs	r1, #128	@ 0x80
 80040a0:	0249      	lsls	r1, r1, #9
 80040a2:	430a      	orrs	r2, r1
 80040a4:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 80040a6:	4b99      	ldr	r3, [pc, #612]	@ (800430c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80040a8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80040aa:	4b98      	ldr	r3, [pc, #608]	@ (800430c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80040ac:	499a      	ldr	r1, [pc, #616]	@ (8004318 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 80040ae:	400a      	ands	r2, r1
 80040b0:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80040b2:	4b96      	ldr	r3, [pc, #600]	@ (800430c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80040b4:	697a      	ldr	r2, [r7, #20]
 80040b6:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80040b8:	697b      	ldr	r3, [r7, #20]
 80040ba:	2201      	movs	r2, #1
 80040bc:	4013      	ands	r3, r2
 80040be:	d016      	beq.n	80040ee <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040c0:	f7fd ff4c 	bl	8001f5c <HAL_GetTick>
 80040c4:	0003      	movs	r3, r0
 80040c6:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80040c8:	e00c      	b.n	80040e4 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040ca:	f7fd ff47 	bl	8001f5c <HAL_GetTick>
 80040ce:	0002      	movs	r2, r0
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	1ad3      	subs	r3, r2, r3
 80040d4:	4a91      	ldr	r2, [pc, #580]	@ (800431c <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d904      	bls.n	80040e4 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 80040da:	2313      	movs	r3, #19
 80040dc:	18fb      	adds	r3, r7, r3
 80040de:	2203      	movs	r2, #3
 80040e0:	701a      	strb	r2, [r3, #0]
            break;
 80040e2:	e004      	b.n	80040ee <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80040e4:	4b89      	ldr	r3, [pc, #548]	@ (800430c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80040e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040e8:	2202      	movs	r2, #2
 80040ea:	4013      	ands	r3, r2
 80040ec:	d0ed      	beq.n	80040ca <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 80040ee:	2313      	movs	r3, #19
 80040f0:	18fb      	adds	r3, r7, r3
 80040f2:	781b      	ldrb	r3, [r3, #0]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d10a      	bne.n	800410e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80040f8:	4b84      	ldr	r3, [pc, #528]	@ (800430c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80040fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040fc:	4a85      	ldr	r2, [pc, #532]	@ (8004314 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80040fe:	4013      	ands	r3, r2
 8004100:	0019      	movs	r1, r3
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004106:	4b81      	ldr	r3, [pc, #516]	@ (800430c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004108:	430a      	orrs	r2, r1
 800410a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800410c:	e00c      	b.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800410e:	2312      	movs	r3, #18
 8004110:	18fb      	adds	r3, r7, r3
 8004112:	2213      	movs	r2, #19
 8004114:	18ba      	adds	r2, r7, r2
 8004116:	7812      	ldrb	r2, [r2, #0]
 8004118:	701a      	strb	r2, [r3, #0]
 800411a:	e005      	b.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800411c:	2312      	movs	r3, #18
 800411e:	18fb      	adds	r3, r7, r3
 8004120:	2213      	movs	r2, #19
 8004122:	18ba      	adds	r2, r7, r2
 8004124:	7812      	ldrb	r2, [r2, #0]
 8004126:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004128:	2311      	movs	r3, #17
 800412a:	18fb      	adds	r3, r7, r3
 800412c:	781b      	ldrb	r3, [r3, #0]
 800412e:	2b01      	cmp	r3, #1
 8004130:	d105      	bne.n	800413e <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004132:	4b76      	ldr	r3, [pc, #472]	@ (800430c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004134:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004136:	4b75      	ldr	r3, [pc, #468]	@ (800430c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004138:	4979      	ldr	r1, [pc, #484]	@ (8004320 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 800413a:	400a      	ands	r2, r1
 800413c:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	2201      	movs	r2, #1
 8004144:	4013      	ands	r3, r2
 8004146:	d009      	beq.n	800415c <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004148:	4b70      	ldr	r3, [pc, #448]	@ (800430c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800414a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800414c:	2203      	movs	r2, #3
 800414e:	4393      	bics	r3, r2
 8004150:	0019      	movs	r1, r3
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	685a      	ldr	r2, [r3, #4]
 8004156:	4b6d      	ldr	r3, [pc, #436]	@ (800430c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004158:	430a      	orrs	r2, r1
 800415a:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	2202      	movs	r2, #2
 8004162:	4013      	ands	r3, r2
 8004164:	d009      	beq.n	800417a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004166:	4b69      	ldr	r3, [pc, #420]	@ (800430c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004168:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800416a:	220c      	movs	r2, #12
 800416c:	4393      	bics	r3, r2
 800416e:	0019      	movs	r1, r3
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	689a      	ldr	r2, [r3, #8]
 8004174:	4b65      	ldr	r3, [pc, #404]	@ (800430c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004176:	430a      	orrs	r2, r1
 8004178:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	2210      	movs	r2, #16
 8004180:	4013      	ands	r3, r2
 8004182:	d009      	beq.n	8004198 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004184:	4b61      	ldr	r3, [pc, #388]	@ (800430c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004186:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004188:	4a66      	ldr	r2, [pc, #408]	@ (8004324 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 800418a:	4013      	ands	r3, r2
 800418c:	0019      	movs	r1, r3
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	68da      	ldr	r2, [r3, #12]
 8004192:	4b5e      	ldr	r3, [pc, #376]	@ (800430c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004194:	430a      	orrs	r2, r1
 8004196:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681a      	ldr	r2, [r3, #0]
 800419c:	2380      	movs	r3, #128	@ 0x80
 800419e:	009b      	lsls	r3, r3, #2
 80041a0:	4013      	ands	r3, r2
 80041a2:	d009      	beq.n	80041b8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80041a4:	4b59      	ldr	r3, [pc, #356]	@ (800430c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80041a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041a8:	4a5f      	ldr	r2, [pc, #380]	@ (8004328 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80041aa:	4013      	ands	r3, r2
 80041ac:	0019      	movs	r1, r3
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	699a      	ldr	r2, [r3, #24]
 80041b2:	4b56      	ldr	r3, [pc, #344]	@ (800430c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80041b4:	430a      	orrs	r2, r1
 80041b6:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681a      	ldr	r2, [r3, #0]
 80041bc:	2380      	movs	r3, #128	@ 0x80
 80041be:	00db      	lsls	r3, r3, #3
 80041c0:	4013      	ands	r3, r2
 80041c2:	d009      	beq.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80041c4:	4b51      	ldr	r3, [pc, #324]	@ (800430c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80041c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041c8:	4a58      	ldr	r2, [pc, #352]	@ (800432c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80041ca:	4013      	ands	r3, r2
 80041cc:	0019      	movs	r1, r3
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	69da      	ldr	r2, [r3, #28]
 80041d2:	4b4e      	ldr	r3, [pc, #312]	@ (800430c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80041d4:	430a      	orrs	r2, r1
 80041d6:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	2220      	movs	r2, #32
 80041de:	4013      	ands	r3, r2
 80041e0:	d009      	beq.n	80041f6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80041e2:	4b4a      	ldr	r3, [pc, #296]	@ (800430c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80041e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041e6:	4a52      	ldr	r2, [pc, #328]	@ (8004330 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 80041e8:	4013      	ands	r3, r2
 80041ea:	0019      	movs	r1, r3
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	691a      	ldr	r2, [r3, #16]
 80041f0:	4b46      	ldr	r3, [pc, #280]	@ (800430c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80041f2:	430a      	orrs	r2, r1
 80041f4:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681a      	ldr	r2, [r3, #0]
 80041fa:	2380      	movs	r3, #128	@ 0x80
 80041fc:	01db      	lsls	r3, r3, #7
 80041fe:	4013      	ands	r3, r2
 8004200:	d015      	beq.n	800422e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004202:	4b42      	ldr	r3, [pc, #264]	@ (800430c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004204:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004206:	009b      	lsls	r3, r3, #2
 8004208:	0899      	lsrs	r1, r3, #2
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6a1a      	ldr	r2, [r3, #32]
 800420e:	4b3f      	ldr	r3, [pc, #252]	@ (800430c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004210:	430a      	orrs	r2, r1
 8004212:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6a1a      	ldr	r2, [r3, #32]
 8004218:	2380      	movs	r3, #128	@ 0x80
 800421a:	05db      	lsls	r3, r3, #23
 800421c:	429a      	cmp	r2, r3
 800421e:	d106      	bne.n	800422e <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004220:	4b3a      	ldr	r3, [pc, #232]	@ (800430c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004222:	68da      	ldr	r2, [r3, #12]
 8004224:	4b39      	ldr	r3, [pc, #228]	@ (800430c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004226:	2180      	movs	r1, #128	@ 0x80
 8004228:	0249      	lsls	r1, r1, #9
 800422a:	430a      	orrs	r2, r1
 800422c:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681a      	ldr	r2, [r3, #0]
 8004232:	2380      	movs	r3, #128	@ 0x80
 8004234:	031b      	lsls	r3, r3, #12
 8004236:	4013      	ands	r3, r2
 8004238:	d009      	beq.n	800424e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800423a:	4b34      	ldr	r3, [pc, #208]	@ (800430c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800423c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800423e:	2240      	movs	r2, #64	@ 0x40
 8004240:	4393      	bics	r3, r2
 8004242:	0019      	movs	r1, r3
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004248:	4b30      	ldr	r3, [pc, #192]	@ (800430c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800424a:	430a      	orrs	r2, r1
 800424c:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681a      	ldr	r2, [r3, #0]
 8004252:	2380      	movs	r3, #128	@ 0x80
 8004254:	039b      	lsls	r3, r3, #14
 8004256:	4013      	ands	r3, r2
 8004258:	d016      	beq.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800425a:	4b2c      	ldr	r3, [pc, #176]	@ (800430c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800425c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800425e:	4a35      	ldr	r2, [pc, #212]	@ (8004334 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8004260:	4013      	ands	r3, r2
 8004262:	0019      	movs	r1, r3
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004268:	4b28      	ldr	r3, [pc, #160]	@ (800430c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800426a:	430a      	orrs	r2, r1
 800426c:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004272:	2380      	movs	r3, #128	@ 0x80
 8004274:	03db      	lsls	r3, r3, #15
 8004276:	429a      	cmp	r2, r3
 8004278:	d106      	bne.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800427a:	4b24      	ldr	r3, [pc, #144]	@ (800430c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800427c:	68da      	ldr	r2, [r3, #12]
 800427e:	4b23      	ldr	r3, [pc, #140]	@ (800430c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004280:	2180      	movs	r1, #128	@ 0x80
 8004282:	0449      	lsls	r1, r1, #17
 8004284:	430a      	orrs	r2, r1
 8004286:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681a      	ldr	r2, [r3, #0]
 800428c:	2380      	movs	r3, #128	@ 0x80
 800428e:	03db      	lsls	r3, r3, #15
 8004290:	4013      	ands	r3, r2
 8004292:	d016      	beq.n	80042c2 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8004294:	4b1d      	ldr	r3, [pc, #116]	@ (800430c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004296:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004298:	4a27      	ldr	r2, [pc, #156]	@ (8004338 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 800429a:	4013      	ands	r3, r2
 800429c:	0019      	movs	r1, r3
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80042a2:	4b1a      	ldr	r3, [pc, #104]	@ (800430c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80042a4:	430a      	orrs	r2, r1
 80042a6:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80042ac:	2380      	movs	r3, #128	@ 0x80
 80042ae:	045b      	lsls	r3, r3, #17
 80042b0:	429a      	cmp	r2, r3
 80042b2:	d106      	bne.n	80042c2 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80042b4:	4b15      	ldr	r3, [pc, #84]	@ (800430c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80042b6:	68da      	ldr	r2, [r3, #12]
 80042b8:	4b14      	ldr	r3, [pc, #80]	@ (800430c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80042ba:	2180      	movs	r1, #128	@ 0x80
 80042bc:	0449      	lsls	r1, r1, #17
 80042be:	430a      	orrs	r2, r1
 80042c0:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681a      	ldr	r2, [r3, #0]
 80042c6:	2380      	movs	r3, #128	@ 0x80
 80042c8:	011b      	lsls	r3, r3, #4
 80042ca:	4013      	ands	r3, r2
 80042cc:	d016      	beq.n	80042fc <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80042ce:	4b0f      	ldr	r3, [pc, #60]	@ (800430c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80042d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042d2:	4a1a      	ldr	r2, [pc, #104]	@ (800433c <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 80042d4:	4013      	ands	r3, r2
 80042d6:	0019      	movs	r1, r3
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	695a      	ldr	r2, [r3, #20]
 80042dc:	4b0b      	ldr	r3, [pc, #44]	@ (800430c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80042de:	430a      	orrs	r2, r1
 80042e0:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	695a      	ldr	r2, [r3, #20]
 80042e6:	2380      	movs	r3, #128	@ 0x80
 80042e8:	01db      	lsls	r3, r3, #7
 80042ea:	429a      	cmp	r2, r3
 80042ec:	d106      	bne.n	80042fc <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80042ee:	4b07      	ldr	r3, [pc, #28]	@ (800430c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80042f0:	68da      	ldr	r2, [r3, #12]
 80042f2:	4b06      	ldr	r3, [pc, #24]	@ (800430c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80042f4:	2180      	movs	r1, #128	@ 0x80
 80042f6:	0249      	lsls	r1, r1, #9
 80042f8:	430a      	orrs	r2, r1
 80042fa:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 80042fc:	2312      	movs	r3, #18
 80042fe:	18fb      	adds	r3, r7, r3
 8004300:	781b      	ldrb	r3, [r3, #0]
}
 8004302:	0018      	movs	r0, r3
 8004304:	46bd      	mov	sp, r7
 8004306:	b006      	add	sp, #24
 8004308:	bd80      	pop	{r7, pc}
 800430a:	46c0      	nop			@ (mov r8, r8)
 800430c:	40021000 	.word	0x40021000
 8004310:	40007000 	.word	0x40007000
 8004314:	fffffcff 	.word	0xfffffcff
 8004318:	fffeffff 	.word	0xfffeffff
 800431c:	00001388 	.word	0x00001388
 8004320:	efffffff 	.word	0xefffffff
 8004324:	fffff3ff 	.word	0xfffff3ff
 8004328:	fff3ffff 	.word	0xfff3ffff
 800432c:	ffcfffff 	.word	0xffcfffff
 8004330:	ffffcfff 	.word	0xffffcfff
 8004334:	ffbfffff 	.word	0xffbfffff
 8004338:	feffffff 	.word	0xfeffffff
 800433c:	ffff3fff 	.word	0xffff3fff

08004340 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	b082      	sub	sp, #8
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d101      	bne.n	8004352 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800434e:	2301      	movs	r3, #1
 8004350:	e04a      	b.n	80043e8 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	223d      	movs	r2, #61	@ 0x3d
 8004356:	5c9b      	ldrb	r3, [r3, r2]
 8004358:	b2db      	uxtb	r3, r3
 800435a:	2b00      	cmp	r3, #0
 800435c:	d107      	bne.n	800436e <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	223c      	movs	r2, #60	@ 0x3c
 8004362:	2100      	movs	r1, #0
 8004364:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	0018      	movs	r0, r3
 800436a:	f7fd fc1d 	bl	8001ba8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	223d      	movs	r2, #61	@ 0x3d
 8004372:	2102      	movs	r1, #2
 8004374:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681a      	ldr	r2, [r3, #0]
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	3304      	adds	r3, #4
 800437e:	0019      	movs	r1, r3
 8004380:	0010      	movs	r0, r2
 8004382:	f000 faab 	bl	80048dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2248      	movs	r2, #72	@ 0x48
 800438a:	2101      	movs	r1, #1
 800438c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	223e      	movs	r2, #62	@ 0x3e
 8004392:	2101      	movs	r1, #1
 8004394:	5499      	strb	r1, [r3, r2]
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	223f      	movs	r2, #63	@ 0x3f
 800439a:	2101      	movs	r1, #1
 800439c:	5499      	strb	r1, [r3, r2]
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2240      	movs	r2, #64	@ 0x40
 80043a2:	2101      	movs	r1, #1
 80043a4:	5499      	strb	r1, [r3, r2]
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2241      	movs	r2, #65	@ 0x41
 80043aa:	2101      	movs	r1, #1
 80043ac:	5499      	strb	r1, [r3, r2]
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	2242      	movs	r2, #66	@ 0x42
 80043b2:	2101      	movs	r1, #1
 80043b4:	5499      	strb	r1, [r3, r2]
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2243      	movs	r2, #67	@ 0x43
 80043ba:	2101      	movs	r1, #1
 80043bc:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2244      	movs	r2, #68	@ 0x44
 80043c2:	2101      	movs	r1, #1
 80043c4:	5499      	strb	r1, [r3, r2]
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2245      	movs	r2, #69	@ 0x45
 80043ca:	2101      	movs	r1, #1
 80043cc:	5499      	strb	r1, [r3, r2]
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2246      	movs	r2, #70	@ 0x46
 80043d2:	2101      	movs	r1, #1
 80043d4:	5499      	strb	r1, [r3, r2]
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2247      	movs	r2, #71	@ 0x47
 80043da:	2101      	movs	r1, #1
 80043dc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	223d      	movs	r2, #61	@ 0x3d
 80043e2:	2101      	movs	r1, #1
 80043e4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80043e6:	2300      	movs	r3, #0
}
 80043e8:	0018      	movs	r0, r3
 80043ea:	46bd      	mov	sp, r7
 80043ec:	b002      	add	sp, #8
 80043ee:	bd80      	pop	{r7, pc}

080043f0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b084      	sub	sp, #16
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
 80043f8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d108      	bne.n	8004412 <HAL_TIM_PWM_Start+0x22>
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	223e      	movs	r2, #62	@ 0x3e
 8004404:	5c9b      	ldrb	r3, [r3, r2]
 8004406:	b2db      	uxtb	r3, r3
 8004408:	3b01      	subs	r3, #1
 800440a:	1e5a      	subs	r2, r3, #1
 800440c:	4193      	sbcs	r3, r2
 800440e:	b2db      	uxtb	r3, r3
 8004410:	e037      	b.n	8004482 <HAL_TIM_PWM_Start+0x92>
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	2b04      	cmp	r3, #4
 8004416:	d108      	bne.n	800442a <HAL_TIM_PWM_Start+0x3a>
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	223f      	movs	r2, #63	@ 0x3f
 800441c:	5c9b      	ldrb	r3, [r3, r2]
 800441e:	b2db      	uxtb	r3, r3
 8004420:	3b01      	subs	r3, #1
 8004422:	1e5a      	subs	r2, r3, #1
 8004424:	4193      	sbcs	r3, r2
 8004426:	b2db      	uxtb	r3, r3
 8004428:	e02b      	b.n	8004482 <HAL_TIM_PWM_Start+0x92>
 800442a:	683b      	ldr	r3, [r7, #0]
 800442c:	2b08      	cmp	r3, #8
 800442e:	d108      	bne.n	8004442 <HAL_TIM_PWM_Start+0x52>
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2240      	movs	r2, #64	@ 0x40
 8004434:	5c9b      	ldrb	r3, [r3, r2]
 8004436:	b2db      	uxtb	r3, r3
 8004438:	3b01      	subs	r3, #1
 800443a:	1e5a      	subs	r2, r3, #1
 800443c:	4193      	sbcs	r3, r2
 800443e:	b2db      	uxtb	r3, r3
 8004440:	e01f      	b.n	8004482 <HAL_TIM_PWM_Start+0x92>
 8004442:	683b      	ldr	r3, [r7, #0]
 8004444:	2b0c      	cmp	r3, #12
 8004446:	d108      	bne.n	800445a <HAL_TIM_PWM_Start+0x6a>
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2241      	movs	r2, #65	@ 0x41
 800444c:	5c9b      	ldrb	r3, [r3, r2]
 800444e:	b2db      	uxtb	r3, r3
 8004450:	3b01      	subs	r3, #1
 8004452:	1e5a      	subs	r2, r3, #1
 8004454:	4193      	sbcs	r3, r2
 8004456:	b2db      	uxtb	r3, r3
 8004458:	e013      	b.n	8004482 <HAL_TIM_PWM_Start+0x92>
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	2b10      	cmp	r3, #16
 800445e:	d108      	bne.n	8004472 <HAL_TIM_PWM_Start+0x82>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2242      	movs	r2, #66	@ 0x42
 8004464:	5c9b      	ldrb	r3, [r3, r2]
 8004466:	b2db      	uxtb	r3, r3
 8004468:	3b01      	subs	r3, #1
 800446a:	1e5a      	subs	r2, r3, #1
 800446c:	4193      	sbcs	r3, r2
 800446e:	b2db      	uxtb	r3, r3
 8004470:	e007      	b.n	8004482 <HAL_TIM_PWM_Start+0x92>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2243      	movs	r2, #67	@ 0x43
 8004476:	5c9b      	ldrb	r3, [r3, r2]
 8004478:	b2db      	uxtb	r3, r3
 800447a:	3b01      	subs	r3, #1
 800447c:	1e5a      	subs	r2, r3, #1
 800447e:	4193      	sbcs	r3, r2
 8004480:	b2db      	uxtb	r3, r3
 8004482:	2b00      	cmp	r3, #0
 8004484:	d001      	beq.n	800448a <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 8004486:	2301      	movs	r3, #1
 8004488:	e08b      	b.n	80045a2 <HAL_TIM_PWM_Start+0x1b2>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d104      	bne.n	800449a <HAL_TIM_PWM_Start+0xaa>
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	223e      	movs	r2, #62	@ 0x3e
 8004494:	2102      	movs	r1, #2
 8004496:	5499      	strb	r1, [r3, r2]
 8004498:	e023      	b.n	80044e2 <HAL_TIM_PWM_Start+0xf2>
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	2b04      	cmp	r3, #4
 800449e:	d104      	bne.n	80044aa <HAL_TIM_PWM_Start+0xba>
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	223f      	movs	r2, #63	@ 0x3f
 80044a4:	2102      	movs	r1, #2
 80044a6:	5499      	strb	r1, [r3, r2]
 80044a8:	e01b      	b.n	80044e2 <HAL_TIM_PWM_Start+0xf2>
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	2b08      	cmp	r3, #8
 80044ae:	d104      	bne.n	80044ba <HAL_TIM_PWM_Start+0xca>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2240      	movs	r2, #64	@ 0x40
 80044b4:	2102      	movs	r1, #2
 80044b6:	5499      	strb	r1, [r3, r2]
 80044b8:	e013      	b.n	80044e2 <HAL_TIM_PWM_Start+0xf2>
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	2b0c      	cmp	r3, #12
 80044be:	d104      	bne.n	80044ca <HAL_TIM_PWM_Start+0xda>
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2241      	movs	r2, #65	@ 0x41
 80044c4:	2102      	movs	r1, #2
 80044c6:	5499      	strb	r1, [r3, r2]
 80044c8:	e00b      	b.n	80044e2 <HAL_TIM_PWM_Start+0xf2>
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	2b10      	cmp	r3, #16
 80044ce:	d104      	bne.n	80044da <HAL_TIM_PWM_Start+0xea>
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2242      	movs	r2, #66	@ 0x42
 80044d4:	2102      	movs	r1, #2
 80044d6:	5499      	strb	r1, [r3, r2]
 80044d8:	e003      	b.n	80044e2 <HAL_TIM_PWM_Start+0xf2>
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2243      	movs	r2, #67	@ 0x43
 80044de:	2102      	movs	r1, #2
 80044e0:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	6839      	ldr	r1, [r7, #0]
 80044e8:	2201      	movs	r2, #1
 80044ea:	0018      	movs	r0, r3
 80044ec:	f000 fd48 	bl	8004f80 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	4a2d      	ldr	r2, [pc, #180]	@ (80045ac <HAL_TIM_PWM_Start+0x1bc>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d00e      	beq.n	8004518 <HAL_TIM_PWM_Start+0x128>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4a2c      	ldr	r2, [pc, #176]	@ (80045b0 <HAL_TIM_PWM_Start+0x1c0>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d009      	beq.n	8004518 <HAL_TIM_PWM_Start+0x128>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4a2a      	ldr	r2, [pc, #168]	@ (80045b4 <HAL_TIM_PWM_Start+0x1c4>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d004      	beq.n	8004518 <HAL_TIM_PWM_Start+0x128>
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	4a29      	ldr	r2, [pc, #164]	@ (80045b8 <HAL_TIM_PWM_Start+0x1c8>)
 8004514:	4293      	cmp	r3, r2
 8004516:	d101      	bne.n	800451c <HAL_TIM_PWM_Start+0x12c>
 8004518:	2301      	movs	r3, #1
 800451a:	e000      	b.n	800451e <HAL_TIM_PWM_Start+0x12e>
 800451c:	2300      	movs	r3, #0
 800451e:	2b00      	cmp	r3, #0
 8004520:	d008      	beq.n	8004534 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	2180      	movs	r1, #128	@ 0x80
 800452e:	0209      	lsls	r1, r1, #8
 8004530:	430a      	orrs	r2, r1
 8004532:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	4a1c      	ldr	r2, [pc, #112]	@ (80045ac <HAL_TIM_PWM_Start+0x1bc>)
 800453a:	4293      	cmp	r3, r2
 800453c:	d00f      	beq.n	800455e <HAL_TIM_PWM_Start+0x16e>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681a      	ldr	r2, [r3, #0]
 8004542:	2380      	movs	r3, #128	@ 0x80
 8004544:	05db      	lsls	r3, r3, #23
 8004546:	429a      	cmp	r2, r3
 8004548:	d009      	beq.n	800455e <HAL_TIM_PWM_Start+0x16e>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	4a1b      	ldr	r2, [pc, #108]	@ (80045bc <HAL_TIM_PWM_Start+0x1cc>)
 8004550:	4293      	cmp	r3, r2
 8004552:	d004      	beq.n	800455e <HAL_TIM_PWM_Start+0x16e>
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	4a15      	ldr	r2, [pc, #84]	@ (80045b0 <HAL_TIM_PWM_Start+0x1c0>)
 800455a:	4293      	cmp	r3, r2
 800455c:	d116      	bne.n	800458c <HAL_TIM_PWM_Start+0x19c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	689b      	ldr	r3, [r3, #8]
 8004564:	4a16      	ldr	r2, [pc, #88]	@ (80045c0 <HAL_TIM_PWM_Start+0x1d0>)
 8004566:	4013      	ands	r3, r2
 8004568:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	2b06      	cmp	r3, #6
 800456e:	d016      	beq.n	800459e <HAL_TIM_PWM_Start+0x1ae>
 8004570:	68fa      	ldr	r2, [r7, #12]
 8004572:	2380      	movs	r3, #128	@ 0x80
 8004574:	025b      	lsls	r3, r3, #9
 8004576:	429a      	cmp	r2, r3
 8004578:	d011      	beq.n	800459e <HAL_TIM_PWM_Start+0x1ae>
    {
      __HAL_TIM_ENABLE(htim);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	681a      	ldr	r2, [r3, #0]
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	2101      	movs	r1, #1
 8004586:	430a      	orrs	r2, r1
 8004588:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800458a:	e008      	b.n	800459e <HAL_TIM_PWM_Start+0x1ae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	681a      	ldr	r2, [r3, #0]
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	2101      	movs	r1, #1
 8004598:	430a      	orrs	r2, r1
 800459a:	601a      	str	r2, [r3, #0]
 800459c:	e000      	b.n	80045a0 <HAL_TIM_PWM_Start+0x1b0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800459e:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 80045a0:	2300      	movs	r3, #0
}
 80045a2:	0018      	movs	r0, r3
 80045a4:	46bd      	mov	sp, r7
 80045a6:	b004      	add	sp, #16
 80045a8:	bd80      	pop	{r7, pc}
 80045aa:	46c0      	nop			@ (mov r8, r8)
 80045ac:	40012c00 	.word	0x40012c00
 80045b0:	40014000 	.word	0x40014000
 80045b4:	40014400 	.word	0x40014400
 80045b8:	40014800 	.word	0x40014800
 80045bc:	40000400 	.word	0x40000400
 80045c0:	00010007 	.word	0x00010007

080045c4 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b082      	sub	sp, #8
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
 80045cc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	6839      	ldr	r1, [r7, #0]
 80045d4:	2200      	movs	r2, #0
 80045d6:	0018      	movs	r0, r3
 80045d8:	f000 fcd2 	bl	8004f80 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	4a37      	ldr	r2, [pc, #220]	@ (80046c0 <HAL_TIM_PWM_Stop+0xfc>)
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d00e      	beq.n	8004604 <HAL_TIM_PWM_Stop+0x40>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	4a36      	ldr	r2, [pc, #216]	@ (80046c4 <HAL_TIM_PWM_Stop+0x100>)
 80045ec:	4293      	cmp	r3, r2
 80045ee:	d009      	beq.n	8004604 <HAL_TIM_PWM_Stop+0x40>
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	4a34      	ldr	r2, [pc, #208]	@ (80046c8 <HAL_TIM_PWM_Stop+0x104>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d004      	beq.n	8004604 <HAL_TIM_PWM_Stop+0x40>
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	4a33      	ldr	r2, [pc, #204]	@ (80046cc <HAL_TIM_PWM_Stop+0x108>)
 8004600:	4293      	cmp	r3, r2
 8004602:	d101      	bne.n	8004608 <HAL_TIM_PWM_Stop+0x44>
 8004604:	2301      	movs	r3, #1
 8004606:	e000      	b.n	800460a <HAL_TIM_PWM_Stop+0x46>
 8004608:	2300      	movs	r3, #0
 800460a:	2b00      	cmp	r3, #0
 800460c:	d013      	beq.n	8004636 <HAL_TIM_PWM_Stop+0x72>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	6a1b      	ldr	r3, [r3, #32]
 8004614:	4a2e      	ldr	r2, [pc, #184]	@ (80046d0 <HAL_TIM_PWM_Stop+0x10c>)
 8004616:	4013      	ands	r3, r2
 8004618:	d10d      	bne.n	8004636 <HAL_TIM_PWM_Stop+0x72>
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	6a1b      	ldr	r3, [r3, #32]
 8004620:	4a2c      	ldr	r2, [pc, #176]	@ (80046d4 <HAL_TIM_PWM_Stop+0x110>)
 8004622:	4013      	ands	r3, r2
 8004624:	d107      	bne.n	8004636 <HAL_TIM_PWM_Stop+0x72>
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	4929      	ldr	r1, [pc, #164]	@ (80046d8 <HAL_TIM_PWM_Stop+0x114>)
 8004632:	400a      	ands	r2, r1
 8004634:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	6a1b      	ldr	r3, [r3, #32]
 800463c:	4a24      	ldr	r2, [pc, #144]	@ (80046d0 <HAL_TIM_PWM_Stop+0x10c>)
 800463e:	4013      	ands	r3, r2
 8004640:	d10d      	bne.n	800465e <HAL_TIM_PWM_Stop+0x9a>
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	6a1b      	ldr	r3, [r3, #32]
 8004648:	4a22      	ldr	r2, [pc, #136]	@ (80046d4 <HAL_TIM_PWM_Stop+0x110>)
 800464a:	4013      	ands	r3, r2
 800464c:	d107      	bne.n	800465e <HAL_TIM_PWM_Stop+0x9a>
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	681a      	ldr	r2, [r3, #0]
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	2101      	movs	r1, #1
 800465a:	438a      	bics	r2, r1
 800465c:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d104      	bne.n	800466e <HAL_TIM_PWM_Stop+0xaa>
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	223e      	movs	r2, #62	@ 0x3e
 8004668:	2101      	movs	r1, #1
 800466a:	5499      	strb	r1, [r3, r2]
 800466c:	e023      	b.n	80046b6 <HAL_TIM_PWM_Stop+0xf2>
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	2b04      	cmp	r3, #4
 8004672:	d104      	bne.n	800467e <HAL_TIM_PWM_Stop+0xba>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	223f      	movs	r2, #63	@ 0x3f
 8004678:	2101      	movs	r1, #1
 800467a:	5499      	strb	r1, [r3, r2]
 800467c:	e01b      	b.n	80046b6 <HAL_TIM_PWM_Stop+0xf2>
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	2b08      	cmp	r3, #8
 8004682:	d104      	bne.n	800468e <HAL_TIM_PWM_Stop+0xca>
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2240      	movs	r2, #64	@ 0x40
 8004688:	2101      	movs	r1, #1
 800468a:	5499      	strb	r1, [r3, r2]
 800468c:	e013      	b.n	80046b6 <HAL_TIM_PWM_Stop+0xf2>
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	2b0c      	cmp	r3, #12
 8004692:	d104      	bne.n	800469e <HAL_TIM_PWM_Stop+0xda>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2241      	movs	r2, #65	@ 0x41
 8004698:	2101      	movs	r1, #1
 800469a:	5499      	strb	r1, [r3, r2]
 800469c:	e00b      	b.n	80046b6 <HAL_TIM_PWM_Stop+0xf2>
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	2b10      	cmp	r3, #16
 80046a2:	d104      	bne.n	80046ae <HAL_TIM_PWM_Stop+0xea>
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2242      	movs	r2, #66	@ 0x42
 80046a8:	2101      	movs	r1, #1
 80046aa:	5499      	strb	r1, [r3, r2]
 80046ac:	e003      	b.n	80046b6 <HAL_TIM_PWM_Stop+0xf2>
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2243      	movs	r2, #67	@ 0x43
 80046b2:	2101      	movs	r1, #1
 80046b4:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 80046b6:	2300      	movs	r3, #0
}
 80046b8:	0018      	movs	r0, r3
 80046ba:	46bd      	mov	sp, r7
 80046bc:	b002      	add	sp, #8
 80046be:	bd80      	pop	{r7, pc}
 80046c0:	40012c00 	.word	0x40012c00
 80046c4:	40014000 	.word	0x40014000
 80046c8:	40014400 	.word	0x40014400
 80046cc:	40014800 	.word	0x40014800
 80046d0:	00001111 	.word	0x00001111
 80046d4:	00000444 	.word	0x00000444
 80046d8:	ffff7fff 	.word	0xffff7fff

080046dc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	b086      	sub	sp, #24
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	60f8      	str	r0, [r7, #12]
 80046e4:	60b9      	str	r1, [r7, #8]
 80046e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80046e8:	2317      	movs	r3, #23
 80046ea:	18fb      	adds	r3, r7, r3
 80046ec:	2200      	movs	r2, #0
 80046ee:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	223c      	movs	r2, #60	@ 0x3c
 80046f4:	5c9b      	ldrb	r3, [r3, r2]
 80046f6:	2b01      	cmp	r3, #1
 80046f8:	d101      	bne.n	80046fe <HAL_TIM_PWM_ConfigChannel+0x22>
 80046fa:	2302      	movs	r3, #2
 80046fc:	e0e5      	b.n	80048ca <HAL_TIM_PWM_ConfigChannel+0x1ee>
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	223c      	movs	r2, #60	@ 0x3c
 8004702:	2101      	movs	r1, #1
 8004704:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2b14      	cmp	r3, #20
 800470a:	d900      	bls.n	800470e <HAL_TIM_PWM_ConfigChannel+0x32>
 800470c:	e0d1      	b.n	80048b2 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	009a      	lsls	r2, r3, #2
 8004712:	4b70      	ldr	r3, [pc, #448]	@ (80048d4 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8004714:	18d3      	adds	r3, r2, r3
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	68ba      	ldr	r2, [r7, #8]
 8004720:	0011      	movs	r1, r2
 8004722:	0018      	movs	r0, r3
 8004724:	f000 f968 	bl	80049f8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	699a      	ldr	r2, [r3, #24]
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	2108      	movs	r1, #8
 8004734:	430a      	orrs	r2, r1
 8004736:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	699a      	ldr	r2, [r3, #24]
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	2104      	movs	r1, #4
 8004744:	438a      	bics	r2, r1
 8004746:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	6999      	ldr	r1, [r3, #24]
 800474e:	68bb      	ldr	r3, [r7, #8]
 8004750:	691a      	ldr	r2, [r3, #16]
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	430a      	orrs	r2, r1
 8004758:	619a      	str	r2, [r3, #24]
      break;
 800475a:	e0af      	b.n	80048bc <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	68ba      	ldr	r2, [r7, #8]
 8004762:	0011      	movs	r1, r2
 8004764:	0018      	movs	r0, r3
 8004766:	f000 f9d1 	bl	8004b0c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	699a      	ldr	r2, [r3, #24]
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	2180      	movs	r1, #128	@ 0x80
 8004776:	0109      	lsls	r1, r1, #4
 8004778:	430a      	orrs	r2, r1
 800477a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	699a      	ldr	r2, [r3, #24]
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	4954      	ldr	r1, [pc, #336]	@ (80048d8 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8004788:	400a      	ands	r2, r1
 800478a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	6999      	ldr	r1, [r3, #24]
 8004792:	68bb      	ldr	r3, [r7, #8]
 8004794:	691b      	ldr	r3, [r3, #16]
 8004796:	021a      	lsls	r2, r3, #8
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	430a      	orrs	r2, r1
 800479e:	619a      	str	r2, [r3, #24]
      break;
 80047a0:	e08c      	b.n	80048bc <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	68ba      	ldr	r2, [r7, #8]
 80047a8:	0011      	movs	r1, r2
 80047aa:	0018      	movs	r0, r3
 80047ac:	f000 fa32 	bl	8004c14 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	69da      	ldr	r2, [r3, #28]
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	2108      	movs	r1, #8
 80047bc:	430a      	orrs	r2, r1
 80047be:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	69da      	ldr	r2, [r3, #28]
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	2104      	movs	r1, #4
 80047cc:	438a      	bics	r2, r1
 80047ce:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	69d9      	ldr	r1, [r3, #28]
 80047d6:	68bb      	ldr	r3, [r7, #8]
 80047d8:	691a      	ldr	r2, [r3, #16]
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	430a      	orrs	r2, r1
 80047e0:	61da      	str	r2, [r3, #28]
      break;
 80047e2:	e06b      	b.n	80048bc <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	68ba      	ldr	r2, [r7, #8]
 80047ea:	0011      	movs	r1, r2
 80047ec:	0018      	movs	r0, r3
 80047ee:	f000 fa99 	bl	8004d24 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	69da      	ldr	r2, [r3, #28]
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	2180      	movs	r1, #128	@ 0x80
 80047fe:	0109      	lsls	r1, r1, #4
 8004800:	430a      	orrs	r2, r1
 8004802:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	69da      	ldr	r2, [r3, #28]
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	4932      	ldr	r1, [pc, #200]	@ (80048d8 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8004810:	400a      	ands	r2, r1
 8004812:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	69d9      	ldr	r1, [r3, #28]
 800481a:	68bb      	ldr	r3, [r7, #8]
 800481c:	691b      	ldr	r3, [r3, #16]
 800481e:	021a      	lsls	r2, r3, #8
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	430a      	orrs	r2, r1
 8004826:	61da      	str	r2, [r3, #28]
      break;
 8004828:	e048      	b.n	80048bc <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	68ba      	ldr	r2, [r7, #8]
 8004830:	0011      	movs	r1, r2
 8004832:	0018      	movs	r0, r3
 8004834:	f000 fae0 	bl	8004df8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	2108      	movs	r1, #8
 8004844:	430a      	orrs	r2, r1
 8004846:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	2104      	movs	r1, #4
 8004854:	438a      	bics	r2, r1
 8004856:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800485e:	68bb      	ldr	r3, [r7, #8]
 8004860:	691a      	ldr	r2, [r3, #16]
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	430a      	orrs	r2, r1
 8004868:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800486a:	e027      	b.n	80048bc <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	68ba      	ldr	r2, [r7, #8]
 8004872:	0011      	movs	r1, r2
 8004874:	0018      	movs	r0, r3
 8004876:	f000 fb1f 	bl	8004eb8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	2180      	movs	r1, #128	@ 0x80
 8004886:	0109      	lsls	r1, r1, #4
 8004888:	430a      	orrs	r2, r1
 800488a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	4910      	ldr	r1, [pc, #64]	@ (80048d8 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8004898:	400a      	ands	r2, r1
 800489a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80048a2:	68bb      	ldr	r3, [r7, #8]
 80048a4:	691b      	ldr	r3, [r3, #16]
 80048a6:	021a      	lsls	r2, r3, #8
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	430a      	orrs	r2, r1
 80048ae:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80048b0:	e004      	b.n	80048bc <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 80048b2:	2317      	movs	r3, #23
 80048b4:	18fb      	adds	r3, r7, r3
 80048b6:	2201      	movs	r2, #1
 80048b8:	701a      	strb	r2, [r3, #0]
      break;
 80048ba:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	223c      	movs	r2, #60	@ 0x3c
 80048c0:	2100      	movs	r1, #0
 80048c2:	5499      	strb	r1, [r3, r2]

  return status;
 80048c4:	2317      	movs	r3, #23
 80048c6:	18fb      	adds	r3, r7, r3
 80048c8:	781b      	ldrb	r3, [r3, #0]
}
 80048ca:	0018      	movs	r0, r3
 80048cc:	46bd      	mov	sp, r7
 80048ce:	b006      	add	sp, #24
 80048d0:	bd80      	pop	{r7, pc}
 80048d2:	46c0      	nop			@ (mov r8, r8)
 80048d4:	08006234 	.word	0x08006234
 80048d8:	fffffbff 	.word	0xfffffbff

080048dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	b084      	sub	sp, #16
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
 80048e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	4a3b      	ldr	r2, [pc, #236]	@ (80049dc <TIM_Base_SetConfig+0x100>)
 80048f0:	4293      	cmp	r3, r2
 80048f2:	d008      	beq.n	8004906 <TIM_Base_SetConfig+0x2a>
 80048f4:	687a      	ldr	r2, [r7, #4]
 80048f6:	2380      	movs	r3, #128	@ 0x80
 80048f8:	05db      	lsls	r3, r3, #23
 80048fa:	429a      	cmp	r2, r3
 80048fc:	d003      	beq.n	8004906 <TIM_Base_SetConfig+0x2a>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	4a37      	ldr	r2, [pc, #220]	@ (80049e0 <TIM_Base_SetConfig+0x104>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d108      	bne.n	8004918 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	2270      	movs	r2, #112	@ 0x70
 800490a:	4393      	bics	r3, r2
 800490c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	685b      	ldr	r3, [r3, #4]
 8004912:	68fa      	ldr	r2, [r7, #12]
 8004914:	4313      	orrs	r3, r2
 8004916:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	4a30      	ldr	r2, [pc, #192]	@ (80049dc <TIM_Base_SetConfig+0x100>)
 800491c:	4293      	cmp	r3, r2
 800491e:	d018      	beq.n	8004952 <TIM_Base_SetConfig+0x76>
 8004920:	687a      	ldr	r2, [r7, #4]
 8004922:	2380      	movs	r3, #128	@ 0x80
 8004924:	05db      	lsls	r3, r3, #23
 8004926:	429a      	cmp	r2, r3
 8004928:	d013      	beq.n	8004952 <TIM_Base_SetConfig+0x76>
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	4a2c      	ldr	r2, [pc, #176]	@ (80049e0 <TIM_Base_SetConfig+0x104>)
 800492e:	4293      	cmp	r3, r2
 8004930:	d00f      	beq.n	8004952 <TIM_Base_SetConfig+0x76>
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	4a2b      	ldr	r2, [pc, #172]	@ (80049e4 <TIM_Base_SetConfig+0x108>)
 8004936:	4293      	cmp	r3, r2
 8004938:	d00b      	beq.n	8004952 <TIM_Base_SetConfig+0x76>
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	4a2a      	ldr	r2, [pc, #168]	@ (80049e8 <TIM_Base_SetConfig+0x10c>)
 800493e:	4293      	cmp	r3, r2
 8004940:	d007      	beq.n	8004952 <TIM_Base_SetConfig+0x76>
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	4a29      	ldr	r2, [pc, #164]	@ (80049ec <TIM_Base_SetConfig+0x110>)
 8004946:	4293      	cmp	r3, r2
 8004948:	d003      	beq.n	8004952 <TIM_Base_SetConfig+0x76>
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	4a28      	ldr	r2, [pc, #160]	@ (80049f0 <TIM_Base_SetConfig+0x114>)
 800494e:	4293      	cmp	r3, r2
 8004950:	d108      	bne.n	8004964 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	4a27      	ldr	r2, [pc, #156]	@ (80049f4 <TIM_Base_SetConfig+0x118>)
 8004956:	4013      	ands	r3, r2
 8004958:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	68db      	ldr	r3, [r3, #12]
 800495e:	68fa      	ldr	r2, [r7, #12]
 8004960:	4313      	orrs	r3, r2
 8004962:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	2280      	movs	r2, #128	@ 0x80
 8004968:	4393      	bics	r3, r2
 800496a:	001a      	movs	r2, r3
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	695b      	ldr	r3, [r3, #20]
 8004970:	4313      	orrs	r3, r2
 8004972:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	68fa      	ldr	r2, [r7, #12]
 8004978:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	689a      	ldr	r2, [r3, #8]
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	681a      	ldr	r2, [r3, #0]
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	4a13      	ldr	r2, [pc, #76]	@ (80049dc <TIM_Base_SetConfig+0x100>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d00b      	beq.n	80049aa <TIM_Base_SetConfig+0xce>
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	4a14      	ldr	r2, [pc, #80]	@ (80049e8 <TIM_Base_SetConfig+0x10c>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d007      	beq.n	80049aa <TIM_Base_SetConfig+0xce>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	4a13      	ldr	r2, [pc, #76]	@ (80049ec <TIM_Base_SetConfig+0x110>)
 800499e:	4293      	cmp	r3, r2
 80049a0:	d003      	beq.n	80049aa <TIM_Base_SetConfig+0xce>
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	4a12      	ldr	r2, [pc, #72]	@ (80049f0 <TIM_Base_SetConfig+0x114>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d103      	bne.n	80049b2 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	691a      	ldr	r2, [r3, #16]
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2201      	movs	r2, #1
 80049b6:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	691b      	ldr	r3, [r3, #16]
 80049bc:	2201      	movs	r2, #1
 80049be:	4013      	ands	r3, r2
 80049c0:	2b01      	cmp	r3, #1
 80049c2:	d106      	bne.n	80049d2 <TIM_Base_SetConfig+0xf6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	691b      	ldr	r3, [r3, #16]
 80049c8:	2201      	movs	r2, #1
 80049ca:	4393      	bics	r3, r2
 80049cc:	001a      	movs	r2, r3
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	611a      	str	r2, [r3, #16]
  }
}
 80049d2:	46c0      	nop			@ (mov r8, r8)
 80049d4:	46bd      	mov	sp, r7
 80049d6:	b004      	add	sp, #16
 80049d8:	bd80      	pop	{r7, pc}
 80049da:	46c0      	nop			@ (mov r8, r8)
 80049dc:	40012c00 	.word	0x40012c00
 80049e0:	40000400 	.word	0x40000400
 80049e4:	40002000 	.word	0x40002000
 80049e8:	40014000 	.word	0x40014000
 80049ec:	40014400 	.word	0x40014400
 80049f0:	40014800 	.word	0x40014800
 80049f4:	fffffcff 	.word	0xfffffcff

080049f8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b086      	sub	sp, #24
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
 8004a00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6a1b      	ldr	r3, [r3, #32]
 8004a06:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6a1b      	ldr	r3, [r3, #32]
 8004a0c:	2201      	movs	r2, #1
 8004a0e:	4393      	bics	r3, r2
 8004a10:	001a      	movs	r2, r3
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	685b      	ldr	r3, [r3, #4]
 8004a1a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	699b      	ldr	r3, [r3, #24]
 8004a20:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	4a32      	ldr	r2, [pc, #200]	@ (8004af0 <TIM_OC1_SetConfig+0xf8>)
 8004a26:	4013      	ands	r3, r2
 8004a28:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	2203      	movs	r2, #3
 8004a2e:	4393      	bics	r3, r2
 8004a30:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	68fa      	ldr	r2, [r7, #12]
 8004a38:	4313      	orrs	r3, r2
 8004a3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004a3c:	697b      	ldr	r3, [r7, #20]
 8004a3e:	2202      	movs	r2, #2
 8004a40:	4393      	bics	r3, r2
 8004a42:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	689b      	ldr	r3, [r3, #8]
 8004a48:	697a      	ldr	r2, [r7, #20]
 8004a4a:	4313      	orrs	r3, r2
 8004a4c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	4a28      	ldr	r2, [pc, #160]	@ (8004af4 <TIM_OC1_SetConfig+0xfc>)
 8004a52:	4293      	cmp	r3, r2
 8004a54:	d00b      	beq.n	8004a6e <TIM_OC1_SetConfig+0x76>
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	4a27      	ldr	r2, [pc, #156]	@ (8004af8 <TIM_OC1_SetConfig+0x100>)
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d007      	beq.n	8004a6e <TIM_OC1_SetConfig+0x76>
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	4a26      	ldr	r2, [pc, #152]	@ (8004afc <TIM_OC1_SetConfig+0x104>)
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d003      	beq.n	8004a6e <TIM_OC1_SetConfig+0x76>
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	4a25      	ldr	r2, [pc, #148]	@ (8004b00 <TIM_OC1_SetConfig+0x108>)
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d10c      	bne.n	8004a88 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004a6e:	697b      	ldr	r3, [r7, #20]
 8004a70:	2208      	movs	r2, #8
 8004a72:	4393      	bics	r3, r2
 8004a74:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	68db      	ldr	r3, [r3, #12]
 8004a7a:	697a      	ldr	r2, [r7, #20]
 8004a7c:	4313      	orrs	r3, r2
 8004a7e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004a80:	697b      	ldr	r3, [r7, #20]
 8004a82:	2204      	movs	r2, #4
 8004a84:	4393      	bics	r3, r2
 8004a86:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	4a1a      	ldr	r2, [pc, #104]	@ (8004af4 <TIM_OC1_SetConfig+0xfc>)
 8004a8c:	4293      	cmp	r3, r2
 8004a8e:	d00b      	beq.n	8004aa8 <TIM_OC1_SetConfig+0xb0>
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	4a19      	ldr	r2, [pc, #100]	@ (8004af8 <TIM_OC1_SetConfig+0x100>)
 8004a94:	4293      	cmp	r3, r2
 8004a96:	d007      	beq.n	8004aa8 <TIM_OC1_SetConfig+0xb0>
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	4a18      	ldr	r2, [pc, #96]	@ (8004afc <TIM_OC1_SetConfig+0x104>)
 8004a9c:	4293      	cmp	r3, r2
 8004a9e:	d003      	beq.n	8004aa8 <TIM_OC1_SetConfig+0xb0>
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	4a17      	ldr	r2, [pc, #92]	@ (8004b00 <TIM_OC1_SetConfig+0x108>)
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	d111      	bne.n	8004acc <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004aa8:	693b      	ldr	r3, [r7, #16]
 8004aaa:	4a16      	ldr	r2, [pc, #88]	@ (8004b04 <TIM_OC1_SetConfig+0x10c>)
 8004aac:	4013      	ands	r3, r2
 8004aae:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004ab0:	693b      	ldr	r3, [r7, #16]
 8004ab2:	4a15      	ldr	r2, [pc, #84]	@ (8004b08 <TIM_OC1_SetConfig+0x110>)
 8004ab4:	4013      	ands	r3, r2
 8004ab6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	695b      	ldr	r3, [r3, #20]
 8004abc:	693a      	ldr	r2, [r7, #16]
 8004abe:	4313      	orrs	r3, r2
 8004ac0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004ac2:	683b      	ldr	r3, [r7, #0]
 8004ac4:	699b      	ldr	r3, [r3, #24]
 8004ac6:	693a      	ldr	r2, [r7, #16]
 8004ac8:	4313      	orrs	r3, r2
 8004aca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	693a      	ldr	r2, [r7, #16]
 8004ad0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	68fa      	ldr	r2, [r7, #12]
 8004ad6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	685a      	ldr	r2, [r3, #4]
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	697a      	ldr	r2, [r7, #20]
 8004ae4:	621a      	str	r2, [r3, #32]
}
 8004ae6:	46c0      	nop			@ (mov r8, r8)
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	b006      	add	sp, #24
 8004aec:	bd80      	pop	{r7, pc}
 8004aee:	46c0      	nop			@ (mov r8, r8)
 8004af0:	fffeff8f 	.word	0xfffeff8f
 8004af4:	40012c00 	.word	0x40012c00
 8004af8:	40014000 	.word	0x40014000
 8004afc:	40014400 	.word	0x40014400
 8004b00:	40014800 	.word	0x40014800
 8004b04:	fffffeff 	.word	0xfffffeff
 8004b08:	fffffdff 	.word	0xfffffdff

08004b0c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b086      	sub	sp, #24
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
 8004b14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6a1b      	ldr	r3, [r3, #32]
 8004b1a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6a1b      	ldr	r3, [r3, #32]
 8004b20:	2210      	movs	r2, #16
 8004b22:	4393      	bics	r3, r2
 8004b24:	001a      	movs	r2, r3
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	685b      	ldr	r3, [r3, #4]
 8004b2e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	699b      	ldr	r3, [r3, #24]
 8004b34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	4a2e      	ldr	r2, [pc, #184]	@ (8004bf4 <TIM_OC2_SetConfig+0xe8>)
 8004b3a:	4013      	ands	r3, r2
 8004b3c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	4a2d      	ldr	r2, [pc, #180]	@ (8004bf8 <TIM_OC2_SetConfig+0xec>)
 8004b42:	4013      	ands	r3, r2
 8004b44:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004b46:	683b      	ldr	r3, [r7, #0]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	021b      	lsls	r3, r3, #8
 8004b4c:	68fa      	ldr	r2, [r7, #12]
 8004b4e:	4313      	orrs	r3, r2
 8004b50:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004b52:	697b      	ldr	r3, [r7, #20]
 8004b54:	2220      	movs	r2, #32
 8004b56:	4393      	bics	r3, r2
 8004b58:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	689b      	ldr	r3, [r3, #8]
 8004b5e:	011b      	lsls	r3, r3, #4
 8004b60:	697a      	ldr	r2, [r7, #20]
 8004b62:	4313      	orrs	r3, r2
 8004b64:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	4a24      	ldr	r2, [pc, #144]	@ (8004bfc <TIM_OC2_SetConfig+0xf0>)
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d10d      	bne.n	8004b8a <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004b6e:	697b      	ldr	r3, [r7, #20]
 8004b70:	2280      	movs	r2, #128	@ 0x80
 8004b72:	4393      	bics	r3, r2
 8004b74:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	68db      	ldr	r3, [r3, #12]
 8004b7a:	011b      	lsls	r3, r3, #4
 8004b7c:	697a      	ldr	r2, [r7, #20]
 8004b7e:	4313      	orrs	r3, r2
 8004b80:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004b82:	697b      	ldr	r3, [r7, #20]
 8004b84:	2240      	movs	r2, #64	@ 0x40
 8004b86:	4393      	bics	r3, r2
 8004b88:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	4a1b      	ldr	r2, [pc, #108]	@ (8004bfc <TIM_OC2_SetConfig+0xf0>)
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	d00b      	beq.n	8004baa <TIM_OC2_SetConfig+0x9e>
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	4a1a      	ldr	r2, [pc, #104]	@ (8004c00 <TIM_OC2_SetConfig+0xf4>)
 8004b96:	4293      	cmp	r3, r2
 8004b98:	d007      	beq.n	8004baa <TIM_OC2_SetConfig+0x9e>
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	4a19      	ldr	r2, [pc, #100]	@ (8004c04 <TIM_OC2_SetConfig+0xf8>)
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d003      	beq.n	8004baa <TIM_OC2_SetConfig+0x9e>
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	4a18      	ldr	r2, [pc, #96]	@ (8004c08 <TIM_OC2_SetConfig+0xfc>)
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d113      	bne.n	8004bd2 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004baa:	693b      	ldr	r3, [r7, #16]
 8004bac:	4a17      	ldr	r2, [pc, #92]	@ (8004c0c <TIM_OC2_SetConfig+0x100>)
 8004bae:	4013      	ands	r3, r2
 8004bb0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004bb2:	693b      	ldr	r3, [r7, #16]
 8004bb4:	4a16      	ldr	r2, [pc, #88]	@ (8004c10 <TIM_OC2_SetConfig+0x104>)
 8004bb6:	4013      	ands	r3, r2
 8004bb8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	695b      	ldr	r3, [r3, #20]
 8004bbe:	009b      	lsls	r3, r3, #2
 8004bc0:	693a      	ldr	r2, [r7, #16]
 8004bc2:	4313      	orrs	r3, r2
 8004bc4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	699b      	ldr	r3, [r3, #24]
 8004bca:	009b      	lsls	r3, r3, #2
 8004bcc:	693a      	ldr	r2, [r7, #16]
 8004bce:	4313      	orrs	r3, r2
 8004bd0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	693a      	ldr	r2, [r7, #16]
 8004bd6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	68fa      	ldr	r2, [r7, #12]
 8004bdc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	685a      	ldr	r2, [r3, #4]
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	697a      	ldr	r2, [r7, #20]
 8004bea:	621a      	str	r2, [r3, #32]
}
 8004bec:	46c0      	nop			@ (mov r8, r8)
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	b006      	add	sp, #24
 8004bf2:	bd80      	pop	{r7, pc}
 8004bf4:	feff8fff 	.word	0xfeff8fff
 8004bf8:	fffffcff 	.word	0xfffffcff
 8004bfc:	40012c00 	.word	0x40012c00
 8004c00:	40014000 	.word	0x40014000
 8004c04:	40014400 	.word	0x40014400
 8004c08:	40014800 	.word	0x40014800
 8004c0c:	fffffbff 	.word	0xfffffbff
 8004c10:	fffff7ff 	.word	0xfffff7ff

08004c14 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b086      	sub	sp, #24
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
 8004c1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6a1b      	ldr	r3, [r3, #32]
 8004c22:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6a1b      	ldr	r3, [r3, #32]
 8004c28:	4a33      	ldr	r2, [pc, #204]	@ (8004cf8 <TIM_OC3_SetConfig+0xe4>)
 8004c2a:	401a      	ands	r2, r3
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	685b      	ldr	r3, [r3, #4]
 8004c34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	69db      	ldr	r3, [r3, #28]
 8004c3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	4a2f      	ldr	r2, [pc, #188]	@ (8004cfc <TIM_OC3_SetConfig+0xe8>)
 8004c40:	4013      	ands	r3, r2
 8004c42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	2203      	movs	r2, #3
 8004c48:	4393      	bics	r3, r2
 8004c4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	68fa      	ldr	r2, [r7, #12]
 8004c52:	4313      	orrs	r3, r2
 8004c54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004c56:	697b      	ldr	r3, [r7, #20]
 8004c58:	4a29      	ldr	r2, [pc, #164]	@ (8004d00 <TIM_OC3_SetConfig+0xec>)
 8004c5a:	4013      	ands	r3, r2
 8004c5c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	689b      	ldr	r3, [r3, #8]
 8004c62:	021b      	lsls	r3, r3, #8
 8004c64:	697a      	ldr	r2, [r7, #20]
 8004c66:	4313      	orrs	r3, r2
 8004c68:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	4a25      	ldr	r2, [pc, #148]	@ (8004d04 <TIM_OC3_SetConfig+0xf0>)
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	d10d      	bne.n	8004c8e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004c72:	697b      	ldr	r3, [r7, #20]
 8004c74:	4a24      	ldr	r2, [pc, #144]	@ (8004d08 <TIM_OC3_SetConfig+0xf4>)
 8004c76:	4013      	ands	r3, r2
 8004c78:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	68db      	ldr	r3, [r3, #12]
 8004c7e:	021b      	lsls	r3, r3, #8
 8004c80:	697a      	ldr	r2, [r7, #20]
 8004c82:	4313      	orrs	r3, r2
 8004c84:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004c86:	697b      	ldr	r3, [r7, #20]
 8004c88:	4a20      	ldr	r2, [pc, #128]	@ (8004d0c <TIM_OC3_SetConfig+0xf8>)
 8004c8a:	4013      	ands	r3, r2
 8004c8c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	4a1c      	ldr	r2, [pc, #112]	@ (8004d04 <TIM_OC3_SetConfig+0xf0>)
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d00b      	beq.n	8004cae <TIM_OC3_SetConfig+0x9a>
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	4a1d      	ldr	r2, [pc, #116]	@ (8004d10 <TIM_OC3_SetConfig+0xfc>)
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d007      	beq.n	8004cae <TIM_OC3_SetConfig+0x9a>
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	4a1c      	ldr	r2, [pc, #112]	@ (8004d14 <TIM_OC3_SetConfig+0x100>)
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	d003      	beq.n	8004cae <TIM_OC3_SetConfig+0x9a>
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	4a1b      	ldr	r2, [pc, #108]	@ (8004d18 <TIM_OC3_SetConfig+0x104>)
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d113      	bne.n	8004cd6 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004cae:	693b      	ldr	r3, [r7, #16]
 8004cb0:	4a1a      	ldr	r2, [pc, #104]	@ (8004d1c <TIM_OC3_SetConfig+0x108>)
 8004cb2:	4013      	ands	r3, r2
 8004cb4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004cb6:	693b      	ldr	r3, [r7, #16]
 8004cb8:	4a19      	ldr	r2, [pc, #100]	@ (8004d20 <TIM_OC3_SetConfig+0x10c>)
 8004cba:	4013      	ands	r3, r2
 8004cbc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	695b      	ldr	r3, [r3, #20]
 8004cc2:	011b      	lsls	r3, r3, #4
 8004cc4:	693a      	ldr	r2, [r7, #16]
 8004cc6:	4313      	orrs	r3, r2
 8004cc8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	699b      	ldr	r3, [r3, #24]
 8004cce:	011b      	lsls	r3, r3, #4
 8004cd0:	693a      	ldr	r2, [r7, #16]
 8004cd2:	4313      	orrs	r3, r2
 8004cd4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	693a      	ldr	r2, [r7, #16]
 8004cda:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	68fa      	ldr	r2, [r7, #12]
 8004ce0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	685a      	ldr	r2, [r3, #4]
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	697a      	ldr	r2, [r7, #20]
 8004cee:	621a      	str	r2, [r3, #32]
}
 8004cf0:	46c0      	nop			@ (mov r8, r8)
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	b006      	add	sp, #24
 8004cf6:	bd80      	pop	{r7, pc}
 8004cf8:	fffffeff 	.word	0xfffffeff
 8004cfc:	fffeff8f 	.word	0xfffeff8f
 8004d00:	fffffdff 	.word	0xfffffdff
 8004d04:	40012c00 	.word	0x40012c00
 8004d08:	fffff7ff 	.word	0xfffff7ff
 8004d0c:	fffffbff 	.word	0xfffffbff
 8004d10:	40014000 	.word	0x40014000
 8004d14:	40014400 	.word	0x40014400
 8004d18:	40014800 	.word	0x40014800
 8004d1c:	ffffefff 	.word	0xffffefff
 8004d20:	ffffdfff 	.word	0xffffdfff

08004d24 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004d24:	b580      	push	{r7, lr}
 8004d26:	b086      	sub	sp, #24
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
 8004d2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6a1b      	ldr	r3, [r3, #32]
 8004d32:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	6a1b      	ldr	r3, [r3, #32]
 8004d38:	4a26      	ldr	r2, [pc, #152]	@ (8004dd4 <TIM_OC4_SetConfig+0xb0>)
 8004d3a:	401a      	ands	r2, r3
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	685b      	ldr	r3, [r3, #4]
 8004d44:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	69db      	ldr	r3, [r3, #28]
 8004d4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	4a22      	ldr	r2, [pc, #136]	@ (8004dd8 <TIM_OC4_SetConfig+0xb4>)
 8004d50:	4013      	ands	r3, r2
 8004d52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	4a21      	ldr	r2, [pc, #132]	@ (8004ddc <TIM_OC4_SetConfig+0xb8>)
 8004d58:	4013      	ands	r3, r2
 8004d5a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	021b      	lsls	r3, r3, #8
 8004d62:	68fa      	ldr	r2, [r7, #12]
 8004d64:	4313      	orrs	r3, r2
 8004d66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004d68:	693b      	ldr	r3, [r7, #16]
 8004d6a:	4a1d      	ldr	r2, [pc, #116]	@ (8004de0 <TIM_OC4_SetConfig+0xbc>)
 8004d6c:	4013      	ands	r3, r2
 8004d6e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	689b      	ldr	r3, [r3, #8]
 8004d74:	031b      	lsls	r3, r3, #12
 8004d76:	693a      	ldr	r2, [r7, #16]
 8004d78:	4313      	orrs	r3, r2
 8004d7a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	4a19      	ldr	r2, [pc, #100]	@ (8004de4 <TIM_OC4_SetConfig+0xc0>)
 8004d80:	4293      	cmp	r3, r2
 8004d82:	d00b      	beq.n	8004d9c <TIM_OC4_SetConfig+0x78>
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	4a18      	ldr	r2, [pc, #96]	@ (8004de8 <TIM_OC4_SetConfig+0xc4>)
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d007      	beq.n	8004d9c <TIM_OC4_SetConfig+0x78>
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	4a17      	ldr	r2, [pc, #92]	@ (8004dec <TIM_OC4_SetConfig+0xc8>)
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d003      	beq.n	8004d9c <TIM_OC4_SetConfig+0x78>
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	4a16      	ldr	r2, [pc, #88]	@ (8004df0 <TIM_OC4_SetConfig+0xcc>)
 8004d98:	4293      	cmp	r3, r2
 8004d9a:	d109      	bne.n	8004db0 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004d9c:	697b      	ldr	r3, [r7, #20]
 8004d9e:	4a15      	ldr	r2, [pc, #84]	@ (8004df4 <TIM_OC4_SetConfig+0xd0>)
 8004da0:	4013      	ands	r3, r2
 8004da2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	695b      	ldr	r3, [r3, #20]
 8004da8:	019b      	lsls	r3, r3, #6
 8004daa:	697a      	ldr	r2, [r7, #20]
 8004dac:	4313      	orrs	r3, r2
 8004dae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	697a      	ldr	r2, [r7, #20]
 8004db4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	68fa      	ldr	r2, [r7, #12]
 8004dba:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	685a      	ldr	r2, [r3, #4]
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	693a      	ldr	r2, [r7, #16]
 8004dc8:	621a      	str	r2, [r3, #32]
}
 8004dca:	46c0      	nop			@ (mov r8, r8)
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	b006      	add	sp, #24
 8004dd0:	bd80      	pop	{r7, pc}
 8004dd2:	46c0      	nop			@ (mov r8, r8)
 8004dd4:	ffffefff 	.word	0xffffefff
 8004dd8:	feff8fff 	.word	0xfeff8fff
 8004ddc:	fffffcff 	.word	0xfffffcff
 8004de0:	ffffdfff 	.word	0xffffdfff
 8004de4:	40012c00 	.word	0x40012c00
 8004de8:	40014000 	.word	0x40014000
 8004dec:	40014400 	.word	0x40014400
 8004df0:	40014800 	.word	0x40014800
 8004df4:	ffffbfff 	.word	0xffffbfff

08004df8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b086      	sub	sp, #24
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
 8004e00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6a1b      	ldr	r3, [r3, #32]
 8004e06:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6a1b      	ldr	r3, [r3, #32]
 8004e0c:	4a23      	ldr	r2, [pc, #140]	@ (8004e9c <TIM_OC5_SetConfig+0xa4>)
 8004e0e:	401a      	ands	r2, r3
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	685b      	ldr	r3, [r3, #4]
 8004e18:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	4a1f      	ldr	r2, [pc, #124]	@ (8004ea0 <TIM_OC5_SetConfig+0xa8>)
 8004e24:	4013      	ands	r3, r2
 8004e26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	68fa      	ldr	r2, [r7, #12]
 8004e2e:	4313      	orrs	r3, r2
 8004e30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004e32:	693b      	ldr	r3, [r7, #16]
 8004e34:	4a1b      	ldr	r2, [pc, #108]	@ (8004ea4 <TIM_OC5_SetConfig+0xac>)
 8004e36:	4013      	ands	r3, r2
 8004e38:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	689b      	ldr	r3, [r3, #8]
 8004e3e:	041b      	lsls	r3, r3, #16
 8004e40:	693a      	ldr	r2, [r7, #16]
 8004e42:	4313      	orrs	r3, r2
 8004e44:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	4a17      	ldr	r2, [pc, #92]	@ (8004ea8 <TIM_OC5_SetConfig+0xb0>)
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d00b      	beq.n	8004e66 <TIM_OC5_SetConfig+0x6e>
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	4a16      	ldr	r2, [pc, #88]	@ (8004eac <TIM_OC5_SetConfig+0xb4>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d007      	beq.n	8004e66 <TIM_OC5_SetConfig+0x6e>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	4a15      	ldr	r2, [pc, #84]	@ (8004eb0 <TIM_OC5_SetConfig+0xb8>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d003      	beq.n	8004e66 <TIM_OC5_SetConfig+0x6e>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	4a14      	ldr	r2, [pc, #80]	@ (8004eb4 <TIM_OC5_SetConfig+0xbc>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d109      	bne.n	8004e7a <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004e66:	697b      	ldr	r3, [r7, #20]
 8004e68:	4a0c      	ldr	r2, [pc, #48]	@ (8004e9c <TIM_OC5_SetConfig+0xa4>)
 8004e6a:	4013      	ands	r3, r2
 8004e6c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	695b      	ldr	r3, [r3, #20]
 8004e72:	021b      	lsls	r3, r3, #8
 8004e74:	697a      	ldr	r2, [r7, #20]
 8004e76:	4313      	orrs	r3, r2
 8004e78:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	697a      	ldr	r2, [r7, #20]
 8004e7e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	68fa      	ldr	r2, [r7, #12]
 8004e84:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	685a      	ldr	r2, [r3, #4]
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	693a      	ldr	r2, [r7, #16]
 8004e92:	621a      	str	r2, [r3, #32]
}
 8004e94:	46c0      	nop			@ (mov r8, r8)
 8004e96:	46bd      	mov	sp, r7
 8004e98:	b006      	add	sp, #24
 8004e9a:	bd80      	pop	{r7, pc}
 8004e9c:	fffeffff 	.word	0xfffeffff
 8004ea0:	fffeff8f 	.word	0xfffeff8f
 8004ea4:	fffdffff 	.word	0xfffdffff
 8004ea8:	40012c00 	.word	0x40012c00
 8004eac:	40014000 	.word	0x40014000
 8004eb0:	40014400 	.word	0x40014400
 8004eb4:	40014800 	.word	0x40014800

08004eb8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b086      	sub	sp, #24
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
 8004ec0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6a1b      	ldr	r3, [r3, #32]
 8004ec6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6a1b      	ldr	r3, [r3, #32]
 8004ecc:	4a24      	ldr	r2, [pc, #144]	@ (8004f60 <TIM_OC6_SetConfig+0xa8>)
 8004ece:	401a      	ands	r2, r3
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	685b      	ldr	r3, [r3, #4]
 8004ed8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ede:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	4a20      	ldr	r2, [pc, #128]	@ (8004f64 <TIM_OC6_SetConfig+0xac>)
 8004ee4:	4013      	ands	r3, r2
 8004ee6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	021b      	lsls	r3, r3, #8
 8004eee:	68fa      	ldr	r2, [r7, #12]
 8004ef0:	4313      	orrs	r3, r2
 8004ef2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004ef4:	693b      	ldr	r3, [r7, #16]
 8004ef6:	4a1c      	ldr	r2, [pc, #112]	@ (8004f68 <TIM_OC6_SetConfig+0xb0>)
 8004ef8:	4013      	ands	r3, r2
 8004efa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	689b      	ldr	r3, [r3, #8]
 8004f00:	051b      	lsls	r3, r3, #20
 8004f02:	693a      	ldr	r2, [r7, #16]
 8004f04:	4313      	orrs	r3, r2
 8004f06:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	4a18      	ldr	r2, [pc, #96]	@ (8004f6c <TIM_OC6_SetConfig+0xb4>)
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	d00b      	beq.n	8004f28 <TIM_OC6_SetConfig+0x70>
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	4a17      	ldr	r2, [pc, #92]	@ (8004f70 <TIM_OC6_SetConfig+0xb8>)
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d007      	beq.n	8004f28 <TIM_OC6_SetConfig+0x70>
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	4a16      	ldr	r2, [pc, #88]	@ (8004f74 <TIM_OC6_SetConfig+0xbc>)
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	d003      	beq.n	8004f28 <TIM_OC6_SetConfig+0x70>
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	4a15      	ldr	r2, [pc, #84]	@ (8004f78 <TIM_OC6_SetConfig+0xc0>)
 8004f24:	4293      	cmp	r3, r2
 8004f26:	d109      	bne.n	8004f3c <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004f28:	697b      	ldr	r3, [r7, #20]
 8004f2a:	4a14      	ldr	r2, [pc, #80]	@ (8004f7c <TIM_OC6_SetConfig+0xc4>)
 8004f2c:	4013      	ands	r3, r2
 8004f2e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	695b      	ldr	r3, [r3, #20]
 8004f34:	029b      	lsls	r3, r3, #10
 8004f36:	697a      	ldr	r2, [r7, #20]
 8004f38:	4313      	orrs	r3, r2
 8004f3a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	697a      	ldr	r2, [r7, #20]
 8004f40:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	68fa      	ldr	r2, [r7, #12]
 8004f46:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	685a      	ldr	r2, [r3, #4]
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	693a      	ldr	r2, [r7, #16]
 8004f54:	621a      	str	r2, [r3, #32]
}
 8004f56:	46c0      	nop			@ (mov r8, r8)
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	b006      	add	sp, #24
 8004f5c:	bd80      	pop	{r7, pc}
 8004f5e:	46c0      	nop			@ (mov r8, r8)
 8004f60:	ffefffff 	.word	0xffefffff
 8004f64:	feff8fff 	.word	0xfeff8fff
 8004f68:	ffdfffff 	.word	0xffdfffff
 8004f6c:	40012c00 	.word	0x40012c00
 8004f70:	40014000 	.word	0x40014000
 8004f74:	40014400 	.word	0x40014400
 8004f78:	40014800 	.word	0x40014800
 8004f7c:	fffbffff 	.word	0xfffbffff

08004f80 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b086      	sub	sp, #24
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	60f8      	str	r0, [r7, #12]
 8004f88:	60b9      	str	r1, [r7, #8]
 8004f8a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004f8c:	68bb      	ldr	r3, [r7, #8]
 8004f8e:	221f      	movs	r2, #31
 8004f90:	4013      	ands	r3, r2
 8004f92:	2201      	movs	r2, #1
 8004f94:	409a      	lsls	r2, r3
 8004f96:	0013      	movs	r3, r2
 8004f98:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	6a1b      	ldr	r3, [r3, #32]
 8004f9e:	697a      	ldr	r2, [r7, #20]
 8004fa0:	43d2      	mvns	r2, r2
 8004fa2:	401a      	ands	r2, r3
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	6a1a      	ldr	r2, [r3, #32]
 8004fac:	68bb      	ldr	r3, [r7, #8]
 8004fae:	211f      	movs	r1, #31
 8004fb0:	400b      	ands	r3, r1
 8004fb2:	6879      	ldr	r1, [r7, #4]
 8004fb4:	4099      	lsls	r1, r3
 8004fb6:	000b      	movs	r3, r1
 8004fb8:	431a      	orrs	r2, r3
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	621a      	str	r2, [r3, #32]
}
 8004fbe:	46c0      	nop			@ (mov r8, r8)
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	b006      	add	sp, #24
 8004fc4:	bd80      	pop	{r7, pc}
	...

08004fc8 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b084      	sub	sp, #16
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
 8004fd0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d108      	bne.n	8004fea <HAL_TIMEx_PWMN_Start+0x22>
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2244      	movs	r2, #68	@ 0x44
 8004fdc:	5c9b      	ldrb	r3, [r3, r2]
 8004fde:	b2db      	uxtb	r3, r3
 8004fe0:	3b01      	subs	r3, #1
 8004fe2:	1e5a      	subs	r2, r3, #1
 8004fe4:	4193      	sbcs	r3, r2
 8004fe6:	b2db      	uxtb	r3, r3
 8004fe8:	e01f      	b.n	800502a <HAL_TIMEx_PWMN_Start+0x62>
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	2b04      	cmp	r3, #4
 8004fee:	d108      	bne.n	8005002 <HAL_TIMEx_PWMN_Start+0x3a>
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2245      	movs	r2, #69	@ 0x45
 8004ff4:	5c9b      	ldrb	r3, [r3, r2]
 8004ff6:	b2db      	uxtb	r3, r3
 8004ff8:	3b01      	subs	r3, #1
 8004ffa:	1e5a      	subs	r2, r3, #1
 8004ffc:	4193      	sbcs	r3, r2
 8004ffe:	b2db      	uxtb	r3, r3
 8005000:	e013      	b.n	800502a <HAL_TIMEx_PWMN_Start+0x62>
 8005002:	683b      	ldr	r3, [r7, #0]
 8005004:	2b08      	cmp	r3, #8
 8005006:	d108      	bne.n	800501a <HAL_TIMEx_PWMN_Start+0x52>
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2246      	movs	r2, #70	@ 0x46
 800500c:	5c9b      	ldrb	r3, [r3, r2]
 800500e:	b2db      	uxtb	r3, r3
 8005010:	3b01      	subs	r3, #1
 8005012:	1e5a      	subs	r2, r3, #1
 8005014:	4193      	sbcs	r3, r2
 8005016:	b2db      	uxtb	r3, r3
 8005018:	e007      	b.n	800502a <HAL_TIMEx_PWMN_Start+0x62>
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2247      	movs	r2, #71	@ 0x47
 800501e:	5c9b      	ldrb	r3, [r3, r2]
 8005020:	b2db      	uxtb	r3, r3
 8005022:	3b01      	subs	r3, #1
 8005024:	1e5a      	subs	r2, r3, #1
 8005026:	4193      	sbcs	r3, r2
 8005028:	b2db      	uxtb	r3, r3
 800502a:	2b00      	cmp	r3, #0
 800502c:	d001      	beq.n	8005032 <HAL_TIMEx_PWMN_Start+0x6a>
  {
    return HAL_ERROR;
 800502e:	2301      	movs	r3, #1
 8005030:	e062      	b.n	80050f8 <HAL_TIMEx_PWMN_Start+0x130>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	2b00      	cmp	r3, #0
 8005036:	d104      	bne.n	8005042 <HAL_TIMEx_PWMN_Start+0x7a>
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2244      	movs	r2, #68	@ 0x44
 800503c:	2102      	movs	r1, #2
 800503e:	5499      	strb	r1, [r3, r2]
 8005040:	e013      	b.n	800506a <HAL_TIMEx_PWMN_Start+0xa2>
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	2b04      	cmp	r3, #4
 8005046:	d104      	bne.n	8005052 <HAL_TIMEx_PWMN_Start+0x8a>
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2245      	movs	r2, #69	@ 0x45
 800504c:	2102      	movs	r1, #2
 800504e:	5499      	strb	r1, [r3, r2]
 8005050:	e00b      	b.n	800506a <HAL_TIMEx_PWMN_Start+0xa2>
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	2b08      	cmp	r3, #8
 8005056:	d104      	bne.n	8005062 <HAL_TIMEx_PWMN_Start+0x9a>
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2246      	movs	r2, #70	@ 0x46
 800505c:	2102      	movs	r1, #2
 800505e:	5499      	strb	r1, [r3, r2]
 8005060:	e003      	b.n	800506a <HAL_TIMEx_PWMN_Start+0xa2>
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	2247      	movs	r2, #71	@ 0x47
 8005066:	2102      	movs	r1, #2
 8005068:	5499      	strb	r1, [r3, r2]

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	6839      	ldr	r1, [r7, #0]
 8005070:	2204      	movs	r2, #4
 8005072:	0018      	movs	r0, r3
 8005074:	f000 f9b2 	bl	80053dc <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	2180      	movs	r1, #128	@ 0x80
 8005084:	0209      	lsls	r1, r1, #8
 8005086:	430a      	orrs	r2, r1
 8005088:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	4a1c      	ldr	r2, [pc, #112]	@ (8005100 <HAL_TIMEx_PWMN_Start+0x138>)
 8005090:	4293      	cmp	r3, r2
 8005092:	d00f      	beq.n	80050b4 <HAL_TIMEx_PWMN_Start+0xec>
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681a      	ldr	r2, [r3, #0]
 8005098:	2380      	movs	r3, #128	@ 0x80
 800509a:	05db      	lsls	r3, r3, #23
 800509c:	429a      	cmp	r2, r3
 800509e:	d009      	beq.n	80050b4 <HAL_TIMEx_PWMN_Start+0xec>
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	4a17      	ldr	r2, [pc, #92]	@ (8005104 <HAL_TIMEx_PWMN_Start+0x13c>)
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d004      	beq.n	80050b4 <HAL_TIMEx_PWMN_Start+0xec>
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	4a16      	ldr	r2, [pc, #88]	@ (8005108 <HAL_TIMEx_PWMN_Start+0x140>)
 80050b0:	4293      	cmp	r3, r2
 80050b2:	d116      	bne.n	80050e2 <HAL_TIMEx_PWMN_Start+0x11a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	689b      	ldr	r3, [r3, #8]
 80050ba:	4a14      	ldr	r2, [pc, #80]	@ (800510c <HAL_TIMEx_PWMN_Start+0x144>)
 80050bc:	4013      	ands	r3, r2
 80050be:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	2b06      	cmp	r3, #6
 80050c4:	d016      	beq.n	80050f4 <HAL_TIMEx_PWMN_Start+0x12c>
 80050c6:	68fa      	ldr	r2, [r7, #12]
 80050c8:	2380      	movs	r3, #128	@ 0x80
 80050ca:	025b      	lsls	r3, r3, #9
 80050cc:	429a      	cmp	r2, r3
 80050ce:	d011      	beq.n	80050f4 <HAL_TIMEx_PWMN_Start+0x12c>
    {
      __HAL_TIM_ENABLE(htim);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	681a      	ldr	r2, [r3, #0]
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	2101      	movs	r1, #1
 80050dc:	430a      	orrs	r2, r1
 80050de:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050e0:	e008      	b.n	80050f4 <HAL_TIMEx_PWMN_Start+0x12c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	681a      	ldr	r2, [r3, #0]
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	2101      	movs	r1, #1
 80050ee:	430a      	orrs	r2, r1
 80050f0:	601a      	str	r2, [r3, #0]
 80050f2:	e000      	b.n	80050f6 <HAL_TIMEx_PWMN_Start+0x12e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050f4:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 80050f6:	2300      	movs	r3, #0
}
 80050f8:	0018      	movs	r0, r3
 80050fa:	46bd      	mov	sp, r7
 80050fc:	b004      	add	sp, #16
 80050fe:	bd80      	pop	{r7, pc}
 8005100:	40012c00 	.word	0x40012c00
 8005104:	40000400 	.word	0x40000400
 8005108:	40014000 	.word	0x40014000
 800510c:	00010007 	.word	0x00010007

08005110 <HAL_TIMEx_PWMN_Stop>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005110:	b580      	push	{r7, lr}
 8005112:	b082      	sub	sp, #8
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
 8005118:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	6839      	ldr	r1, [r7, #0]
 8005120:	2200      	movs	r2, #0
 8005122:	0018      	movs	r0, r3
 8005124:	f000 f95a 	bl	80053dc <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	6a1b      	ldr	r3, [r3, #32]
 800512e:	4a23      	ldr	r2, [pc, #140]	@ (80051bc <HAL_TIMEx_PWMN_Stop+0xac>)
 8005130:	4013      	ands	r3, r2
 8005132:	d10d      	bne.n	8005150 <HAL_TIMEx_PWMN_Stop+0x40>
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	6a1b      	ldr	r3, [r3, #32]
 800513a:	4a21      	ldr	r2, [pc, #132]	@ (80051c0 <HAL_TIMEx_PWMN_Stop+0xb0>)
 800513c:	4013      	ands	r3, r2
 800513e:	d107      	bne.n	8005150 <HAL_TIMEx_PWMN_Stop+0x40>
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	491e      	ldr	r1, [pc, #120]	@ (80051c4 <HAL_TIMEx_PWMN_Stop+0xb4>)
 800514c:	400a      	ands	r2, r1
 800514e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	6a1b      	ldr	r3, [r3, #32]
 8005156:	4a19      	ldr	r2, [pc, #100]	@ (80051bc <HAL_TIMEx_PWMN_Stop+0xac>)
 8005158:	4013      	ands	r3, r2
 800515a:	d10d      	bne.n	8005178 <HAL_TIMEx_PWMN_Stop+0x68>
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	6a1b      	ldr	r3, [r3, #32]
 8005162:	4a17      	ldr	r2, [pc, #92]	@ (80051c0 <HAL_TIMEx_PWMN_Stop+0xb0>)
 8005164:	4013      	ands	r3, r2
 8005166:	d107      	bne.n	8005178 <HAL_TIMEx_PWMN_Stop+0x68>
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	681a      	ldr	r2, [r3, #0]
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	2101      	movs	r1, #1
 8005174:	438a      	bics	r2, r1
 8005176:	601a      	str	r2, [r3, #0]

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	2b00      	cmp	r3, #0
 800517c:	d104      	bne.n	8005188 <HAL_TIMEx_PWMN_Stop+0x78>
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	2244      	movs	r2, #68	@ 0x44
 8005182:	2101      	movs	r1, #1
 8005184:	5499      	strb	r1, [r3, r2]
 8005186:	e013      	b.n	80051b0 <HAL_TIMEx_PWMN_Stop+0xa0>
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	2b04      	cmp	r3, #4
 800518c:	d104      	bne.n	8005198 <HAL_TIMEx_PWMN_Stop+0x88>
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2245      	movs	r2, #69	@ 0x45
 8005192:	2101      	movs	r1, #1
 8005194:	5499      	strb	r1, [r3, r2]
 8005196:	e00b      	b.n	80051b0 <HAL_TIMEx_PWMN_Stop+0xa0>
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	2b08      	cmp	r3, #8
 800519c:	d104      	bne.n	80051a8 <HAL_TIMEx_PWMN_Stop+0x98>
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2246      	movs	r2, #70	@ 0x46
 80051a2:	2101      	movs	r1, #1
 80051a4:	5499      	strb	r1, [r3, r2]
 80051a6:	e003      	b.n	80051b0 <HAL_TIMEx_PWMN_Stop+0xa0>
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2247      	movs	r2, #71	@ 0x47
 80051ac:	2101      	movs	r1, #1
 80051ae:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 80051b0:	2300      	movs	r3, #0
}
 80051b2:	0018      	movs	r0, r3
 80051b4:	46bd      	mov	sp, r7
 80051b6:	b002      	add	sp, #8
 80051b8:	bd80      	pop	{r7, pc}
 80051ba:	46c0      	nop			@ (mov r8, r8)
 80051bc:	00001111 	.word	0x00001111
 80051c0:	00000444 	.word	0x00000444
 80051c4:	ffff7fff 	.word	0xffff7fff

080051c8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b084      	sub	sp, #16
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
 80051d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	223c      	movs	r2, #60	@ 0x3c
 80051d6:	5c9b      	ldrb	r3, [r3, r2]
 80051d8:	2b01      	cmp	r3, #1
 80051da:	d101      	bne.n	80051e0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80051dc:	2302      	movs	r3, #2
 80051de:	e055      	b.n	800528c <HAL_TIMEx_MasterConfigSynchronization+0xc4>
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	223c      	movs	r2, #60	@ 0x3c
 80051e4:	2101      	movs	r1, #1
 80051e6:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	223d      	movs	r2, #61	@ 0x3d
 80051ec:	2102      	movs	r1, #2
 80051ee:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	685b      	ldr	r3, [r3, #4]
 80051f6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	689b      	ldr	r3, [r3, #8]
 80051fe:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	4a23      	ldr	r2, [pc, #140]	@ (8005294 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005206:	4293      	cmp	r3, r2
 8005208:	d108      	bne.n	800521c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	4a22      	ldr	r2, [pc, #136]	@ (8005298 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800520e:	4013      	ands	r3, r2
 8005210:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	685b      	ldr	r3, [r3, #4]
 8005216:	68fa      	ldr	r2, [r7, #12]
 8005218:	4313      	orrs	r3, r2
 800521a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	2270      	movs	r2, #112	@ 0x70
 8005220:	4393      	bics	r3, r2
 8005222:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	68fa      	ldr	r2, [r7, #12]
 800522a:	4313      	orrs	r3, r2
 800522c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	68fa      	ldr	r2, [r7, #12]
 8005234:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	4a16      	ldr	r2, [pc, #88]	@ (8005294 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800523c:	4293      	cmp	r3, r2
 800523e:	d00f      	beq.n	8005260 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681a      	ldr	r2, [r3, #0]
 8005244:	2380      	movs	r3, #128	@ 0x80
 8005246:	05db      	lsls	r3, r3, #23
 8005248:	429a      	cmp	r2, r3
 800524a:	d009      	beq.n	8005260 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	4a12      	ldr	r2, [pc, #72]	@ (800529c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d004      	beq.n	8005260 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	4a11      	ldr	r2, [pc, #68]	@ (80052a0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800525c:	4293      	cmp	r3, r2
 800525e:	d10c      	bne.n	800527a <HAL_TIMEx_MasterConfigSynchronization+0xb2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005260:	68bb      	ldr	r3, [r7, #8]
 8005262:	2280      	movs	r2, #128	@ 0x80
 8005264:	4393      	bics	r3, r2
 8005266:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	689b      	ldr	r3, [r3, #8]
 800526c:	68ba      	ldr	r2, [r7, #8]
 800526e:	4313      	orrs	r3, r2
 8005270:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	68ba      	ldr	r2, [r7, #8]
 8005278:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	223d      	movs	r2, #61	@ 0x3d
 800527e:	2101      	movs	r1, #1
 8005280:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	223c      	movs	r2, #60	@ 0x3c
 8005286:	2100      	movs	r1, #0
 8005288:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800528a:	2300      	movs	r3, #0
}
 800528c:	0018      	movs	r0, r3
 800528e:	46bd      	mov	sp, r7
 8005290:	b004      	add	sp, #16
 8005292:	bd80      	pop	{r7, pc}
 8005294:	40012c00 	.word	0x40012c00
 8005298:	ff0fffff 	.word	0xff0fffff
 800529c:	40000400 	.word	0x40000400
 80052a0:	40014000 	.word	0x40014000

080052a4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	b084      	sub	sp, #16
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
 80052ac:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80052ae:	2300      	movs	r3, #0
 80052b0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	223c      	movs	r2, #60	@ 0x3c
 80052b6:	5c9b      	ldrb	r3, [r3, r2]
 80052b8:	2b01      	cmp	r3, #1
 80052ba:	d101      	bne.n	80052c0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80052bc:	2302      	movs	r3, #2
 80052be:	e06f      	b.n	80053a0 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	223c      	movs	r2, #60	@ 0x3c
 80052c4:	2101      	movs	r1, #1
 80052c6:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	22ff      	movs	r2, #255	@ 0xff
 80052cc:	4393      	bics	r3, r2
 80052ce:	001a      	movs	r2, r3
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	68db      	ldr	r3, [r3, #12]
 80052d4:	4313      	orrs	r3, r2
 80052d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	4a33      	ldr	r2, [pc, #204]	@ (80053a8 <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 80052dc:	401a      	ands	r2, r3
 80052de:	683b      	ldr	r3, [r7, #0]
 80052e0:	689b      	ldr	r3, [r3, #8]
 80052e2:	4313      	orrs	r3, r2
 80052e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	4a30      	ldr	r2, [pc, #192]	@ (80053ac <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 80052ea:	401a      	ands	r2, r3
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	685b      	ldr	r3, [r3, #4]
 80052f0:	4313      	orrs	r3, r2
 80052f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	4a2e      	ldr	r2, [pc, #184]	@ (80053b0 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>)
 80052f8:	401a      	ands	r2, r3
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	4313      	orrs	r3, r2
 8005300:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	4a2b      	ldr	r2, [pc, #172]	@ (80053b4 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 8005306:	401a      	ands	r2, r3
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	691b      	ldr	r3, [r3, #16]
 800530c:	4313      	orrs	r3, r2
 800530e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	4a29      	ldr	r2, [pc, #164]	@ (80053b8 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8005314:	401a      	ands	r2, r3
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	695b      	ldr	r3, [r3, #20]
 800531a:	4313      	orrs	r3, r2
 800531c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	4a26      	ldr	r2, [pc, #152]	@ (80053bc <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 8005322:	401a      	ands	r2, r3
 8005324:	683b      	ldr	r3, [r7, #0]
 8005326:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005328:	4313      	orrs	r3, r2
 800532a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	4a24      	ldr	r2, [pc, #144]	@ (80053c0 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8005330:	401a      	ands	r2, r3
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	699b      	ldr	r3, [r3, #24]
 8005336:	041b      	lsls	r3, r3, #16
 8005338:	4313      	orrs	r3, r2
 800533a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	4a21      	ldr	r2, [pc, #132]	@ (80053c4 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8005340:	401a      	ands	r2, r3
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	69db      	ldr	r3, [r3, #28]
 8005346:	4313      	orrs	r3, r2
 8005348:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	4a1e      	ldr	r2, [pc, #120]	@ (80053c8 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8005350:	4293      	cmp	r3, r2
 8005352:	d11c      	bne.n	800538e <HAL_TIMEx_ConfigBreakDeadTime+0xea>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	4a1d      	ldr	r2, [pc, #116]	@ (80053cc <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 8005358:	401a      	ands	r2, r3
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800535e:	051b      	lsls	r3, r3, #20
 8005360:	4313      	orrs	r3, r2
 8005362:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	4a1a      	ldr	r2, [pc, #104]	@ (80053d0 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 8005368:	401a      	ands	r2, r3
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	6a1b      	ldr	r3, [r3, #32]
 800536e:	4313      	orrs	r3, r2
 8005370:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	4a17      	ldr	r2, [pc, #92]	@ (80053d4 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 8005376:	401a      	ands	r2, r3
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800537c:	4313      	orrs	r3, r2
 800537e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	4a15      	ldr	r2, [pc, #84]	@ (80053d8 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8005384:	401a      	ands	r2, r3
 8005386:	683b      	ldr	r3, [r7, #0]
 8005388:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800538a:	4313      	orrs	r3, r2
 800538c:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	68fa      	ldr	r2, [r7, #12]
 8005394:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	223c      	movs	r2, #60	@ 0x3c
 800539a:	2100      	movs	r1, #0
 800539c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800539e:	2300      	movs	r3, #0
}
 80053a0:	0018      	movs	r0, r3
 80053a2:	46bd      	mov	sp, r7
 80053a4:	b004      	add	sp, #16
 80053a6:	bd80      	pop	{r7, pc}
 80053a8:	fffffcff 	.word	0xfffffcff
 80053ac:	fffffbff 	.word	0xfffffbff
 80053b0:	fffff7ff 	.word	0xfffff7ff
 80053b4:	ffffefff 	.word	0xffffefff
 80053b8:	ffffdfff 	.word	0xffffdfff
 80053bc:	ffffbfff 	.word	0xffffbfff
 80053c0:	fff0ffff 	.word	0xfff0ffff
 80053c4:	efffffff 	.word	0xefffffff
 80053c8:	40012c00 	.word	0x40012c00
 80053cc:	ff0fffff 	.word	0xff0fffff
 80053d0:	feffffff 	.word	0xfeffffff
 80053d4:	fdffffff 	.word	0xfdffffff
 80053d8:	dfffffff 	.word	0xdfffffff

080053dc <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 80053dc:	b580      	push	{r7, lr}
 80053de:	b086      	sub	sp, #24
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	60f8      	str	r0, [r7, #12]
 80053e4:	60b9      	str	r1, [r7, #8]
 80053e6:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 80053e8:	68bb      	ldr	r3, [r7, #8]
 80053ea:	220f      	movs	r2, #15
 80053ec:	4013      	ands	r3, r2
 80053ee:	2204      	movs	r2, #4
 80053f0:	409a      	lsls	r2, r3
 80053f2:	0013      	movs	r3, r2
 80053f4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	6a1b      	ldr	r3, [r3, #32]
 80053fa:	697a      	ldr	r2, [r7, #20]
 80053fc:	43d2      	mvns	r2, r2
 80053fe:	401a      	ands	r2, r3
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	6a1a      	ldr	r2, [r3, #32]
 8005408:	68bb      	ldr	r3, [r7, #8]
 800540a:	210f      	movs	r1, #15
 800540c:	400b      	ands	r3, r1
 800540e:	6879      	ldr	r1, [r7, #4]
 8005410:	4099      	lsls	r1, r3
 8005412:	000b      	movs	r3, r1
 8005414:	431a      	orrs	r2, r3
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	621a      	str	r2, [r3, #32]
}
 800541a:	46c0      	nop			@ (mov r8, r8)
 800541c:	46bd      	mov	sp, r7
 800541e:	b006      	add	sp, #24
 8005420:	bd80      	pop	{r7, pc}
	...

08005424 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005424:	b580      	push	{r7, lr}
 8005426:	b082      	sub	sp, #8
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d101      	bne.n	8005436 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005432:	2301      	movs	r3, #1
 8005434:	e046      	b.n	80054c4 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2288      	movs	r2, #136	@ 0x88
 800543a:	589b      	ldr	r3, [r3, r2]
 800543c:	2b00      	cmp	r3, #0
 800543e:	d107      	bne.n	8005450 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2284      	movs	r2, #132	@ 0x84
 8005444:	2100      	movs	r1, #0
 8005446:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	0018      	movs	r0, r3
 800544c:	f7fc fc60 	bl	8001d10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2288      	movs	r2, #136	@ 0x88
 8005454:	2124      	movs	r1, #36	@ 0x24
 8005456:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	681a      	ldr	r2, [r3, #0]
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	2101      	movs	r1, #1
 8005464:	438a      	bics	r2, r1
 8005466:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800546c:	2b00      	cmp	r3, #0
 800546e:	d003      	beq.n	8005478 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	0018      	movs	r0, r3
 8005474:	f000 faea 	bl	8005a4c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	0018      	movs	r0, r3
 800547c:	f000 f828 	bl	80054d0 <UART_SetConfig>
 8005480:	0003      	movs	r3, r0
 8005482:	2b01      	cmp	r3, #1
 8005484:	d101      	bne.n	800548a <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8005486:	2301      	movs	r3, #1
 8005488:	e01c      	b.n	80054c4 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	685a      	ldr	r2, [r3, #4]
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	490d      	ldr	r1, [pc, #52]	@ (80054cc <HAL_UART_Init+0xa8>)
 8005496:	400a      	ands	r2, r1
 8005498:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	689a      	ldr	r2, [r3, #8]
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	212a      	movs	r1, #42	@ 0x2a
 80054a6:	438a      	bics	r2, r1
 80054a8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	681a      	ldr	r2, [r3, #0]
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	2101      	movs	r1, #1
 80054b6:	430a      	orrs	r2, r1
 80054b8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	0018      	movs	r0, r3
 80054be:	f000 fb79 	bl	8005bb4 <UART_CheckIdleState>
 80054c2:	0003      	movs	r3, r0
}
 80054c4:	0018      	movs	r0, r3
 80054c6:	46bd      	mov	sp, r7
 80054c8:	b002      	add	sp, #8
 80054ca:	bd80      	pop	{r7, pc}
 80054cc:	ffffb7ff 	.word	0xffffb7ff

080054d0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80054d0:	b5b0      	push	{r4, r5, r7, lr}
 80054d2:	b090      	sub	sp, #64	@ 0x40
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80054d8:	231a      	movs	r3, #26
 80054da:	2220      	movs	r2, #32
 80054dc:	189b      	adds	r3, r3, r2
 80054de:	19db      	adds	r3, r3, r7
 80054e0:	2200      	movs	r2, #0
 80054e2:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80054e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054e6:	689a      	ldr	r2, [r3, #8]
 80054e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054ea:	691b      	ldr	r3, [r3, #16]
 80054ec:	431a      	orrs	r2, r3
 80054ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054f0:	695b      	ldr	r3, [r3, #20]
 80054f2:	431a      	orrs	r2, r3
 80054f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054f6:	69db      	ldr	r3, [r3, #28]
 80054f8:	4313      	orrs	r3, r2
 80054fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80054fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	4aaf      	ldr	r2, [pc, #700]	@ (80057c0 <UART_SetConfig+0x2f0>)
 8005504:	4013      	ands	r3, r2
 8005506:	0019      	movs	r1, r3
 8005508:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800550a:	681a      	ldr	r2, [r3, #0]
 800550c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800550e:	430b      	orrs	r3, r1
 8005510:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005512:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	685b      	ldr	r3, [r3, #4]
 8005518:	4aaa      	ldr	r2, [pc, #680]	@ (80057c4 <UART_SetConfig+0x2f4>)
 800551a:	4013      	ands	r3, r2
 800551c:	0018      	movs	r0, r3
 800551e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005520:	68d9      	ldr	r1, [r3, #12]
 8005522:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005524:	681a      	ldr	r2, [r3, #0]
 8005526:	0003      	movs	r3, r0
 8005528:	430b      	orrs	r3, r1
 800552a:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800552c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800552e:	699b      	ldr	r3, [r3, #24]
 8005530:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005532:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	4aa4      	ldr	r2, [pc, #656]	@ (80057c8 <UART_SetConfig+0x2f8>)
 8005538:	4293      	cmp	r3, r2
 800553a:	d004      	beq.n	8005546 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800553c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800553e:	6a1b      	ldr	r3, [r3, #32]
 8005540:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005542:	4313      	orrs	r3, r2
 8005544:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005546:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	689b      	ldr	r3, [r3, #8]
 800554c:	4a9f      	ldr	r2, [pc, #636]	@ (80057cc <UART_SetConfig+0x2fc>)
 800554e:	4013      	ands	r3, r2
 8005550:	0019      	movs	r1, r3
 8005552:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005554:	681a      	ldr	r2, [r3, #0]
 8005556:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005558:	430b      	orrs	r3, r1
 800555a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800555c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005562:	220f      	movs	r2, #15
 8005564:	4393      	bics	r3, r2
 8005566:	0018      	movs	r0, r3
 8005568:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800556a:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800556c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800556e:	681a      	ldr	r2, [r3, #0]
 8005570:	0003      	movs	r3, r0
 8005572:	430b      	orrs	r3, r1
 8005574:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005576:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	4a95      	ldr	r2, [pc, #596]	@ (80057d0 <UART_SetConfig+0x300>)
 800557c:	4293      	cmp	r3, r2
 800557e:	d131      	bne.n	80055e4 <UART_SetConfig+0x114>
 8005580:	4b94      	ldr	r3, [pc, #592]	@ (80057d4 <UART_SetConfig+0x304>)
 8005582:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005584:	2203      	movs	r2, #3
 8005586:	4013      	ands	r3, r2
 8005588:	2b03      	cmp	r3, #3
 800558a:	d01d      	beq.n	80055c8 <UART_SetConfig+0xf8>
 800558c:	d823      	bhi.n	80055d6 <UART_SetConfig+0x106>
 800558e:	2b02      	cmp	r3, #2
 8005590:	d00c      	beq.n	80055ac <UART_SetConfig+0xdc>
 8005592:	d820      	bhi.n	80055d6 <UART_SetConfig+0x106>
 8005594:	2b00      	cmp	r3, #0
 8005596:	d002      	beq.n	800559e <UART_SetConfig+0xce>
 8005598:	2b01      	cmp	r3, #1
 800559a:	d00e      	beq.n	80055ba <UART_SetConfig+0xea>
 800559c:	e01b      	b.n	80055d6 <UART_SetConfig+0x106>
 800559e:	231b      	movs	r3, #27
 80055a0:	2220      	movs	r2, #32
 80055a2:	189b      	adds	r3, r3, r2
 80055a4:	19db      	adds	r3, r3, r7
 80055a6:	2200      	movs	r2, #0
 80055a8:	701a      	strb	r2, [r3, #0]
 80055aa:	e0b4      	b.n	8005716 <UART_SetConfig+0x246>
 80055ac:	231b      	movs	r3, #27
 80055ae:	2220      	movs	r2, #32
 80055b0:	189b      	adds	r3, r3, r2
 80055b2:	19db      	adds	r3, r3, r7
 80055b4:	2202      	movs	r2, #2
 80055b6:	701a      	strb	r2, [r3, #0]
 80055b8:	e0ad      	b.n	8005716 <UART_SetConfig+0x246>
 80055ba:	231b      	movs	r3, #27
 80055bc:	2220      	movs	r2, #32
 80055be:	189b      	adds	r3, r3, r2
 80055c0:	19db      	adds	r3, r3, r7
 80055c2:	2204      	movs	r2, #4
 80055c4:	701a      	strb	r2, [r3, #0]
 80055c6:	e0a6      	b.n	8005716 <UART_SetConfig+0x246>
 80055c8:	231b      	movs	r3, #27
 80055ca:	2220      	movs	r2, #32
 80055cc:	189b      	adds	r3, r3, r2
 80055ce:	19db      	adds	r3, r3, r7
 80055d0:	2208      	movs	r2, #8
 80055d2:	701a      	strb	r2, [r3, #0]
 80055d4:	e09f      	b.n	8005716 <UART_SetConfig+0x246>
 80055d6:	231b      	movs	r3, #27
 80055d8:	2220      	movs	r2, #32
 80055da:	189b      	adds	r3, r3, r2
 80055dc:	19db      	adds	r3, r3, r7
 80055de:	2210      	movs	r2, #16
 80055e0:	701a      	strb	r2, [r3, #0]
 80055e2:	e098      	b.n	8005716 <UART_SetConfig+0x246>
 80055e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	4a7b      	ldr	r2, [pc, #492]	@ (80057d8 <UART_SetConfig+0x308>)
 80055ea:	4293      	cmp	r3, r2
 80055ec:	d131      	bne.n	8005652 <UART_SetConfig+0x182>
 80055ee:	4b79      	ldr	r3, [pc, #484]	@ (80057d4 <UART_SetConfig+0x304>)
 80055f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80055f2:	220c      	movs	r2, #12
 80055f4:	4013      	ands	r3, r2
 80055f6:	2b0c      	cmp	r3, #12
 80055f8:	d01d      	beq.n	8005636 <UART_SetConfig+0x166>
 80055fa:	d823      	bhi.n	8005644 <UART_SetConfig+0x174>
 80055fc:	2b08      	cmp	r3, #8
 80055fe:	d00c      	beq.n	800561a <UART_SetConfig+0x14a>
 8005600:	d820      	bhi.n	8005644 <UART_SetConfig+0x174>
 8005602:	2b00      	cmp	r3, #0
 8005604:	d002      	beq.n	800560c <UART_SetConfig+0x13c>
 8005606:	2b04      	cmp	r3, #4
 8005608:	d00e      	beq.n	8005628 <UART_SetConfig+0x158>
 800560a:	e01b      	b.n	8005644 <UART_SetConfig+0x174>
 800560c:	231b      	movs	r3, #27
 800560e:	2220      	movs	r2, #32
 8005610:	189b      	adds	r3, r3, r2
 8005612:	19db      	adds	r3, r3, r7
 8005614:	2200      	movs	r2, #0
 8005616:	701a      	strb	r2, [r3, #0]
 8005618:	e07d      	b.n	8005716 <UART_SetConfig+0x246>
 800561a:	231b      	movs	r3, #27
 800561c:	2220      	movs	r2, #32
 800561e:	189b      	adds	r3, r3, r2
 8005620:	19db      	adds	r3, r3, r7
 8005622:	2202      	movs	r2, #2
 8005624:	701a      	strb	r2, [r3, #0]
 8005626:	e076      	b.n	8005716 <UART_SetConfig+0x246>
 8005628:	231b      	movs	r3, #27
 800562a:	2220      	movs	r2, #32
 800562c:	189b      	adds	r3, r3, r2
 800562e:	19db      	adds	r3, r3, r7
 8005630:	2204      	movs	r2, #4
 8005632:	701a      	strb	r2, [r3, #0]
 8005634:	e06f      	b.n	8005716 <UART_SetConfig+0x246>
 8005636:	231b      	movs	r3, #27
 8005638:	2220      	movs	r2, #32
 800563a:	189b      	adds	r3, r3, r2
 800563c:	19db      	adds	r3, r3, r7
 800563e:	2208      	movs	r2, #8
 8005640:	701a      	strb	r2, [r3, #0]
 8005642:	e068      	b.n	8005716 <UART_SetConfig+0x246>
 8005644:	231b      	movs	r3, #27
 8005646:	2220      	movs	r2, #32
 8005648:	189b      	adds	r3, r3, r2
 800564a:	19db      	adds	r3, r3, r7
 800564c:	2210      	movs	r2, #16
 800564e:	701a      	strb	r2, [r3, #0]
 8005650:	e061      	b.n	8005716 <UART_SetConfig+0x246>
 8005652:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	4a61      	ldr	r2, [pc, #388]	@ (80057dc <UART_SetConfig+0x30c>)
 8005658:	4293      	cmp	r3, r2
 800565a:	d106      	bne.n	800566a <UART_SetConfig+0x19a>
 800565c:	231b      	movs	r3, #27
 800565e:	2220      	movs	r2, #32
 8005660:	189b      	adds	r3, r3, r2
 8005662:	19db      	adds	r3, r3, r7
 8005664:	2200      	movs	r2, #0
 8005666:	701a      	strb	r2, [r3, #0]
 8005668:	e055      	b.n	8005716 <UART_SetConfig+0x246>
 800566a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	4a5c      	ldr	r2, [pc, #368]	@ (80057e0 <UART_SetConfig+0x310>)
 8005670:	4293      	cmp	r3, r2
 8005672:	d106      	bne.n	8005682 <UART_SetConfig+0x1b2>
 8005674:	231b      	movs	r3, #27
 8005676:	2220      	movs	r2, #32
 8005678:	189b      	adds	r3, r3, r2
 800567a:	19db      	adds	r3, r3, r7
 800567c:	2200      	movs	r2, #0
 800567e:	701a      	strb	r2, [r3, #0]
 8005680:	e049      	b.n	8005716 <UART_SetConfig+0x246>
 8005682:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	4a50      	ldr	r2, [pc, #320]	@ (80057c8 <UART_SetConfig+0x2f8>)
 8005688:	4293      	cmp	r3, r2
 800568a:	d13e      	bne.n	800570a <UART_SetConfig+0x23a>
 800568c:	4b51      	ldr	r3, [pc, #324]	@ (80057d4 <UART_SetConfig+0x304>)
 800568e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005690:	23c0      	movs	r3, #192	@ 0xc0
 8005692:	011b      	lsls	r3, r3, #4
 8005694:	4013      	ands	r3, r2
 8005696:	22c0      	movs	r2, #192	@ 0xc0
 8005698:	0112      	lsls	r2, r2, #4
 800569a:	4293      	cmp	r3, r2
 800569c:	d027      	beq.n	80056ee <UART_SetConfig+0x21e>
 800569e:	22c0      	movs	r2, #192	@ 0xc0
 80056a0:	0112      	lsls	r2, r2, #4
 80056a2:	4293      	cmp	r3, r2
 80056a4:	d82a      	bhi.n	80056fc <UART_SetConfig+0x22c>
 80056a6:	2280      	movs	r2, #128	@ 0x80
 80056a8:	0112      	lsls	r2, r2, #4
 80056aa:	4293      	cmp	r3, r2
 80056ac:	d011      	beq.n	80056d2 <UART_SetConfig+0x202>
 80056ae:	2280      	movs	r2, #128	@ 0x80
 80056b0:	0112      	lsls	r2, r2, #4
 80056b2:	4293      	cmp	r3, r2
 80056b4:	d822      	bhi.n	80056fc <UART_SetConfig+0x22c>
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d004      	beq.n	80056c4 <UART_SetConfig+0x1f4>
 80056ba:	2280      	movs	r2, #128	@ 0x80
 80056bc:	00d2      	lsls	r2, r2, #3
 80056be:	4293      	cmp	r3, r2
 80056c0:	d00e      	beq.n	80056e0 <UART_SetConfig+0x210>
 80056c2:	e01b      	b.n	80056fc <UART_SetConfig+0x22c>
 80056c4:	231b      	movs	r3, #27
 80056c6:	2220      	movs	r2, #32
 80056c8:	189b      	adds	r3, r3, r2
 80056ca:	19db      	adds	r3, r3, r7
 80056cc:	2200      	movs	r2, #0
 80056ce:	701a      	strb	r2, [r3, #0]
 80056d0:	e021      	b.n	8005716 <UART_SetConfig+0x246>
 80056d2:	231b      	movs	r3, #27
 80056d4:	2220      	movs	r2, #32
 80056d6:	189b      	adds	r3, r3, r2
 80056d8:	19db      	adds	r3, r3, r7
 80056da:	2202      	movs	r2, #2
 80056dc:	701a      	strb	r2, [r3, #0]
 80056de:	e01a      	b.n	8005716 <UART_SetConfig+0x246>
 80056e0:	231b      	movs	r3, #27
 80056e2:	2220      	movs	r2, #32
 80056e4:	189b      	adds	r3, r3, r2
 80056e6:	19db      	adds	r3, r3, r7
 80056e8:	2204      	movs	r2, #4
 80056ea:	701a      	strb	r2, [r3, #0]
 80056ec:	e013      	b.n	8005716 <UART_SetConfig+0x246>
 80056ee:	231b      	movs	r3, #27
 80056f0:	2220      	movs	r2, #32
 80056f2:	189b      	adds	r3, r3, r2
 80056f4:	19db      	adds	r3, r3, r7
 80056f6:	2208      	movs	r2, #8
 80056f8:	701a      	strb	r2, [r3, #0]
 80056fa:	e00c      	b.n	8005716 <UART_SetConfig+0x246>
 80056fc:	231b      	movs	r3, #27
 80056fe:	2220      	movs	r2, #32
 8005700:	189b      	adds	r3, r3, r2
 8005702:	19db      	adds	r3, r3, r7
 8005704:	2210      	movs	r2, #16
 8005706:	701a      	strb	r2, [r3, #0]
 8005708:	e005      	b.n	8005716 <UART_SetConfig+0x246>
 800570a:	231b      	movs	r3, #27
 800570c:	2220      	movs	r2, #32
 800570e:	189b      	adds	r3, r3, r2
 8005710:	19db      	adds	r3, r3, r7
 8005712:	2210      	movs	r2, #16
 8005714:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005716:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	4a2b      	ldr	r2, [pc, #172]	@ (80057c8 <UART_SetConfig+0x2f8>)
 800571c:	4293      	cmp	r3, r2
 800571e:	d000      	beq.n	8005722 <UART_SetConfig+0x252>
 8005720:	e0a9      	b.n	8005876 <UART_SetConfig+0x3a6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005722:	231b      	movs	r3, #27
 8005724:	2220      	movs	r2, #32
 8005726:	189b      	adds	r3, r3, r2
 8005728:	19db      	adds	r3, r3, r7
 800572a:	781b      	ldrb	r3, [r3, #0]
 800572c:	2b08      	cmp	r3, #8
 800572e:	d015      	beq.n	800575c <UART_SetConfig+0x28c>
 8005730:	dc18      	bgt.n	8005764 <UART_SetConfig+0x294>
 8005732:	2b04      	cmp	r3, #4
 8005734:	d00d      	beq.n	8005752 <UART_SetConfig+0x282>
 8005736:	dc15      	bgt.n	8005764 <UART_SetConfig+0x294>
 8005738:	2b00      	cmp	r3, #0
 800573a:	d002      	beq.n	8005742 <UART_SetConfig+0x272>
 800573c:	2b02      	cmp	r3, #2
 800573e:	d005      	beq.n	800574c <UART_SetConfig+0x27c>
 8005740:	e010      	b.n	8005764 <UART_SetConfig+0x294>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005742:	f7fe fc2f 	bl	8003fa4 <HAL_RCC_GetPCLK1Freq>
 8005746:	0003      	movs	r3, r0
 8005748:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800574a:	e014      	b.n	8005776 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800574c:	4b25      	ldr	r3, [pc, #148]	@ (80057e4 <UART_SetConfig+0x314>)
 800574e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005750:	e011      	b.n	8005776 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005752:	f7fe fb9b 	bl	8003e8c <HAL_RCC_GetSysClockFreq>
 8005756:	0003      	movs	r3, r0
 8005758:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800575a:	e00c      	b.n	8005776 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800575c:	2380      	movs	r3, #128	@ 0x80
 800575e:	021b      	lsls	r3, r3, #8
 8005760:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005762:	e008      	b.n	8005776 <UART_SetConfig+0x2a6>
      default:
        pclk = 0U;
 8005764:	2300      	movs	r3, #0
 8005766:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8005768:	231a      	movs	r3, #26
 800576a:	2220      	movs	r2, #32
 800576c:	189b      	adds	r3, r3, r2
 800576e:	19db      	adds	r3, r3, r7
 8005770:	2201      	movs	r2, #1
 8005772:	701a      	strb	r2, [r3, #0]
        break;
 8005774:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005776:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005778:	2b00      	cmp	r3, #0
 800577a:	d100      	bne.n	800577e <UART_SetConfig+0x2ae>
 800577c:	e14b      	b.n	8005a16 <UART_SetConfig+0x546>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800577e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005780:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005782:	4b19      	ldr	r3, [pc, #100]	@ (80057e8 <UART_SetConfig+0x318>)
 8005784:	0052      	lsls	r2, r2, #1
 8005786:	5ad3      	ldrh	r3, [r2, r3]
 8005788:	0019      	movs	r1, r3
 800578a:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800578c:	f7fa fcba 	bl	8000104 <__udivsi3>
 8005790:	0003      	movs	r3, r0
 8005792:	62bb      	str	r3, [r7, #40]	@ 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005794:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005796:	685a      	ldr	r2, [r3, #4]
 8005798:	0013      	movs	r3, r2
 800579a:	005b      	lsls	r3, r3, #1
 800579c:	189b      	adds	r3, r3, r2
 800579e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80057a0:	429a      	cmp	r2, r3
 80057a2:	d305      	bcc.n	80057b0 <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80057a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057a6:	685b      	ldr	r3, [r3, #4]
 80057a8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80057aa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80057ac:	429a      	cmp	r2, r3
 80057ae:	d91d      	bls.n	80057ec <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 80057b0:	231a      	movs	r3, #26
 80057b2:	2220      	movs	r2, #32
 80057b4:	189b      	adds	r3, r3, r2
 80057b6:	19db      	adds	r3, r3, r7
 80057b8:	2201      	movs	r2, #1
 80057ba:	701a      	strb	r2, [r3, #0]
 80057bc:	e12b      	b.n	8005a16 <UART_SetConfig+0x546>
 80057be:	46c0      	nop			@ (mov r8, r8)
 80057c0:	cfff69f3 	.word	0xcfff69f3
 80057c4:	ffffcfff 	.word	0xffffcfff
 80057c8:	40008000 	.word	0x40008000
 80057cc:	11fff4ff 	.word	0x11fff4ff
 80057d0:	40013800 	.word	0x40013800
 80057d4:	40021000 	.word	0x40021000
 80057d8:	40004400 	.word	0x40004400
 80057dc:	40004800 	.word	0x40004800
 80057e0:	40004c00 	.word	0x40004c00
 80057e4:	00f42400 	.word	0x00f42400
 80057e8:	08006288 	.word	0x08006288
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80057ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057ee:	61bb      	str	r3, [r7, #24]
 80057f0:	2300      	movs	r3, #0
 80057f2:	61fb      	str	r3, [r7, #28]
 80057f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057f6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80057f8:	4b92      	ldr	r3, [pc, #584]	@ (8005a44 <UART_SetConfig+0x574>)
 80057fa:	0052      	lsls	r2, r2, #1
 80057fc:	5ad3      	ldrh	r3, [r2, r3]
 80057fe:	613b      	str	r3, [r7, #16]
 8005800:	2300      	movs	r3, #0
 8005802:	617b      	str	r3, [r7, #20]
 8005804:	693a      	ldr	r2, [r7, #16]
 8005806:	697b      	ldr	r3, [r7, #20]
 8005808:	69b8      	ldr	r0, [r7, #24]
 800580a:	69f9      	ldr	r1, [r7, #28]
 800580c:	f7fa fe2a 	bl	8000464 <__aeabi_uldivmod>
 8005810:	0002      	movs	r2, r0
 8005812:	000b      	movs	r3, r1
 8005814:	0e11      	lsrs	r1, r2, #24
 8005816:	021d      	lsls	r5, r3, #8
 8005818:	430d      	orrs	r5, r1
 800581a:	0214      	lsls	r4, r2, #8
 800581c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800581e:	685b      	ldr	r3, [r3, #4]
 8005820:	085b      	lsrs	r3, r3, #1
 8005822:	60bb      	str	r3, [r7, #8]
 8005824:	2300      	movs	r3, #0
 8005826:	60fb      	str	r3, [r7, #12]
 8005828:	68b8      	ldr	r0, [r7, #8]
 800582a:	68f9      	ldr	r1, [r7, #12]
 800582c:	1900      	adds	r0, r0, r4
 800582e:	4169      	adcs	r1, r5
 8005830:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005832:	685b      	ldr	r3, [r3, #4]
 8005834:	603b      	str	r3, [r7, #0]
 8005836:	2300      	movs	r3, #0
 8005838:	607b      	str	r3, [r7, #4]
 800583a:	683a      	ldr	r2, [r7, #0]
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	f7fa fe11 	bl	8000464 <__aeabi_uldivmod>
 8005842:	0002      	movs	r2, r0
 8005844:	000b      	movs	r3, r1
 8005846:	0013      	movs	r3, r2
 8005848:	633b      	str	r3, [r7, #48]	@ 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800584a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800584c:	23c0      	movs	r3, #192	@ 0xc0
 800584e:	009b      	lsls	r3, r3, #2
 8005850:	429a      	cmp	r2, r3
 8005852:	d309      	bcc.n	8005868 <UART_SetConfig+0x398>
 8005854:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005856:	2380      	movs	r3, #128	@ 0x80
 8005858:	035b      	lsls	r3, r3, #13
 800585a:	429a      	cmp	r2, r3
 800585c:	d204      	bcs.n	8005868 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 800585e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005864:	60da      	str	r2, [r3, #12]
 8005866:	e0d6      	b.n	8005a16 <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 8005868:	231a      	movs	r3, #26
 800586a:	2220      	movs	r2, #32
 800586c:	189b      	adds	r3, r3, r2
 800586e:	19db      	adds	r3, r3, r7
 8005870:	2201      	movs	r2, #1
 8005872:	701a      	strb	r2, [r3, #0]
 8005874:	e0cf      	b.n	8005a16 <UART_SetConfig+0x546>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005876:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005878:	69da      	ldr	r2, [r3, #28]
 800587a:	2380      	movs	r3, #128	@ 0x80
 800587c:	021b      	lsls	r3, r3, #8
 800587e:	429a      	cmp	r2, r3
 8005880:	d000      	beq.n	8005884 <UART_SetConfig+0x3b4>
 8005882:	e070      	b.n	8005966 <UART_SetConfig+0x496>
  {
    switch (clocksource)
 8005884:	231b      	movs	r3, #27
 8005886:	2220      	movs	r2, #32
 8005888:	189b      	adds	r3, r3, r2
 800588a:	19db      	adds	r3, r3, r7
 800588c:	781b      	ldrb	r3, [r3, #0]
 800588e:	2b08      	cmp	r3, #8
 8005890:	d015      	beq.n	80058be <UART_SetConfig+0x3ee>
 8005892:	dc18      	bgt.n	80058c6 <UART_SetConfig+0x3f6>
 8005894:	2b04      	cmp	r3, #4
 8005896:	d00d      	beq.n	80058b4 <UART_SetConfig+0x3e4>
 8005898:	dc15      	bgt.n	80058c6 <UART_SetConfig+0x3f6>
 800589a:	2b00      	cmp	r3, #0
 800589c:	d002      	beq.n	80058a4 <UART_SetConfig+0x3d4>
 800589e:	2b02      	cmp	r3, #2
 80058a0:	d005      	beq.n	80058ae <UART_SetConfig+0x3de>
 80058a2:	e010      	b.n	80058c6 <UART_SetConfig+0x3f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80058a4:	f7fe fb7e 	bl	8003fa4 <HAL_RCC_GetPCLK1Freq>
 80058a8:	0003      	movs	r3, r0
 80058aa:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80058ac:	e014      	b.n	80058d8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80058ae:	4b66      	ldr	r3, [pc, #408]	@ (8005a48 <UART_SetConfig+0x578>)
 80058b0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80058b2:	e011      	b.n	80058d8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80058b4:	f7fe faea 	bl	8003e8c <HAL_RCC_GetSysClockFreq>
 80058b8:	0003      	movs	r3, r0
 80058ba:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80058bc:	e00c      	b.n	80058d8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80058be:	2380      	movs	r3, #128	@ 0x80
 80058c0:	021b      	lsls	r3, r3, #8
 80058c2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80058c4:	e008      	b.n	80058d8 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 80058c6:	2300      	movs	r3, #0
 80058c8:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 80058ca:	231a      	movs	r3, #26
 80058cc:	2220      	movs	r2, #32
 80058ce:	189b      	adds	r3, r3, r2
 80058d0:	19db      	adds	r3, r3, r7
 80058d2:	2201      	movs	r2, #1
 80058d4:	701a      	strb	r2, [r3, #0]
        break;
 80058d6:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80058d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d100      	bne.n	80058e0 <UART_SetConfig+0x410>
 80058de:	e09a      	b.n	8005a16 <UART_SetConfig+0x546>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80058e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058e2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80058e4:	4b57      	ldr	r3, [pc, #348]	@ (8005a44 <UART_SetConfig+0x574>)
 80058e6:	0052      	lsls	r2, r2, #1
 80058e8:	5ad3      	ldrh	r3, [r2, r3]
 80058ea:	0019      	movs	r1, r3
 80058ec:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80058ee:	f7fa fc09 	bl	8000104 <__udivsi3>
 80058f2:	0003      	movs	r3, r0
 80058f4:	005a      	lsls	r2, r3, #1
 80058f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058f8:	685b      	ldr	r3, [r3, #4]
 80058fa:	085b      	lsrs	r3, r3, #1
 80058fc:	18d2      	adds	r2, r2, r3
 80058fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005900:	685b      	ldr	r3, [r3, #4]
 8005902:	0019      	movs	r1, r3
 8005904:	0010      	movs	r0, r2
 8005906:	f7fa fbfd 	bl	8000104 <__udivsi3>
 800590a:	0003      	movs	r3, r0
 800590c:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800590e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005910:	2b0f      	cmp	r3, #15
 8005912:	d921      	bls.n	8005958 <UART_SetConfig+0x488>
 8005914:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005916:	2380      	movs	r3, #128	@ 0x80
 8005918:	025b      	lsls	r3, r3, #9
 800591a:	429a      	cmp	r2, r3
 800591c:	d21c      	bcs.n	8005958 <UART_SetConfig+0x488>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800591e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005920:	b29a      	uxth	r2, r3
 8005922:	200e      	movs	r0, #14
 8005924:	2420      	movs	r4, #32
 8005926:	1903      	adds	r3, r0, r4
 8005928:	19db      	adds	r3, r3, r7
 800592a:	210f      	movs	r1, #15
 800592c:	438a      	bics	r2, r1
 800592e:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005930:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005932:	085b      	lsrs	r3, r3, #1
 8005934:	b29b      	uxth	r3, r3
 8005936:	2207      	movs	r2, #7
 8005938:	4013      	ands	r3, r2
 800593a:	b299      	uxth	r1, r3
 800593c:	1903      	adds	r3, r0, r4
 800593e:	19db      	adds	r3, r3, r7
 8005940:	1902      	adds	r2, r0, r4
 8005942:	19d2      	adds	r2, r2, r7
 8005944:	8812      	ldrh	r2, [r2, #0]
 8005946:	430a      	orrs	r2, r1
 8005948:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800594a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	1902      	adds	r2, r0, r4
 8005950:	19d2      	adds	r2, r2, r7
 8005952:	8812      	ldrh	r2, [r2, #0]
 8005954:	60da      	str	r2, [r3, #12]
 8005956:	e05e      	b.n	8005a16 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8005958:	231a      	movs	r3, #26
 800595a:	2220      	movs	r2, #32
 800595c:	189b      	adds	r3, r3, r2
 800595e:	19db      	adds	r3, r3, r7
 8005960:	2201      	movs	r2, #1
 8005962:	701a      	strb	r2, [r3, #0]
 8005964:	e057      	b.n	8005a16 <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005966:	231b      	movs	r3, #27
 8005968:	2220      	movs	r2, #32
 800596a:	189b      	adds	r3, r3, r2
 800596c:	19db      	adds	r3, r3, r7
 800596e:	781b      	ldrb	r3, [r3, #0]
 8005970:	2b08      	cmp	r3, #8
 8005972:	d015      	beq.n	80059a0 <UART_SetConfig+0x4d0>
 8005974:	dc18      	bgt.n	80059a8 <UART_SetConfig+0x4d8>
 8005976:	2b04      	cmp	r3, #4
 8005978:	d00d      	beq.n	8005996 <UART_SetConfig+0x4c6>
 800597a:	dc15      	bgt.n	80059a8 <UART_SetConfig+0x4d8>
 800597c:	2b00      	cmp	r3, #0
 800597e:	d002      	beq.n	8005986 <UART_SetConfig+0x4b6>
 8005980:	2b02      	cmp	r3, #2
 8005982:	d005      	beq.n	8005990 <UART_SetConfig+0x4c0>
 8005984:	e010      	b.n	80059a8 <UART_SetConfig+0x4d8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005986:	f7fe fb0d 	bl	8003fa4 <HAL_RCC_GetPCLK1Freq>
 800598a:	0003      	movs	r3, r0
 800598c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800598e:	e014      	b.n	80059ba <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005990:	4b2d      	ldr	r3, [pc, #180]	@ (8005a48 <UART_SetConfig+0x578>)
 8005992:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005994:	e011      	b.n	80059ba <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005996:	f7fe fa79 	bl	8003e8c <HAL_RCC_GetSysClockFreq>
 800599a:	0003      	movs	r3, r0
 800599c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800599e:	e00c      	b.n	80059ba <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80059a0:	2380      	movs	r3, #128	@ 0x80
 80059a2:	021b      	lsls	r3, r3, #8
 80059a4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80059a6:	e008      	b.n	80059ba <UART_SetConfig+0x4ea>
      default:
        pclk = 0U;
 80059a8:	2300      	movs	r3, #0
 80059aa:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 80059ac:	231a      	movs	r3, #26
 80059ae:	2220      	movs	r2, #32
 80059b0:	189b      	adds	r3, r3, r2
 80059b2:	19db      	adds	r3, r3, r7
 80059b4:	2201      	movs	r2, #1
 80059b6:	701a      	strb	r2, [r3, #0]
        break;
 80059b8:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 80059ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d02a      	beq.n	8005a16 <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80059c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059c2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80059c4:	4b1f      	ldr	r3, [pc, #124]	@ (8005a44 <UART_SetConfig+0x574>)
 80059c6:	0052      	lsls	r2, r2, #1
 80059c8:	5ad3      	ldrh	r3, [r2, r3]
 80059ca:	0019      	movs	r1, r3
 80059cc:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80059ce:	f7fa fb99 	bl	8000104 <__udivsi3>
 80059d2:	0003      	movs	r3, r0
 80059d4:	001a      	movs	r2, r3
 80059d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059d8:	685b      	ldr	r3, [r3, #4]
 80059da:	085b      	lsrs	r3, r3, #1
 80059dc:	18d2      	adds	r2, r2, r3
 80059de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059e0:	685b      	ldr	r3, [r3, #4]
 80059e2:	0019      	movs	r1, r3
 80059e4:	0010      	movs	r0, r2
 80059e6:	f7fa fb8d 	bl	8000104 <__udivsi3>
 80059ea:	0003      	movs	r3, r0
 80059ec:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80059ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059f0:	2b0f      	cmp	r3, #15
 80059f2:	d90a      	bls.n	8005a0a <UART_SetConfig+0x53a>
 80059f4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80059f6:	2380      	movs	r3, #128	@ 0x80
 80059f8:	025b      	lsls	r3, r3, #9
 80059fa:	429a      	cmp	r2, r3
 80059fc:	d205      	bcs.n	8005a0a <UART_SetConfig+0x53a>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80059fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a00:	b29a      	uxth	r2, r3
 8005a02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	60da      	str	r2, [r3, #12]
 8005a08:	e005      	b.n	8005a16 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8005a0a:	231a      	movs	r3, #26
 8005a0c:	2220      	movs	r2, #32
 8005a0e:	189b      	adds	r3, r3, r2
 8005a10:	19db      	adds	r3, r3, r7
 8005a12:	2201      	movs	r2, #1
 8005a14:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005a16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a18:	226a      	movs	r2, #106	@ 0x6a
 8005a1a:	2101      	movs	r1, #1
 8005a1c:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8005a1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a20:	2268      	movs	r2, #104	@ 0x68
 8005a22:	2101      	movs	r1, #1
 8005a24:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005a26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a28:	2200      	movs	r2, #0
 8005a2a:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8005a2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a2e:	2200      	movs	r2, #0
 8005a30:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8005a32:	231a      	movs	r3, #26
 8005a34:	2220      	movs	r2, #32
 8005a36:	189b      	adds	r3, r3, r2
 8005a38:	19db      	adds	r3, r3, r7
 8005a3a:	781b      	ldrb	r3, [r3, #0]
}
 8005a3c:	0018      	movs	r0, r3
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	b010      	add	sp, #64	@ 0x40
 8005a42:	bdb0      	pop	{r4, r5, r7, pc}
 8005a44:	08006288 	.word	0x08006288
 8005a48:	00f42400 	.word	0x00f42400

08005a4c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005a4c:	b580      	push	{r7, lr}
 8005a4e:	b082      	sub	sp, #8
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a58:	2208      	movs	r2, #8
 8005a5a:	4013      	ands	r3, r2
 8005a5c:	d00b      	beq.n	8005a76 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	685b      	ldr	r3, [r3, #4]
 8005a64:	4a4a      	ldr	r2, [pc, #296]	@ (8005b90 <UART_AdvFeatureConfig+0x144>)
 8005a66:	4013      	ands	r3, r2
 8005a68:	0019      	movs	r1, r3
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	430a      	orrs	r2, r1
 8005a74:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a7a:	2201      	movs	r2, #1
 8005a7c:	4013      	ands	r3, r2
 8005a7e:	d00b      	beq.n	8005a98 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	685b      	ldr	r3, [r3, #4]
 8005a86:	4a43      	ldr	r2, [pc, #268]	@ (8005b94 <UART_AdvFeatureConfig+0x148>)
 8005a88:	4013      	ands	r3, r2
 8005a8a:	0019      	movs	r1, r3
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	430a      	orrs	r2, r1
 8005a96:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a9c:	2202      	movs	r2, #2
 8005a9e:	4013      	ands	r3, r2
 8005aa0:	d00b      	beq.n	8005aba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	685b      	ldr	r3, [r3, #4]
 8005aa8:	4a3b      	ldr	r2, [pc, #236]	@ (8005b98 <UART_AdvFeatureConfig+0x14c>)
 8005aaa:	4013      	ands	r3, r2
 8005aac:	0019      	movs	r1, r3
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	430a      	orrs	r2, r1
 8005ab8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005abe:	2204      	movs	r2, #4
 8005ac0:	4013      	ands	r3, r2
 8005ac2:	d00b      	beq.n	8005adc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	685b      	ldr	r3, [r3, #4]
 8005aca:	4a34      	ldr	r2, [pc, #208]	@ (8005b9c <UART_AdvFeatureConfig+0x150>)
 8005acc:	4013      	ands	r3, r2
 8005ace:	0019      	movs	r1, r3
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	430a      	orrs	r2, r1
 8005ada:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ae0:	2210      	movs	r2, #16
 8005ae2:	4013      	ands	r3, r2
 8005ae4:	d00b      	beq.n	8005afe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	689b      	ldr	r3, [r3, #8]
 8005aec:	4a2c      	ldr	r2, [pc, #176]	@ (8005ba0 <UART_AdvFeatureConfig+0x154>)
 8005aee:	4013      	ands	r3, r2
 8005af0:	0019      	movs	r1, r3
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	430a      	orrs	r2, r1
 8005afc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b02:	2220      	movs	r2, #32
 8005b04:	4013      	ands	r3, r2
 8005b06:	d00b      	beq.n	8005b20 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	689b      	ldr	r3, [r3, #8]
 8005b0e:	4a25      	ldr	r2, [pc, #148]	@ (8005ba4 <UART_AdvFeatureConfig+0x158>)
 8005b10:	4013      	ands	r3, r2
 8005b12:	0019      	movs	r1, r3
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	430a      	orrs	r2, r1
 8005b1e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b24:	2240      	movs	r2, #64	@ 0x40
 8005b26:	4013      	ands	r3, r2
 8005b28:	d01d      	beq.n	8005b66 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	685b      	ldr	r3, [r3, #4]
 8005b30:	4a1d      	ldr	r2, [pc, #116]	@ (8005ba8 <UART_AdvFeatureConfig+0x15c>)
 8005b32:	4013      	ands	r3, r2
 8005b34:	0019      	movs	r1, r3
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	430a      	orrs	r2, r1
 8005b40:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005b46:	2380      	movs	r3, #128	@ 0x80
 8005b48:	035b      	lsls	r3, r3, #13
 8005b4a:	429a      	cmp	r2, r3
 8005b4c:	d10b      	bne.n	8005b66 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	685b      	ldr	r3, [r3, #4]
 8005b54:	4a15      	ldr	r2, [pc, #84]	@ (8005bac <UART_AdvFeatureConfig+0x160>)
 8005b56:	4013      	ands	r3, r2
 8005b58:	0019      	movs	r1, r3
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	430a      	orrs	r2, r1
 8005b64:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b6a:	2280      	movs	r2, #128	@ 0x80
 8005b6c:	4013      	ands	r3, r2
 8005b6e:	d00b      	beq.n	8005b88 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	685b      	ldr	r3, [r3, #4]
 8005b76:	4a0e      	ldr	r2, [pc, #56]	@ (8005bb0 <UART_AdvFeatureConfig+0x164>)
 8005b78:	4013      	ands	r3, r2
 8005b7a:	0019      	movs	r1, r3
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	430a      	orrs	r2, r1
 8005b86:	605a      	str	r2, [r3, #4]
  }
}
 8005b88:	46c0      	nop			@ (mov r8, r8)
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	b002      	add	sp, #8
 8005b8e:	bd80      	pop	{r7, pc}
 8005b90:	ffff7fff 	.word	0xffff7fff
 8005b94:	fffdffff 	.word	0xfffdffff
 8005b98:	fffeffff 	.word	0xfffeffff
 8005b9c:	fffbffff 	.word	0xfffbffff
 8005ba0:	ffffefff 	.word	0xffffefff
 8005ba4:	ffffdfff 	.word	0xffffdfff
 8005ba8:	ffefffff 	.word	0xffefffff
 8005bac:	ff9fffff 	.word	0xff9fffff
 8005bb0:	fff7ffff 	.word	0xfff7ffff

08005bb4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005bb4:	b580      	push	{r7, lr}
 8005bb6:	b092      	sub	sp, #72	@ 0x48
 8005bb8:	af02      	add	r7, sp, #8
 8005bba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2290      	movs	r2, #144	@ 0x90
 8005bc0:	2100      	movs	r1, #0
 8005bc2:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005bc4:	f7fc f9ca 	bl	8001f5c <HAL_GetTick>
 8005bc8:	0003      	movs	r3, r0
 8005bca:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	2208      	movs	r2, #8
 8005bd4:	4013      	ands	r3, r2
 8005bd6:	2b08      	cmp	r3, #8
 8005bd8:	d12d      	bne.n	8005c36 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005bda:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005bdc:	2280      	movs	r2, #128	@ 0x80
 8005bde:	0391      	lsls	r1, r2, #14
 8005be0:	6878      	ldr	r0, [r7, #4]
 8005be2:	4a47      	ldr	r2, [pc, #284]	@ (8005d00 <UART_CheckIdleState+0x14c>)
 8005be4:	9200      	str	r2, [sp, #0]
 8005be6:	2200      	movs	r2, #0
 8005be8:	f000 f88e 	bl	8005d08 <UART_WaitOnFlagUntilTimeout>
 8005bec:	1e03      	subs	r3, r0, #0
 8005bee:	d022      	beq.n	8005c36 <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005bf0:	f3ef 8310 	mrs	r3, PRIMASK
 8005bf4:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8005bf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005bf8:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005bfa:	2301      	movs	r3, #1
 8005bfc:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005bfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c00:	f383 8810 	msr	PRIMASK, r3
}
 8005c04:	46c0      	nop			@ (mov r8, r8)
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	681a      	ldr	r2, [r3, #0]
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	2180      	movs	r1, #128	@ 0x80
 8005c12:	438a      	bics	r2, r1
 8005c14:	601a      	str	r2, [r3, #0]
 8005c16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c18:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c1c:	f383 8810 	msr	PRIMASK, r3
}
 8005c20:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	2288      	movs	r2, #136	@ 0x88
 8005c26:	2120      	movs	r1, #32
 8005c28:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	2284      	movs	r2, #132	@ 0x84
 8005c2e:	2100      	movs	r1, #0
 8005c30:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005c32:	2303      	movs	r3, #3
 8005c34:	e060      	b.n	8005cf8 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	2204      	movs	r2, #4
 8005c3e:	4013      	ands	r3, r2
 8005c40:	2b04      	cmp	r3, #4
 8005c42:	d146      	bne.n	8005cd2 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005c44:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005c46:	2280      	movs	r2, #128	@ 0x80
 8005c48:	03d1      	lsls	r1, r2, #15
 8005c4a:	6878      	ldr	r0, [r7, #4]
 8005c4c:	4a2c      	ldr	r2, [pc, #176]	@ (8005d00 <UART_CheckIdleState+0x14c>)
 8005c4e:	9200      	str	r2, [sp, #0]
 8005c50:	2200      	movs	r2, #0
 8005c52:	f000 f859 	bl	8005d08 <UART_WaitOnFlagUntilTimeout>
 8005c56:	1e03      	subs	r3, r0, #0
 8005c58:	d03b      	beq.n	8005cd2 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005c5a:	f3ef 8310 	mrs	r3, PRIMASK
 8005c5e:	60fb      	str	r3, [r7, #12]
  return(result);
 8005c60:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005c62:	637b      	str	r3, [r7, #52]	@ 0x34
 8005c64:	2301      	movs	r3, #1
 8005c66:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c68:	693b      	ldr	r3, [r7, #16]
 8005c6a:	f383 8810 	msr	PRIMASK, r3
}
 8005c6e:	46c0      	nop			@ (mov r8, r8)
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	681a      	ldr	r2, [r3, #0]
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	4922      	ldr	r1, [pc, #136]	@ (8005d04 <UART_CheckIdleState+0x150>)
 8005c7c:	400a      	ands	r2, r1
 8005c7e:	601a      	str	r2, [r3, #0]
 8005c80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c82:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c84:	697b      	ldr	r3, [r7, #20]
 8005c86:	f383 8810 	msr	PRIMASK, r3
}
 8005c8a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005c8c:	f3ef 8310 	mrs	r3, PRIMASK
 8005c90:	61bb      	str	r3, [r7, #24]
  return(result);
 8005c92:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c94:	633b      	str	r3, [r7, #48]	@ 0x30
 8005c96:	2301      	movs	r3, #1
 8005c98:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c9a:	69fb      	ldr	r3, [r7, #28]
 8005c9c:	f383 8810 	msr	PRIMASK, r3
}
 8005ca0:	46c0      	nop			@ (mov r8, r8)
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	689a      	ldr	r2, [r3, #8]
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	2101      	movs	r1, #1
 8005cae:	438a      	bics	r2, r1
 8005cb0:	609a      	str	r2, [r3, #8]
 8005cb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cb4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005cb6:	6a3b      	ldr	r3, [r7, #32]
 8005cb8:	f383 8810 	msr	PRIMASK, r3
}
 8005cbc:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	228c      	movs	r2, #140	@ 0x8c
 8005cc2:	2120      	movs	r1, #32
 8005cc4:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	2284      	movs	r2, #132	@ 0x84
 8005cca:	2100      	movs	r1, #0
 8005ccc:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005cce:	2303      	movs	r3, #3
 8005cd0:	e012      	b.n	8005cf8 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	2288      	movs	r2, #136	@ 0x88
 8005cd6:	2120      	movs	r1, #32
 8005cd8:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	228c      	movs	r2, #140	@ 0x8c
 8005cde:	2120      	movs	r1, #32
 8005ce0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2200      	movs	r2, #0
 8005cec:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	2284      	movs	r2, #132	@ 0x84
 8005cf2:	2100      	movs	r1, #0
 8005cf4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005cf6:	2300      	movs	r3, #0
}
 8005cf8:	0018      	movs	r0, r3
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	b010      	add	sp, #64	@ 0x40
 8005cfe:	bd80      	pop	{r7, pc}
 8005d00:	01ffffff 	.word	0x01ffffff
 8005d04:	fffffedf 	.word	0xfffffedf

08005d08 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	b084      	sub	sp, #16
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	60f8      	str	r0, [r7, #12]
 8005d10:	60b9      	str	r1, [r7, #8]
 8005d12:	603b      	str	r3, [r7, #0]
 8005d14:	1dfb      	adds	r3, r7, #7
 8005d16:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d18:	e051      	b.n	8005dbe <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d1a:	69bb      	ldr	r3, [r7, #24]
 8005d1c:	3301      	adds	r3, #1
 8005d1e:	d04e      	beq.n	8005dbe <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d20:	f7fc f91c 	bl	8001f5c <HAL_GetTick>
 8005d24:	0002      	movs	r2, r0
 8005d26:	683b      	ldr	r3, [r7, #0]
 8005d28:	1ad3      	subs	r3, r2, r3
 8005d2a:	69ba      	ldr	r2, [r7, #24]
 8005d2c:	429a      	cmp	r2, r3
 8005d2e:	d302      	bcc.n	8005d36 <UART_WaitOnFlagUntilTimeout+0x2e>
 8005d30:	69bb      	ldr	r3, [r7, #24]
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d101      	bne.n	8005d3a <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8005d36:	2303      	movs	r3, #3
 8005d38:	e051      	b.n	8005dde <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	2204      	movs	r2, #4
 8005d42:	4013      	ands	r3, r2
 8005d44:	d03b      	beq.n	8005dbe <UART_WaitOnFlagUntilTimeout+0xb6>
 8005d46:	68bb      	ldr	r3, [r7, #8]
 8005d48:	2b80      	cmp	r3, #128	@ 0x80
 8005d4a:	d038      	beq.n	8005dbe <UART_WaitOnFlagUntilTimeout+0xb6>
 8005d4c:	68bb      	ldr	r3, [r7, #8]
 8005d4e:	2b40      	cmp	r3, #64	@ 0x40
 8005d50:	d035      	beq.n	8005dbe <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	69db      	ldr	r3, [r3, #28]
 8005d58:	2208      	movs	r2, #8
 8005d5a:	4013      	ands	r3, r2
 8005d5c:	2b08      	cmp	r3, #8
 8005d5e:	d111      	bne.n	8005d84 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	2208      	movs	r2, #8
 8005d66:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	0018      	movs	r0, r3
 8005d6c:	f000 f83c 	bl	8005de8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	2290      	movs	r2, #144	@ 0x90
 8005d74:	2108      	movs	r1, #8
 8005d76:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	2284      	movs	r2, #132	@ 0x84
 8005d7c:	2100      	movs	r1, #0
 8005d7e:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8005d80:	2301      	movs	r3, #1
 8005d82:	e02c      	b.n	8005dde <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	69da      	ldr	r2, [r3, #28]
 8005d8a:	2380      	movs	r3, #128	@ 0x80
 8005d8c:	011b      	lsls	r3, r3, #4
 8005d8e:	401a      	ands	r2, r3
 8005d90:	2380      	movs	r3, #128	@ 0x80
 8005d92:	011b      	lsls	r3, r3, #4
 8005d94:	429a      	cmp	r2, r3
 8005d96:	d112      	bne.n	8005dbe <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	2280      	movs	r2, #128	@ 0x80
 8005d9e:	0112      	lsls	r2, r2, #4
 8005da0:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	0018      	movs	r0, r3
 8005da6:	f000 f81f 	bl	8005de8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	2290      	movs	r2, #144	@ 0x90
 8005dae:	2120      	movs	r1, #32
 8005db0:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	2284      	movs	r2, #132	@ 0x84
 8005db6:	2100      	movs	r1, #0
 8005db8:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8005dba:	2303      	movs	r3, #3
 8005dbc:	e00f      	b.n	8005dde <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	69db      	ldr	r3, [r3, #28]
 8005dc4:	68ba      	ldr	r2, [r7, #8]
 8005dc6:	4013      	ands	r3, r2
 8005dc8:	68ba      	ldr	r2, [r7, #8]
 8005dca:	1ad3      	subs	r3, r2, r3
 8005dcc:	425a      	negs	r2, r3
 8005dce:	4153      	adcs	r3, r2
 8005dd0:	b2db      	uxtb	r3, r3
 8005dd2:	001a      	movs	r2, r3
 8005dd4:	1dfb      	adds	r3, r7, #7
 8005dd6:	781b      	ldrb	r3, [r3, #0]
 8005dd8:	429a      	cmp	r2, r3
 8005dda:	d09e      	beq.n	8005d1a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005ddc:	2300      	movs	r3, #0
}
 8005dde:	0018      	movs	r0, r3
 8005de0:	46bd      	mov	sp, r7
 8005de2:	b004      	add	sp, #16
 8005de4:	bd80      	pop	{r7, pc}
	...

08005de8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005de8:	b580      	push	{r7, lr}
 8005dea:	b08e      	sub	sp, #56	@ 0x38
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005df0:	f3ef 8310 	mrs	r3, PRIMASK
 8005df4:	617b      	str	r3, [r7, #20]
  return(result);
 8005df6:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005df8:	637b      	str	r3, [r7, #52]	@ 0x34
 8005dfa:	2301      	movs	r3, #1
 8005dfc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005dfe:	69bb      	ldr	r3, [r7, #24]
 8005e00:	f383 8810 	msr	PRIMASK, r3
}
 8005e04:	46c0      	nop			@ (mov r8, r8)
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	681a      	ldr	r2, [r3, #0]
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	4926      	ldr	r1, [pc, #152]	@ (8005eac <UART_EndRxTransfer+0xc4>)
 8005e12:	400a      	ands	r2, r1
 8005e14:	601a      	str	r2, [r3, #0]
 8005e16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e18:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e1a:	69fb      	ldr	r3, [r7, #28]
 8005e1c:	f383 8810 	msr	PRIMASK, r3
}
 8005e20:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005e22:	f3ef 8310 	mrs	r3, PRIMASK
 8005e26:	623b      	str	r3, [r7, #32]
  return(result);
 8005e28:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005e2a:	633b      	str	r3, [r7, #48]	@ 0x30
 8005e2c:	2301      	movs	r3, #1
 8005e2e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e32:	f383 8810 	msr	PRIMASK, r3
}
 8005e36:	46c0      	nop			@ (mov r8, r8)
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	689a      	ldr	r2, [r3, #8]
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	491b      	ldr	r1, [pc, #108]	@ (8005eb0 <UART_EndRxTransfer+0xc8>)
 8005e44:	400a      	ands	r2, r1
 8005e46:	609a      	str	r2, [r3, #8]
 8005e48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e4a:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e4e:	f383 8810 	msr	PRIMASK, r3
}
 8005e52:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005e58:	2b01      	cmp	r3, #1
 8005e5a:	d118      	bne.n	8005e8e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005e5c:	f3ef 8310 	mrs	r3, PRIMASK
 8005e60:	60bb      	str	r3, [r7, #8]
  return(result);
 8005e62:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e64:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005e66:	2301      	movs	r3, #1
 8005e68:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	f383 8810 	msr	PRIMASK, r3
}
 8005e70:	46c0      	nop			@ (mov r8, r8)
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	681a      	ldr	r2, [r3, #0]
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	2110      	movs	r1, #16
 8005e7e:	438a      	bics	r2, r1
 8005e80:	601a      	str	r2, [r3, #0]
 8005e82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e84:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e86:	693b      	ldr	r3, [r7, #16]
 8005e88:	f383 8810 	msr	PRIMASK, r3
}
 8005e8c:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	228c      	movs	r2, #140	@ 0x8c
 8005e92:	2120      	movs	r1, #32
 8005e94:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	2200      	movs	r2, #0
 8005e9a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8005ea2:	46c0      	nop			@ (mov r8, r8)
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	b00e      	add	sp, #56	@ 0x38
 8005ea8:	bd80      	pop	{r7, pc}
 8005eaa:	46c0      	nop			@ (mov r8, r8)
 8005eac:	fffffedf 	.word	0xfffffedf
 8005eb0:	effffffe 	.word	0xeffffffe

08005eb4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005eb4:	b580      	push	{r7, lr}
 8005eb6:	b084      	sub	sp, #16
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2284      	movs	r2, #132	@ 0x84
 8005ec0:	5c9b      	ldrb	r3, [r3, r2]
 8005ec2:	2b01      	cmp	r3, #1
 8005ec4:	d101      	bne.n	8005eca <HAL_UARTEx_DisableFifoMode+0x16>
 8005ec6:	2302      	movs	r3, #2
 8005ec8:	e027      	b.n	8005f1a <HAL_UARTEx_DisableFifoMode+0x66>
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	2284      	movs	r2, #132	@ 0x84
 8005ece:	2101      	movs	r1, #1
 8005ed0:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	2288      	movs	r2, #136	@ 0x88
 8005ed6:	2124      	movs	r1, #36	@ 0x24
 8005ed8:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	681a      	ldr	r2, [r3, #0]
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	2101      	movs	r1, #1
 8005eee:	438a      	bics	r2, r1
 8005ef0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	4a0b      	ldr	r2, [pc, #44]	@ (8005f24 <HAL_UARTEx_DisableFifoMode+0x70>)
 8005ef6:	4013      	ands	r3, r2
 8005ef8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	2200      	movs	r2, #0
 8005efe:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	68fa      	ldr	r2, [r7, #12]
 8005f06:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2288      	movs	r2, #136	@ 0x88
 8005f0c:	2120      	movs	r1, #32
 8005f0e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	2284      	movs	r2, #132	@ 0x84
 8005f14:	2100      	movs	r1, #0
 8005f16:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005f18:	2300      	movs	r3, #0
}
 8005f1a:	0018      	movs	r0, r3
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	b004      	add	sp, #16
 8005f20:	bd80      	pop	{r7, pc}
 8005f22:	46c0      	nop			@ (mov r8, r8)
 8005f24:	dfffffff 	.word	0xdfffffff

08005f28 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005f28:	b580      	push	{r7, lr}
 8005f2a:	b084      	sub	sp, #16
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
 8005f30:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	2284      	movs	r2, #132	@ 0x84
 8005f36:	5c9b      	ldrb	r3, [r3, r2]
 8005f38:	2b01      	cmp	r3, #1
 8005f3a:	d101      	bne.n	8005f40 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005f3c:	2302      	movs	r3, #2
 8005f3e:	e02e      	b.n	8005f9e <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2284      	movs	r2, #132	@ 0x84
 8005f44:	2101      	movs	r1, #1
 8005f46:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2288      	movs	r2, #136	@ 0x88
 8005f4c:	2124      	movs	r1, #36	@ 0x24
 8005f4e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	681a      	ldr	r2, [r3, #0]
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	2101      	movs	r1, #1
 8005f64:	438a      	bics	r2, r1
 8005f66:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	689b      	ldr	r3, [r3, #8]
 8005f6e:	00db      	lsls	r3, r3, #3
 8005f70:	08d9      	lsrs	r1, r3, #3
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	683a      	ldr	r2, [r7, #0]
 8005f78:	430a      	orrs	r2, r1
 8005f7a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	0018      	movs	r0, r3
 8005f80:	f000 f854 	bl	800602c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	68fa      	ldr	r2, [r7, #12]
 8005f8a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2288      	movs	r2, #136	@ 0x88
 8005f90:	2120      	movs	r1, #32
 8005f92:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2284      	movs	r2, #132	@ 0x84
 8005f98:	2100      	movs	r1, #0
 8005f9a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005f9c:	2300      	movs	r3, #0
}
 8005f9e:	0018      	movs	r0, r3
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	b004      	add	sp, #16
 8005fa4:	bd80      	pop	{r7, pc}
	...

08005fa8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005fa8:	b580      	push	{r7, lr}
 8005faa:	b084      	sub	sp, #16
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]
 8005fb0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	2284      	movs	r2, #132	@ 0x84
 8005fb6:	5c9b      	ldrb	r3, [r3, r2]
 8005fb8:	2b01      	cmp	r3, #1
 8005fba:	d101      	bne.n	8005fc0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005fbc:	2302      	movs	r3, #2
 8005fbe:	e02f      	b.n	8006020 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2284      	movs	r2, #132	@ 0x84
 8005fc4:	2101      	movs	r1, #1
 8005fc6:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2288      	movs	r2, #136	@ 0x88
 8005fcc:	2124      	movs	r1, #36	@ 0x24
 8005fce:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	681a      	ldr	r2, [r3, #0]
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	2101      	movs	r1, #1
 8005fe4:	438a      	bics	r2, r1
 8005fe6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	689b      	ldr	r3, [r3, #8]
 8005fee:	4a0e      	ldr	r2, [pc, #56]	@ (8006028 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8005ff0:	4013      	ands	r3, r2
 8005ff2:	0019      	movs	r1, r3
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	683a      	ldr	r2, [r7, #0]
 8005ffa:	430a      	orrs	r2, r1
 8005ffc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	0018      	movs	r0, r3
 8006002:	f000 f813 	bl	800602c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	68fa      	ldr	r2, [r7, #12]
 800600c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	2288      	movs	r2, #136	@ 0x88
 8006012:	2120      	movs	r1, #32
 8006014:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	2284      	movs	r2, #132	@ 0x84
 800601a:	2100      	movs	r1, #0
 800601c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800601e:	2300      	movs	r3, #0
}
 8006020:	0018      	movs	r0, r3
 8006022:	46bd      	mov	sp, r7
 8006024:	b004      	add	sp, #16
 8006026:	bd80      	pop	{r7, pc}
 8006028:	f1ffffff 	.word	0xf1ffffff

0800602c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800602c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800602e:	b085      	sub	sp, #20
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006038:	2b00      	cmp	r3, #0
 800603a:	d108      	bne.n	800604e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	226a      	movs	r2, #106	@ 0x6a
 8006040:	2101      	movs	r1, #1
 8006042:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2268      	movs	r2, #104	@ 0x68
 8006048:	2101      	movs	r1, #1
 800604a:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800604c:	e043      	b.n	80060d6 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800604e:	260f      	movs	r6, #15
 8006050:	19bb      	adds	r3, r7, r6
 8006052:	2208      	movs	r2, #8
 8006054:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006056:	200e      	movs	r0, #14
 8006058:	183b      	adds	r3, r7, r0
 800605a:	2208      	movs	r2, #8
 800605c:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	689b      	ldr	r3, [r3, #8]
 8006064:	0e5b      	lsrs	r3, r3, #25
 8006066:	b2da      	uxtb	r2, r3
 8006068:	240d      	movs	r4, #13
 800606a:	193b      	adds	r3, r7, r4
 800606c:	2107      	movs	r1, #7
 800606e:	400a      	ands	r2, r1
 8006070:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	689b      	ldr	r3, [r3, #8]
 8006078:	0f5b      	lsrs	r3, r3, #29
 800607a:	b2da      	uxtb	r2, r3
 800607c:	250c      	movs	r5, #12
 800607e:	197b      	adds	r3, r7, r5
 8006080:	2107      	movs	r1, #7
 8006082:	400a      	ands	r2, r1
 8006084:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006086:	183b      	adds	r3, r7, r0
 8006088:	781b      	ldrb	r3, [r3, #0]
 800608a:	197a      	adds	r2, r7, r5
 800608c:	7812      	ldrb	r2, [r2, #0]
 800608e:	4914      	ldr	r1, [pc, #80]	@ (80060e0 <UARTEx_SetNbDataToProcess+0xb4>)
 8006090:	5c8a      	ldrb	r2, [r1, r2]
 8006092:	435a      	muls	r2, r3
 8006094:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8006096:	197b      	adds	r3, r7, r5
 8006098:	781b      	ldrb	r3, [r3, #0]
 800609a:	4a12      	ldr	r2, [pc, #72]	@ (80060e4 <UARTEx_SetNbDataToProcess+0xb8>)
 800609c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800609e:	0019      	movs	r1, r3
 80060a0:	f7fa f8ba 	bl	8000218 <__divsi3>
 80060a4:	0003      	movs	r3, r0
 80060a6:	b299      	uxth	r1, r3
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	226a      	movs	r2, #106	@ 0x6a
 80060ac:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80060ae:	19bb      	adds	r3, r7, r6
 80060b0:	781b      	ldrb	r3, [r3, #0]
 80060b2:	193a      	adds	r2, r7, r4
 80060b4:	7812      	ldrb	r2, [r2, #0]
 80060b6:	490a      	ldr	r1, [pc, #40]	@ (80060e0 <UARTEx_SetNbDataToProcess+0xb4>)
 80060b8:	5c8a      	ldrb	r2, [r1, r2]
 80060ba:	435a      	muls	r2, r3
 80060bc:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 80060be:	193b      	adds	r3, r7, r4
 80060c0:	781b      	ldrb	r3, [r3, #0]
 80060c2:	4a08      	ldr	r2, [pc, #32]	@ (80060e4 <UARTEx_SetNbDataToProcess+0xb8>)
 80060c4:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80060c6:	0019      	movs	r1, r3
 80060c8:	f7fa f8a6 	bl	8000218 <__divsi3>
 80060cc:	0003      	movs	r3, r0
 80060ce:	b299      	uxth	r1, r3
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2268      	movs	r2, #104	@ 0x68
 80060d4:	5299      	strh	r1, [r3, r2]
}
 80060d6:	46c0      	nop			@ (mov r8, r8)
 80060d8:	46bd      	mov	sp, r7
 80060da:	b005      	add	sp, #20
 80060dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80060de:	46c0      	nop			@ (mov r8, r8)
 80060e0:	080062a0 	.word	0x080062a0
 80060e4:	080062a8 	.word	0x080062a8

080060e8 <memset>:
 80060e8:	0003      	movs	r3, r0
 80060ea:	1882      	adds	r2, r0, r2
 80060ec:	4293      	cmp	r3, r2
 80060ee:	d100      	bne.n	80060f2 <memset+0xa>
 80060f0:	4770      	bx	lr
 80060f2:	7019      	strb	r1, [r3, #0]
 80060f4:	3301      	adds	r3, #1
 80060f6:	e7f9      	b.n	80060ec <memset+0x4>

080060f8 <__libc_init_array>:
 80060f8:	b570      	push	{r4, r5, r6, lr}
 80060fa:	2600      	movs	r6, #0
 80060fc:	4c0c      	ldr	r4, [pc, #48]	@ (8006130 <__libc_init_array+0x38>)
 80060fe:	4d0d      	ldr	r5, [pc, #52]	@ (8006134 <__libc_init_array+0x3c>)
 8006100:	1b64      	subs	r4, r4, r5
 8006102:	10a4      	asrs	r4, r4, #2
 8006104:	42a6      	cmp	r6, r4
 8006106:	d109      	bne.n	800611c <__libc_init_array+0x24>
 8006108:	2600      	movs	r6, #0
 800610a:	f000 f819 	bl	8006140 <_init>
 800610e:	4c0a      	ldr	r4, [pc, #40]	@ (8006138 <__libc_init_array+0x40>)
 8006110:	4d0a      	ldr	r5, [pc, #40]	@ (800613c <__libc_init_array+0x44>)
 8006112:	1b64      	subs	r4, r4, r5
 8006114:	10a4      	asrs	r4, r4, #2
 8006116:	42a6      	cmp	r6, r4
 8006118:	d105      	bne.n	8006126 <__libc_init_array+0x2e>
 800611a:	bd70      	pop	{r4, r5, r6, pc}
 800611c:	00b3      	lsls	r3, r6, #2
 800611e:	58eb      	ldr	r3, [r5, r3]
 8006120:	4798      	blx	r3
 8006122:	3601      	adds	r6, #1
 8006124:	e7ee      	b.n	8006104 <__libc_init_array+0xc>
 8006126:	00b3      	lsls	r3, r6, #2
 8006128:	58eb      	ldr	r3, [r5, r3]
 800612a:	4798      	blx	r3
 800612c:	3601      	adds	r6, #1
 800612e:	e7f2      	b.n	8006116 <__libc_init_array+0x1e>
 8006130:	080062b8 	.word	0x080062b8
 8006134:	080062b8 	.word	0x080062b8
 8006138:	080062bc 	.word	0x080062bc
 800613c:	080062b8 	.word	0x080062b8

08006140 <_init>:
 8006140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006142:	46c0      	nop			@ (mov r8, r8)
 8006144:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006146:	bc08      	pop	{r3}
 8006148:	469e      	mov	lr, r3
 800614a:	4770      	bx	lr

0800614c <_fini>:
 800614c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800614e:	46c0      	nop			@ (mov r8, r8)
 8006150:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006152:	bc08      	pop	{r3}
 8006154:	469e      	mov	lr, r3
 8006156:	4770      	bx	lr
