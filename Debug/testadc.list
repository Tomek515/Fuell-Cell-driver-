
testadc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008f9c  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000158  08009058  08009058  0000a058  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080091b0  080091b0  0000b06c  2**0
                  CONTENTS
  4 .ARM          00000008  080091b0  080091b0  0000a1b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080091b8  080091b8  0000b06c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080091b8  080091b8  0000a1b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080091bc  080091bc  0000a1bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  080091c0  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000390  2000006c  0800922c  0000b06c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003fc  0800922c  0000b3fc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000b06c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016593  00000000  00000000  0000b094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e5e  00000000  00000000  00021627  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001390  00000000  00000000  00024488  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f4c  00000000  00000000  00025818  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b043  00000000  00000000  00026764  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000180b6  00000000  00000000  000417a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000adc2d  00000000  00000000  0005985d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010748a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004c40  00000000  00000000  001074d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  0010c110  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000006c 	.word	0x2000006c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08009040 	.word	0x08009040

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000070 	.word	0x20000070
 8000100:	08009040 	.word	0x08009040

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	@ 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f8f0 	bl	80003ec <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			@ (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__divsi3>:
 8000218:	4603      	mov	r3, r0
 800021a:	430b      	orrs	r3, r1
 800021c:	d47f      	bmi.n	800031e <__divsi3+0x106>
 800021e:	2200      	movs	r2, #0
 8000220:	0843      	lsrs	r3, r0, #1
 8000222:	428b      	cmp	r3, r1
 8000224:	d374      	bcc.n	8000310 <__divsi3+0xf8>
 8000226:	0903      	lsrs	r3, r0, #4
 8000228:	428b      	cmp	r3, r1
 800022a:	d35f      	bcc.n	80002ec <__divsi3+0xd4>
 800022c:	0a03      	lsrs	r3, r0, #8
 800022e:	428b      	cmp	r3, r1
 8000230:	d344      	bcc.n	80002bc <__divsi3+0xa4>
 8000232:	0b03      	lsrs	r3, r0, #12
 8000234:	428b      	cmp	r3, r1
 8000236:	d328      	bcc.n	800028a <__divsi3+0x72>
 8000238:	0c03      	lsrs	r3, r0, #16
 800023a:	428b      	cmp	r3, r1
 800023c:	d30d      	bcc.n	800025a <__divsi3+0x42>
 800023e:	22ff      	movs	r2, #255	@ 0xff
 8000240:	0209      	lsls	r1, r1, #8
 8000242:	ba12      	rev	r2, r2
 8000244:	0c03      	lsrs	r3, r0, #16
 8000246:	428b      	cmp	r3, r1
 8000248:	d302      	bcc.n	8000250 <__divsi3+0x38>
 800024a:	1212      	asrs	r2, r2, #8
 800024c:	0209      	lsls	r1, r1, #8
 800024e:	d065      	beq.n	800031c <__divsi3+0x104>
 8000250:	0b03      	lsrs	r3, r0, #12
 8000252:	428b      	cmp	r3, r1
 8000254:	d319      	bcc.n	800028a <__divsi3+0x72>
 8000256:	e000      	b.n	800025a <__divsi3+0x42>
 8000258:	0a09      	lsrs	r1, r1, #8
 800025a:	0bc3      	lsrs	r3, r0, #15
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__divsi3+0x4c>
 8000260:	03cb      	lsls	r3, r1, #15
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0b83      	lsrs	r3, r0, #14
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__divsi3+0x58>
 800026c:	038b      	lsls	r3, r1, #14
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	0b43      	lsrs	r3, r0, #13
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x64>
 8000278:	034b      	lsls	r3, r1, #13
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x70>
 8000284:	030b      	lsls	r3, r1, #12
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0ac3      	lsrs	r3, r0, #11
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x7c>
 8000290:	02cb      	lsls	r3, r1, #11
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0a83      	lsrs	r3, r0, #10
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x88>
 800029c:	028b      	lsls	r3, r1, #10
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0a43      	lsrs	r3, r0, #9
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x94>
 80002a8:	024b      	lsls	r3, r1, #9
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a03      	lsrs	r3, r0, #8
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0xa0>
 80002b4:	020b      	lsls	r3, r1, #8
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	d2cd      	bcs.n	8000258 <__divsi3+0x40>
 80002bc:	09c3      	lsrs	r3, r0, #7
 80002be:	428b      	cmp	r3, r1
 80002c0:	d301      	bcc.n	80002c6 <__divsi3+0xae>
 80002c2:	01cb      	lsls	r3, r1, #7
 80002c4:	1ac0      	subs	r0, r0, r3
 80002c6:	4152      	adcs	r2, r2
 80002c8:	0983      	lsrs	r3, r0, #6
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d301      	bcc.n	80002d2 <__divsi3+0xba>
 80002ce:	018b      	lsls	r3, r1, #6
 80002d0:	1ac0      	subs	r0, r0, r3
 80002d2:	4152      	adcs	r2, r2
 80002d4:	0943      	lsrs	r3, r0, #5
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xc6>
 80002da:	014b      	lsls	r3, r1, #5
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0903      	lsrs	r3, r0, #4
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xd2>
 80002e6:	010b      	lsls	r3, r1, #4
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	08c3      	lsrs	r3, r0, #3
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xde>
 80002f2:	00cb      	lsls	r3, r1, #3
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0883      	lsrs	r3, r0, #2
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xea>
 80002fe:	008b      	lsls	r3, r1, #2
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0843      	lsrs	r3, r0, #1
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xf6>
 800030a:	004b      	lsls	r3, r1, #1
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	1a41      	subs	r1, r0, r1
 8000312:	d200      	bcs.n	8000316 <__divsi3+0xfe>
 8000314:	4601      	mov	r1, r0
 8000316:	4152      	adcs	r2, r2
 8000318:	4610      	mov	r0, r2
 800031a:	4770      	bx	lr
 800031c:	e05d      	b.n	80003da <__divsi3+0x1c2>
 800031e:	0fca      	lsrs	r2, r1, #31
 8000320:	d000      	beq.n	8000324 <__divsi3+0x10c>
 8000322:	4249      	negs	r1, r1
 8000324:	1003      	asrs	r3, r0, #32
 8000326:	d300      	bcc.n	800032a <__divsi3+0x112>
 8000328:	4240      	negs	r0, r0
 800032a:	4053      	eors	r3, r2
 800032c:	2200      	movs	r2, #0
 800032e:	469c      	mov	ip, r3
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d32d      	bcc.n	8000392 <__divsi3+0x17a>
 8000336:	0a03      	lsrs	r3, r0, #8
 8000338:	428b      	cmp	r3, r1
 800033a:	d312      	bcc.n	8000362 <__divsi3+0x14a>
 800033c:	22fc      	movs	r2, #252	@ 0xfc
 800033e:	0189      	lsls	r1, r1, #6
 8000340:	ba12      	rev	r2, r2
 8000342:	0a03      	lsrs	r3, r0, #8
 8000344:	428b      	cmp	r3, r1
 8000346:	d30c      	bcc.n	8000362 <__divsi3+0x14a>
 8000348:	0189      	lsls	r1, r1, #6
 800034a:	1192      	asrs	r2, r2, #6
 800034c:	428b      	cmp	r3, r1
 800034e:	d308      	bcc.n	8000362 <__divsi3+0x14a>
 8000350:	0189      	lsls	r1, r1, #6
 8000352:	1192      	asrs	r2, r2, #6
 8000354:	428b      	cmp	r3, r1
 8000356:	d304      	bcc.n	8000362 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	d03a      	beq.n	80003d2 <__divsi3+0x1ba>
 800035c:	1192      	asrs	r2, r2, #6
 800035e:	e000      	b.n	8000362 <__divsi3+0x14a>
 8000360:	0989      	lsrs	r1, r1, #6
 8000362:	09c3      	lsrs	r3, r0, #7
 8000364:	428b      	cmp	r3, r1
 8000366:	d301      	bcc.n	800036c <__divsi3+0x154>
 8000368:	01cb      	lsls	r3, r1, #7
 800036a:	1ac0      	subs	r0, r0, r3
 800036c:	4152      	adcs	r2, r2
 800036e:	0983      	lsrs	r3, r0, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d301      	bcc.n	8000378 <__divsi3+0x160>
 8000374:	018b      	lsls	r3, r1, #6
 8000376:	1ac0      	subs	r0, r0, r3
 8000378:	4152      	adcs	r2, r2
 800037a:	0943      	lsrs	r3, r0, #5
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x16c>
 8000380:	014b      	lsls	r3, r1, #5
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0903      	lsrs	r3, r0, #4
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x178>
 800038c:	010b      	lsls	r3, r1, #4
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	08c3      	lsrs	r3, r0, #3
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x184>
 8000398:	00cb      	lsls	r3, r1, #3
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0883      	lsrs	r3, r0, #2
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x190>
 80003a4:	008b      	lsls	r3, r1, #2
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	d2d9      	bcs.n	8000360 <__divsi3+0x148>
 80003ac:	0843      	lsrs	r3, r0, #1
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d301      	bcc.n	80003b6 <__divsi3+0x19e>
 80003b2:	004b      	lsls	r3, r1, #1
 80003b4:	1ac0      	subs	r0, r0, r3
 80003b6:	4152      	adcs	r2, r2
 80003b8:	1a41      	subs	r1, r0, r1
 80003ba:	d200      	bcs.n	80003be <__divsi3+0x1a6>
 80003bc:	4601      	mov	r1, r0
 80003be:	4663      	mov	r3, ip
 80003c0:	4152      	adcs	r2, r2
 80003c2:	105b      	asrs	r3, r3, #1
 80003c4:	4610      	mov	r0, r2
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x1b4>
 80003c8:	4240      	negs	r0, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d500      	bpl.n	80003d0 <__divsi3+0x1b8>
 80003ce:	4249      	negs	r1, r1
 80003d0:	4770      	bx	lr
 80003d2:	4663      	mov	r3, ip
 80003d4:	105b      	asrs	r3, r3, #1
 80003d6:	d300      	bcc.n	80003da <__divsi3+0x1c2>
 80003d8:	4240      	negs	r0, r0
 80003da:	b501      	push	{r0, lr}
 80003dc:	2000      	movs	r0, #0
 80003de:	f000 f805 	bl	80003ec <__aeabi_idiv0>
 80003e2:	bd02      	pop	{r1, pc}

080003e4 <__aeabi_idivmod>:
 80003e4:	2900      	cmp	r1, #0
 80003e6:	d0f8      	beq.n	80003da <__divsi3+0x1c2>
 80003e8:	e716      	b.n	8000218 <__divsi3>
 80003ea:	4770      	bx	lr

080003ec <__aeabi_idiv0>:
 80003ec:	4770      	bx	lr
 80003ee:	46c0      	nop			@ (mov r8, r8)

080003f0 <__aeabi_cfrcmple>:
 80003f0:	4684      	mov	ip, r0
 80003f2:	0008      	movs	r0, r1
 80003f4:	4661      	mov	r1, ip
 80003f6:	e7ff      	b.n	80003f8 <__aeabi_cfcmpeq>

080003f8 <__aeabi_cfcmpeq>:
 80003f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80003fa:	f000 fc59 	bl	8000cb0 <__lesf2>
 80003fe:	2800      	cmp	r0, #0
 8000400:	d401      	bmi.n	8000406 <__aeabi_cfcmpeq+0xe>
 8000402:	2100      	movs	r1, #0
 8000404:	42c8      	cmn	r0, r1
 8000406:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000408 <__aeabi_fcmpeq>:
 8000408:	b510      	push	{r4, lr}
 800040a:	f000 fbd9 	bl	8000bc0 <__eqsf2>
 800040e:	4240      	negs	r0, r0
 8000410:	3001      	adds	r0, #1
 8000412:	bd10      	pop	{r4, pc}

08000414 <__aeabi_fcmplt>:
 8000414:	b510      	push	{r4, lr}
 8000416:	f000 fc4b 	bl	8000cb0 <__lesf2>
 800041a:	2800      	cmp	r0, #0
 800041c:	db01      	blt.n	8000422 <__aeabi_fcmplt+0xe>
 800041e:	2000      	movs	r0, #0
 8000420:	bd10      	pop	{r4, pc}
 8000422:	2001      	movs	r0, #1
 8000424:	bd10      	pop	{r4, pc}
 8000426:	46c0      	nop			@ (mov r8, r8)

08000428 <__aeabi_fcmple>:
 8000428:	b510      	push	{r4, lr}
 800042a:	f000 fc41 	bl	8000cb0 <__lesf2>
 800042e:	2800      	cmp	r0, #0
 8000430:	dd01      	ble.n	8000436 <__aeabi_fcmple+0xe>
 8000432:	2000      	movs	r0, #0
 8000434:	bd10      	pop	{r4, pc}
 8000436:	2001      	movs	r0, #1
 8000438:	bd10      	pop	{r4, pc}
 800043a:	46c0      	nop			@ (mov r8, r8)

0800043c <__aeabi_fcmpgt>:
 800043c:	b510      	push	{r4, lr}
 800043e:	f000 fbe7 	bl	8000c10 <__gesf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	dc01      	bgt.n	800044a <__aeabi_fcmpgt+0xe>
 8000446:	2000      	movs	r0, #0
 8000448:	bd10      	pop	{r4, pc}
 800044a:	2001      	movs	r0, #1
 800044c:	bd10      	pop	{r4, pc}
 800044e:	46c0      	nop			@ (mov r8, r8)

08000450 <__aeabi_fcmpge>:
 8000450:	b510      	push	{r4, lr}
 8000452:	f000 fbdd 	bl	8000c10 <__gesf2>
 8000456:	2800      	cmp	r0, #0
 8000458:	da01      	bge.n	800045e <__aeabi_fcmpge+0xe>
 800045a:	2000      	movs	r0, #0
 800045c:	bd10      	pop	{r4, pc}
 800045e:	2001      	movs	r0, #1
 8000460:	bd10      	pop	{r4, pc}
 8000462:	46c0      	nop			@ (mov r8, r8)

08000464 <__aeabi_uldivmod>:
 8000464:	2b00      	cmp	r3, #0
 8000466:	d111      	bne.n	800048c <__aeabi_uldivmod+0x28>
 8000468:	2a00      	cmp	r2, #0
 800046a:	d10f      	bne.n	800048c <__aeabi_uldivmod+0x28>
 800046c:	2900      	cmp	r1, #0
 800046e:	d100      	bne.n	8000472 <__aeabi_uldivmod+0xe>
 8000470:	2800      	cmp	r0, #0
 8000472:	d002      	beq.n	800047a <__aeabi_uldivmod+0x16>
 8000474:	2100      	movs	r1, #0
 8000476:	43c9      	mvns	r1, r1
 8000478:	0008      	movs	r0, r1
 800047a:	b407      	push	{r0, r1, r2}
 800047c:	4802      	ldr	r0, [pc, #8]	@ (8000488 <__aeabi_uldivmod+0x24>)
 800047e:	a102      	add	r1, pc, #8	@ (adr r1, 8000488 <__aeabi_uldivmod+0x24>)
 8000480:	1840      	adds	r0, r0, r1
 8000482:	9002      	str	r0, [sp, #8]
 8000484:	bd03      	pop	{r0, r1, pc}
 8000486:	46c0      	nop			@ (mov r8, r8)
 8000488:	ffffff65 	.word	0xffffff65
 800048c:	b403      	push	{r0, r1}
 800048e:	4668      	mov	r0, sp
 8000490:	b501      	push	{r0, lr}
 8000492:	9802      	ldr	r0, [sp, #8]
 8000494:	f000 f81e 	bl	80004d4 <__udivmoddi4>
 8000498:	9b01      	ldr	r3, [sp, #4]
 800049a:	469e      	mov	lr, r3
 800049c:	b002      	add	sp, #8
 800049e:	bc0c      	pop	{r2, r3}
 80004a0:	4770      	bx	lr
 80004a2:	46c0      	nop			@ (mov r8, r8)

080004a4 <__aeabi_f2uiz>:
 80004a4:	219e      	movs	r1, #158	@ 0x9e
 80004a6:	b510      	push	{r4, lr}
 80004a8:	05c9      	lsls	r1, r1, #23
 80004aa:	1c04      	adds	r4, r0, #0
 80004ac:	f7ff ffd0 	bl	8000450 <__aeabi_fcmpge>
 80004b0:	2800      	cmp	r0, #0
 80004b2:	d103      	bne.n	80004bc <__aeabi_f2uiz+0x18>
 80004b4:	1c20      	adds	r0, r4, #0
 80004b6:	f000 ff41 	bl	800133c <__aeabi_f2iz>
 80004ba:	bd10      	pop	{r4, pc}
 80004bc:	219e      	movs	r1, #158	@ 0x9e
 80004be:	1c20      	adds	r0, r4, #0
 80004c0:	05c9      	lsls	r1, r1, #23
 80004c2:	f000 fd81 	bl	8000fc8 <__aeabi_fsub>
 80004c6:	f000 ff39 	bl	800133c <__aeabi_f2iz>
 80004ca:	2380      	movs	r3, #128	@ 0x80
 80004cc:	061b      	lsls	r3, r3, #24
 80004ce:	469c      	mov	ip, r3
 80004d0:	4460      	add	r0, ip
 80004d2:	e7f2      	b.n	80004ba <__aeabi_f2uiz+0x16>

080004d4 <__udivmoddi4>:
 80004d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004d6:	4657      	mov	r7, sl
 80004d8:	464e      	mov	r6, r9
 80004da:	4645      	mov	r5, r8
 80004dc:	46de      	mov	lr, fp
 80004de:	b5e0      	push	{r5, r6, r7, lr}
 80004e0:	0004      	movs	r4, r0
 80004e2:	000d      	movs	r5, r1
 80004e4:	4692      	mov	sl, r2
 80004e6:	4699      	mov	r9, r3
 80004e8:	b083      	sub	sp, #12
 80004ea:	428b      	cmp	r3, r1
 80004ec:	d830      	bhi.n	8000550 <__udivmoddi4+0x7c>
 80004ee:	d02d      	beq.n	800054c <__udivmoddi4+0x78>
 80004f0:	4649      	mov	r1, r9
 80004f2:	4650      	mov	r0, sl
 80004f4:	f002 fa82 	bl	80029fc <__clzdi2>
 80004f8:	0029      	movs	r1, r5
 80004fa:	0006      	movs	r6, r0
 80004fc:	0020      	movs	r0, r4
 80004fe:	f002 fa7d 	bl	80029fc <__clzdi2>
 8000502:	1a33      	subs	r3, r6, r0
 8000504:	4698      	mov	r8, r3
 8000506:	3b20      	subs	r3, #32
 8000508:	d434      	bmi.n	8000574 <__udivmoddi4+0xa0>
 800050a:	469b      	mov	fp, r3
 800050c:	4653      	mov	r3, sl
 800050e:	465a      	mov	r2, fp
 8000510:	4093      	lsls	r3, r2
 8000512:	4642      	mov	r2, r8
 8000514:	001f      	movs	r7, r3
 8000516:	4653      	mov	r3, sl
 8000518:	4093      	lsls	r3, r2
 800051a:	001e      	movs	r6, r3
 800051c:	42af      	cmp	r7, r5
 800051e:	d83b      	bhi.n	8000598 <__udivmoddi4+0xc4>
 8000520:	42af      	cmp	r7, r5
 8000522:	d100      	bne.n	8000526 <__udivmoddi4+0x52>
 8000524:	e079      	b.n	800061a <__udivmoddi4+0x146>
 8000526:	465b      	mov	r3, fp
 8000528:	1ba4      	subs	r4, r4, r6
 800052a:	41bd      	sbcs	r5, r7
 800052c:	2b00      	cmp	r3, #0
 800052e:	da00      	bge.n	8000532 <__udivmoddi4+0x5e>
 8000530:	e076      	b.n	8000620 <__udivmoddi4+0x14c>
 8000532:	2200      	movs	r2, #0
 8000534:	2300      	movs	r3, #0
 8000536:	9200      	str	r2, [sp, #0]
 8000538:	9301      	str	r3, [sp, #4]
 800053a:	2301      	movs	r3, #1
 800053c:	465a      	mov	r2, fp
 800053e:	4093      	lsls	r3, r2
 8000540:	9301      	str	r3, [sp, #4]
 8000542:	2301      	movs	r3, #1
 8000544:	4642      	mov	r2, r8
 8000546:	4093      	lsls	r3, r2
 8000548:	9300      	str	r3, [sp, #0]
 800054a:	e029      	b.n	80005a0 <__udivmoddi4+0xcc>
 800054c:	4282      	cmp	r2, r0
 800054e:	d9cf      	bls.n	80004f0 <__udivmoddi4+0x1c>
 8000550:	2200      	movs	r2, #0
 8000552:	2300      	movs	r3, #0
 8000554:	9200      	str	r2, [sp, #0]
 8000556:	9301      	str	r3, [sp, #4]
 8000558:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800055a:	2b00      	cmp	r3, #0
 800055c:	d001      	beq.n	8000562 <__udivmoddi4+0x8e>
 800055e:	601c      	str	r4, [r3, #0]
 8000560:	605d      	str	r5, [r3, #4]
 8000562:	9800      	ldr	r0, [sp, #0]
 8000564:	9901      	ldr	r1, [sp, #4]
 8000566:	b003      	add	sp, #12
 8000568:	bcf0      	pop	{r4, r5, r6, r7}
 800056a:	46bb      	mov	fp, r7
 800056c:	46b2      	mov	sl, r6
 800056e:	46a9      	mov	r9, r5
 8000570:	46a0      	mov	r8, r4
 8000572:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000574:	4642      	mov	r2, r8
 8000576:	469b      	mov	fp, r3
 8000578:	2320      	movs	r3, #32
 800057a:	1a9b      	subs	r3, r3, r2
 800057c:	4652      	mov	r2, sl
 800057e:	40da      	lsrs	r2, r3
 8000580:	4641      	mov	r1, r8
 8000582:	0013      	movs	r3, r2
 8000584:	464a      	mov	r2, r9
 8000586:	408a      	lsls	r2, r1
 8000588:	0017      	movs	r7, r2
 800058a:	4642      	mov	r2, r8
 800058c:	431f      	orrs	r7, r3
 800058e:	4653      	mov	r3, sl
 8000590:	4093      	lsls	r3, r2
 8000592:	001e      	movs	r6, r3
 8000594:	42af      	cmp	r7, r5
 8000596:	d9c3      	bls.n	8000520 <__udivmoddi4+0x4c>
 8000598:	2200      	movs	r2, #0
 800059a:	2300      	movs	r3, #0
 800059c:	9200      	str	r2, [sp, #0]
 800059e:	9301      	str	r3, [sp, #4]
 80005a0:	4643      	mov	r3, r8
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d0d8      	beq.n	8000558 <__udivmoddi4+0x84>
 80005a6:	07fb      	lsls	r3, r7, #31
 80005a8:	0872      	lsrs	r2, r6, #1
 80005aa:	431a      	orrs	r2, r3
 80005ac:	4646      	mov	r6, r8
 80005ae:	087b      	lsrs	r3, r7, #1
 80005b0:	e00e      	b.n	80005d0 <__udivmoddi4+0xfc>
 80005b2:	42ab      	cmp	r3, r5
 80005b4:	d101      	bne.n	80005ba <__udivmoddi4+0xe6>
 80005b6:	42a2      	cmp	r2, r4
 80005b8:	d80c      	bhi.n	80005d4 <__udivmoddi4+0x100>
 80005ba:	1aa4      	subs	r4, r4, r2
 80005bc:	419d      	sbcs	r5, r3
 80005be:	2001      	movs	r0, #1
 80005c0:	1924      	adds	r4, r4, r4
 80005c2:	416d      	adcs	r5, r5
 80005c4:	2100      	movs	r1, #0
 80005c6:	3e01      	subs	r6, #1
 80005c8:	1824      	adds	r4, r4, r0
 80005ca:	414d      	adcs	r5, r1
 80005cc:	2e00      	cmp	r6, #0
 80005ce:	d006      	beq.n	80005de <__udivmoddi4+0x10a>
 80005d0:	42ab      	cmp	r3, r5
 80005d2:	d9ee      	bls.n	80005b2 <__udivmoddi4+0xde>
 80005d4:	3e01      	subs	r6, #1
 80005d6:	1924      	adds	r4, r4, r4
 80005d8:	416d      	adcs	r5, r5
 80005da:	2e00      	cmp	r6, #0
 80005dc:	d1f8      	bne.n	80005d0 <__udivmoddi4+0xfc>
 80005de:	9800      	ldr	r0, [sp, #0]
 80005e0:	9901      	ldr	r1, [sp, #4]
 80005e2:	465b      	mov	r3, fp
 80005e4:	1900      	adds	r0, r0, r4
 80005e6:	4169      	adcs	r1, r5
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	db24      	blt.n	8000636 <__udivmoddi4+0x162>
 80005ec:	002b      	movs	r3, r5
 80005ee:	465a      	mov	r2, fp
 80005f0:	4644      	mov	r4, r8
 80005f2:	40d3      	lsrs	r3, r2
 80005f4:	002a      	movs	r2, r5
 80005f6:	40e2      	lsrs	r2, r4
 80005f8:	001c      	movs	r4, r3
 80005fa:	465b      	mov	r3, fp
 80005fc:	0015      	movs	r5, r2
 80005fe:	2b00      	cmp	r3, #0
 8000600:	db2a      	blt.n	8000658 <__udivmoddi4+0x184>
 8000602:	0026      	movs	r6, r4
 8000604:	409e      	lsls	r6, r3
 8000606:	0033      	movs	r3, r6
 8000608:	0026      	movs	r6, r4
 800060a:	4647      	mov	r7, r8
 800060c:	40be      	lsls	r6, r7
 800060e:	0032      	movs	r2, r6
 8000610:	1a80      	subs	r0, r0, r2
 8000612:	4199      	sbcs	r1, r3
 8000614:	9000      	str	r0, [sp, #0]
 8000616:	9101      	str	r1, [sp, #4]
 8000618:	e79e      	b.n	8000558 <__udivmoddi4+0x84>
 800061a:	42a3      	cmp	r3, r4
 800061c:	d8bc      	bhi.n	8000598 <__udivmoddi4+0xc4>
 800061e:	e782      	b.n	8000526 <__udivmoddi4+0x52>
 8000620:	4642      	mov	r2, r8
 8000622:	2320      	movs	r3, #32
 8000624:	2100      	movs	r1, #0
 8000626:	1a9b      	subs	r3, r3, r2
 8000628:	2200      	movs	r2, #0
 800062a:	9100      	str	r1, [sp, #0]
 800062c:	9201      	str	r2, [sp, #4]
 800062e:	2201      	movs	r2, #1
 8000630:	40da      	lsrs	r2, r3
 8000632:	9201      	str	r2, [sp, #4]
 8000634:	e785      	b.n	8000542 <__udivmoddi4+0x6e>
 8000636:	4642      	mov	r2, r8
 8000638:	2320      	movs	r3, #32
 800063a:	1a9b      	subs	r3, r3, r2
 800063c:	002a      	movs	r2, r5
 800063e:	4646      	mov	r6, r8
 8000640:	409a      	lsls	r2, r3
 8000642:	0023      	movs	r3, r4
 8000644:	40f3      	lsrs	r3, r6
 8000646:	4644      	mov	r4, r8
 8000648:	4313      	orrs	r3, r2
 800064a:	002a      	movs	r2, r5
 800064c:	40e2      	lsrs	r2, r4
 800064e:	001c      	movs	r4, r3
 8000650:	465b      	mov	r3, fp
 8000652:	0015      	movs	r5, r2
 8000654:	2b00      	cmp	r3, #0
 8000656:	dad4      	bge.n	8000602 <__udivmoddi4+0x12e>
 8000658:	4642      	mov	r2, r8
 800065a:	002f      	movs	r7, r5
 800065c:	2320      	movs	r3, #32
 800065e:	0026      	movs	r6, r4
 8000660:	4097      	lsls	r7, r2
 8000662:	1a9b      	subs	r3, r3, r2
 8000664:	40de      	lsrs	r6, r3
 8000666:	003b      	movs	r3, r7
 8000668:	4333      	orrs	r3, r6
 800066a:	e7cd      	b.n	8000608 <__udivmoddi4+0x134>

0800066c <__aeabi_fadd>:
 800066c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800066e:	46ce      	mov	lr, r9
 8000670:	4647      	mov	r7, r8
 8000672:	0243      	lsls	r3, r0, #9
 8000674:	0a5a      	lsrs	r2, r3, #9
 8000676:	024e      	lsls	r6, r1, #9
 8000678:	0045      	lsls	r5, r0, #1
 800067a:	0fc4      	lsrs	r4, r0, #31
 800067c:	0048      	lsls	r0, r1, #1
 800067e:	4691      	mov	r9, r2
 8000680:	0e2d      	lsrs	r5, r5, #24
 8000682:	0a72      	lsrs	r2, r6, #9
 8000684:	0e00      	lsrs	r0, r0, #24
 8000686:	4694      	mov	ip, r2
 8000688:	b580      	push	{r7, lr}
 800068a:	099b      	lsrs	r3, r3, #6
 800068c:	0fc9      	lsrs	r1, r1, #31
 800068e:	09b6      	lsrs	r6, r6, #6
 8000690:	1a2a      	subs	r2, r5, r0
 8000692:	428c      	cmp	r4, r1
 8000694:	d021      	beq.n	80006da <__aeabi_fadd+0x6e>
 8000696:	2a00      	cmp	r2, #0
 8000698:	dd0d      	ble.n	80006b6 <__aeabi_fadd+0x4a>
 800069a:	2800      	cmp	r0, #0
 800069c:	d12d      	bne.n	80006fa <__aeabi_fadd+0x8e>
 800069e:	2e00      	cmp	r6, #0
 80006a0:	d100      	bne.n	80006a4 <__aeabi_fadd+0x38>
 80006a2:	e08d      	b.n	80007c0 <__aeabi_fadd+0x154>
 80006a4:	1e51      	subs	r1, r2, #1
 80006a6:	2a01      	cmp	r2, #1
 80006a8:	d100      	bne.n	80006ac <__aeabi_fadd+0x40>
 80006aa:	e11d      	b.n	80008e8 <__aeabi_fadd+0x27c>
 80006ac:	2aff      	cmp	r2, #255	@ 0xff
 80006ae:	d100      	bne.n	80006b2 <__aeabi_fadd+0x46>
 80006b0:	e0ab      	b.n	800080a <__aeabi_fadd+0x19e>
 80006b2:	000a      	movs	r2, r1
 80006b4:	e027      	b.n	8000706 <__aeabi_fadd+0x9a>
 80006b6:	2a00      	cmp	r2, #0
 80006b8:	d04d      	beq.n	8000756 <__aeabi_fadd+0xea>
 80006ba:	1b42      	subs	r2, r0, r5
 80006bc:	2d00      	cmp	r5, #0
 80006be:	d000      	beq.n	80006c2 <__aeabi_fadd+0x56>
 80006c0:	e0cc      	b.n	800085c <__aeabi_fadd+0x1f0>
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d100      	bne.n	80006c8 <__aeabi_fadd+0x5c>
 80006c6:	e079      	b.n	80007bc <__aeabi_fadd+0x150>
 80006c8:	1e54      	subs	r4, r2, #1
 80006ca:	2a01      	cmp	r2, #1
 80006cc:	d100      	bne.n	80006d0 <__aeabi_fadd+0x64>
 80006ce:	e128      	b.n	8000922 <__aeabi_fadd+0x2b6>
 80006d0:	2aff      	cmp	r2, #255	@ 0xff
 80006d2:	d100      	bne.n	80006d6 <__aeabi_fadd+0x6a>
 80006d4:	e097      	b.n	8000806 <__aeabi_fadd+0x19a>
 80006d6:	0022      	movs	r2, r4
 80006d8:	e0c5      	b.n	8000866 <__aeabi_fadd+0x1fa>
 80006da:	2a00      	cmp	r2, #0
 80006dc:	dc00      	bgt.n	80006e0 <__aeabi_fadd+0x74>
 80006de:	e096      	b.n	800080e <__aeabi_fadd+0x1a2>
 80006e0:	2800      	cmp	r0, #0
 80006e2:	d04f      	beq.n	8000784 <__aeabi_fadd+0x118>
 80006e4:	2dff      	cmp	r5, #255	@ 0xff
 80006e6:	d100      	bne.n	80006ea <__aeabi_fadd+0x7e>
 80006e8:	e08f      	b.n	800080a <__aeabi_fadd+0x19e>
 80006ea:	2180      	movs	r1, #128	@ 0x80
 80006ec:	04c9      	lsls	r1, r1, #19
 80006ee:	430e      	orrs	r6, r1
 80006f0:	2a1b      	cmp	r2, #27
 80006f2:	dd51      	ble.n	8000798 <__aeabi_fadd+0x12c>
 80006f4:	002a      	movs	r2, r5
 80006f6:	3301      	adds	r3, #1
 80006f8:	e018      	b.n	800072c <__aeabi_fadd+0xc0>
 80006fa:	2dff      	cmp	r5, #255	@ 0xff
 80006fc:	d100      	bne.n	8000700 <__aeabi_fadd+0x94>
 80006fe:	e084      	b.n	800080a <__aeabi_fadd+0x19e>
 8000700:	2180      	movs	r1, #128	@ 0x80
 8000702:	04c9      	lsls	r1, r1, #19
 8000704:	430e      	orrs	r6, r1
 8000706:	2101      	movs	r1, #1
 8000708:	2a1b      	cmp	r2, #27
 800070a:	dc08      	bgt.n	800071e <__aeabi_fadd+0xb2>
 800070c:	0031      	movs	r1, r6
 800070e:	2020      	movs	r0, #32
 8000710:	40d1      	lsrs	r1, r2
 8000712:	1a82      	subs	r2, r0, r2
 8000714:	4096      	lsls	r6, r2
 8000716:	0032      	movs	r2, r6
 8000718:	1e50      	subs	r0, r2, #1
 800071a:	4182      	sbcs	r2, r0
 800071c:	4311      	orrs	r1, r2
 800071e:	1a5b      	subs	r3, r3, r1
 8000720:	015a      	lsls	r2, r3, #5
 8000722:	d459      	bmi.n	80007d8 <__aeabi_fadd+0x16c>
 8000724:	2107      	movs	r1, #7
 8000726:	002a      	movs	r2, r5
 8000728:	4019      	ands	r1, r3
 800072a:	d049      	beq.n	80007c0 <__aeabi_fadd+0x154>
 800072c:	210f      	movs	r1, #15
 800072e:	4019      	ands	r1, r3
 8000730:	2904      	cmp	r1, #4
 8000732:	d000      	beq.n	8000736 <__aeabi_fadd+0xca>
 8000734:	3304      	adds	r3, #4
 8000736:	0159      	lsls	r1, r3, #5
 8000738:	d542      	bpl.n	80007c0 <__aeabi_fadd+0x154>
 800073a:	1c50      	adds	r0, r2, #1
 800073c:	2afe      	cmp	r2, #254	@ 0xfe
 800073e:	d03a      	beq.n	80007b6 <__aeabi_fadd+0x14a>
 8000740:	019b      	lsls	r3, r3, #6
 8000742:	b2c0      	uxtb	r0, r0
 8000744:	0a5b      	lsrs	r3, r3, #9
 8000746:	05c0      	lsls	r0, r0, #23
 8000748:	4318      	orrs	r0, r3
 800074a:	07e4      	lsls	r4, r4, #31
 800074c:	4320      	orrs	r0, r4
 800074e:	bcc0      	pop	{r6, r7}
 8000750:	46b9      	mov	r9, r7
 8000752:	46b0      	mov	r8, r6
 8000754:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000756:	20fe      	movs	r0, #254	@ 0xfe
 8000758:	4680      	mov	r8, r0
 800075a:	1c6f      	adds	r7, r5, #1
 800075c:	0038      	movs	r0, r7
 800075e:	4647      	mov	r7, r8
 8000760:	4207      	tst	r7, r0
 8000762:	d000      	beq.n	8000766 <__aeabi_fadd+0xfa>
 8000764:	e08e      	b.n	8000884 <__aeabi_fadd+0x218>
 8000766:	2d00      	cmp	r5, #0
 8000768:	d000      	beq.n	800076c <__aeabi_fadd+0x100>
 800076a:	e0b4      	b.n	80008d6 <__aeabi_fadd+0x26a>
 800076c:	2b00      	cmp	r3, #0
 800076e:	d100      	bne.n	8000772 <__aeabi_fadd+0x106>
 8000770:	e0db      	b.n	800092a <__aeabi_fadd+0x2be>
 8000772:	2e00      	cmp	r6, #0
 8000774:	d06c      	beq.n	8000850 <__aeabi_fadd+0x1e4>
 8000776:	1b98      	subs	r0, r3, r6
 8000778:	0145      	lsls	r5, r0, #5
 800077a:	d400      	bmi.n	800077e <__aeabi_fadd+0x112>
 800077c:	e0f7      	b.n	800096e <__aeabi_fadd+0x302>
 800077e:	000c      	movs	r4, r1
 8000780:	1af3      	subs	r3, r6, r3
 8000782:	e03d      	b.n	8000800 <__aeabi_fadd+0x194>
 8000784:	2e00      	cmp	r6, #0
 8000786:	d01b      	beq.n	80007c0 <__aeabi_fadd+0x154>
 8000788:	1e51      	subs	r1, r2, #1
 800078a:	2a01      	cmp	r2, #1
 800078c:	d100      	bne.n	8000790 <__aeabi_fadd+0x124>
 800078e:	e082      	b.n	8000896 <__aeabi_fadd+0x22a>
 8000790:	2aff      	cmp	r2, #255	@ 0xff
 8000792:	d03a      	beq.n	800080a <__aeabi_fadd+0x19e>
 8000794:	000a      	movs	r2, r1
 8000796:	e7ab      	b.n	80006f0 <__aeabi_fadd+0x84>
 8000798:	0031      	movs	r1, r6
 800079a:	2020      	movs	r0, #32
 800079c:	40d1      	lsrs	r1, r2
 800079e:	1a82      	subs	r2, r0, r2
 80007a0:	4096      	lsls	r6, r2
 80007a2:	0032      	movs	r2, r6
 80007a4:	1e50      	subs	r0, r2, #1
 80007a6:	4182      	sbcs	r2, r0
 80007a8:	430a      	orrs	r2, r1
 80007aa:	189b      	adds	r3, r3, r2
 80007ac:	015a      	lsls	r2, r3, #5
 80007ae:	d5b9      	bpl.n	8000724 <__aeabi_fadd+0xb8>
 80007b0:	1c6a      	adds	r2, r5, #1
 80007b2:	2dfe      	cmp	r5, #254	@ 0xfe
 80007b4:	d175      	bne.n	80008a2 <__aeabi_fadd+0x236>
 80007b6:	20ff      	movs	r0, #255	@ 0xff
 80007b8:	2300      	movs	r3, #0
 80007ba:	e7c4      	b.n	8000746 <__aeabi_fadd+0xda>
 80007bc:	000c      	movs	r4, r1
 80007be:	0033      	movs	r3, r6
 80007c0:	08db      	lsrs	r3, r3, #3
 80007c2:	2aff      	cmp	r2, #255	@ 0xff
 80007c4:	d146      	bne.n	8000854 <__aeabi_fadd+0x1e8>
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d0f5      	beq.n	80007b6 <__aeabi_fadd+0x14a>
 80007ca:	2280      	movs	r2, #128	@ 0x80
 80007cc:	03d2      	lsls	r2, r2, #15
 80007ce:	4313      	orrs	r3, r2
 80007d0:	025b      	lsls	r3, r3, #9
 80007d2:	20ff      	movs	r0, #255	@ 0xff
 80007d4:	0a5b      	lsrs	r3, r3, #9
 80007d6:	e7b6      	b.n	8000746 <__aeabi_fadd+0xda>
 80007d8:	019f      	lsls	r7, r3, #6
 80007da:	09bf      	lsrs	r7, r7, #6
 80007dc:	0038      	movs	r0, r7
 80007de:	f002 f8ef 	bl	80029c0 <__clzsi2>
 80007e2:	3805      	subs	r0, #5
 80007e4:	4087      	lsls	r7, r0
 80007e6:	4285      	cmp	r5, r0
 80007e8:	dc24      	bgt.n	8000834 <__aeabi_fadd+0x1c8>
 80007ea:	003b      	movs	r3, r7
 80007ec:	2120      	movs	r1, #32
 80007ee:	1b42      	subs	r2, r0, r5
 80007f0:	3201      	adds	r2, #1
 80007f2:	40d3      	lsrs	r3, r2
 80007f4:	1a8a      	subs	r2, r1, r2
 80007f6:	4097      	lsls	r7, r2
 80007f8:	1e7a      	subs	r2, r7, #1
 80007fa:	4197      	sbcs	r7, r2
 80007fc:	2200      	movs	r2, #0
 80007fe:	433b      	orrs	r3, r7
 8000800:	0759      	lsls	r1, r3, #29
 8000802:	d193      	bne.n	800072c <__aeabi_fadd+0xc0>
 8000804:	e797      	b.n	8000736 <__aeabi_fadd+0xca>
 8000806:	000c      	movs	r4, r1
 8000808:	0033      	movs	r3, r6
 800080a:	08db      	lsrs	r3, r3, #3
 800080c:	e7db      	b.n	80007c6 <__aeabi_fadd+0x15a>
 800080e:	2a00      	cmp	r2, #0
 8000810:	d014      	beq.n	800083c <__aeabi_fadd+0x1d0>
 8000812:	1b42      	subs	r2, r0, r5
 8000814:	2d00      	cmp	r5, #0
 8000816:	d14b      	bne.n	80008b0 <__aeabi_fadd+0x244>
 8000818:	2b00      	cmp	r3, #0
 800081a:	d0d0      	beq.n	80007be <__aeabi_fadd+0x152>
 800081c:	1e51      	subs	r1, r2, #1
 800081e:	2a01      	cmp	r2, #1
 8000820:	d100      	bne.n	8000824 <__aeabi_fadd+0x1b8>
 8000822:	e09e      	b.n	8000962 <__aeabi_fadd+0x2f6>
 8000824:	2aff      	cmp	r2, #255	@ 0xff
 8000826:	d0ef      	beq.n	8000808 <__aeabi_fadd+0x19c>
 8000828:	000a      	movs	r2, r1
 800082a:	2a1b      	cmp	r2, #27
 800082c:	dd5f      	ble.n	80008ee <__aeabi_fadd+0x282>
 800082e:	0002      	movs	r2, r0
 8000830:	1c73      	adds	r3, r6, #1
 8000832:	e77b      	b.n	800072c <__aeabi_fadd+0xc0>
 8000834:	4b50      	ldr	r3, [pc, #320]	@ (8000978 <__aeabi_fadd+0x30c>)
 8000836:	1a2a      	subs	r2, r5, r0
 8000838:	403b      	ands	r3, r7
 800083a:	e7e1      	b.n	8000800 <__aeabi_fadd+0x194>
 800083c:	21fe      	movs	r1, #254	@ 0xfe
 800083e:	1c6a      	adds	r2, r5, #1
 8000840:	4211      	tst	r1, r2
 8000842:	d13b      	bne.n	80008bc <__aeabi_fadd+0x250>
 8000844:	2d00      	cmp	r5, #0
 8000846:	d15d      	bne.n	8000904 <__aeabi_fadd+0x298>
 8000848:	2b00      	cmp	r3, #0
 800084a:	d07f      	beq.n	800094c <__aeabi_fadd+0x2e0>
 800084c:	2e00      	cmp	r6, #0
 800084e:	d17f      	bne.n	8000950 <__aeabi_fadd+0x2e4>
 8000850:	2200      	movs	r2, #0
 8000852:	08db      	lsrs	r3, r3, #3
 8000854:	025b      	lsls	r3, r3, #9
 8000856:	0a5b      	lsrs	r3, r3, #9
 8000858:	b2d0      	uxtb	r0, r2
 800085a:	e774      	b.n	8000746 <__aeabi_fadd+0xda>
 800085c:	28ff      	cmp	r0, #255	@ 0xff
 800085e:	d0d2      	beq.n	8000806 <__aeabi_fadd+0x19a>
 8000860:	2480      	movs	r4, #128	@ 0x80
 8000862:	04e4      	lsls	r4, r4, #19
 8000864:	4323      	orrs	r3, r4
 8000866:	2401      	movs	r4, #1
 8000868:	2a1b      	cmp	r2, #27
 800086a:	dc07      	bgt.n	800087c <__aeabi_fadd+0x210>
 800086c:	001c      	movs	r4, r3
 800086e:	2520      	movs	r5, #32
 8000870:	40d4      	lsrs	r4, r2
 8000872:	1aaa      	subs	r2, r5, r2
 8000874:	4093      	lsls	r3, r2
 8000876:	1e5a      	subs	r2, r3, #1
 8000878:	4193      	sbcs	r3, r2
 800087a:	431c      	orrs	r4, r3
 800087c:	1b33      	subs	r3, r6, r4
 800087e:	0005      	movs	r5, r0
 8000880:	000c      	movs	r4, r1
 8000882:	e74d      	b.n	8000720 <__aeabi_fadd+0xb4>
 8000884:	1b9f      	subs	r7, r3, r6
 8000886:	017a      	lsls	r2, r7, #5
 8000888:	d422      	bmi.n	80008d0 <__aeabi_fadd+0x264>
 800088a:	2f00      	cmp	r7, #0
 800088c:	d1a6      	bne.n	80007dc <__aeabi_fadd+0x170>
 800088e:	2400      	movs	r4, #0
 8000890:	2000      	movs	r0, #0
 8000892:	2300      	movs	r3, #0
 8000894:	e757      	b.n	8000746 <__aeabi_fadd+0xda>
 8000896:	199b      	adds	r3, r3, r6
 8000898:	2501      	movs	r5, #1
 800089a:	3201      	adds	r2, #1
 800089c:	0159      	lsls	r1, r3, #5
 800089e:	d400      	bmi.n	80008a2 <__aeabi_fadd+0x236>
 80008a0:	e740      	b.n	8000724 <__aeabi_fadd+0xb8>
 80008a2:	2101      	movs	r1, #1
 80008a4:	4835      	ldr	r0, [pc, #212]	@ (800097c <__aeabi_fadd+0x310>)
 80008a6:	4019      	ands	r1, r3
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	4003      	ands	r3, r0
 80008ac:	430b      	orrs	r3, r1
 80008ae:	e7a7      	b.n	8000800 <__aeabi_fadd+0x194>
 80008b0:	28ff      	cmp	r0, #255	@ 0xff
 80008b2:	d0a9      	beq.n	8000808 <__aeabi_fadd+0x19c>
 80008b4:	2180      	movs	r1, #128	@ 0x80
 80008b6:	04c9      	lsls	r1, r1, #19
 80008b8:	430b      	orrs	r3, r1
 80008ba:	e7b6      	b.n	800082a <__aeabi_fadd+0x1be>
 80008bc:	2aff      	cmp	r2, #255	@ 0xff
 80008be:	d100      	bne.n	80008c2 <__aeabi_fadd+0x256>
 80008c0:	e779      	b.n	80007b6 <__aeabi_fadd+0x14a>
 80008c2:	199b      	adds	r3, r3, r6
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	0759      	lsls	r1, r3, #29
 80008c8:	d000      	beq.n	80008cc <__aeabi_fadd+0x260>
 80008ca:	e72f      	b.n	800072c <__aeabi_fadd+0xc0>
 80008cc:	08db      	lsrs	r3, r3, #3
 80008ce:	e7c1      	b.n	8000854 <__aeabi_fadd+0x1e8>
 80008d0:	000c      	movs	r4, r1
 80008d2:	1af7      	subs	r7, r6, r3
 80008d4:	e782      	b.n	80007dc <__aeabi_fadd+0x170>
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d12c      	bne.n	8000934 <__aeabi_fadd+0x2c8>
 80008da:	2e00      	cmp	r6, #0
 80008dc:	d193      	bne.n	8000806 <__aeabi_fadd+0x19a>
 80008de:	2380      	movs	r3, #128	@ 0x80
 80008e0:	2400      	movs	r4, #0
 80008e2:	20ff      	movs	r0, #255	@ 0xff
 80008e4:	03db      	lsls	r3, r3, #15
 80008e6:	e72e      	b.n	8000746 <__aeabi_fadd+0xda>
 80008e8:	2501      	movs	r5, #1
 80008ea:	1b9b      	subs	r3, r3, r6
 80008ec:	e718      	b.n	8000720 <__aeabi_fadd+0xb4>
 80008ee:	0019      	movs	r1, r3
 80008f0:	2520      	movs	r5, #32
 80008f2:	40d1      	lsrs	r1, r2
 80008f4:	1aaa      	subs	r2, r5, r2
 80008f6:	4093      	lsls	r3, r2
 80008f8:	1e5a      	subs	r2, r3, #1
 80008fa:	4193      	sbcs	r3, r2
 80008fc:	430b      	orrs	r3, r1
 80008fe:	0005      	movs	r5, r0
 8000900:	199b      	adds	r3, r3, r6
 8000902:	e753      	b.n	80007ac <__aeabi_fadd+0x140>
 8000904:	2b00      	cmp	r3, #0
 8000906:	d100      	bne.n	800090a <__aeabi_fadd+0x29e>
 8000908:	e77e      	b.n	8000808 <__aeabi_fadd+0x19c>
 800090a:	2e00      	cmp	r6, #0
 800090c:	d100      	bne.n	8000910 <__aeabi_fadd+0x2a4>
 800090e:	e77c      	b.n	800080a <__aeabi_fadd+0x19e>
 8000910:	2280      	movs	r2, #128	@ 0x80
 8000912:	03d2      	lsls	r2, r2, #15
 8000914:	4591      	cmp	r9, r2
 8000916:	d302      	bcc.n	800091e <__aeabi_fadd+0x2b2>
 8000918:	4594      	cmp	ip, r2
 800091a:	d200      	bcs.n	800091e <__aeabi_fadd+0x2b2>
 800091c:	0033      	movs	r3, r6
 800091e:	08db      	lsrs	r3, r3, #3
 8000920:	e753      	b.n	80007ca <__aeabi_fadd+0x15e>
 8000922:	000c      	movs	r4, r1
 8000924:	1af3      	subs	r3, r6, r3
 8000926:	3501      	adds	r5, #1
 8000928:	e6fa      	b.n	8000720 <__aeabi_fadd+0xb4>
 800092a:	2e00      	cmp	r6, #0
 800092c:	d0af      	beq.n	800088e <__aeabi_fadd+0x222>
 800092e:	000c      	movs	r4, r1
 8000930:	0033      	movs	r3, r6
 8000932:	e78d      	b.n	8000850 <__aeabi_fadd+0x1e4>
 8000934:	2e00      	cmp	r6, #0
 8000936:	d100      	bne.n	800093a <__aeabi_fadd+0x2ce>
 8000938:	e767      	b.n	800080a <__aeabi_fadd+0x19e>
 800093a:	2280      	movs	r2, #128	@ 0x80
 800093c:	03d2      	lsls	r2, r2, #15
 800093e:	4591      	cmp	r9, r2
 8000940:	d3ed      	bcc.n	800091e <__aeabi_fadd+0x2b2>
 8000942:	4594      	cmp	ip, r2
 8000944:	d2eb      	bcs.n	800091e <__aeabi_fadd+0x2b2>
 8000946:	000c      	movs	r4, r1
 8000948:	0033      	movs	r3, r6
 800094a:	e7e8      	b.n	800091e <__aeabi_fadd+0x2b2>
 800094c:	0033      	movs	r3, r6
 800094e:	e77f      	b.n	8000850 <__aeabi_fadd+0x1e4>
 8000950:	199b      	adds	r3, r3, r6
 8000952:	2200      	movs	r2, #0
 8000954:	0159      	lsls	r1, r3, #5
 8000956:	d5b9      	bpl.n	80008cc <__aeabi_fadd+0x260>
 8000958:	4a07      	ldr	r2, [pc, #28]	@ (8000978 <__aeabi_fadd+0x30c>)
 800095a:	4013      	ands	r3, r2
 800095c:	08db      	lsrs	r3, r3, #3
 800095e:	2201      	movs	r2, #1
 8000960:	e778      	b.n	8000854 <__aeabi_fadd+0x1e8>
 8000962:	199b      	adds	r3, r3, r6
 8000964:	3201      	adds	r2, #1
 8000966:	3501      	adds	r5, #1
 8000968:	0159      	lsls	r1, r3, #5
 800096a:	d49a      	bmi.n	80008a2 <__aeabi_fadd+0x236>
 800096c:	e6da      	b.n	8000724 <__aeabi_fadd+0xb8>
 800096e:	1e03      	subs	r3, r0, #0
 8000970:	d08d      	beq.n	800088e <__aeabi_fadd+0x222>
 8000972:	08db      	lsrs	r3, r3, #3
 8000974:	e76e      	b.n	8000854 <__aeabi_fadd+0x1e8>
 8000976:	46c0      	nop			@ (mov r8, r8)
 8000978:	fbffffff 	.word	0xfbffffff
 800097c:	7dffffff 	.word	0x7dffffff

08000980 <__aeabi_fdiv>:
 8000980:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000982:	464f      	mov	r7, r9
 8000984:	4646      	mov	r6, r8
 8000986:	46d6      	mov	lr, sl
 8000988:	0244      	lsls	r4, r0, #9
 800098a:	b5c0      	push	{r6, r7, lr}
 800098c:	0047      	lsls	r7, r0, #1
 800098e:	1c0e      	adds	r6, r1, #0
 8000990:	0a64      	lsrs	r4, r4, #9
 8000992:	0e3f      	lsrs	r7, r7, #24
 8000994:	0fc5      	lsrs	r5, r0, #31
 8000996:	2f00      	cmp	r7, #0
 8000998:	d03c      	beq.n	8000a14 <__aeabi_fdiv+0x94>
 800099a:	2fff      	cmp	r7, #255	@ 0xff
 800099c:	d042      	beq.n	8000a24 <__aeabi_fdiv+0xa4>
 800099e:	2300      	movs	r3, #0
 80009a0:	2280      	movs	r2, #128	@ 0x80
 80009a2:	4699      	mov	r9, r3
 80009a4:	469a      	mov	sl, r3
 80009a6:	00e4      	lsls	r4, r4, #3
 80009a8:	04d2      	lsls	r2, r2, #19
 80009aa:	4314      	orrs	r4, r2
 80009ac:	3f7f      	subs	r7, #127	@ 0x7f
 80009ae:	0273      	lsls	r3, r6, #9
 80009b0:	0a5b      	lsrs	r3, r3, #9
 80009b2:	4698      	mov	r8, r3
 80009b4:	0073      	lsls	r3, r6, #1
 80009b6:	0e1b      	lsrs	r3, r3, #24
 80009b8:	0ff6      	lsrs	r6, r6, #31
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d01b      	beq.n	80009f6 <__aeabi_fdiv+0x76>
 80009be:	2bff      	cmp	r3, #255	@ 0xff
 80009c0:	d013      	beq.n	80009ea <__aeabi_fdiv+0x6a>
 80009c2:	4642      	mov	r2, r8
 80009c4:	2180      	movs	r1, #128	@ 0x80
 80009c6:	00d2      	lsls	r2, r2, #3
 80009c8:	04c9      	lsls	r1, r1, #19
 80009ca:	4311      	orrs	r1, r2
 80009cc:	4688      	mov	r8, r1
 80009ce:	2000      	movs	r0, #0
 80009d0:	3b7f      	subs	r3, #127	@ 0x7f
 80009d2:	0029      	movs	r1, r5
 80009d4:	1aff      	subs	r7, r7, r3
 80009d6:	464b      	mov	r3, r9
 80009d8:	4071      	eors	r1, r6
 80009da:	b2c9      	uxtb	r1, r1
 80009dc:	2b0f      	cmp	r3, #15
 80009de:	d900      	bls.n	80009e2 <__aeabi_fdiv+0x62>
 80009e0:	e0b5      	b.n	8000b4e <__aeabi_fdiv+0x1ce>
 80009e2:	4a74      	ldr	r2, [pc, #464]	@ (8000bb4 <__aeabi_fdiv+0x234>)
 80009e4:	009b      	lsls	r3, r3, #2
 80009e6:	58d3      	ldr	r3, [r2, r3]
 80009e8:	469f      	mov	pc, r3
 80009ea:	4643      	mov	r3, r8
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d13f      	bne.n	8000a70 <__aeabi_fdiv+0xf0>
 80009f0:	3fff      	subs	r7, #255	@ 0xff
 80009f2:	3302      	adds	r3, #2
 80009f4:	e003      	b.n	80009fe <__aeabi_fdiv+0x7e>
 80009f6:	4643      	mov	r3, r8
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d12d      	bne.n	8000a58 <__aeabi_fdiv+0xd8>
 80009fc:	2301      	movs	r3, #1
 80009fe:	0029      	movs	r1, r5
 8000a00:	464a      	mov	r2, r9
 8000a02:	4071      	eors	r1, r6
 8000a04:	b2c9      	uxtb	r1, r1
 8000a06:	431a      	orrs	r2, r3
 8000a08:	2a0e      	cmp	r2, #14
 8000a0a:	d838      	bhi.n	8000a7e <__aeabi_fdiv+0xfe>
 8000a0c:	486a      	ldr	r0, [pc, #424]	@ (8000bb8 <__aeabi_fdiv+0x238>)
 8000a0e:	0092      	lsls	r2, r2, #2
 8000a10:	5882      	ldr	r2, [r0, r2]
 8000a12:	4697      	mov	pc, r2
 8000a14:	2c00      	cmp	r4, #0
 8000a16:	d113      	bne.n	8000a40 <__aeabi_fdiv+0xc0>
 8000a18:	2304      	movs	r3, #4
 8000a1a:	4699      	mov	r9, r3
 8000a1c:	3b03      	subs	r3, #3
 8000a1e:	2700      	movs	r7, #0
 8000a20:	469a      	mov	sl, r3
 8000a22:	e7c4      	b.n	80009ae <__aeabi_fdiv+0x2e>
 8000a24:	2c00      	cmp	r4, #0
 8000a26:	d105      	bne.n	8000a34 <__aeabi_fdiv+0xb4>
 8000a28:	2308      	movs	r3, #8
 8000a2a:	4699      	mov	r9, r3
 8000a2c:	3b06      	subs	r3, #6
 8000a2e:	27ff      	movs	r7, #255	@ 0xff
 8000a30:	469a      	mov	sl, r3
 8000a32:	e7bc      	b.n	80009ae <__aeabi_fdiv+0x2e>
 8000a34:	230c      	movs	r3, #12
 8000a36:	4699      	mov	r9, r3
 8000a38:	3b09      	subs	r3, #9
 8000a3a:	27ff      	movs	r7, #255	@ 0xff
 8000a3c:	469a      	mov	sl, r3
 8000a3e:	e7b6      	b.n	80009ae <__aeabi_fdiv+0x2e>
 8000a40:	0020      	movs	r0, r4
 8000a42:	f001 ffbd 	bl	80029c0 <__clzsi2>
 8000a46:	2776      	movs	r7, #118	@ 0x76
 8000a48:	1f43      	subs	r3, r0, #5
 8000a4a:	409c      	lsls	r4, r3
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	427f      	negs	r7, r7
 8000a50:	4699      	mov	r9, r3
 8000a52:	469a      	mov	sl, r3
 8000a54:	1a3f      	subs	r7, r7, r0
 8000a56:	e7aa      	b.n	80009ae <__aeabi_fdiv+0x2e>
 8000a58:	4640      	mov	r0, r8
 8000a5a:	f001 ffb1 	bl	80029c0 <__clzsi2>
 8000a5e:	4642      	mov	r2, r8
 8000a60:	1f43      	subs	r3, r0, #5
 8000a62:	409a      	lsls	r2, r3
 8000a64:	2376      	movs	r3, #118	@ 0x76
 8000a66:	425b      	negs	r3, r3
 8000a68:	1a1b      	subs	r3, r3, r0
 8000a6a:	4690      	mov	r8, r2
 8000a6c:	2000      	movs	r0, #0
 8000a6e:	e7b0      	b.n	80009d2 <__aeabi_fdiv+0x52>
 8000a70:	2303      	movs	r3, #3
 8000a72:	464a      	mov	r2, r9
 8000a74:	431a      	orrs	r2, r3
 8000a76:	4691      	mov	r9, r2
 8000a78:	2003      	movs	r0, #3
 8000a7a:	33fc      	adds	r3, #252	@ 0xfc
 8000a7c:	e7a9      	b.n	80009d2 <__aeabi_fdiv+0x52>
 8000a7e:	000d      	movs	r5, r1
 8000a80:	20ff      	movs	r0, #255	@ 0xff
 8000a82:	2200      	movs	r2, #0
 8000a84:	05c0      	lsls	r0, r0, #23
 8000a86:	07ed      	lsls	r5, r5, #31
 8000a88:	4310      	orrs	r0, r2
 8000a8a:	4328      	orrs	r0, r5
 8000a8c:	bce0      	pop	{r5, r6, r7}
 8000a8e:	46ba      	mov	sl, r7
 8000a90:	46b1      	mov	r9, r6
 8000a92:	46a8      	mov	r8, r5
 8000a94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a96:	000d      	movs	r5, r1
 8000a98:	2000      	movs	r0, #0
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	e7f2      	b.n	8000a84 <__aeabi_fdiv+0x104>
 8000a9e:	4653      	mov	r3, sl
 8000aa0:	2b02      	cmp	r3, #2
 8000aa2:	d0ed      	beq.n	8000a80 <__aeabi_fdiv+0x100>
 8000aa4:	2b03      	cmp	r3, #3
 8000aa6:	d033      	beq.n	8000b10 <__aeabi_fdiv+0x190>
 8000aa8:	46a0      	mov	r8, r4
 8000aaa:	2b01      	cmp	r3, #1
 8000aac:	d105      	bne.n	8000aba <__aeabi_fdiv+0x13a>
 8000aae:	2000      	movs	r0, #0
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	e7e7      	b.n	8000a84 <__aeabi_fdiv+0x104>
 8000ab4:	0035      	movs	r5, r6
 8000ab6:	2803      	cmp	r0, #3
 8000ab8:	d07a      	beq.n	8000bb0 <__aeabi_fdiv+0x230>
 8000aba:	003b      	movs	r3, r7
 8000abc:	337f      	adds	r3, #127	@ 0x7f
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	dd2d      	ble.n	8000b1e <__aeabi_fdiv+0x19e>
 8000ac2:	4642      	mov	r2, r8
 8000ac4:	0752      	lsls	r2, r2, #29
 8000ac6:	d007      	beq.n	8000ad8 <__aeabi_fdiv+0x158>
 8000ac8:	220f      	movs	r2, #15
 8000aca:	4641      	mov	r1, r8
 8000acc:	400a      	ands	r2, r1
 8000ace:	2a04      	cmp	r2, #4
 8000ad0:	d002      	beq.n	8000ad8 <__aeabi_fdiv+0x158>
 8000ad2:	2204      	movs	r2, #4
 8000ad4:	4694      	mov	ip, r2
 8000ad6:	44e0      	add	r8, ip
 8000ad8:	4642      	mov	r2, r8
 8000ada:	0112      	lsls	r2, r2, #4
 8000adc:	d505      	bpl.n	8000aea <__aeabi_fdiv+0x16a>
 8000ade:	4642      	mov	r2, r8
 8000ae0:	4b36      	ldr	r3, [pc, #216]	@ (8000bbc <__aeabi_fdiv+0x23c>)
 8000ae2:	401a      	ands	r2, r3
 8000ae4:	003b      	movs	r3, r7
 8000ae6:	4690      	mov	r8, r2
 8000ae8:	3380      	adds	r3, #128	@ 0x80
 8000aea:	2bfe      	cmp	r3, #254	@ 0xfe
 8000aec:	dcc8      	bgt.n	8000a80 <__aeabi_fdiv+0x100>
 8000aee:	4642      	mov	r2, r8
 8000af0:	0192      	lsls	r2, r2, #6
 8000af2:	0a52      	lsrs	r2, r2, #9
 8000af4:	b2d8      	uxtb	r0, r3
 8000af6:	e7c5      	b.n	8000a84 <__aeabi_fdiv+0x104>
 8000af8:	2280      	movs	r2, #128	@ 0x80
 8000afa:	2500      	movs	r5, #0
 8000afc:	20ff      	movs	r0, #255	@ 0xff
 8000afe:	03d2      	lsls	r2, r2, #15
 8000b00:	e7c0      	b.n	8000a84 <__aeabi_fdiv+0x104>
 8000b02:	2280      	movs	r2, #128	@ 0x80
 8000b04:	03d2      	lsls	r2, r2, #15
 8000b06:	4214      	tst	r4, r2
 8000b08:	d002      	beq.n	8000b10 <__aeabi_fdiv+0x190>
 8000b0a:	4643      	mov	r3, r8
 8000b0c:	4213      	tst	r3, r2
 8000b0e:	d049      	beq.n	8000ba4 <__aeabi_fdiv+0x224>
 8000b10:	2280      	movs	r2, #128	@ 0x80
 8000b12:	03d2      	lsls	r2, r2, #15
 8000b14:	4322      	orrs	r2, r4
 8000b16:	0252      	lsls	r2, r2, #9
 8000b18:	20ff      	movs	r0, #255	@ 0xff
 8000b1a:	0a52      	lsrs	r2, r2, #9
 8000b1c:	e7b2      	b.n	8000a84 <__aeabi_fdiv+0x104>
 8000b1e:	2201      	movs	r2, #1
 8000b20:	1ad3      	subs	r3, r2, r3
 8000b22:	2b1b      	cmp	r3, #27
 8000b24:	dcc3      	bgt.n	8000aae <__aeabi_fdiv+0x12e>
 8000b26:	4642      	mov	r2, r8
 8000b28:	40da      	lsrs	r2, r3
 8000b2a:	4643      	mov	r3, r8
 8000b2c:	379e      	adds	r7, #158	@ 0x9e
 8000b2e:	40bb      	lsls	r3, r7
 8000b30:	1e59      	subs	r1, r3, #1
 8000b32:	418b      	sbcs	r3, r1
 8000b34:	431a      	orrs	r2, r3
 8000b36:	0753      	lsls	r3, r2, #29
 8000b38:	d004      	beq.n	8000b44 <__aeabi_fdiv+0x1c4>
 8000b3a:	230f      	movs	r3, #15
 8000b3c:	4013      	ands	r3, r2
 8000b3e:	2b04      	cmp	r3, #4
 8000b40:	d000      	beq.n	8000b44 <__aeabi_fdiv+0x1c4>
 8000b42:	3204      	adds	r2, #4
 8000b44:	0153      	lsls	r3, r2, #5
 8000b46:	d529      	bpl.n	8000b9c <__aeabi_fdiv+0x21c>
 8000b48:	2001      	movs	r0, #1
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	e79a      	b.n	8000a84 <__aeabi_fdiv+0x104>
 8000b4e:	4642      	mov	r2, r8
 8000b50:	0163      	lsls	r3, r4, #5
 8000b52:	0155      	lsls	r5, r2, #5
 8000b54:	42ab      	cmp	r3, r5
 8000b56:	d215      	bcs.n	8000b84 <__aeabi_fdiv+0x204>
 8000b58:	201b      	movs	r0, #27
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	3f01      	subs	r7, #1
 8000b5e:	2601      	movs	r6, #1
 8000b60:	001c      	movs	r4, r3
 8000b62:	0052      	lsls	r2, r2, #1
 8000b64:	005b      	lsls	r3, r3, #1
 8000b66:	2c00      	cmp	r4, #0
 8000b68:	db01      	blt.n	8000b6e <__aeabi_fdiv+0x1ee>
 8000b6a:	429d      	cmp	r5, r3
 8000b6c:	d801      	bhi.n	8000b72 <__aeabi_fdiv+0x1f2>
 8000b6e:	1b5b      	subs	r3, r3, r5
 8000b70:	4332      	orrs	r2, r6
 8000b72:	3801      	subs	r0, #1
 8000b74:	2800      	cmp	r0, #0
 8000b76:	d1f3      	bne.n	8000b60 <__aeabi_fdiv+0x1e0>
 8000b78:	1e58      	subs	r0, r3, #1
 8000b7a:	4183      	sbcs	r3, r0
 8000b7c:	4313      	orrs	r3, r2
 8000b7e:	4698      	mov	r8, r3
 8000b80:	000d      	movs	r5, r1
 8000b82:	e79a      	b.n	8000aba <__aeabi_fdiv+0x13a>
 8000b84:	201a      	movs	r0, #26
 8000b86:	2201      	movs	r2, #1
 8000b88:	1b5b      	subs	r3, r3, r5
 8000b8a:	e7e8      	b.n	8000b5e <__aeabi_fdiv+0x1de>
 8000b8c:	3b02      	subs	r3, #2
 8000b8e:	425a      	negs	r2, r3
 8000b90:	4153      	adcs	r3, r2
 8000b92:	425b      	negs	r3, r3
 8000b94:	0035      	movs	r5, r6
 8000b96:	2200      	movs	r2, #0
 8000b98:	b2d8      	uxtb	r0, r3
 8000b9a:	e773      	b.n	8000a84 <__aeabi_fdiv+0x104>
 8000b9c:	0192      	lsls	r2, r2, #6
 8000b9e:	2000      	movs	r0, #0
 8000ba0:	0a52      	lsrs	r2, r2, #9
 8000ba2:	e76f      	b.n	8000a84 <__aeabi_fdiv+0x104>
 8000ba4:	431a      	orrs	r2, r3
 8000ba6:	0252      	lsls	r2, r2, #9
 8000ba8:	0035      	movs	r5, r6
 8000baa:	20ff      	movs	r0, #255	@ 0xff
 8000bac:	0a52      	lsrs	r2, r2, #9
 8000bae:	e769      	b.n	8000a84 <__aeabi_fdiv+0x104>
 8000bb0:	4644      	mov	r4, r8
 8000bb2:	e7ad      	b.n	8000b10 <__aeabi_fdiv+0x190>
 8000bb4:	08009058 	.word	0x08009058
 8000bb8:	08009098 	.word	0x08009098
 8000bbc:	f7ffffff 	.word	0xf7ffffff

08000bc0 <__eqsf2>:
 8000bc0:	b570      	push	{r4, r5, r6, lr}
 8000bc2:	0042      	lsls	r2, r0, #1
 8000bc4:	024e      	lsls	r6, r1, #9
 8000bc6:	004c      	lsls	r4, r1, #1
 8000bc8:	0245      	lsls	r5, r0, #9
 8000bca:	0a6d      	lsrs	r5, r5, #9
 8000bcc:	0e12      	lsrs	r2, r2, #24
 8000bce:	0fc3      	lsrs	r3, r0, #31
 8000bd0:	0a76      	lsrs	r6, r6, #9
 8000bd2:	0e24      	lsrs	r4, r4, #24
 8000bd4:	0fc9      	lsrs	r1, r1, #31
 8000bd6:	2aff      	cmp	r2, #255	@ 0xff
 8000bd8:	d010      	beq.n	8000bfc <__eqsf2+0x3c>
 8000bda:	2cff      	cmp	r4, #255	@ 0xff
 8000bdc:	d00c      	beq.n	8000bf8 <__eqsf2+0x38>
 8000bde:	2001      	movs	r0, #1
 8000be0:	42a2      	cmp	r2, r4
 8000be2:	d10a      	bne.n	8000bfa <__eqsf2+0x3a>
 8000be4:	42b5      	cmp	r5, r6
 8000be6:	d108      	bne.n	8000bfa <__eqsf2+0x3a>
 8000be8:	428b      	cmp	r3, r1
 8000bea:	d00f      	beq.n	8000c0c <__eqsf2+0x4c>
 8000bec:	2a00      	cmp	r2, #0
 8000bee:	d104      	bne.n	8000bfa <__eqsf2+0x3a>
 8000bf0:	0028      	movs	r0, r5
 8000bf2:	1e43      	subs	r3, r0, #1
 8000bf4:	4198      	sbcs	r0, r3
 8000bf6:	e000      	b.n	8000bfa <__eqsf2+0x3a>
 8000bf8:	2001      	movs	r0, #1
 8000bfa:	bd70      	pop	{r4, r5, r6, pc}
 8000bfc:	2001      	movs	r0, #1
 8000bfe:	2cff      	cmp	r4, #255	@ 0xff
 8000c00:	d1fb      	bne.n	8000bfa <__eqsf2+0x3a>
 8000c02:	4335      	orrs	r5, r6
 8000c04:	d1f9      	bne.n	8000bfa <__eqsf2+0x3a>
 8000c06:	404b      	eors	r3, r1
 8000c08:	0018      	movs	r0, r3
 8000c0a:	e7f6      	b.n	8000bfa <__eqsf2+0x3a>
 8000c0c:	2000      	movs	r0, #0
 8000c0e:	e7f4      	b.n	8000bfa <__eqsf2+0x3a>

08000c10 <__gesf2>:
 8000c10:	b530      	push	{r4, r5, lr}
 8000c12:	0042      	lsls	r2, r0, #1
 8000c14:	0244      	lsls	r4, r0, #9
 8000c16:	024d      	lsls	r5, r1, #9
 8000c18:	0fc3      	lsrs	r3, r0, #31
 8000c1a:	0048      	lsls	r0, r1, #1
 8000c1c:	0a64      	lsrs	r4, r4, #9
 8000c1e:	0e12      	lsrs	r2, r2, #24
 8000c20:	0a6d      	lsrs	r5, r5, #9
 8000c22:	0e00      	lsrs	r0, r0, #24
 8000c24:	0fc9      	lsrs	r1, r1, #31
 8000c26:	2aff      	cmp	r2, #255	@ 0xff
 8000c28:	d019      	beq.n	8000c5e <__gesf2+0x4e>
 8000c2a:	28ff      	cmp	r0, #255	@ 0xff
 8000c2c:	d00b      	beq.n	8000c46 <__gesf2+0x36>
 8000c2e:	2a00      	cmp	r2, #0
 8000c30:	d11e      	bne.n	8000c70 <__gesf2+0x60>
 8000c32:	2800      	cmp	r0, #0
 8000c34:	d10b      	bne.n	8000c4e <__gesf2+0x3e>
 8000c36:	2d00      	cmp	r5, #0
 8000c38:	d027      	beq.n	8000c8a <__gesf2+0x7a>
 8000c3a:	2c00      	cmp	r4, #0
 8000c3c:	d134      	bne.n	8000ca8 <__gesf2+0x98>
 8000c3e:	2900      	cmp	r1, #0
 8000c40:	d02f      	beq.n	8000ca2 <__gesf2+0x92>
 8000c42:	0008      	movs	r0, r1
 8000c44:	bd30      	pop	{r4, r5, pc}
 8000c46:	2d00      	cmp	r5, #0
 8000c48:	d128      	bne.n	8000c9c <__gesf2+0x8c>
 8000c4a:	2a00      	cmp	r2, #0
 8000c4c:	d101      	bne.n	8000c52 <__gesf2+0x42>
 8000c4e:	2c00      	cmp	r4, #0
 8000c50:	d0f5      	beq.n	8000c3e <__gesf2+0x2e>
 8000c52:	428b      	cmp	r3, r1
 8000c54:	d107      	bne.n	8000c66 <__gesf2+0x56>
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d023      	beq.n	8000ca2 <__gesf2+0x92>
 8000c5a:	0018      	movs	r0, r3
 8000c5c:	e7f2      	b.n	8000c44 <__gesf2+0x34>
 8000c5e:	2c00      	cmp	r4, #0
 8000c60:	d11c      	bne.n	8000c9c <__gesf2+0x8c>
 8000c62:	28ff      	cmp	r0, #255	@ 0xff
 8000c64:	d014      	beq.n	8000c90 <__gesf2+0x80>
 8000c66:	1e58      	subs	r0, r3, #1
 8000c68:	2302      	movs	r3, #2
 8000c6a:	4018      	ands	r0, r3
 8000c6c:	3801      	subs	r0, #1
 8000c6e:	e7e9      	b.n	8000c44 <__gesf2+0x34>
 8000c70:	2800      	cmp	r0, #0
 8000c72:	d0f8      	beq.n	8000c66 <__gesf2+0x56>
 8000c74:	428b      	cmp	r3, r1
 8000c76:	d1f6      	bne.n	8000c66 <__gesf2+0x56>
 8000c78:	4282      	cmp	r2, r0
 8000c7a:	dcf4      	bgt.n	8000c66 <__gesf2+0x56>
 8000c7c:	dbeb      	blt.n	8000c56 <__gesf2+0x46>
 8000c7e:	42ac      	cmp	r4, r5
 8000c80:	d8f1      	bhi.n	8000c66 <__gesf2+0x56>
 8000c82:	2000      	movs	r0, #0
 8000c84:	42ac      	cmp	r4, r5
 8000c86:	d2dd      	bcs.n	8000c44 <__gesf2+0x34>
 8000c88:	e7e5      	b.n	8000c56 <__gesf2+0x46>
 8000c8a:	2c00      	cmp	r4, #0
 8000c8c:	d0da      	beq.n	8000c44 <__gesf2+0x34>
 8000c8e:	e7ea      	b.n	8000c66 <__gesf2+0x56>
 8000c90:	2d00      	cmp	r5, #0
 8000c92:	d103      	bne.n	8000c9c <__gesf2+0x8c>
 8000c94:	428b      	cmp	r3, r1
 8000c96:	d1e6      	bne.n	8000c66 <__gesf2+0x56>
 8000c98:	2000      	movs	r0, #0
 8000c9a:	e7d3      	b.n	8000c44 <__gesf2+0x34>
 8000c9c:	2002      	movs	r0, #2
 8000c9e:	4240      	negs	r0, r0
 8000ca0:	e7d0      	b.n	8000c44 <__gesf2+0x34>
 8000ca2:	2001      	movs	r0, #1
 8000ca4:	4240      	negs	r0, r0
 8000ca6:	e7cd      	b.n	8000c44 <__gesf2+0x34>
 8000ca8:	428b      	cmp	r3, r1
 8000caa:	d0e8      	beq.n	8000c7e <__gesf2+0x6e>
 8000cac:	e7db      	b.n	8000c66 <__gesf2+0x56>
 8000cae:	46c0      	nop			@ (mov r8, r8)

08000cb0 <__lesf2>:
 8000cb0:	b530      	push	{r4, r5, lr}
 8000cb2:	0042      	lsls	r2, r0, #1
 8000cb4:	0244      	lsls	r4, r0, #9
 8000cb6:	024d      	lsls	r5, r1, #9
 8000cb8:	0fc3      	lsrs	r3, r0, #31
 8000cba:	0048      	lsls	r0, r1, #1
 8000cbc:	0a64      	lsrs	r4, r4, #9
 8000cbe:	0e12      	lsrs	r2, r2, #24
 8000cc0:	0a6d      	lsrs	r5, r5, #9
 8000cc2:	0e00      	lsrs	r0, r0, #24
 8000cc4:	0fc9      	lsrs	r1, r1, #31
 8000cc6:	2aff      	cmp	r2, #255	@ 0xff
 8000cc8:	d01a      	beq.n	8000d00 <__lesf2+0x50>
 8000cca:	28ff      	cmp	r0, #255	@ 0xff
 8000ccc:	d00e      	beq.n	8000cec <__lesf2+0x3c>
 8000cce:	2a00      	cmp	r2, #0
 8000cd0:	d11e      	bne.n	8000d10 <__lesf2+0x60>
 8000cd2:	2800      	cmp	r0, #0
 8000cd4:	d10e      	bne.n	8000cf4 <__lesf2+0x44>
 8000cd6:	2d00      	cmp	r5, #0
 8000cd8:	d02a      	beq.n	8000d30 <__lesf2+0x80>
 8000cda:	2c00      	cmp	r4, #0
 8000cdc:	d00c      	beq.n	8000cf8 <__lesf2+0x48>
 8000cde:	428b      	cmp	r3, r1
 8000ce0:	d01d      	beq.n	8000d1e <__lesf2+0x6e>
 8000ce2:	1e58      	subs	r0, r3, #1
 8000ce4:	2302      	movs	r3, #2
 8000ce6:	4018      	ands	r0, r3
 8000ce8:	3801      	subs	r0, #1
 8000cea:	e010      	b.n	8000d0e <__lesf2+0x5e>
 8000cec:	2d00      	cmp	r5, #0
 8000cee:	d10d      	bne.n	8000d0c <__lesf2+0x5c>
 8000cf0:	2a00      	cmp	r2, #0
 8000cf2:	d120      	bne.n	8000d36 <__lesf2+0x86>
 8000cf4:	2c00      	cmp	r4, #0
 8000cf6:	d11e      	bne.n	8000d36 <__lesf2+0x86>
 8000cf8:	2900      	cmp	r1, #0
 8000cfa:	d023      	beq.n	8000d44 <__lesf2+0x94>
 8000cfc:	0008      	movs	r0, r1
 8000cfe:	e006      	b.n	8000d0e <__lesf2+0x5e>
 8000d00:	2c00      	cmp	r4, #0
 8000d02:	d103      	bne.n	8000d0c <__lesf2+0x5c>
 8000d04:	28ff      	cmp	r0, #255	@ 0xff
 8000d06:	d1ec      	bne.n	8000ce2 <__lesf2+0x32>
 8000d08:	2d00      	cmp	r5, #0
 8000d0a:	d017      	beq.n	8000d3c <__lesf2+0x8c>
 8000d0c:	2002      	movs	r0, #2
 8000d0e:	bd30      	pop	{r4, r5, pc}
 8000d10:	2800      	cmp	r0, #0
 8000d12:	d0e6      	beq.n	8000ce2 <__lesf2+0x32>
 8000d14:	428b      	cmp	r3, r1
 8000d16:	d1e4      	bne.n	8000ce2 <__lesf2+0x32>
 8000d18:	4282      	cmp	r2, r0
 8000d1a:	dce2      	bgt.n	8000ce2 <__lesf2+0x32>
 8000d1c:	db04      	blt.n	8000d28 <__lesf2+0x78>
 8000d1e:	42ac      	cmp	r4, r5
 8000d20:	d8df      	bhi.n	8000ce2 <__lesf2+0x32>
 8000d22:	2000      	movs	r0, #0
 8000d24:	42ac      	cmp	r4, r5
 8000d26:	d2f2      	bcs.n	8000d0e <__lesf2+0x5e>
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d00b      	beq.n	8000d44 <__lesf2+0x94>
 8000d2c:	0018      	movs	r0, r3
 8000d2e:	e7ee      	b.n	8000d0e <__lesf2+0x5e>
 8000d30:	2c00      	cmp	r4, #0
 8000d32:	d0ec      	beq.n	8000d0e <__lesf2+0x5e>
 8000d34:	e7d5      	b.n	8000ce2 <__lesf2+0x32>
 8000d36:	428b      	cmp	r3, r1
 8000d38:	d1d3      	bne.n	8000ce2 <__lesf2+0x32>
 8000d3a:	e7f5      	b.n	8000d28 <__lesf2+0x78>
 8000d3c:	2000      	movs	r0, #0
 8000d3e:	428b      	cmp	r3, r1
 8000d40:	d0e5      	beq.n	8000d0e <__lesf2+0x5e>
 8000d42:	e7ce      	b.n	8000ce2 <__lesf2+0x32>
 8000d44:	2001      	movs	r0, #1
 8000d46:	4240      	negs	r0, r0
 8000d48:	e7e1      	b.n	8000d0e <__lesf2+0x5e>
 8000d4a:	46c0      	nop			@ (mov r8, r8)

08000d4c <__aeabi_fmul>:
 8000d4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d4e:	464f      	mov	r7, r9
 8000d50:	4646      	mov	r6, r8
 8000d52:	46d6      	mov	lr, sl
 8000d54:	0243      	lsls	r3, r0, #9
 8000d56:	0a5b      	lsrs	r3, r3, #9
 8000d58:	0045      	lsls	r5, r0, #1
 8000d5a:	b5c0      	push	{r6, r7, lr}
 8000d5c:	4699      	mov	r9, r3
 8000d5e:	1c0f      	adds	r7, r1, #0
 8000d60:	0e2d      	lsrs	r5, r5, #24
 8000d62:	0fc6      	lsrs	r6, r0, #31
 8000d64:	2d00      	cmp	r5, #0
 8000d66:	d100      	bne.n	8000d6a <__aeabi_fmul+0x1e>
 8000d68:	e088      	b.n	8000e7c <__aeabi_fmul+0x130>
 8000d6a:	2dff      	cmp	r5, #255	@ 0xff
 8000d6c:	d100      	bne.n	8000d70 <__aeabi_fmul+0x24>
 8000d6e:	e08d      	b.n	8000e8c <__aeabi_fmul+0x140>
 8000d70:	2280      	movs	r2, #128	@ 0x80
 8000d72:	00db      	lsls	r3, r3, #3
 8000d74:	04d2      	lsls	r2, r2, #19
 8000d76:	431a      	orrs	r2, r3
 8000d78:	2300      	movs	r3, #0
 8000d7a:	4691      	mov	r9, r2
 8000d7c:	4698      	mov	r8, r3
 8000d7e:	469a      	mov	sl, r3
 8000d80:	3d7f      	subs	r5, #127	@ 0x7f
 8000d82:	027c      	lsls	r4, r7, #9
 8000d84:	007b      	lsls	r3, r7, #1
 8000d86:	0a64      	lsrs	r4, r4, #9
 8000d88:	0e1b      	lsrs	r3, r3, #24
 8000d8a:	0fff      	lsrs	r7, r7, #31
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d068      	beq.n	8000e62 <__aeabi_fmul+0x116>
 8000d90:	2bff      	cmp	r3, #255	@ 0xff
 8000d92:	d021      	beq.n	8000dd8 <__aeabi_fmul+0x8c>
 8000d94:	2280      	movs	r2, #128	@ 0x80
 8000d96:	00e4      	lsls	r4, r4, #3
 8000d98:	04d2      	lsls	r2, r2, #19
 8000d9a:	4314      	orrs	r4, r2
 8000d9c:	4642      	mov	r2, r8
 8000d9e:	3b7f      	subs	r3, #127	@ 0x7f
 8000da0:	195b      	adds	r3, r3, r5
 8000da2:	2100      	movs	r1, #0
 8000da4:	1c5d      	adds	r5, r3, #1
 8000da6:	2a0a      	cmp	r2, #10
 8000da8:	dc2e      	bgt.n	8000e08 <__aeabi_fmul+0xbc>
 8000daa:	407e      	eors	r6, r7
 8000dac:	4642      	mov	r2, r8
 8000dae:	2a02      	cmp	r2, #2
 8000db0:	dc23      	bgt.n	8000dfa <__aeabi_fmul+0xae>
 8000db2:	3a01      	subs	r2, #1
 8000db4:	2a01      	cmp	r2, #1
 8000db6:	d900      	bls.n	8000dba <__aeabi_fmul+0x6e>
 8000db8:	e0bd      	b.n	8000f36 <__aeabi_fmul+0x1ea>
 8000dba:	2902      	cmp	r1, #2
 8000dbc:	d06e      	beq.n	8000e9c <__aeabi_fmul+0x150>
 8000dbe:	2901      	cmp	r1, #1
 8000dc0:	d12c      	bne.n	8000e1c <__aeabi_fmul+0xd0>
 8000dc2:	2000      	movs	r0, #0
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	05c0      	lsls	r0, r0, #23
 8000dc8:	07f6      	lsls	r6, r6, #31
 8000dca:	4310      	orrs	r0, r2
 8000dcc:	4330      	orrs	r0, r6
 8000dce:	bce0      	pop	{r5, r6, r7}
 8000dd0:	46ba      	mov	sl, r7
 8000dd2:	46b1      	mov	r9, r6
 8000dd4:	46a8      	mov	r8, r5
 8000dd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000dd8:	002b      	movs	r3, r5
 8000dda:	33ff      	adds	r3, #255	@ 0xff
 8000ddc:	2c00      	cmp	r4, #0
 8000dde:	d065      	beq.n	8000eac <__aeabi_fmul+0x160>
 8000de0:	2203      	movs	r2, #3
 8000de2:	4641      	mov	r1, r8
 8000de4:	4311      	orrs	r1, r2
 8000de6:	0032      	movs	r2, r6
 8000de8:	3501      	adds	r5, #1
 8000dea:	4688      	mov	r8, r1
 8000dec:	407a      	eors	r2, r7
 8000dee:	35ff      	adds	r5, #255	@ 0xff
 8000df0:	290a      	cmp	r1, #10
 8000df2:	dd00      	ble.n	8000df6 <__aeabi_fmul+0xaa>
 8000df4:	e0d8      	b.n	8000fa8 <__aeabi_fmul+0x25c>
 8000df6:	0016      	movs	r6, r2
 8000df8:	2103      	movs	r1, #3
 8000dfa:	4640      	mov	r0, r8
 8000dfc:	2201      	movs	r2, #1
 8000dfe:	4082      	lsls	r2, r0
 8000e00:	20a6      	movs	r0, #166	@ 0xa6
 8000e02:	00c0      	lsls	r0, r0, #3
 8000e04:	4202      	tst	r2, r0
 8000e06:	d020      	beq.n	8000e4a <__aeabi_fmul+0xfe>
 8000e08:	4653      	mov	r3, sl
 8000e0a:	2b02      	cmp	r3, #2
 8000e0c:	d046      	beq.n	8000e9c <__aeabi_fmul+0x150>
 8000e0e:	2b03      	cmp	r3, #3
 8000e10:	d100      	bne.n	8000e14 <__aeabi_fmul+0xc8>
 8000e12:	e0bb      	b.n	8000f8c <__aeabi_fmul+0x240>
 8000e14:	4651      	mov	r1, sl
 8000e16:	464c      	mov	r4, r9
 8000e18:	2901      	cmp	r1, #1
 8000e1a:	d0d2      	beq.n	8000dc2 <__aeabi_fmul+0x76>
 8000e1c:	002b      	movs	r3, r5
 8000e1e:	337f      	adds	r3, #127	@ 0x7f
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	dd70      	ble.n	8000f06 <__aeabi_fmul+0x1ba>
 8000e24:	0762      	lsls	r2, r4, #29
 8000e26:	d004      	beq.n	8000e32 <__aeabi_fmul+0xe6>
 8000e28:	220f      	movs	r2, #15
 8000e2a:	4022      	ands	r2, r4
 8000e2c:	2a04      	cmp	r2, #4
 8000e2e:	d000      	beq.n	8000e32 <__aeabi_fmul+0xe6>
 8000e30:	3404      	adds	r4, #4
 8000e32:	0122      	lsls	r2, r4, #4
 8000e34:	d503      	bpl.n	8000e3e <__aeabi_fmul+0xf2>
 8000e36:	4b63      	ldr	r3, [pc, #396]	@ (8000fc4 <__aeabi_fmul+0x278>)
 8000e38:	401c      	ands	r4, r3
 8000e3a:	002b      	movs	r3, r5
 8000e3c:	3380      	adds	r3, #128	@ 0x80
 8000e3e:	2bfe      	cmp	r3, #254	@ 0xfe
 8000e40:	dc2c      	bgt.n	8000e9c <__aeabi_fmul+0x150>
 8000e42:	01a2      	lsls	r2, r4, #6
 8000e44:	0a52      	lsrs	r2, r2, #9
 8000e46:	b2d8      	uxtb	r0, r3
 8000e48:	e7bd      	b.n	8000dc6 <__aeabi_fmul+0x7a>
 8000e4a:	2090      	movs	r0, #144	@ 0x90
 8000e4c:	0080      	lsls	r0, r0, #2
 8000e4e:	4202      	tst	r2, r0
 8000e50:	d127      	bne.n	8000ea2 <__aeabi_fmul+0x156>
 8000e52:	38b9      	subs	r0, #185	@ 0xb9
 8000e54:	38ff      	subs	r0, #255	@ 0xff
 8000e56:	4210      	tst	r0, r2
 8000e58:	d06d      	beq.n	8000f36 <__aeabi_fmul+0x1ea>
 8000e5a:	003e      	movs	r6, r7
 8000e5c:	46a1      	mov	r9, r4
 8000e5e:	468a      	mov	sl, r1
 8000e60:	e7d2      	b.n	8000e08 <__aeabi_fmul+0xbc>
 8000e62:	2c00      	cmp	r4, #0
 8000e64:	d141      	bne.n	8000eea <__aeabi_fmul+0x19e>
 8000e66:	2301      	movs	r3, #1
 8000e68:	4642      	mov	r2, r8
 8000e6a:	431a      	orrs	r2, r3
 8000e6c:	4690      	mov	r8, r2
 8000e6e:	002b      	movs	r3, r5
 8000e70:	4642      	mov	r2, r8
 8000e72:	2101      	movs	r1, #1
 8000e74:	1c5d      	adds	r5, r3, #1
 8000e76:	2a0a      	cmp	r2, #10
 8000e78:	dd97      	ble.n	8000daa <__aeabi_fmul+0x5e>
 8000e7a:	e7c5      	b.n	8000e08 <__aeabi_fmul+0xbc>
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d126      	bne.n	8000ece <__aeabi_fmul+0x182>
 8000e80:	2304      	movs	r3, #4
 8000e82:	4698      	mov	r8, r3
 8000e84:	3b03      	subs	r3, #3
 8000e86:	2500      	movs	r5, #0
 8000e88:	469a      	mov	sl, r3
 8000e8a:	e77a      	b.n	8000d82 <__aeabi_fmul+0x36>
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d118      	bne.n	8000ec2 <__aeabi_fmul+0x176>
 8000e90:	2308      	movs	r3, #8
 8000e92:	4698      	mov	r8, r3
 8000e94:	3b06      	subs	r3, #6
 8000e96:	25ff      	movs	r5, #255	@ 0xff
 8000e98:	469a      	mov	sl, r3
 8000e9a:	e772      	b.n	8000d82 <__aeabi_fmul+0x36>
 8000e9c:	20ff      	movs	r0, #255	@ 0xff
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	e791      	b.n	8000dc6 <__aeabi_fmul+0x7a>
 8000ea2:	2280      	movs	r2, #128	@ 0x80
 8000ea4:	2600      	movs	r6, #0
 8000ea6:	20ff      	movs	r0, #255	@ 0xff
 8000ea8:	03d2      	lsls	r2, r2, #15
 8000eaa:	e78c      	b.n	8000dc6 <__aeabi_fmul+0x7a>
 8000eac:	4641      	mov	r1, r8
 8000eae:	2202      	movs	r2, #2
 8000eb0:	3501      	adds	r5, #1
 8000eb2:	4311      	orrs	r1, r2
 8000eb4:	4688      	mov	r8, r1
 8000eb6:	35ff      	adds	r5, #255	@ 0xff
 8000eb8:	290a      	cmp	r1, #10
 8000eba:	dca5      	bgt.n	8000e08 <__aeabi_fmul+0xbc>
 8000ebc:	2102      	movs	r1, #2
 8000ebe:	407e      	eors	r6, r7
 8000ec0:	e774      	b.n	8000dac <__aeabi_fmul+0x60>
 8000ec2:	230c      	movs	r3, #12
 8000ec4:	4698      	mov	r8, r3
 8000ec6:	3b09      	subs	r3, #9
 8000ec8:	25ff      	movs	r5, #255	@ 0xff
 8000eca:	469a      	mov	sl, r3
 8000ecc:	e759      	b.n	8000d82 <__aeabi_fmul+0x36>
 8000ece:	0018      	movs	r0, r3
 8000ed0:	f001 fd76 	bl	80029c0 <__clzsi2>
 8000ed4:	464a      	mov	r2, r9
 8000ed6:	1f43      	subs	r3, r0, #5
 8000ed8:	2576      	movs	r5, #118	@ 0x76
 8000eda:	409a      	lsls	r2, r3
 8000edc:	2300      	movs	r3, #0
 8000ede:	426d      	negs	r5, r5
 8000ee0:	4691      	mov	r9, r2
 8000ee2:	4698      	mov	r8, r3
 8000ee4:	469a      	mov	sl, r3
 8000ee6:	1a2d      	subs	r5, r5, r0
 8000ee8:	e74b      	b.n	8000d82 <__aeabi_fmul+0x36>
 8000eea:	0020      	movs	r0, r4
 8000eec:	f001 fd68 	bl	80029c0 <__clzsi2>
 8000ef0:	4642      	mov	r2, r8
 8000ef2:	1f43      	subs	r3, r0, #5
 8000ef4:	409c      	lsls	r4, r3
 8000ef6:	1a2b      	subs	r3, r5, r0
 8000ef8:	3b76      	subs	r3, #118	@ 0x76
 8000efa:	2100      	movs	r1, #0
 8000efc:	1c5d      	adds	r5, r3, #1
 8000efe:	2a0a      	cmp	r2, #10
 8000f00:	dc00      	bgt.n	8000f04 <__aeabi_fmul+0x1b8>
 8000f02:	e752      	b.n	8000daa <__aeabi_fmul+0x5e>
 8000f04:	e780      	b.n	8000e08 <__aeabi_fmul+0xbc>
 8000f06:	2201      	movs	r2, #1
 8000f08:	1ad3      	subs	r3, r2, r3
 8000f0a:	2b1b      	cmp	r3, #27
 8000f0c:	dd00      	ble.n	8000f10 <__aeabi_fmul+0x1c4>
 8000f0e:	e758      	b.n	8000dc2 <__aeabi_fmul+0x76>
 8000f10:	359e      	adds	r5, #158	@ 0x9e
 8000f12:	0022      	movs	r2, r4
 8000f14:	40ac      	lsls	r4, r5
 8000f16:	40da      	lsrs	r2, r3
 8000f18:	1e63      	subs	r3, r4, #1
 8000f1a:	419c      	sbcs	r4, r3
 8000f1c:	4322      	orrs	r2, r4
 8000f1e:	0753      	lsls	r3, r2, #29
 8000f20:	d004      	beq.n	8000f2c <__aeabi_fmul+0x1e0>
 8000f22:	230f      	movs	r3, #15
 8000f24:	4013      	ands	r3, r2
 8000f26:	2b04      	cmp	r3, #4
 8000f28:	d000      	beq.n	8000f2c <__aeabi_fmul+0x1e0>
 8000f2a:	3204      	adds	r2, #4
 8000f2c:	0153      	lsls	r3, r2, #5
 8000f2e:	d537      	bpl.n	8000fa0 <__aeabi_fmul+0x254>
 8000f30:	2001      	movs	r0, #1
 8000f32:	2200      	movs	r2, #0
 8000f34:	e747      	b.n	8000dc6 <__aeabi_fmul+0x7a>
 8000f36:	0c21      	lsrs	r1, r4, #16
 8000f38:	464a      	mov	r2, r9
 8000f3a:	0424      	lsls	r4, r4, #16
 8000f3c:	0c24      	lsrs	r4, r4, #16
 8000f3e:	0027      	movs	r7, r4
 8000f40:	0c10      	lsrs	r0, r2, #16
 8000f42:	0412      	lsls	r2, r2, #16
 8000f44:	0c12      	lsrs	r2, r2, #16
 8000f46:	4344      	muls	r4, r0
 8000f48:	4357      	muls	r7, r2
 8000f4a:	4348      	muls	r0, r1
 8000f4c:	4351      	muls	r1, r2
 8000f4e:	0c3a      	lsrs	r2, r7, #16
 8000f50:	1909      	adds	r1, r1, r4
 8000f52:	1852      	adds	r2, r2, r1
 8000f54:	4294      	cmp	r4, r2
 8000f56:	d903      	bls.n	8000f60 <__aeabi_fmul+0x214>
 8000f58:	2180      	movs	r1, #128	@ 0x80
 8000f5a:	0249      	lsls	r1, r1, #9
 8000f5c:	468c      	mov	ip, r1
 8000f5e:	4460      	add	r0, ip
 8000f60:	043f      	lsls	r7, r7, #16
 8000f62:	0411      	lsls	r1, r2, #16
 8000f64:	0c3f      	lsrs	r7, r7, #16
 8000f66:	19c9      	adds	r1, r1, r7
 8000f68:	018c      	lsls	r4, r1, #6
 8000f6a:	1e67      	subs	r7, r4, #1
 8000f6c:	41bc      	sbcs	r4, r7
 8000f6e:	0c12      	lsrs	r2, r2, #16
 8000f70:	0e89      	lsrs	r1, r1, #26
 8000f72:	1812      	adds	r2, r2, r0
 8000f74:	430c      	orrs	r4, r1
 8000f76:	0192      	lsls	r2, r2, #6
 8000f78:	4314      	orrs	r4, r2
 8000f7a:	0112      	lsls	r2, r2, #4
 8000f7c:	d50e      	bpl.n	8000f9c <__aeabi_fmul+0x250>
 8000f7e:	2301      	movs	r3, #1
 8000f80:	0862      	lsrs	r2, r4, #1
 8000f82:	401c      	ands	r4, r3
 8000f84:	4314      	orrs	r4, r2
 8000f86:	e749      	b.n	8000e1c <__aeabi_fmul+0xd0>
 8000f88:	003e      	movs	r6, r7
 8000f8a:	46a1      	mov	r9, r4
 8000f8c:	2280      	movs	r2, #128	@ 0x80
 8000f8e:	464b      	mov	r3, r9
 8000f90:	03d2      	lsls	r2, r2, #15
 8000f92:	431a      	orrs	r2, r3
 8000f94:	0252      	lsls	r2, r2, #9
 8000f96:	20ff      	movs	r0, #255	@ 0xff
 8000f98:	0a52      	lsrs	r2, r2, #9
 8000f9a:	e714      	b.n	8000dc6 <__aeabi_fmul+0x7a>
 8000f9c:	001d      	movs	r5, r3
 8000f9e:	e73d      	b.n	8000e1c <__aeabi_fmul+0xd0>
 8000fa0:	0192      	lsls	r2, r2, #6
 8000fa2:	2000      	movs	r0, #0
 8000fa4:	0a52      	lsrs	r2, r2, #9
 8000fa6:	e70e      	b.n	8000dc6 <__aeabi_fmul+0x7a>
 8000fa8:	290f      	cmp	r1, #15
 8000faa:	d1ed      	bne.n	8000f88 <__aeabi_fmul+0x23c>
 8000fac:	2280      	movs	r2, #128	@ 0x80
 8000fae:	464b      	mov	r3, r9
 8000fb0:	03d2      	lsls	r2, r2, #15
 8000fb2:	4213      	tst	r3, r2
 8000fb4:	d0ea      	beq.n	8000f8c <__aeabi_fmul+0x240>
 8000fb6:	4214      	tst	r4, r2
 8000fb8:	d1e8      	bne.n	8000f8c <__aeabi_fmul+0x240>
 8000fba:	003e      	movs	r6, r7
 8000fbc:	20ff      	movs	r0, #255	@ 0xff
 8000fbe:	4322      	orrs	r2, r4
 8000fc0:	e701      	b.n	8000dc6 <__aeabi_fmul+0x7a>
 8000fc2:	46c0      	nop			@ (mov r8, r8)
 8000fc4:	f7ffffff 	.word	0xf7ffffff

08000fc8 <__aeabi_fsub>:
 8000fc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000fca:	4647      	mov	r7, r8
 8000fcc:	46ce      	mov	lr, r9
 8000fce:	024e      	lsls	r6, r1, #9
 8000fd0:	0243      	lsls	r3, r0, #9
 8000fd2:	0045      	lsls	r5, r0, #1
 8000fd4:	0a72      	lsrs	r2, r6, #9
 8000fd6:	0fc4      	lsrs	r4, r0, #31
 8000fd8:	0048      	lsls	r0, r1, #1
 8000fda:	b580      	push	{r7, lr}
 8000fdc:	4694      	mov	ip, r2
 8000fde:	0a5f      	lsrs	r7, r3, #9
 8000fe0:	0e2d      	lsrs	r5, r5, #24
 8000fe2:	099b      	lsrs	r3, r3, #6
 8000fe4:	0e00      	lsrs	r0, r0, #24
 8000fe6:	0fc9      	lsrs	r1, r1, #31
 8000fe8:	09b6      	lsrs	r6, r6, #6
 8000fea:	28ff      	cmp	r0, #255	@ 0xff
 8000fec:	d024      	beq.n	8001038 <__aeabi_fsub+0x70>
 8000fee:	2201      	movs	r2, #1
 8000ff0:	4051      	eors	r1, r2
 8000ff2:	1a2a      	subs	r2, r5, r0
 8000ff4:	428c      	cmp	r4, r1
 8000ff6:	d00f      	beq.n	8001018 <__aeabi_fsub+0x50>
 8000ff8:	2a00      	cmp	r2, #0
 8000ffa:	dc00      	bgt.n	8000ffe <__aeabi_fsub+0x36>
 8000ffc:	e16a      	b.n	80012d4 <__aeabi_fsub+0x30c>
 8000ffe:	2800      	cmp	r0, #0
 8001000:	d135      	bne.n	800106e <__aeabi_fsub+0xa6>
 8001002:	2e00      	cmp	r6, #0
 8001004:	d100      	bne.n	8001008 <__aeabi_fsub+0x40>
 8001006:	e0a2      	b.n	800114e <__aeabi_fsub+0x186>
 8001008:	1e51      	subs	r1, r2, #1
 800100a:	2a01      	cmp	r2, #1
 800100c:	d100      	bne.n	8001010 <__aeabi_fsub+0x48>
 800100e:	e124      	b.n	800125a <__aeabi_fsub+0x292>
 8001010:	2aff      	cmp	r2, #255	@ 0xff
 8001012:	d021      	beq.n	8001058 <__aeabi_fsub+0x90>
 8001014:	000a      	movs	r2, r1
 8001016:	e02f      	b.n	8001078 <__aeabi_fsub+0xb0>
 8001018:	2a00      	cmp	r2, #0
 800101a:	dc00      	bgt.n	800101e <__aeabi_fsub+0x56>
 800101c:	e167      	b.n	80012ee <__aeabi_fsub+0x326>
 800101e:	2800      	cmp	r0, #0
 8001020:	d05e      	beq.n	80010e0 <__aeabi_fsub+0x118>
 8001022:	2dff      	cmp	r5, #255	@ 0xff
 8001024:	d018      	beq.n	8001058 <__aeabi_fsub+0x90>
 8001026:	2180      	movs	r1, #128	@ 0x80
 8001028:	04c9      	lsls	r1, r1, #19
 800102a:	430e      	orrs	r6, r1
 800102c:	2a1b      	cmp	r2, #27
 800102e:	dc00      	bgt.n	8001032 <__aeabi_fsub+0x6a>
 8001030:	e076      	b.n	8001120 <__aeabi_fsub+0x158>
 8001032:	002a      	movs	r2, r5
 8001034:	3301      	adds	r3, #1
 8001036:	e032      	b.n	800109e <__aeabi_fsub+0xd6>
 8001038:	002a      	movs	r2, r5
 800103a:	3aff      	subs	r2, #255	@ 0xff
 800103c:	4691      	mov	r9, r2
 800103e:	2e00      	cmp	r6, #0
 8001040:	d042      	beq.n	80010c8 <__aeabi_fsub+0x100>
 8001042:	428c      	cmp	r4, r1
 8001044:	d055      	beq.n	80010f2 <__aeabi_fsub+0x12a>
 8001046:	464a      	mov	r2, r9
 8001048:	2a00      	cmp	r2, #0
 800104a:	d100      	bne.n	800104e <__aeabi_fsub+0x86>
 800104c:	e09c      	b.n	8001188 <__aeabi_fsub+0x1c0>
 800104e:	2d00      	cmp	r5, #0
 8001050:	d100      	bne.n	8001054 <__aeabi_fsub+0x8c>
 8001052:	e077      	b.n	8001144 <__aeabi_fsub+0x17c>
 8001054:	000c      	movs	r4, r1
 8001056:	0033      	movs	r3, r6
 8001058:	08db      	lsrs	r3, r3, #3
 800105a:	2b00      	cmp	r3, #0
 800105c:	d100      	bne.n	8001060 <__aeabi_fsub+0x98>
 800105e:	e06e      	b.n	800113e <__aeabi_fsub+0x176>
 8001060:	2280      	movs	r2, #128	@ 0x80
 8001062:	03d2      	lsls	r2, r2, #15
 8001064:	4313      	orrs	r3, r2
 8001066:	025b      	lsls	r3, r3, #9
 8001068:	20ff      	movs	r0, #255	@ 0xff
 800106a:	0a5b      	lsrs	r3, r3, #9
 800106c:	e024      	b.n	80010b8 <__aeabi_fsub+0xf0>
 800106e:	2dff      	cmp	r5, #255	@ 0xff
 8001070:	d0f2      	beq.n	8001058 <__aeabi_fsub+0x90>
 8001072:	2180      	movs	r1, #128	@ 0x80
 8001074:	04c9      	lsls	r1, r1, #19
 8001076:	430e      	orrs	r6, r1
 8001078:	2101      	movs	r1, #1
 800107a:	2a1b      	cmp	r2, #27
 800107c:	dc08      	bgt.n	8001090 <__aeabi_fsub+0xc8>
 800107e:	0031      	movs	r1, r6
 8001080:	2020      	movs	r0, #32
 8001082:	40d1      	lsrs	r1, r2
 8001084:	1a82      	subs	r2, r0, r2
 8001086:	4096      	lsls	r6, r2
 8001088:	0032      	movs	r2, r6
 800108a:	1e50      	subs	r0, r2, #1
 800108c:	4182      	sbcs	r2, r0
 800108e:	4311      	orrs	r1, r2
 8001090:	1a5b      	subs	r3, r3, r1
 8001092:	015a      	lsls	r2, r3, #5
 8001094:	d460      	bmi.n	8001158 <__aeabi_fsub+0x190>
 8001096:	2107      	movs	r1, #7
 8001098:	002a      	movs	r2, r5
 800109a:	4019      	ands	r1, r3
 800109c:	d057      	beq.n	800114e <__aeabi_fsub+0x186>
 800109e:	210f      	movs	r1, #15
 80010a0:	4019      	ands	r1, r3
 80010a2:	2904      	cmp	r1, #4
 80010a4:	d000      	beq.n	80010a8 <__aeabi_fsub+0xe0>
 80010a6:	3304      	adds	r3, #4
 80010a8:	0159      	lsls	r1, r3, #5
 80010aa:	d550      	bpl.n	800114e <__aeabi_fsub+0x186>
 80010ac:	1c50      	adds	r0, r2, #1
 80010ae:	2afe      	cmp	r2, #254	@ 0xfe
 80010b0:	d045      	beq.n	800113e <__aeabi_fsub+0x176>
 80010b2:	019b      	lsls	r3, r3, #6
 80010b4:	b2c0      	uxtb	r0, r0
 80010b6:	0a5b      	lsrs	r3, r3, #9
 80010b8:	05c0      	lsls	r0, r0, #23
 80010ba:	4318      	orrs	r0, r3
 80010bc:	07e4      	lsls	r4, r4, #31
 80010be:	4320      	orrs	r0, r4
 80010c0:	bcc0      	pop	{r6, r7}
 80010c2:	46b9      	mov	r9, r7
 80010c4:	46b0      	mov	r8, r6
 80010c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80010c8:	2201      	movs	r2, #1
 80010ca:	4051      	eors	r1, r2
 80010cc:	428c      	cmp	r4, r1
 80010ce:	d1ba      	bne.n	8001046 <__aeabi_fsub+0x7e>
 80010d0:	464a      	mov	r2, r9
 80010d2:	2a00      	cmp	r2, #0
 80010d4:	d010      	beq.n	80010f8 <__aeabi_fsub+0x130>
 80010d6:	2d00      	cmp	r5, #0
 80010d8:	d100      	bne.n	80010dc <__aeabi_fsub+0x114>
 80010da:	e098      	b.n	800120e <__aeabi_fsub+0x246>
 80010dc:	2300      	movs	r3, #0
 80010de:	e7bb      	b.n	8001058 <__aeabi_fsub+0x90>
 80010e0:	2e00      	cmp	r6, #0
 80010e2:	d034      	beq.n	800114e <__aeabi_fsub+0x186>
 80010e4:	1e51      	subs	r1, r2, #1
 80010e6:	2a01      	cmp	r2, #1
 80010e8:	d06e      	beq.n	80011c8 <__aeabi_fsub+0x200>
 80010ea:	2aff      	cmp	r2, #255	@ 0xff
 80010ec:	d0b4      	beq.n	8001058 <__aeabi_fsub+0x90>
 80010ee:	000a      	movs	r2, r1
 80010f0:	e79c      	b.n	800102c <__aeabi_fsub+0x64>
 80010f2:	2a00      	cmp	r2, #0
 80010f4:	d000      	beq.n	80010f8 <__aeabi_fsub+0x130>
 80010f6:	e088      	b.n	800120a <__aeabi_fsub+0x242>
 80010f8:	20fe      	movs	r0, #254	@ 0xfe
 80010fa:	1c6a      	adds	r2, r5, #1
 80010fc:	4210      	tst	r0, r2
 80010fe:	d000      	beq.n	8001102 <__aeabi_fsub+0x13a>
 8001100:	e092      	b.n	8001228 <__aeabi_fsub+0x260>
 8001102:	2d00      	cmp	r5, #0
 8001104:	d000      	beq.n	8001108 <__aeabi_fsub+0x140>
 8001106:	e0a4      	b.n	8001252 <__aeabi_fsub+0x28a>
 8001108:	2b00      	cmp	r3, #0
 800110a:	d100      	bne.n	800110e <__aeabi_fsub+0x146>
 800110c:	e0cb      	b.n	80012a6 <__aeabi_fsub+0x2de>
 800110e:	2e00      	cmp	r6, #0
 8001110:	d000      	beq.n	8001114 <__aeabi_fsub+0x14c>
 8001112:	e0ca      	b.n	80012aa <__aeabi_fsub+0x2e2>
 8001114:	2200      	movs	r2, #0
 8001116:	08db      	lsrs	r3, r3, #3
 8001118:	025b      	lsls	r3, r3, #9
 800111a:	0a5b      	lsrs	r3, r3, #9
 800111c:	b2d0      	uxtb	r0, r2
 800111e:	e7cb      	b.n	80010b8 <__aeabi_fsub+0xf0>
 8001120:	0031      	movs	r1, r6
 8001122:	2020      	movs	r0, #32
 8001124:	40d1      	lsrs	r1, r2
 8001126:	1a82      	subs	r2, r0, r2
 8001128:	4096      	lsls	r6, r2
 800112a:	0032      	movs	r2, r6
 800112c:	1e50      	subs	r0, r2, #1
 800112e:	4182      	sbcs	r2, r0
 8001130:	430a      	orrs	r2, r1
 8001132:	189b      	adds	r3, r3, r2
 8001134:	015a      	lsls	r2, r3, #5
 8001136:	d5ae      	bpl.n	8001096 <__aeabi_fsub+0xce>
 8001138:	1c6a      	adds	r2, r5, #1
 800113a:	2dfe      	cmp	r5, #254	@ 0xfe
 800113c:	d14a      	bne.n	80011d4 <__aeabi_fsub+0x20c>
 800113e:	20ff      	movs	r0, #255	@ 0xff
 8001140:	2300      	movs	r3, #0
 8001142:	e7b9      	b.n	80010b8 <__aeabi_fsub+0xf0>
 8001144:	22ff      	movs	r2, #255	@ 0xff
 8001146:	2b00      	cmp	r3, #0
 8001148:	d14b      	bne.n	80011e2 <__aeabi_fsub+0x21a>
 800114a:	000c      	movs	r4, r1
 800114c:	0033      	movs	r3, r6
 800114e:	08db      	lsrs	r3, r3, #3
 8001150:	2aff      	cmp	r2, #255	@ 0xff
 8001152:	d100      	bne.n	8001156 <__aeabi_fsub+0x18e>
 8001154:	e781      	b.n	800105a <__aeabi_fsub+0x92>
 8001156:	e7df      	b.n	8001118 <__aeabi_fsub+0x150>
 8001158:	019f      	lsls	r7, r3, #6
 800115a:	09bf      	lsrs	r7, r7, #6
 800115c:	0038      	movs	r0, r7
 800115e:	f001 fc2f 	bl	80029c0 <__clzsi2>
 8001162:	3805      	subs	r0, #5
 8001164:	4087      	lsls	r7, r0
 8001166:	4285      	cmp	r5, r0
 8001168:	dc21      	bgt.n	80011ae <__aeabi_fsub+0x1e6>
 800116a:	003b      	movs	r3, r7
 800116c:	2120      	movs	r1, #32
 800116e:	1b42      	subs	r2, r0, r5
 8001170:	3201      	adds	r2, #1
 8001172:	40d3      	lsrs	r3, r2
 8001174:	1a8a      	subs	r2, r1, r2
 8001176:	4097      	lsls	r7, r2
 8001178:	1e7a      	subs	r2, r7, #1
 800117a:	4197      	sbcs	r7, r2
 800117c:	2200      	movs	r2, #0
 800117e:	433b      	orrs	r3, r7
 8001180:	0759      	lsls	r1, r3, #29
 8001182:	d000      	beq.n	8001186 <__aeabi_fsub+0x1be>
 8001184:	e78b      	b.n	800109e <__aeabi_fsub+0xd6>
 8001186:	e78f      	b.n	80010a8 <__aeabi_fsub+0xe0>
 8001188:	20fe      	movs	r0, #254	@ 0xfe
 800118a:	1c6a      	adds	r2, r5, #1
 800118c:	4210      	tst	r0, r2
 800118e:	d112      	bne.n	80011b6 <__aeabi_fsub+0x1ee>
 8001190:	2d00      	cmp	r5, #0
 8001192:	d152      	bne.n	800123a <__aeabi_fsub+0x272>
 8001194:	2b00      	cmp	r3, #0
 8001196:	d07c      	beq.n	8001292 <__aeabi_fsub+0x2ca>
 8001198:	2e00      	cmp	r6, #0
 800119a:	d0bb      	beq.n	8001114 <__aeabi_fsub+0x14c>
 800119c:	1b9a      	subs	r2, r3, r6
 800119e:	0150      	lsls	r0, r2, #5
 80011a0:	d400      	bmi.n	80011a4 <__aeabi_fsub+0x1dc>
 80011a2:	e08b      	b.n	80012bc <__aeabi_fsub+0x2f4>
 80011a4:	2401      	movs	r4, #1
 80011a6:	2200      	movs	r2, #0
 80011a8:	1af3      	subs	r3, r6, r3
 80011aa:	400c      	ands	r4, r1
 80011ac:	e7e8      	b.n	8001180 <__aeabi_fsub+0x1b8>
 80011ae:	4b56      	ldr	r3, [pc, #344]	@ (8001308 <__aeabi_fsub+0x340>)
 80011b0:	1a2a      	subs	r2, r5, r0
 80011b2:	403b      	ands	r3, r7
 80011b4:	e7e4      	b.n	8001180 <__aeabi_fsub+0x1b8>
 80011b6:	1b9f      	subs	r7, r3, r6
 80011b8:	017a      	lsls	r2, r7, #5
 80011ba:	d446      	bmi.n	800124a <__aeabi_fsub+0x282>
 80011bc:	2f00      	cmp	r7, #0
 80011be:	d1cd      	bne.n	800115c <__aeabi_fsub+0x194>
 80011c0:	2400      	movs	r4, #0
 80011c2:	2000      	movs	r0, #0
 80011c4:	2300      	movs	r3, #0
 80011c6:	e777      	b.n	80010b8 <__aeabi_fsub+0xf0>
 80011c8:	199b      	adds	r3, r3, r6
 80011ca:	2501      	movs	r5, #1
 80011cc:	3201      	adds	r2, #1
 80011ce:	0159      	lsls	r1, r3, #5
 80011d0:	d400      	bmi.n	80011d4 <__aeabi_fsub+0x20c>
 80011d2:	e760      	b.n	8001096 <__aeabi_fsub+0xce>
 80011d4:	2101      	movs	r1, #1
 80011d6:	484d      	ldr	r0, [pc, #308]	@ (800130c <__aeabi_fsub+0x344>)
 80011d8:	4019      	ands	r1, r3
 80011da:	085b      	lsrs	r3, r3, #1
 80011dc:	4003      	ands	r3, r0
 80011de:	430b      	orrs	r3, r1
 80011e0:	e7ce      	b.n	8001180 <__aeabi_fsub+0x1b8>
 80011e2:	1e57      	subs	r7, r2, #1
 80011e4:	2a01      	cmp	r2, #1
 80011e6:	d05a      	beq.n	800129e <__aeabi_fsub+0x2d6>
 80011e8:	000c      	movs	r4, r1
 80011ea:	2aff      	cmp	r2, #255	@ 0xff
 80011ec:	d033      	beq.n	8001256 <__aeabi_fsub+0x28e>
 80011ee:	2201      	movs	r2, #1
 80011f0:	2f1b      	cmp	r7, #27
 80011f2:	dc07      	bgt.n	8001204 <__aeabi_fsub+0x23c>
 80011f4:	2120      	movs	r1, #32
 80011f6:	1bc9      	subs	r1, r1, r7
 80011f8:	001a      	movs	r2, r3
 80011fa:	408b      	lsls	r3, r1
 80011fc:	40fa      	lsrs	r2, r7
 80011fe:	1e59      	subs	r1, r3, #1
 8001200:	418b      	sbcs	r3, r1
 8001202:	431a      	orrs	r2, r3
 8001204:	0005      	movs	r5, r0
 8001206:	1ab3      	subs	r3, r6, r2
 8001208:	e743      	b.n	8001092 <__aeabi_fsub+0xca>
 800120a:	2d00      	cmp	r5, #0
 800120c:	d123      	bne.n	8001256 <__aeabi_fsub+0x28e>
 800120e:	22ff      	movs	r2, #255	@ 0xff
 8001210:	2b00      	cmp	r3, #0
 8001212:	d09b      	beq.n	800114c <__aeabi_fsub+0x184>
 8001214:	1e51      	subs	r1, r2, #1
 8001216:	2a01      	cmp	r2, #1
 8001218:	d0d6      	beq.n	80011c8 <__aeabi_fsub+0x200>
 800121a:	2aff      	cmp	r2, #255	@ 0xff
 800121c:	d01b      	beq.n	8001256 <__aeabi_fsub+0x28e>
 800121e:	291b      	cmp	r1, #27
 8001220:	dd2c      	ble.n	800127c <__aeabi_fsub+0x2b4>
 8001222:	0002      	movs	r2, r0
 8001224:	1c73      	adds	r3, r6, #1
 8001226:	e73a      	b.n	800109e <__aeabi_fsub+0xd6>
 8001228:	2aff      	cmp	r2, #255	@ 0xff
 800122a:	d088      	beq.n	800113e <__aeabi_fsub+0x176>
 800122c:	199b      	adds	r3, r3, r6
 800122e:	085b      	lsrs	r3, r3, #1
 8001230:	0759      	lsls	r1, r3, #29
 8001232:	d000      	beq.n	8001236 <__aeabi_fsub+0x26e>
 8001234:	e733      	b.n	800109e <__aeabi_fsub+0xd6>
 8001236:	08db      	lsrs	r3, r3, #3
 8001238:	e76e      	b.n	8001118 <__aeabi_fsub+0x150>
 800123a:	2b00      	cmp	r3, #0
 800123c:	d110      	bne.n	8001260 <__aeabi_fsub+0x298>
 800123e:	2e00      	cmp	r6, #0
 8001240:	d043      	beq.n	80012ca <__aeabi_fsub+0x302>
 8001242:	2401      	movs	r4, #1
 8001244:	0033      	movs	r3, r6
 8001246:	400c      	ands	r4, r1
 8001248:	e706      	b.n	8001058 <__aeabi_fsub+0x90>
 800124a:	2401      	movs	r4, #1
 800124c:	1af7      	subs	r7, r6, r3
 800124e:	400c      	ands	r4, r1
 8001250:	e784      	b.n	800115c <__aeabi_fsub+0x194>
 8001252:	2b00      	cmp	r3, #0
 8001254:	d104      	bne.n	8001260 <__aeabi_fsub+0x298>
 8001256:	0033      	movs	r3, r6
 8001258:	e6fe      	b.n	8001058 <__aeabi_fsub+0x90>
 800125a:	2501      	movs	r5, #1
 800125c:	1b9b      	subs	r3, r3, r6
 800125e:	e718      	b.n	8001092 <__aeabi_fsub+0xca>
 8001260:	2e00      	cmp	r6, #0
 8001262:	d100      	bne.n	8001266 <__aeabi_fsub+0x29e>
 8001264:	e6f8      	b.n	8001058 <__aeabi_fsub+0x90>
 8001266:	2280      	movs	r2, #128	@ 0x80
 8001268:	03d2      	lsls	r2, r2, #15
 800126a:	4297      	cmp	r7, r2
 800126c:	d304      	bcc.n	8001278 <__aeabi_fsub+0x2b0>
 800126e:	4594      	cmp	ip, r2
 8001270:	d202      	bcs.n	8001278 <__aeabi_fsub+0x2b0>
 8001272:	2401      	movs	r4, #1
 8001274:	0033      	movs	r3, r6
 8001276:	400c      	ands	r4, r1
 8001278:	08db      	lsrs	r3, r3, #3
 800127a:	e6f1      	b.n	8001060 <__aeabi_fsub+0x98>
 800127c:	001a      	movs	r2, r3
 800127e:	2520      	movs	r5, #32
 8001280:	40ca      	lsrs	r2, r1
 8001282:	1a69      	subs	r1, r5, r1
 8001284:	408b      	lsls	r3, r1
 8001286:	1e59      	subs	r1, r3, #1
 8001288:	418b      	sbcs	r3, r1
 800128a:	4313      	orrs	r3, r2
 800128c:	0005      	movs	r5, r0
 800128e:	199b      	adds	r3, r3, r6
 8001290:	e750      	b.n	8001134 <__aeabi_fsub+0x16c>
 8001292:	2e00      	cmp	r6, #0
 8001294:	d094      	beq.n	80011c0 <__aeabi_fsub+0x1f8>
 8001296:	2401      	movs	r4, #1
 8001298:	0033      	movs	r3, r6
 800129a:	400c      	ands	r4, r1
 800129c:	e73a      	b.n	8001114 <__aeabi_fsub+0x14c>
 800129e:	000c      	movs	r4, r1
 80012a0:	2501      	movs	r5, #1
 80012a2:	1af3      	subs	r3, r6, r3
 80012a4:	e6f5      	b.n	8001092 <__aeabi_fsub+0xca>
 80012a6:	0033      	movs	r3, r6
 80012a8:	e734      	b.n	8001114 <__aeabi_fsub+0x14c>
 80012aa:	199b      	adds	r3, r3, r6
 80012ac:	2200      	movs	r2, #0
 80012ae:	0159      	lsls	r1, r3, #5
 80012b0:	d5c1      	bpl.n	8001236 <__aeabi_fsub+0x26e>
 80012b2:	4a15      	ldr	r2, [pc, #84]	@ (8001308 <__aeabi_fsub+0x340>)
 80012b4:	4013      	ands	r3, r2
 80012b6:	08db      	lsrs	r3, r3, #3
 80012b8:	2201      	movs	r2, #1
 80012ba:	e72d      	b.n	8001118 <__aeabi_fsub+0x150>
 80012bc:	2a00      	cmp	r2, #0
 80012be:	d100      	bne.n	80012c2 <__aeabi_fsub+0x2fa>
 80012c0:	e77e      	b.n	80011c0 <__aeabi_fsub+0x1f8>
 80012c2:	0013      	movs	r3, r2
 80012c4:	2200      	movs	r2, #0
 80012c6:	08db      	lsrs	r3, r3, #3
 80012c8:	e726      	b.n	8001118 <__aeabi_fsub+0x150>
 80012ca:	2380      	movs	r3, #128	@ 0x80
 80012cc:	2400      	movs	r4, #0
 80012ce:	20ff      	movs	r0, #255	@ 0xff
 80012d0:	03db      	lsls	r3, r3, #15
 80012d2:	e6f1      	b.n	80010b8 <__aeabi_fsub+0xf0>
 80012d4:	2a00      	cmp	r2, #0
 80012d6:	d100      	bne.n	80012da <__aeabi_fsub+0x312>
 80012d8:	e756      	b.n	8001188 <__aeabi_fsub+0x1c0>
 80012da:	1b47      	subs	r7, r0, r5
 80012dc:	003a      	movs	r2, r7
 80012de:	2d00      	cmp	r5, #0
 80012e0:	d100      	bne.n	80012e4 <__aeabi_fsub+0x31c>
 80012e2:	e730      	b.n	8001146 <__aeabi_fsub+0x17e>
 80012e4:	2280      	movs	r2, #128	@ 0x80
 80012e6:	04d2      	lsls	r2, r2, #19
 80012e8:	000c      	movs	r4, r1
 80012ea:	4313      	orrs	r3, r2
 80012ec:	e77f      	b.n	80011ee <__aeabi_fsub+0x226>
 80012ee:	2a00      	cmp	r2, #0
 80012f0:	d100      	bne.n	80012f4 <__aeabi_fsub+0x32c>
 80012f2:	e701      	b.n	80010f8 <__aeabi_fsub+0x130>
 80012f4:	1b41      	subs	r1, r0, r5
 80012f6:	2d00      	cmp	r5, #0
 80012f8:	d101      	bne.n	80012fe <__aeabi_fsub+0x336>
 80012fa:	000a      	movs	r2, r1
 80012fc:	e788      	b.n	8001210 <__aeabi_fsub+0x248>
 80012fe:	2280      	movs	r2, #128	@ 0x80
 8001300:	04d2      	lsls	r2, r2, #19
 8001302:	4313      	orrs	r3, r2
 8001304:	e78b      	b.n	800121e <__aeabi_fsub+0x256>
 8001306:	46c0      	nop			@ (mov r8, r8)
 8001308:	fbffffff 	.word	0xfbffffff
 800130c:	7dffffff 	.word	0x7dffffff

08001310 <__aeabi_fcmpun>:
 8001310:	0243      	lsls	r3, r0, #9
 8001312:	024a      	lsls	r2, r1, #9
 8001314:	0040      	lsls	r0, r0, #1
 8001316:	0049      	lsls	r1, r1, #1
 8001318:	0a5b      	lsrs	r3, r3, #9
 800131a:	0a52      	lsrs	r2, r2, #9
 800131c:	0e09      	lsrs	r1, r1, #24
 800131e:	0e00      	lsrs	r0, r0, #24
 8001320:	28ff      	cmp	r0, #255	@ 0xff
 8001322:	d006      	beq.n	8001332 <__aeabi_fcmpun+0x22>
 8001324:	2000      	movs	r0, #0
 8001326:	29ff      	cmp	r1, #255	@ 0xff
 8001328:	d102      	bne.n	8001330 <__aeabi_fcmpun+0x20>
 800132a:	1e53      	subs	r3, r2, #1
 800132c:	419a      	sbcs	r2, r3
 800132e:	0010      	movs	r0, r2
 8001330:	4770      	bx	lr
 8001332:	38fe      	subs	r0, #254	@ 0xfe
 8001334:	2b00      	cmp	r3, #0
 8001336:	d1fb      	bne.n	8001330 <__aeabi_fcmpun+0x20>
 8001338:	e7f4      	b.n	8001324 <__aeabi_fcmpun+0x14>
 800133a:	46c0      	nop			@ (mov r8, r8)

0800133c <__aeabi_f2iz>:
 800133c:	0241      	lsls	r1, r0, #9
 800133e:	0042      	lsls	r2, r0, #1
 8001340:	0fc3      	lsrs	r3, r0, #31
 8001342:	0a49      	lsrs	r1, r1, #9
 8001344:	2000      	movs	r0, #0
 8001346:	0e12      	lsrs	r2, r2, #24
 8001348:	2a7e      	cmp	r2, #126	@ 0x7e
 800134a:	dd03      	ble.n	8001354 <__aeabi_f2iz+0x18>
 800134c:	2a9d      	cmp	r2, #157	@ 0x9d
 800134e:	dd02      	ble.n	8001356 <__aeabi_f2iz+0x1a>
 8001350:	4a09      	ldr	r2, [pc, #36]	@ (8001378 <__aeabi_f2iz+0x3c>)
 8001352:	1898      	adds	r0, r3, r2
 8001354:	4770      	bx	lr
 8001356:	2080      	movs	r0, #128	@ 0x80
 8001358:	0400      	lsls	r0, r0, #16
 800135a:	4301      	orrs	r1, r0
 800135c:	2a95      	cmp	r2, #149	@ 0x95
 800135e:	dc07      	bgt.n	8001370 <__aeabi_f2iz+0x34>
 8001360:	2096      	movs	r0, #150	@ 0x96
 8001362:	1a82      	subs	r2, r0, r2
 8001364:	40d1      	lsrs	r1, r2
 8001366:	4248      	negs	r0, r1
 8001368:	2b00      	cmp	r3, #0
 800136a:	d1f3      	bne.n	8001354 <__aeabi_f2iz+0x18>
 800136c:	0008      	movs	r0, r1
 800136e:	e7f1      	b.n	8001354 <__aeabi_f2iz+0x18>
 8001370:	3a96      	subs	r2, #150	@ 0x96
 8001372:	4091      	lsls	r1, r2
 8001374:	e7f7      	b.n	8001366 <__aeabi_f2iz+0x2a>
 8001376:	46c0      	nop			@ (mov r8, r8)
 8001378:	7fffffff 	.word	0x7fffffff

0800137c <__aeabi_i2f>:
 800137c:	b570      	push	{r4, r5, r6, lr}
 800137e:	2800      	cmp	r0, #0
 8001380:	d013      	beq.n	80013aa <__aeabi_i2f+0x2e>
 8001382:	17c3      	asrs	r3, r0, #31
 8001384:	18c5      	adds	r5, r0, r3
 8001386:	405d      	eors	r5, r3
 8001388:	0fc4      	lsrs	r4, r0, #31
 800138a:	0028      	movs	r0, r5
 800138c:	f001 fb18 	bl	80029c0 <__clzsi2>
 8001390:	239e      	movs	r3, #158	@ 0x9e
 8001392:	0001      	movs	r1, r0
 8001394:	1a1b      	subs	r3, r3, r0
 8001396:	2b96      	cmp	r3, #150	@ 0x96
 8001398:	dc0f      	bgt.n	80013ba <__aeabi_i2f+0x3e>
 800139a:	2808      	cmp	r0, #8
 800139c:	d034      	beq.n	8001408 <__aeabi_i2f+0x8c>
 800139e:	3908      	subs	r1, #8
 80013a0:	408d      	lsls	r5, r1
 80013a2:	026d      	lsls	r5, r5, #9
 80013a4:	0a6d      	lsrs	r5, r5, #9
 80013a6:	b2d8      	uxtb	r0, r3
 80013a8:	e002      	b.n	80013b0 <__aeabi_i2f+0x34>
 80013aa:	2400      	movs	r4, #0
 80013ac:	2000      	movs	r0, #0
 80013ae:	2500      	movs	r5, #0
 80013b0:	05c0      	lsls	r0, r0, #23
 80013b2:	4328      	orrs	r0, r5
 80013b4:	07e4      	lsls	r4, r4, #31
 80013b6:	4320      	orrs	r0, r4
 80013b8:	bd70      	pop	{r4, r5, r6, pc}
 80013ba:	2b99      	cmp	r3, #153	@ 0x99
 80013bc:	dc16      	bgt.n	80013ec <__aeabi_i2f+0x70>
 80013be:	1f42      	subs	r2, r0, #5
 80013c0:	2805      	cmp	r0, #5
 80013c2:	d000      	beq.n	80013c6 <__aeabi_i2f+0x4a>
 80013c4:	4095      	lsls	r5, r2
 80013c6:	002a      	movs	r2, r5
 80013c8:	4811      	ldr	r0, [pc, #68]	@ (8001410 <__aeabi_i2f+0x94>)
 80013ca:	4002      	ands	r2, r0
 80013cc:	076e      	lsls	r6, r5, #29
 80013ce:	d009      	beq.n	80013e4 <__aeabi_i2f+0x68>
 80013d0:	260f      	movs	r6, #15
 80013d2:	4035      	ands	r5, r6
 80013d4:	2d04      	cmp	r5, #4
 80013d6:	d005      	beq.n	80013e4 <__aeabi_i2f+0x68>
 80013d8:	3204      	adds	r2, #4
 80013da:	0155      	lsls	r5, r2, #5
 80013dc:	d502      	bpl.n	80013e4 <__aeabi_i2f+0x68>
 80013de:	239f      	movs	r3, #159	@ 0x9f
 80013e0:	4002      	ands	r2, r0
 80013e2:	1a5b      	subs	r3, r3, r1
 80013e4:	0192      	lsls	r2, r2, #6
 80013e6:	0a55      	lsrs	r5, r2, #9
 80013e8:	b2d8      	uxtb	r0, r3
 80013ea:	e7e1      	b.n	80013b0 <__aeabi_i2f+0x34>
 80013ec:	2205      	movs	r2, #5
 80013ee:	1a12      	subs	r2, r2, r0
 80013f0:	0028      	movs	r0, r5
 80013f2:	40d0      	lsrs	r0, r2
 80013f4:	0002      	movs	r2, r0
 80013f6:	0008      	movs	r0, r1
 80013f8:	301b      	adds	r0, #27
 80013fa:	4085      	lsls	r5, r0
 80013fc:	0028      	movs	r0, r5
 80013fe:	1e45      	subs	r5, r0, #1
 8001400:	41a8      	sbcs	r0, r5
 8001402:	4302      	orrs	r2, r0
 8001404:	0015      	movs	r5, r2
 8001406:	e7de      	b.n	80013c6 <__aeabi_i2f+0x4a>
 8001408:	026d      	lsls	r5, r5, #9
 800140a:	2096      	movs	r0, #150	@ 0x96
 800140c:	0a6d      	lsrs	r5, r5, #9
 800140e:	e7cf      	b.n	80013b0 <__aeabi_i2f+0x34>
 8001410:	fbffffff 	.word	0xfbffffff

08001414 <__aeabi_ui2f>:
 8001414:	b570      	push	{r4, r5, r6, lr}
 8001416:	1e04      	subs	r4, r0, #0
 8001418:	d00e      	beq.n	8001438 <__aeabi_ui2f+0x24>
 800141a:	f001 fad1 	bl	80029c0 <__clzsi2>
 800141e:	239e      	movs	r3, #158	@ 0x9e
 8001420:	0001      	movs	r1, r0
 8001422:	1a1b      	subs	r3, r3, r0
 8001424:	2b96      	cmp	r3, #150	@ 0x96
 8001426:	dc0c      	bgt.n	8001442 <__aeabi_ui2f+0x2e>
 8001428:	2808      	cmp	r0, #8
 800142a:	d02f      	beq.n	800148c <__aeabi_ui2f+0x78>
 800142c:	3908      	subs	r1, #8
 800142e:	408c      	lsls	r4, r1
 8001430:	0264      	lsls	r4, r4, #9
 8001432:	0a64      	lsrs	r4, r4, #9
 8001434:	b2d8      	uxtb	r0, r3
 8001436:	e001      	b.n	800143c <__aeabi_ui2f+0x28>
 8001438:	2000      	movs	r0, #0
 800143a:	2400      	movs	r4, #0
 800143c:	05c0      	lsls	r0, r0, #23
 800143e:	4320      	orrs	r0, r4
 8001440:	bd70      	pop	{r4, r5, r6, pc}
 8001442:	2b99      	cmp	r3, #153	@ 0x99
 8001444:	dc16      	bgt.n	8001474 <__aeabi_ui2f+0x60>
 8001446:	1f42      	subs	r2, r0, #5
 8001448:	2805      	cmp	r0, #5
 800144a:	d000      	beq.n	800144e <__aeabi_ui2f+0x3a>
 800144c:	4094      	lsls	r4, r2
 800144e:	0022      	movs	r2, r4
 8001450:	4810      	ldr	r0, [pc, #64]	@ (8001494 <__aeabi_ui2f+0x80>)
 8001452:	4002      	ands	r2, r0
 8001454:	0765      	lsls	r5, r4, #29
 8001456:	d009      	beq.n	800146c <__aeabi_ui2f+0x58>
 8001458:	250f      	movs	r5, #15
 800145a:	402c      	ands	r4, r5
 800145c:	2c04      	cmp	r4, #4
 800145e:	d005      	beq.n	800146c <__aeabi_ui2f+0x58>
 8001460:	3204      	adds	r2, #4
 8001462:	0154      	lsls	r4, r2, #5
 8001464:	d502      	bpl.n	800146c <__aeabi_ui2f+0x58>
 8001466:	239f      	movs	r3, #159	@ 0x9f
 8001468:	4002      	ands	r2, r0
 800146a:	1a5b      	subs	r3, r3, r1
 800146c:	0192      	lsls	r2, r2, #6
 800146e:	0a54      	lsrs	r4, r2, #9
 8001470:	b2d8      	uxtb	r0, r3
 8001472:	e7e3      	b.n	800143c <__aeabi_ui2f+0x28>
 8001474:	0002      	movs	r2, r0
 8001476:	0020      	movs	r0, r4
 8001478:	321b      	adds	r2, #27
 800147a:	4090      	lsls	r0, r2
 800147c:	0002      	movs	r2, r0
 800147e:	1e50      	subs	r0, r2, #1
 8001480:	4182      	sbcs	r2, r0
 8001482:	2005      	movs	r0, #5
 8001484:	1a40      	subs	r0, r0, r1
 8001486:	40c4      	lsrs	r4, r0
 8001488:	4314      	orrs	r4, r2
 800148a:	e7e0      	b.n	800144e <__aeabi_ui2f+0x3a>
 800148c:	0264      	lsls	r4, r4, #9
 800148e:	2096      	movs	r0, #150	@ 0x96
 8001490:	0a64      	lsrs	r4, r4, #9
 8001492:	e7d3      	b.n	800143c <__aeabi_ui2f+0x28>
 8001494:	fbffffff 	.word	0xfbffffff

08001498 <__aeabi_dadd>:
 8001498:	b5f0      	push	{r4, r5, r6, r7, lr}
 800149a:	4657      	mov	r7, sl
 800149c:	464e      	mov	r6, r9
 800149e:	4645      	mov	r5, r8
 80014a0:	46de      	mov	lr, fp
 80014a2:	b5e0      	push	{r5, r6, r7, lr}
 80014a4:	b083      	sub	sp, #12
 80014a6:	9000      	str	r0, [sp, #0]
 80014a8:	9101      	str	r1, [sp, #4]
 80014aa:	030c      	lsls	r4, r1, #12
 80014ac:	004f      	lsls	r7, r1, #1
 80014ae:	0fce      	lsrs	r6, r1, #31
 80014b0:	0a61      	lsrs	r1, r4, #9
 80014b2:	9c00      	ldr	r4, [sp, #0]
 80014b4:	031d      	lsls	r5, r3, #12
 80014b6:	0f64      	lsrs	r4, r4, #29
 80014b8:	430c      	orrs	r4, r1
 80014ba:	9900      	ldr	r1, [sp, #0]
 80014bc:	9200      	str	r2, [sp, #0]
 80014be:	9301      	str	r3, [sp, #4]
 80014c0:	00c8      	lsls	r0, r1, #3
 80014c2:	0059      	lsls	r1, r3, #1
 80014c4:	0d4b      	lsrs	r3, r1, #21
 80014c6:	4699      	mov	r9, r3
 80014c8:	9a00      	ldr	r2, [sp, #0]
 80014ca:	9b01      	ldr	r3, [sp, #4]
 80014cc:	0a6d      	lsrs	r5, r5, #9
 80014ce:	0fd9      	lsrs	r1, r3, #31
 80014d0:	0f53      	lsrs	r3, r2, #29
 80014d2:	432b      	orrs	r3, r5
 80014d4:	469a      	mov	sl, r3
 80014d6:	9b00      	ldr	r3, [sp, #0]
 80014d8:	0d7f      	lsrs	r7, r7, #21
 80014da:	00da      	lsls	r2, r3, #3
 80014dc:	4694      	mov	ip, r2
 80014de:	464a      	mov	r2, r9
 80014e0:	46b0      	mov	r8, r6
 80014e2:	1aba      	subs	r2, r7, r2
 80014e4:	428e      	cmp	r6, r1
 80014e6:	d100      	bne.n	80014ea <__aeabi_dadd+0x52>
 80014e8:	e0b0      	b.n	800164c <__aeabi_dadd+0x1b4>
 80014ea:	2a00      	cmp	r2, #0
 80014ec:	dc00      	bgt.n	80014f0 <__aeabi_dadd+0x58>
 80014ee:	e078      	b.n	80015e2 <__aeabi_dadd+0x14a>
 80014f0:	4649      	mov	r1, r9
 80014f2:	2900      	cmp	r1, #0
 80014f4:	d100      	bne.n	80014f8 <__aeabi_dadd+0x60>
 80014f6:	e0e9      	b.n	80016cc <__aeabi_dadd+0x234>
 80014f8:	49c9      	ldr	r1, [pc, #804]	@ (8001820 <__aeabi_dadd+0x388>)
 80014fa:	428f      	cmp	r7, r1
 80014fc:	d100      	bne.n	8001500 <__aeabi_dadd+0x68>
 80014fe:	e195      	b.n	800182c <__aeabi_dadd+0x394>
 8001500:	2501      	movs	r5, #1
 8001502:	2a38      	cmp	r2, #56	@ 0x38
 8001504:	dc16      	bgt.n	8001534 <__aeabi_dadd+0x9c>
 8001506:	2180      	movs	r1, #128	@ 0x80
 8001508:	4653      	mov	r3, sl
 800150a:	0409      	lsls	r1, r1, #16
 800150c:	430b      	orrs	r3, r1
 800150e:	469a      	mov	sl, r3
 8001510:	2a1f      	cmp	r2, #31
 8001512:	dd00      	ble.n	8001516 <__aeabi_dadd+0x7e>
 8001514:	e1e7      	b.n	80018e6 <__aeabi_dadd+0x44e>
 8001516:	2120      	movs	r1, #32
 8001518:	4655      	mov	r5, sl
 800151a:	1a8b      	subs	r3, r1, r2
 800151c:	4661      	mov	r1, ip
 800151e:	409d      	lsls	r5, r3
 8001520:	40d1      	lsrs	r1, r2
 8001522:	430d      	orrs	r5, r1
 8001524:	4661      	mov	r1, ip
 8001526:	4099      	lsls	r1, r3
 8001528:	1e4b      	subs	r3, r1, #1
 800152a:	4199      	sbcs	r1, r3
 800152c:	4653      	mov	r3, sl
 800152e:	40d3      	lsrs	r3, r2
 8001530:	430d      	orrs	r5, r1
 8001532:	1ae4      	subs	r4, r4, r3
 8001534:	1b45      	subs	r5, r0, r5
 8001536:	42a8      	cmp	r0, r5
 8001538:	4180      	sbcs	r0, r0
 800153a:	4240      	negs	r0, r0
 800153c:	1a24      	subs	r4, r4, r0
 800153e:	0223      	lsls	r3, r4, #8
 8001540:	d400      	bmi.n	8001544 <__aeabi_dadd+0xac>
 8001542:	e10f      	b.n	8001764 <__aeabi_dadd+0x2cc>
 8001544:	0264      	lsls	r4, r4, #9
 8001546:	0a64      	lsrs	r4, r4, #9
 8001548:	2c00      	cmp	r4, #0
 800154a:	d100      	bne.n	800154e <__aeabi_dadd+0xb6>
 800154c:	e139      	b.n	80017c2 <__aeabi_dadd+0x32a>
 800154e:	0020      	movs	r0, r4
 8001550:	f001 fa36 	bl	80029c0 <__clzsi2>
 8001554:	0003      	movs	r3, r0
 8001556:	3b08      	subs	r3, #8
 8001558:	2120      	movs	r1, #32
 800155a:	0028      	movs	r0, r5
 800155c:	1aca      	subs	r2, r1, r3
 800155e:	40d0      	lsrs	r0, r2
 8001560:	409c      	lsls	r4, r3
 8001562:	0002      	movs	r2, r0
 8001564:	409d      	lsls	r5, r3
 8001566:	4322      	orrs	r2, r4
 8001568:	429f      	cmp	r7, r3
 800156a:	dd00      	ble.n	800156e <__aeabi_dadd+0xd6>
 800156c:	e173      	b.n	8001856 <__aeabi_dadd+0x3be>
 800156e:	1bd8      	subs	r0, r3, r7
 8001570:	3001      	adds	r0, #1
 8001572:	1a09      	subs	r1, r1, r0
 8001574:	002c      	movs	r4, r5
 8001576:	408d      	lsls	r5, r1
 8001578:	40c4      	lsrs	r4, r0
 800157a:	1e6b      	subs	r3, r5, #1
 800157c:	419d      	sbcs	r5, r3
 800157e:	0013      	movs	r3, r2
 8001580:	40c2      	lsrs	r2, r0
 8001582:	408b      	lsls	r3, r1
 8001584:	4325      	orrs	r5, r4
 8001586:	2700      	movs	r7, #0
 8001588:	0014      	movs	r4, r2
 800158a:	431d      	orrs	r5, r3
 800158c:	076b      	lsls	r3, r5, #29
 800158e:	d009      	beq.n	80015a4 <__aeabi_dadd+0x10c>
 8001590:	230f      	movs	r3, #15
 8001592:	402b      	ands	r3, r5
 8001594:	2b04      	cmp	r3, #4
 8001596:	d005      	beq.n	80015a4 <__aeabi_dadd+0x10c>
 8001598:	1d2b      	adds	r3, r5, #4
 800159a:	42ab      	cmp	r3, r5
 800159c:	41ad      	sbcs	r5, r5
 800159e:	426d      	negs	r5, r5
 80015a0:	1964      	adds	r4, r4, r5
 80015a2:	001d      	movs	r5, r3
 80015a4:	0223      	lsls	r3, r4, #8
 80015a6:	d400      	bmi.n	80015aa <__aeabi_dadd+0x112>
 80015a8:	e12d      	b.n	8001806 <__aeabi_dadd+0x36e>
 80015aa:	4a9d      	ldr	r2, [pc, #628]	@ (8001820 <__aeabi_dadd+0x388>)
 80015ac:	3701      	adds	r7, #1
 80015ae:	4297      	cmp	r7, r2
 80015b0:	d100      	bne.n	80015b4 <__aeabi_dadd+0x11c>
 80015b2:	e0d3      	b.n	800175c <__aeabi_dadd+0x2c4>
 80015b4:	4646      	mov	r6, r8
 80015b6:	499b      	ldr	r1, [pc, #620]	@ (8001824 <__aeabi_dadd+0x38c>)
 80015b8:	08ed      	lsrs	r5, r5, #3
 80015ba:	4021      	ands	r1, r4
 80015bc:	074a      	lsls	r2, r1, #29
 80015be:	432a      	orrs	r2, r5
 80015c0:	057c      	lsls	r4, r7, #21
 80015c2:	024d      	lsls	r5, r1, #9
 80015c4:	0b2d      	lsrs	r5, r5, #12
 80015c6:	0d64      	lsrs	r4, r4, #21
 80015c8:	0524      	lsls	r4, r4, #20
 80015ca:	432c      	orrs	r4, r5
 80015cc:	07f6      	lsls	r6, r6, #31
 80015ce:	4334      	orrs	r4, r6
 80015d0:	0010      	movs	r0, r2
 80015d2:	0021      	movs	r1, r4
 80015d4:	b003      	add	sp, #12
 80015d6:	bcf0      	pop	{r4, r5, r6, r7}
 80015d8:	46bb      	mov	fp, r7
 80015da:	46b2      	mov	sl, r6
 80015dc:	46a9      	mov	r9, r5
 80015de:	46a0      	mov	r8, r4
 80015e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80015e2:	2a00      	cmp	r2, #0
 80015e4:	d100      	bne.n	80015e8 <__aeabi_dadd+0x150>
 80015e6:	e084      	b.n	80016f2 <__aeabi_dadd+0x25a>
 80015e8:	464a      	mov	r2, r9
 80015ea:	1bd2      	subs	r2, r2, r7
 80015ec:	2f00      	cmp	r7, #0
 80015ee:	d000      	beq.n	80015f2 <__aeabi_dadd+0x15a>
 80015f0:	e16d      	b.n	80018ce <__aeabi_dadd+0x436>
 80015f2:	0025      	movs	r5, r4
 80015f4:	4305      	orrs	r5, r0
 80015f6:	d100      	bne.n	80015fa <__aeabi_dadd+0x162>
 80015f8:	e127      	b.n	800184a <__aeabi_dadd+0x3b2>
 80015fa:	1e56      	subs	r6, r2, #1
 80015fc:	2a01      	cmp	r2, #1
 80015fe:	d100      	bne.n	8001602 <__aeabi_dadd+0x16a>
 8001600:	e23b      	b.n	8001a7a <__aeabi_dadd+0x5e2>
 8001602:	4d87      	ldr	r5, [pc, #540]	@ (8001820 <__aeabi_dadd+0x388>)
 8001604:	42aa      	cmp	r2, r5
 8001606:	d100      	bne.n	800160a <__aeabi_dadd+0x172>
 8001608:	e26a      	b.n	8001ae0 <__aeabi_dadd+0x648>
 800160a:	2501      	movs	r5, #1
 800160c:	2e38      	cmp	r6, #56	@ 0x38
 800160e:	dc12      	bgt.n	8001636 <__aeabi_dadd+0x19e>
 8001610:	0032      	movs	r2, r6
 8001612:	2a1f      	cmp	r2, #31
 8001614:	dd00      	ble.n	8001618 <__aeabi_dadd+0x180>
 8001616:	e1f8      	b.n	8001a0a <__aeabi_dadd+0x572>
 8001618:	2620      	movs	r6, #32
 800161a:	0025      	movs	r5, r4
 800161c:	1ab6      	subs	r6, r6, r2
 800161e:	0007      	movs	r7, r0
 8001620:	4653      	mov	r3, sl
 8001622:	40b0      	lsls	r0, r6
 8001624:	40d4      	lsrs	r4, r2
 8001626:	40b5      	lsls	r5, r6
 8001628:	40d7      	lsrs	r7, r2
 800162a:	1e46      	subs	r6, r0, #1
 800162c:	41b0      	sbcs	r0, r6
 800162e:	1b1b      	subs	r3, r3, r4
 8001630:	469a      	mov	sl, r3
 8001632:	433d      	orrs	r5, r7
 8001634:	4305      	orrs	r5, r0
 8001636:	4662      	mov	r2, ip
 8001638:	1b55      	subs	r5, r2, r5
 800163a:	45ac      	cmp	ip, r5
 800163c:	4192      	sbcs	r2, r2
 800163e:	4653      	mov	r3, sl
 8001640:	4252      	negs	r2, r2
 8001642:	000e      	movs	r6, r1
 8001644:	464f      	mov	r7, r9
 8001646:	4688      	mov	r8, r1
 8001648:	1a9c      	subs	r4, r3, r2
 800164a:	e778      	b.n	800153e <__aeabi_dadd+0xa6>
 800164c:	2a00      	cmp	r2, #0
 800164e:	dc00      	bgt.n	8001652 <__aeabi_dadd+0x1ba>
 8001650:	e08e      	b.n	8001770 <__aeabi_dadd+0x2d8>
 8001652:	4649      	mov	r1, r9
 8001654:	2900      	cmp	r1, #0
 8001656:	d175      	bne.n	8001744 <__aeabi_dadd+0x2ac>
 8001658:	4661      	mov	r1, ip
 800165a:	4653      	mov	r3, sl
 800165c:	4319      	orrs	r1, r3
 800165e:	d100      	bne.n	8001662 <__aeabi_dadd+0x1ca>
 8001660:	e0f6      	b.n	8001850 <__aeabi_dadd+0x3b8>
 8001662:	1e51      	subs	r1, r2, #1
 8001664:	2a01      	cmp	r2, #1
 8001666:	d100      	bne.n	800166a <__aeabi_dadd+0x1d2>
 8001668:	e191      	b.n	800198e <__aeabi_dadd+0x4f6>
 800166a:	4d6d      	ldr	r5, [pc, #436]	@ (8001820 <__aeabi_dadd+0x388>)
 800166c:	42aa      	cmp	r2, r5
 800166e:	d100      	bne.n	8001672 <__aeabi_dadd+0x1da>
 8001670:	e0dc      	b.n	800182c <__aeabi_dadd+0x394>
 8001672:	2501      	movs	r5, #1
 8001674:	2938      	cmp	r1, #56	@ 0x38
 8001676:	dc14      	bgt.n	80016a2 <__aeabi_dadd+0x20a>
 8001678:	000a      	movs	r2, r1
 800167a:	2a1f      	cmp	r2, #31
 800167c:	dd00      	ble.n	8001680 <__aeabi_dadd+0x1e8>
 800167e:	e1a2      	b.n	80019c6 <__aeabi_dadd+0x52e>
 8001680:	2120      	movs	r1, #32
 8001682:	4653      	mov	r3, sl
 8001684:	1a89      	subs	r1, r1, r2
 8001686:	408b      	lsls	r3, r1
 8001688:	001d      	movs	r5, r3
 800168a:	4663      	mov	r3, ip
 800168c:	40d3      	lsrs	r3, r2
 800168e:	431d      	orrs	r5, r3
 8001690:	4663      	mov	r3, ip
 8001692:	408b      	lsls	r3, r1
 8001694:	0019      	movs	r1, r3
 8001696:	1e4b      	subs	r3, r1, #1
 8001698:	4199      	sbcs	r1, r3
 800169a:	4653      	mov	r3, sl
 800169c:	40d3      	lsrs	r3, r2
 800169e:	430d      	orrs	r5, r1
 80016a0:	18e4      	adds	r4, r4, r3
 80016a2:	182d      	adds	r5, r5, r0
 80016a4:	4285      	cmp	r5, r0
 80016a6:	4180      	sbcs	r0, r0
 80016a8:	4240      	negs	r0, r0
 80016aa:	1824      	adds	r4, r4, r0
 80016ac:	0223      	lsls	r3, r4, #8
 80016ae:	d559      	bpl.n	8001764 <__aeabi_dadd+0x2cc>
 80016b0:	4b5b      	ldr	r3, [pc, #364]	@ (8001820 <__aeabi_dadd+0x388>)
 80016b2:	3701      	adds	r7, #1
 80016b4:	429f      	cmp	r7, r3
 80016b6:	d051      	beq.n	800175c <__aeabi_dadd+0x2c4>
 80016b8:	2101      	movs	r1, #1
 80016ba:	4b5a      	ldr	r3, [pc, #360]	@ (8001824 <__aeabi_dadd+0x38c>)
 80016bc:	086a      	lsrs	r2, r5, #1
 80016be:	401c      	ands	r4, r3
 80016c0:	4029      	ands	r1, r5
 80016c2:	430a      	orrs	r2, r1
 80016c4:	07e5      	lsls	r5, r4, #31
 80016c6:	4315      	orrs	r5, r2
 80016c8:	0864      	lsrs	r4, r4, #1
 80016ca:	e75f      	b.n	800158c <__aeabi_dadd+0xf4>
 80016cc:	4661      	mov	r1, ip
 80016ce:	4653      	mov	r3, sl
 80016d0:	4319      	orrs	r1, r3
 80016d2:	d100      	bne.n	80016d6 <__aeabi_dadd+0x23e>
 80016d4:	e0bc      	b.n	8001850 <__aeabi_dadd+0x3b8>
 80016d6:	1e51      	subs	r1, r2, #1
 80016d8:	2a01      	cmp	r2, #1
 80016da:	d100      	bne.n	80016de <__aeabi_dadd+0x246>
 80016dc:	e164      	b.n	80019a8 <__aeabi_dadd+0x510>
 80016de:	4d50      	ldr	r5, [pc, #320]	@ (8001820 <__aeabi_dadd+0x388>)
 80016e0:	42aa      	cmp	r2, r5
 80016e2:	d100      	bne.n	80016e6 <__aeabi_dadd+0x24e>
 80016e4:	e16a      	b.n	80019bc <__aeabi_dadd+0x524>
 80016e6:	2501      	movs	r5, #1
 80016e8:	2938      	cmp	r1, #56	@ 0x38
 80016ea:	dd00      	ble.n	80016ee <__aeabi_dadd+0x256>
 80016ec:	e722      	b.n	8001534 <__aeabi_dadd+0x9c>
 80016ee:	000a      	movs	r2, r1
 80016f0:	e70e      	b.n	8001510 <__aeabi_dadd+0x78>
 80016f2:	4a4d      	ldr	r2, [pc, #308]	@ (8001828 <__aeabi_dadd+0x390>)
 80016f4:	1c7d      	adds	r5, r7, #1
 80016f6:	4215      	tst	r5, r2
 80016f8:	d000      	beq.n	80016fc <__aeabi_dadd+0x264>
 80016fa:	e0d0      	b.n	800189e <__aeabi_dadd+0x406>
 80016fc:	0025      	movs	r5, r4
 80016fe:	4662      	mov	r2, ip
 8001700:	4653      	mov	r3, sl
 8001702:	4305      	orrs	r5, r0
 8001704:	431a      	orrs	r2, r3
 8001706:	2f00      	cmp	r7, #0
 8001708:	d000      	beq.n	800170c <__aeabi_dadd+0x274>
 800170a:	e137      	b.n	800197c <__aeabi_dadd+0x4e4>
 800170c:	2d00      	cmp	r5, #0
 800170e:	d100      	bne.n	8001712 <__aeabi_dadd+0x27a>
 8001710:	e1a8      	b.n	8001a64 <__aeabi_dadd+0x5cc>
 8001712:	2a00      	cmp	r2, #0
 8001714:	d100      	bne.n	8001718 <__aeabi_dadd+0x280>
 8001716:	e16a      	b.n	80019ee <__aeabi_dadd+0x556>
 8001718:	4663      	mov	r3, ip
 800171a:	1ac5      	subs	r5, r0, r3
 800171c:	4653      	mov	r3, sl
 800171e:	1ae2      	subs	r2, r4, r3
 8001720:	42a8      	cmp	r0, r5
 8001722:	419b      	sbcs	r3, r3
 8001724:	425b      	negs	r3, r3
 8001726:	1ad3      	subs	r3, r2, r3
 8001728:	021a      	lsls	r2, r3, #8
 800172a:	d400      	bmi.n	800172e <__aeabi_dadd+0x296>
 800172c:	e203      	b.n	8001b36 <__aeabi_dadd+0x69e>
 800172e:	4663      	mov	r3, ip
 8001730:	1a1d      	subs	r5, r3, r0
 8001732:	45ac      	cmp	ip, r5
 8001734:	4192      	sbcs	r2, r2
 8001736:	4653      	mov	r3, sl
 8001738:	4252      	negs	r2, r2
 800173a:	1b1c      	subs	r4, r3, r4
 800173c:	000e      	movs	r6, r1
 800173e:	4688      	mov	r8, r1
 8001740:	1aa4      	subs	r4, r4, r2
 8001742:	e723      	b.n	800158c <__aeabi_dadd+0xf4>
 8001744:	4936      	ldr	r1, [pc, #216]	@ (8001820 <__aeabi_dadd+0x388>)
 8001746:	428f      	cmp	r7, r1
 8001748:	d070      	beq.n	800182c <__aeabi_dadd+0x394>
 800174a:	2501      	movs	r5, #1
 800174c:	2a38      	cmp	r2, #56	@ 0x38
 800174e:	dca8      	bgt.n	80016a2 <__aeabi_dadd+0x20a>
 8001750:	2180      	movs	r1, #128	@ 0x80
 8001752:	4653      	mov	r3, sl
 8001754:	0409      	lsls	r1, r1, #16
 8001756:	430b      	orrs	r3, r1
 8001758:	469a      	mov	sl, r3
 800175a:	e78e      	b.n	800167a <__aeabi_dadd+0x1e2>
 800175c:	003c      	movs	r4, r7
 800175e:	2500      	movs	r5, #0
 8001760:	2200      	movs	r2, #0
 8001762:	e731      	b.n	80015c8 <__aeabi_dadd+0x130>
 8001764:	2307      	movs	r3, #7
 8001766:	402b      	ands	r3, r5
 8001768:	2b00      	cmp	r3, #0
 800176a:	d000      	beq.n	800176e <__aeabi_dadd+0x2d6>
 800176c:	e710      	b.n	8001590 <__aeabi_dadd+0xf8>
 800176e:	e093      	b.n	8001898 <__aeabi_dadd+0x400>
 8001770:	2a00      	cmp	r2, #0
 8001772:	d074      	beq.n	800185e <__aeabi_dadd+0x3c6>
 8001774:	464a      	mov	r2, r9
 8001776:	1bd2      	subs	r2, r2, r7
 8001778:	2f00      	cmp	r7, #0
 800177a:	d100      	bne.n	800177e <__aeabi_dadd+0x2e6>
 800177c:	e0c7      	b.n	800190e <__aeabi_dadd+0x476>
 800177e:	4928      	ldr	r1, [pc, #160]	@ (8001820 <__aeabi_dadd+0x388>)
 8001780:	4589      	cmp	r9, r1
 8001782:	d100      	bne.n	8001786 <__aeabi_dadd+0x2ee>
 8001784:	e185      	b.n	8001a92 <__aeabi_dadd+0x5fa>
 8001786:	2501      	movs	r5, #1
 8001788:	2a38      	cmp	r2, #56	@ 0x38
 800178a:	dc12      	bgt.n	80017b2 <__aeabi_dadd+0x31a>
 800178c:	2180      	movs	r1, #128	@ 0x80
 800178e:	0409      	lsls	r1, r1, #16
 8001790:	430c      	orrs	r4, r1
 8001792:	2a1f      	cmp	r2, #31
 8001794:	dd00      	ble.n	8001798 <__aeabi_dadd+0x300>
 8001796:	e1ab      	b.n	8001af0 <__aeabi_dadd+0x658>
 8001798:	2120      	movs	r1, #32
 800179a:	0025      	movs	r5, r4
 800179c:	1a89      	subs	r1, r1, r2
 800179e:	0007      	movs	r7, r0
 80017a0:	4088      	lsls	r0, r1
 80017a2:	408d      	lsls	r5, r1
 80017a4:	40d7      	lsrs	r7, r2
 80017a6:	1e41      	subs	r1, r0, #1
 80017a8:	4188      	sbcs	r0, r1
 80017aa:	40d4      	lsrs	r4, r2
 80017ac:	433d      	orrs	r5, r7
 80017ae:	4305      	orrs	r5, r0
 80017b0:	44a2      	add	sl, r4
 80017b2:	4465      	add	r5, ip
 80017b4:	4565      	cmp	r5, ip
 80017b6:	4192      	sbcs	r2, r2
 80017b8:	4252      	negs	r2, r2
 80017ba:	4452      	add	r2, sl
 80017bc:	0014      	movs	r4, r2
 80017be:	464f      	mov	r7, r9
 80017c0:	e774      	b.n	80016ac <__aeabi_dadd+0x214>
 80017c2:	0028      	movs	r0, r5
 80017c4:	f001 f8fc 	bl	80029c0 <__clzsi2>
 80017c8:	0003      	movs	r3, r0
 80017ca:	3318      	adds	r3, #24
 80017cc:	2b1f      	cmp	r3, #31
 80017ce:	dc00      	bgt.n	80017d2 <__aeabi_dadd+0x33a>
 80017d0:	e6c2      	b.n	8001558 <__aeabi_dadd+0xc0>
 80017d2:	002a      	movs	r2, r5
 80017d4:	3808      	subs	r0, #8
 80017d6:	4082      	lsls	r2, r0
 80017d8:	429f      	cmp	r7, r3
 80017da:	dd00      	ble.n	80017de <__aeabi_dadd+0x346>
 80017dc:	e0a9      	b.n	8001932 <__aeabi_dadd+0x49a>
 80017de:	1bdb      	subs	r3, r3, r7
 80017e0:	1c58      	adds	r0, r3, #1
 80017e2:	281f      	cmp	r0, #31
 80017e4:	dc00      	bgt.n	80017e8 <__aeabi_dadd+0x350>
 80017e6:	e1ac      	b.n	8001b42 <__aeabi_dadd+0x6aa>
 80017e8:	0015      	movs	r5, r2
 80017ea:	3b1f      	subs	r3, #31
 80017ec:	40dd      	lsrs	r5, r3
 80017ee:	2820      	cmp	r0, #32
 80017f0:	d005      	beq.n	80017fe <__aeabi_dadd+0x366>
 80017f2:	2340      	movs	r3, #64	@ 0x40
 80017f4:	1a1b      	subs	r3, r3, r0
 80017f6:	409a      	lsls	r2, r3
 80017f8:	1e53      	subs	r3, r2, #1
 80017fa:	419a      	sbcs	r2, r3
 80017fc:	4315      	orrs	r5, r2
 80017fe:	2307      	movs	r3, #7
 8001800:	2700      	movs	r7, #0
 8001802:	402b      	ands	r3, r5
 8001804:	e7b0      	b.n	8001768 <__aeabi_dadd+0x2d0>
 8001806:	08ed      	lsrs	r5, r5, #3
 8001808:	4b05      	ldr	r3, [pc, #20]	@ (8001820 <__aeabi_dadd+0x388>)
 800180a:	0762      	lsls	r2, r4, #29
 800180c:	432a      	orrs	r2, r5
 800180e:	08e4      	lsrs	r4, r4, #3
 8001810:	429f      	cmp	r7, r3
 8001812:	d00f      	beq.n	8001834 <__aeabi_dadd+0x39c>
 8001814:	0324      	lsls	r4, r4, #12
 8001816:	0b25      	lsrs	r5, r4, #12
 8001818:	057c      	lsls	r4, r7, #21
 800181a:	0d64      	lsrs	r4, r4, #21
 800181c:	e6d4      	b.n	80015c8 <__aeabi_dadd+0x130>
 800181e:	46c0      	nop			@ (mov r8, r8)
 8001820:	000007ff 	.word	0x000007ff
 8001824:	ff7fffff 	.word	0xff7fffff
 8001828:	000007fe 	.word	0x000007fe
 800182c:	08c0      	lsrs	r0, r0, #3
 800182e:	0762      	lsls	r2, r4, #29
 8001830:	4302      	orrs	r2, r0
 8001832:	08e4      	lsrs	r4, r4, #3
 8001834:	0013      	movs	r3, r2
 8001836:	4323      	orrs	r3, r4
 8001838:	d100      	bne.n	800183c <__aeabi_dadd+0x3a4>
 800183a:	e186      	b.n	8001b4a <__aeabi_dadd+0x6b2>
 800183c:	2580      	movs	r5, #128	@ 0x80
 800183e:	032d      	lsls	r5, r5, #12
 8001840:	4325      	orrs	r5, r4
 8001842:	032d      	lsls	r5, r5, #12
 8001844:	4cc3      	ldr	r4, [pc, #780]	@ (8001b54 <__aeabi_dadd+0x6bc>)
 8001846:	0b2d      	lsrs	r5, r5, #12
 8001848:	e6be      	b.n	80015c8 <__aeabi_dadd+0x130>
 800184a:	4660      	mov	r0, ip
 800184c:	4654      	mov	r4, sl
 800184e:	000e      	movs	r6, r1
 8001850:	0017      	movs	r7, r2
 8001852:	08c5      	lsrs	r5, r0, #3
 8001854:	e7d8      	b.n	8001808 <__aeabi_dadd+0x370>
 8001856:	4cc0      	ldr	r4, [pc, #768]	@ (8001b58 <__aeabi_dadd+0x6c0>)
 8001858:	1aff      	subs	r7, r7, r3
 800185a:	4014      	ands	r4, r2
 800185c:	e696      	b.n	800158c <__aeabi_dadd+0xf4>
 800185e:	4abf      	ldr	r2, [pc, #764]	@ (8001b5c <__aeabi_dadd+0x6c4>)
 8001860:	1c79      	adds	r1, r7, #1
 8001862:	4211      	tst	r1, r2
 8001864:	d16b      	bne.n	800193e <__aeabi_dadd+0x4a6>
 8001866:	0022      	movs	r2, r4
 8001868:	4302      	orrs	r2, r0
 800186a:	2f00      	cmp	r7, #0
 800186c:	d000      	beq.n	8001870 <__aeabi_dadd+0x3d8>
 800186e:	e0db      	b.n	8001a28 <__aeabi_dadd+0x590>
 8001870:	2a00      	cmp	r2, #0
 8001872:	d100      	bne.n	8001876 <__aeabi_dadd+0x3de>
 8001874:	e12d      	b.n	8001ad2 <__aeabi_dadd+0x63a>
 8001876:	4662      	mov	r2, ip
 8001878:	4653      	mov	r3, sl
 800187a:	431a      	orrs	r2, r3
 800187c:	d100      	bne.n	8001880 <__aeabi_dadd+0x3e8>
 800187e:	e0b6      	b.n	80019ee <__aeabi_dadd+0x556>
 8001880:	4663      	mov	r3, ip
 8001882:	18c5      	adds	r5, r0, r3
 8001884:	4285      	cmp	r5, r0
 8001886:	4180      	sbcs	r0, r0
 8001888:	4454      	add	r4, sl
 800188a:	4240      	negs	r0, r0
 800188c:	1824      	adds	r4, r4, r0
 800188e:	0223      	lsls	r3, r4, #8
 8001890:	d502      	bpl.n	8001898 <__aeabi_dadd+0x400>
 8001892:	000f      	movs	r7, r1
 8001894:	4bb0      	ldr	r3, [pc, #704]	@ (8001b58 <__aeabi_dadd+0x6c0>)
 8001896:	401c      	ands	r4, r3
 8001898:	003a      	movs	r2, r7
 800189a:	0028      	movs	r0, r5
 800189c:	e7d8      	b.n	8001850 <__aeabi_dadd+0x3b8>
 800189e:	4662      	mov	r2, ip
 80018a0:	1a85      	subs	r5, r0, r2
 80018a2:	42a8      	cmp	r0, r5
 80018a4:	4192      	sbcs	r2, r2
 80018a6:	4653      	mov	r3, sl
 80018a8:	4252      	negs	r2, r2
 80018aa:	4691      	mov	r9, r2
 80018ac:	1ae3      	subs	r3, r4, r3
 80018ae:	001a      	movs	r2, r3
 80018b0:	464b      	mov	r3, r9
 80018b2:	1ad2      	subs	r2, r2, r3
 80018b4:	0013      	movs	r3, r2
 80018b6:	4691      	mov	r9, r2
 80018b8:	021a      	lsls	r2, r3, #8
 80018ba:	d454      	bmi.n	8001966 <__aeabi_dadd+0x4ce>
 80018bc:	464a      	mov	r2, r9
 80018be:	464c      	mov	r4, r9
 80018c0:	432a      	orrs	r2, r5
 80018c2:	d000      	beq.n	80018c6 <__aeabi_dadd+0x42e>
 80018c4:	e640      	b.n	8001548 <__aeabi_dadd+0xb0>
 80018c6:	2600      	movs	r6, #0
 80018c8:	2400      	movs	r4, #0
 80018ca:	2500      	movs	r5, #0
 80018cc:	e67c      	b.n	80015c8 <__aeabi_dadd+0x130>
 80018ce:	4da1      	ldr	r5, [pc, #644]	@ (8001b54 <__aeabi_dadd+0x6bc>)
 80018d0:	45a9      	cmp	r9, r5
 80018d2:	d100      	bne.n	80018d6 <__aeabi_dadd+0x43e>
 80018d4:	e090      	b.n	80019f8 <__aeabi_dadd+0x560>
 80018d6:	2501      	movs	r5, #1
 80018d8:	2a38      	cmp	r2, #56	@ 0x38
 80018da:	dd00      	ble.n	80018de <__aeabi_dadd+0x446>
 80018dc:	e6ab      	b.n	8001636 <__aeabi_dadd+0x19e>
 80018de:	2580      	movs	r5, #128	@ 0x80
 80018e0:	042d      	lsls	r5, r5, #16
 80018e2:	432c      	orrs	r4, r5
 80018e4:	e695      	b.n	8001612 <__aeabi_dadd+0x17a>
 80018e6:	0011      	movs	r1, r2
 80018e8:	4655      	mov	r5, sl
 80018ea:	3920      	subs	r1, #32
 80018ec:	40cd      	lsrs	r5, r1
 80018ee:	46a9      	mov	r9, r5
 80018f0:	2a20      	cmp	r2, #32
 80018f2:	d006      	beq.n	8001902 <__aeabi_dadd+0x46a>
 80018f4:	2140      	movs	r1, #64	@ 0x40
 80018f6:	4653      	mov	r3, sl
 80018f8:	1a8a      	subs	r2, r1, r2
 80018fa:	4093      	lsls	r3, r2
 80018fc:	4662      	mov	r2, ip
 80018fe:	431a      	orrs	r2, r3
 8001900:	4694      	mov	ip, r2
 8001902:	4665      	mov	r5, ip
 8001904:	1e6b      	subs	r3, r5, #1
 8001906:	419d      	sbcs	r5, r3
 8001908:	464b      	mov	r3, r9
 800190a:	431d      	orrs	r5, r3
 800190c:	e612      	b.n	8001534 <__aeabi_dadd+0x9c>
 800190e:	0021      	movs	r1, r4
 8001910:	4301      	orrs	r1, r0
 8001912:	d100      	bne.n	8001916 <__aeabi_dadd+0x47e>
 8001914:	e0c4      	b.n	8001aa0 <__aeabi_dadd+0x608>
 8001916:	1e51      	subs	r1, r2, #1
 8001918:	2a01      	cmp	r2, #1
 800191a:	d100      	bne.n	800191e <__aeabi_dadd+0x486>
 800191c:	e0fb      	b.n	8001b16 <__aeabi_dadd+0x67e>
 800191e:	4d8d      	ldr	r5, [pc, #564]	@ (8001b54 <__aeabi_dadd+0x6bc>)
 8001920:	42aa      	cmp	r2, r5
 8001922:	d100      	bne.n	8001926 <__aeabi_dadd+0x48e>
 8001924:	e0b5      	b.n	8001a92 <__aeabi_dadd+0x5fa>
 8001926:	2501      	movs	r5, #1
 8001928:	2938      	cmp	r1, #56	@ 0x38
 800192a:	dd00      	ble.n	800192e <__aeabi_dadd+0x496>
 800192c:	e741      	b.n	80017b2 <__aeabi_dadd+0x31a>
 800192e:	000a      	movs	r2, r1
 8001930:	e72f      	b.n	8001792 <__aeabi_dadd+0x2fa>
 8001932:	4c89      	ldr	r4, [pc, #548]	@ (8001b58 <__aeabi_dadd+0x6c0>)
 8001934:	1aff      	subs	r7, r7, r3
 8001936:	4014      	ands	r4, r2
 8001938:	0762      	lsls	r2, r4, #29
 800193a:	08e4      	lsrs	r4, r4, #3
 800193c:	e76a      	b.n	8001814 <__aeabi_dadd+0x37c>
 800193e:	4a85      	ldr	r2, [pc, #532]	@ (8001b54 <__aeabi_dadd+0x6bc>)
 8001940:	4291      	cmp	r1, r2
 8001942:	d100      	bne.n	8001946 <__aeabi_dadd+0x4ae>
 8001944:	e0e3      	b.n	8001b0e <__aeabi_dadd+0x676>
 8001946:	4663      	mov	r3, ip
 8001948:	18c2      	adds	r2, r0, r3
 800194a:	4282      	cmp	r2, r0
 800194c:	4180      	sbcs	r0, r0
 800194e:	0023      	movs	r3, r4
 8001950:	4240      	negs	r0, r0
 8001952:	4453      	add	r3, sl
 8001954:	181b      	adds	r3, r3, r0
 8001956:	07dd      	lsls	r5, r3, #31
 8001958:	085c      	lsrs	r4, r3, #1
 800195a:	2307      	movs	r3, #7
 800195c:	0852      	lsrs	r2, r2, #1
 800195e:	4315      	orrs	r5, r2
 8001960:	000f      	movs	r7, r1
 8001962:	402b      	ands	r3, r5
 8001964:	e700      	b.n	8001768 <__aeabi_dadd+0x2d0>
 8001966:	4663      	mov	r3, ip
 8001968:	1a1d      	subs	r5, r3, r0
 800196a:	45ac      	cmp	ip, r5
 800196c:	4192      	sbcs	r2, r2
 800196e:	4653      	mov	r3, sl
 8001970:	4252      	negs	r2, r2
 8001972:	1b1c      	subs	r4, r3, r4
 8001974:	000e      	movs	r6, r1
 8001976:	4688      	mov	r8, r1
 8001978:	1aa4      	subs	r4, r4, r2
 800197a:	e5e5      	b.n	8001548 <__aeabi_dadd+0xb0>
 800197c:	2d00      	cmp	r5, #0
 800197e:	d000      	beq.n	8001982 <__aeabi_dadd+0x4ea>
 8001980:	e091      	b.n	8001aa6 <__aeabi_dadd+0x60e>
 8001982:	2a00      	cmp	r2, #0
 8001984:	d138      	bne.n	80019f8 <__aeabi_dadd+0x560>
 8001986:	2480      	movs	r4, #128	@ 0x80
 8001988:	2600      	movs	r6, #0
 800198a:	0324      	lsls	r4, r4, #12
 800198c:	e756      	b.n	800183c <__aeabi_dadd+0x3a4>
 800198e:	4663      	mov	r3, ip
 8001990:	18c5      	adds	r5, r0, r3
 8001992:	4285      	cmp	r5, r0
 8001994:	4180      	sbcs	r0, r0
 8001996:	4454      	add	r4, sl
 8001998:	4240      	negs	r0, r0
 800199a:	1824      	adds	r4, r4, r0
 800199c:	2701      	movs	r7, #1
 800199e:	0223      	lsls	r3, r4, #8
 80019a0:	d400      	bmi.n	80019a4 <__aeabi_dadd+0x50c>
 80019a2:	e6df      	b.n	8001764 <__aeabi_dadd+0x2cc>
 80019a4:	2702      	movs	r7, #2
 80019a6:	e687      	b.n	80016b8 <__aeabi_dadd+0x220>
 80019a8:	4663      	mov	r3, ip
 80019aa:	1ac5      	subs	r5, r0, r3
 80019ac:	42a8      	cmp	r0, r5
 80019ae:	4180      	sbcs	r0, r0
 80019b0:	4653      	mov	r3, sl
 80019b2:	4240      	negs	r0, r0
 80019b4:	1ae4      	subs	r4, r4, r3
 80019b6:	2701      	movs	r7, #1
 80019b8:	1a24      	subs	r4, r4, r0
 80019ba:	e5c0      	b.n	800153e <__aeabi_dadd+0xa6>
 80019bc:	0762      	lsls	r2, r4, #29
 80019be:	08c0      	lsrs	r0, r0, #3
 80019c0:	4302      	orrs	r2, r0
 80019c2:	08e4      	lsrs	r4, r4, #3
 80019c4:	e736      	b.n	8001834 <__aeabi_dadd+0x39c>
 80019c6:	0011      	movs	r1, r2
 80019c8:	4653      	mov	r3, sl
 80019ca:	3920      	subs	r1, #32
 80019cc:	40cb      	lsrs	r3, r1
 80019ce:	4699      	mov	r9, r3
 80019d0:	2a20      	cmp	r2, #32
 80019d2:	d006      	beq.n	80019e2 <__aeabi_dadd+0x54a>
 80019d4:	2140      	movs	r1, #64	@ 0x40
 80019d6:	4653      	mov	r3, sl
 80019d8:	1a8a      	subs	r2, r1, r2
 80019da:	4093      	lsls	r3, r2
 80019dc:	4662      	mov	r2, ip
 80019de:	431a      	orrs	r2, r3
 80019e0:	4694      	mov	ip, r2
 80019e2:	4665      	mov	r5, ip
 80019e4:	1e6b      	subs	r3, r5, #1
 80019e6:	419d      	sbcs	r5, r3
 80019e8:	464b      	mov	r3, r9
 80019ea:	431d      	orrs	r5, r3
 80019ec:	e659      	b.n	80016a2 <__aeabi_dadd+0x20a>
 80019ee:	0762      	lsls	r2, r4, #29
 80019f0:	08c0      	lsrs	r0, r0, #3
 80019f2:	4302      	orrs	r2, r0
 80019f4:	08e4      	lsrs	r4, r4, #3
 80019f6:	e70d      	b.n	8001814 <__aeabi_dadd+0x37c>
 80019f8:	4653      	mov	r3, sl
 80019fa:	075a      	lsls	r2, r3, #29
 80019fc:	4663      	mov	r3, ip
 80019fe:	08d8      	lsrs	r0, r3, #3
 8001a00:	4653      	mov	r3, sl
 8001a02:	000e      	movs	r6, r1
 8001a04:	4302      	orrs	r2, r0
 8001a06:	08dc      	lsrs	r4, r3, #3
 8001a08:	e714      	b.n	8001834 <__aeabi_dadd+0x39c>
 8001a0a:	0015      	movs	r5, r2
 8001a0c:	0026      	movs	r6, r4
 8001a0e:	3d20      	subs	r5, #32
 8001a10:	40ee      	lsrs	r6, r5
 8001a12:	2a20      	cmp	r2, #32
 8001a14:	d003      	beq.n	8001a1e <__aeabi_dadd+0x586>
 8001a16:	2540      	movs	r5, #64	@ 0x40
 8001a18:	1aaa      	subs	r2, r5, r2
 8001a1a:	4094      	lsls	r4, r2
 8001a1c:	4320      	orrs	r0, r4
 8001a1e:	1e42      	subs	r2, r0, #1
 8001a20:	4190      	sbcs	r0, r2
 8001a22:	0005      	movs	r5, r0
 8001a24:	4335      	orrs	r5, r6
 8001a26:	e606      	b.n	8001636 <__aeabi_dadd+0x19e>
 8001a28:	2a00      	cmp	r2, #0
 8001a2a:	d07c      	beq.n	8001b26 <__aeabi_dadd+0x68e>
 8001a2c:	4662      	mov	r2, ip
 8001a2e:	4653      	mov	r3, sl
 8001a30:	08c0      	lsrs	r0, r0, #3
 8001a32:	431a      	orrs	r2, r3
 8001a34:	d100      	bne.n	8001a38 <__aeabi_dadd+0x5a0>
 8001a36:	e6fa      	b.n	800182e <__aeabi_dadd+0x396>
 8001a38:	0762      	lsls	r2, r4, #29
 8001a3a:	4310      	orrs	r0, r2
 8001a3c:	2280      	movs	r2, #128	@ 0x80
 8001a3e:	08e4      	lsrs	r4, r4, #3
 8001a40:	0312      	lsls	r2, r2, #12
 8001a42:	4214      	tst	r4, r2
 8001a44:	d008      	beq.n	8001a58 <__aeabi_dadd+0x5c0>
 8001a46:	08d9      	lsrs	r1, r3, #3
 8001a48:	4211      	tst	r1, r2
 8001a4a:	d105      	bne.n	8001a58 <__aeabi_dadd+0x5c0>
 8001a4c:	4663      	mov	r3, ip
 8001a4e:	08d8      	lsrs	r0, r3, #3
 8001a50:	4653      	mov	r3, sl
 8001a52:	000c      	movs	r4, r1
 8001a54:	075b      	lsls	r3, r3, #29
 8001a56:	4318      	orrs	r0, r3
 8001a58:	0f42      	lsrs	r2, r0, #29
 8001a5a:	00c0      	lsls	r0, r0, #3
 8001a5c:	08c0      	lsrs	r0, r0, #3
 8001a5e:	0752      	lsls	r2, r2, #29
 8001a60:	4302      	orrs	r2, r0
 8001a62:	e6e7      	b.n	8001834 <__aeabi_dadd+0x39c>
 8001a64:	2a00      	cmp	r2, #0
 8001a66:	d100      	bne.n	8001a6a <__aeabi_dadd+0x5d2>
 8001a68:	e72d      	b.n	80018c6 <__aeabi_dadd+0x42e>
 8001a6a:	4663      	mov	r3, ip
 8001a6c:	08d8      	lsrs	r0, r3, #3
 8001a6e:	4653      	mov	r3, sl
 8001a70:	075a      	lsls	r2, r3, #29
 8001a72:	000e      	movs	r6, r1
 8001a74:	4302      	orrs	r2, r0
 8001a76:	08dc      	lsrs	r4, r3, #3
 8001a78:	e6cc      	b.n	8001814 <__aeabi_dadd+0x37c>
 8001a7a:	4663      	mov	r3, ip
 8001a7c:	1a1d      	subs	r5, r3, r0
 8001a7e:	45ac      	cmp	ip, r5
 8001a80:	4192      	sbcs	r2, r2
 8001a82:	4653      	mov	r3, sl
 8001a84:	4252      	negs	r2, r2
 8001a86:	1b1c      	subs	r4, r3, r4
 8001a88:	000e      	movs	r6, r1
 8001a8a:	4688      	mov	r8, r1
 8001a8c:	1aa4      	subs	r4, r4, r2
 8001a8e:	3701      	adds	r7, #1
 8001a90:	e555      	b.n	800153e <__aeabi_dadd+0xa6>
 8001a92:	4663      	mov	r3, ip
 8001a94:	08d9      	lsrs	r1, r3, #3
 8001a96:	4653      	mov	r3, sl
 8001a98:	075a      	lsls	r2, r3, #29
 8001a9a:	430a      	orrs	r2, r1
 8001a9c:	08dc      	lsrs	r4, r3, #3
 8001a9e:	e6c9      	b.n	8001834 <__aeabi_dadd+0x39c>
 8001aa0:	4660      	mov	r0, ip
 8001aa2:	4654      	mov	r4, sl
 8001aa4:	e6d4      	b.n	8001850 <__aeabi_dadd+0x3b8>
 8001aa6:	08c0      	lsrs	r0, r0, #3
 8001aa8:	2a00      	cmp	r2, #0
 8001aaa:	d100      	bne.n	8001aae <__aeabi_dadd+0x616>
 8001aac:	e6bf      	b.n	800182e <__aeabi_dadd+0x396>
 8001aae:	0762      	lsls	r2, r4, #29
 8001ab0:	4310      	orrs	r0, r2
 8001ab2:	2280      	movs	r2, #128	@ 0x80
 8001ab4:	08e4      	lsrs	r4, r4, #3
 8001ab6:	0312      	lsls	r2, r2, #12
 8001ab8:	4214      	tst	r4, r2
 8001aba:	d0cd      	beq.n	8001a58 <__aeabi_dadd+0x5c0>
 8001abc:	08dd      	lsrs	r5, r3, #3
 8001abe:	4215      	tst	r5, r2
 8001ac0:	d1ca      	bne.n	8001a58 <__aeabi_dadd+0x5c0>
 8001ac2:	4663      	mov	r3, ip
 8001ac4:	08d8      	lsrs	r0, r3, #3
 8001ac6:	4653      	mov	r3, sl
 8001ac8:	075b      	lsls	r3, r3, #29
 8001aca:	000e      	movs	r6, r1
 8001acc:	002c      	movs	r4, r5
 8001ace:	4318      	orrs	r0, r3
 8001ad0:	e7c2      	b.n	8001a58 <__aeabi_dadd+0x5c0>
 8001ad2:	4663      	mov	r3, ip
 8001ad4:	08d9      	lsrs	r1, r3, #3
 8001ad6:	4653      	mov	r3, sl
 8001ad8:	075a      	lsls	r2, r3, #29
 8001ada:	430a      	orrs	r2, r1
 8001adc:	08dc      	lsrs	r4, r3, #3
 8001ade:	e699      	b.n	8001814 <__aeabi_dadd+0x37c>
 8001ae0:	4663      	mov	r3, ip
 8001ae2:	08d8      	lsrs	r0, r3, #3
 8001ae4:	4653      	mov	r3, sl
 8001ae6:	075a      	lsls	r2, r3, #29
 8001ae8:	000e      	movs	r6, r1
 8001aea:	4302      	orrs	r2, r0
 8001aec:	08dc      	lsrs	r4, r3, #3
 8001aee:	e6a1      	b.n	8001834 <__aeabi_dadd+0x39c>
 8001af0:	0011      	movs	r1, r2
 8001af2:	0027      	movs	r7, r4
 8001af4:	3920      	subs	r1, #32
 8001af6:	40cf      	lsrs	r7, r1
 8001af8:	2a20      	cmp	r2, #32
 8001afa:	d003      	beq.n	8001b04 <__aeabi_dadd+0x66c>
 8001afc:	2140      	movs	r1, #64	@ 0x40
 8001afe:	1a8a      	subs	r2, r1, r2
 8001b00:	4094      	lsls	r4, r2
 8001b02:	4320      	orrs	r0, r4
 8001b04:	1e42      	subs	r2, r0, #1
 8001b06:	4190      	sbcs	r0, r2
 8001b08:	0005      	movs	r5, r0
 8001b0a:	433d      	orrs	r5, r7
 8001b0c:	e651      	b.n	80017b2 <__aeabi_dadd+0x31a>
 8001b0e:	000c      	movs	r4, r1
 8001b10:	2500      	movs	r5, #0
 8001b12:	2200      	movs	r2, #0
 8001b14:	e558      	b.n	80015c8 <__aeabi_dadd+0x130>
 8001b16:	4460      	add	r0, ip
 8001b18:	4560      	cmp	r0, ip
 8001b1a:	4192      	sbcs	r2, r2
 8001b1c:	4454      	add	r4, sl
 8001b1e:	4252      	negs	r2, r2
 8001b20:	0005      	movs	r5, r0
 8001b22:	18a4      	adds	r4, r4, r2
 8001b24:	e73a      	b.n	800199c <__aeabi_dadd+0x504>
 8001b26:	4653      	mov	r3, sl
 8001b28:	075a      	lsls	r2, r3, #29
 8001b2a:	4663      	mov	r3, ip
 8001b2c:	08d9      	lsrs	r1, r3, #3
 8001b2e:	4653      	mov	r3, sl
 8001b30:	430a      	orrs	r2, r1
 8001b32:	08dc      	lsrs	r4, r3, #3
 8001b34:	e67e      	b.n	8001834 <__aeabi_dadd+0x39c>
 8001b36:	001a      	movs	r2, r3
 8001b38:	001c      	movs	r4, r3
 8001b3a:	432a      	orrs	r2, r5
 8001b3c:	d000      	beq.n	8001b40 <__aeabi_dadd+0x6a8>
 8001b3e:	e6ab      	b.n	8001898 <__aeabi_dadd+0x400>
 8001b40:	e6c1      	b.n	80018c6 <__aeabi_dadd+0x42e>
 8001b42:	2120      	movs	r1, #32
 8001b44:	2500      	movs	r5, #0
 8001b46:	1a09      	subs	r1, r1, r0
 8001b48:	e519      	b.n	800157e <__aeabi_dadd+0xe6>
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	2500      	movs	r5, #0
 8001b4e:	4c01      	ldr	r4, [pc, #4]	@ (8001b54 <__aeabi_dadd+0x6bc>)
 8001b50:	e53a      	b.n	80015c8 <__aeabi_dadd+0x130>
 8001b52:	46c0      	nop			@ (mov r8, r8)
 8001b54:	000007ff 	.word	0x000007ff
 8001b58:	ff7fffff 	.word	0xff7fffff
 8001b5c:	000007fe 	.word	0x000007fe

08001b60 <__aeabi_dmul>:
 8001b60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b62:	4657      	mov	r7, sl
 8001b64:	46de      	mov	lr, fp
 8001b66:	464e      	mov	r6, r9
 8001b68:	4645      	mov	r5, r8
 8001b6a:	b5e0      	push	{r5, r6, r7, lr}
 8001b6c:	001f      	movs	r7, r3
 8001b6e:	030b      	lsls	r3, r1, #12
 8001b70:	0b1b      	lsrs	r3, r3, #12
 8001b72:	0016      	movs	r6, r2
 8001b74:	469a      	mov	sl, r3
 8001b76:	0fca      	lsrs	r2, r1, #31
 8001b78:	004b      	lsls	r3, r1, #1
 8001b7a:	0004      	movs	r4, r0
 8001b7c:	4693      	mov	fp, r2
 8001b7e:	b087      	sub	sp, #28
 8001b80:	0d5b      	lsrs	r3, r3, #21
 8001b82:	d100      	bne.n	8001b86 <__aeabi_dmul+0x26>
 8001b84:	e0d5      	b.n	8001d32 <__aeabi_dmul+0x1d2>
 8001b86:	4abb      	ldr	r2, [pc, #748]	@ (8001e74 <__aeabi_dmul+0x314>)
 8001b88:	4293      	cmp	r3, r2
 8001b8a:	d100      	bne.n	8001b8e <__aeabi_dmul+0x2e>
 8001b8c:	e0f8      	b.n	8001d80 <__aeabi_dmul+0x220>
 8001b8e:	4651      	mov	r1, sl
 8001b90:	0f42      	lsrs	r2, r0, #29
 8001b92:	00c9      	lsls	r1, r1, #3
 8001b94:	430a      	orrs	r2, r1
 8001b96:	2180      	movs	r1, #128	@ 0x80
 8001b98:	0409      	lsls	r1, r1, #16
 8001b9a:	4311      	orrs	r1, r2
 8001b9c:	00c2      	lsls	r2, r0, #3
 8001b9e:	4691      	mov	r9, r2
 8001ba0:	4ab5      	ldr	r2, [pc, #724]	@ (8001e78 <__aeabi_dmul+0x318>)
 8001ba2:	468a      	mov	sl, r1
 8001ba4:	189d      	adds	r5, r3, r2
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	4698      	mov	r8, r3
 8001baa:	9302      	str	r3, [sp, #8]
 8001bac:	033c      	lsls	r4, r7, #12
 8001bae:	007b      	lsls	r3, r7, #1
 8001bb0:	0ffa      	lsrs	r2, r7, #31
 8001bb2:	0030      	movs	r0, r6
 8001bb4:	0b24      	lsrs	r4, r4, #12
 8001bb6:	0d5b      	lsrs	r3, r3, #21
 8001bb8:	9200      	str	r2, [sp, #0]
 8001bba:	d100      	bne.n	8001bbe <__aeabi_dmul+0x5e>
 8001bbc:	e096      	b.n	8001cec <__aeabi_dmul+0x18c>
 8001bbe:	4aad      	ldr	r2, [pc, #692]	@ (8001e74 <__aeabi_dmul+0x314>)
 8001bc0:	4293      	cmp	r3, r2
 8001bc2:	d031      	beq.n	8001c28 <__aeabi_dmul+0xc8>
 8001bc4:	0f72      	lsrs	r2, r6, #29
 8001bc6:	00e4      	lsls	r4, r4, #3
 8001bc8:	4322      	orrs	r2, r4
 8001bca:	2480      	movs	r4, #128	@ 0x80
 8001bcc:	0424      	lsls	r4, r4, #16
 8001bce:	4314      	orrs	r4, r2
 8001bd0:	4aa9      	ldr	r2, [pc, #676]	@ (8001e78 <__aeabi_dmul+0x318>)
 8001bd2:	00f0      	lsls	r0, r6, #3
 8001bd4:	4694      	mov	ip, r2
 8001bd6:	4463      	add	r3, ip
 8001bd8:	195b      	adds	r3, r3, r5
 8001bda:	1c5a      	adds	r2, r3, #1
 8001bdc:	9201      	str	r2, [sp, #4]
 8001bde:	4642      	mov	r2, r8
 8001be0:	2600      	movs	r6, #0
 8001be2:	2a0a      	cmp	r2, #10
 8001be4:	dc42      	bgt.n	8001c6c <__aeabi_dmul+0x10c>
 8001be6:	465a      	mov	r2, fp
 8001be8:	9900      	ldr	r1, [sp, #0]
 8001bea:	404a      	eors	r2, r1
 8001bec:	4693      	mov	fp, r2
 8001bee:	4642      	mov	r2, r8
 8001bf0:	2a02      	cmp	r2, #2
 8001bf2:	dc32      	bgt.n	8001c5a <__aeabi_dmul+0xfa>
 8001bf4:	3a01      	subs	r2, #1
 8001bf6:	2a01      	cmp	r2, #1
 8001bf8:	d900      	bls.n	8001bfc <__aeabi_dmul+0x9c>
 8001bfa:	e149      	b.n	8001e90 <__aeabi_dmul+0x330>
 8001bfc:	2e02      	cmp	r6, #2
 8001bfe:	d100      	bne.n	8001c02 <__aeabi_dmul+0xa2>
 8001c00:	e0ca      	b.n	8001d98 <__aeabi_dmul+0x238>
 8001c02:	2e01      	cmp	r6, #1
 8001c04:	d13d      	bne.n	8001c82 <__aeabi_dmul+0x122>
 8001c06:	2300      	movs	r3, #0
 8001c08:	2400      	movs	r4, #0
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	0010      	movs	r0, r2
 8001c0e:	465a      	mov	r2, fp
 8001c10:	051b      	lsls	r3, r3, #20
 8001c12:	4323      	orrs	r3, r4
 8001c14:	07d2      	lsls	r2, r2, #31
 8001c16:	4313      	orrs	r3, r2
 8001c18:	0019      	movs	r1, r3
 8001c1a:	b007      	add	sp, #28
 8001c1c:	bcf0      	pop	{r4, r5, r6, r7}
 8001c1e:	46bb      	mov	fp, r7
 8001c20:	46b2      	mov	sl, r6
 8001c22:	46a9      	mov	r9, r5
 8001c24:	46a0      	mov	r8, r4
 8001c26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c28:	4b92      	ldr	r3, [pc, #584]	@ (8001e74 <__aeabi_dmul+0x314>)
 8001c2a:	4326      	orrs	r6, r4
 8001c2c:	18eb      	adds	r3, r5, r3
 8001c2e:	2e00      	cmp	r6, #0
 8001c30:	d100      	bne.n	8001c34 <__aeabi_dmul+0xd4>
 8001c32:	e0bb      	b.n	8001dac <__aeabi_dmul+0x24c>
 8001c34:	2203      	movs	r2, #3
 8001c36:	4641      	mov	r1, r8
 8001c38:	4311      	orrs	r1, r2
 8001c3a:	465a      	mov	r2, fp
 8001c3c:	4688      	mov	r8, r1
 8001c3e:	9900      	ldr	r1, [sp, #0]
 8001c40:	404a      	eors	r2, r1
 8001c42:	2180      	movs	r1, #128	@ 0x80
 8001c44:	0109      	lsls	r1, r1, #4
 8001c46:	468c      	mov	ip, r1
 8001c48:	0029      	movs	r1, r5
 8001c4a:	4461      	add	r1, ip
 8001c4c:	9101      	str	r1, [sp, #4]
 8001c4e:	4641      	mov	r1, r8
 8001c50:	290a      	cmp	r1, #10
 8001c52:	dd00      	ble.n	8001c56 <__aeabi_dmul+0xf6>
 8001c54:	e233      	b.n	80020be <__aeabi_dmul+0x55e>
 8001c56:	4693      	mov	fp, r2
 8001c58:	2603      	movs	r6, #3
 8001c5a:	4642      	mov	r2, r8
 8001c5c:	2701      	movs	r7, #1
 8001c5e:	4097      	lsls	r7, r2
 8001c60:	21a6      	movs	r1, #166	@ 0xa6
 8001c62:	003a      	movs	r2, r7
 8001c64:	00c9      	lsls	r1, r1, #3
 8001c66:	400a      	ands	r2, r1
 8001c68:	420f      	tst	r7, r1
 8001c6a:	d031      	beq.n	8001cd0 <__aeabi_dmul+0x170>
 8001c6c:	9e02      	ldr	r6, [sp, #8]
 8001c6e:	2e02      	cmp	r6, #2
 8001c70:	d100      	bne.n	8001c74 <__aeabi_dmul+0x114>
 8001c72:	e235      	b.n	80020e0 <__aeabi_dmul+0x580>
 8001c74:	2e03      	cmp	r6, #3
 8001c76:	d100      	bne.n	8001c7a <__aeabi_dmul+0x11a>
 8001c78:	e1d2      	b.n	8002020 <__aeabi_dmul+0x4c0>
 8001c7a:	4654      	mov	r4, sl
 8001c7c:	4648      	mov	r0, r9
 8001c7e:	2e01      	cmp	r6, #1
 8001c80:	d0c1      	beq.n	8001c06 <__aeabi_dmul+0xa6>
 8001c82:	9a01      	ldr	r2, [sp, #4]
 8001c84:	4b7d      	ldr	r3, [pc, #500]	@ (8001e7c <__aeabi_dmul+0x31c>)
 8001c86:	4694      	mov	ip, r2
 8001c88:	4463      	add	r3, ip
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	dc00      	bgt.n	8001c90 <__aeabi_dmul+0x130>
 8001c8e:	e0c0      	b.n	8001e12 <__aeabi_dmul+0x2b2>
 8001c90:	0742      	lsls	r2, r0, #29
 8001c92:	d009      	beq.n	8001ca8 <__aeabi_dmul+0x148>
 8001c94:	220f      	movs	r2, #15
 8001c96:	4002      	ands	r2, r0
 8001c98:	2a04      	cmp	r2, #4
 8001c9a:	d005      	beq.n	8001ca8 <__aeabi_dmul+0x148>
 8001c9c:	1d02      	adds	r2, r0, #4
 8001c9e:	4282      	cmp	r2, r0
 8001ca0:	4180      	sbcs	r0, r0
 8001ca2:	4240      	negs	r0, r0
 8001ca4:	1824      	adds	r4, r4, r0
 8001ca6:	0010      	movs	r0, r2
 8001ca8:	01e2      	lsls	r2, r4, #7
 8001caa:	d506      	bpl.n	8001cba <__aeabi_dmul+0x15a>
 8001cac:	4b74      	ldr	r3, [pc, #464]	@ (8001e80 <__aeabi_dmul+0x320>)
 8001cae:	9a01      	ldr	r2, [sp, #4]
 8001cb0:	401c      	ands	r4, r3
 8001cb2:	2380      	movs	r3, #128	@ 0x80
 8001cb4:	4694      	mov	ip, r2
 8001cb6:	00db      	lsls	r3, r3, #3
 8001cb8:	4463      	add	r3, ip
 8001cba:	4a72      	ldr	r2, [pc, #456]	@ (8001e84 <__aeabi_dmul+0x324>)
 8001cbc:	4293      	cmp	r3, r2
 8001cbe:	dc6b      	bgt.n	8001d98 <__aeabi_dmul+0x238>
 8001cc0:	0762      	lsls	r2, r4, #29
 8001cc2:	08c0      	lsrs	r0, r0, #3
 8001cc4:	0264      	lsls	r4, r4, #9
 8001cc6:	055b      	lsls	r3, r3, #21
 8001cc8:	4302      	orrs	r2, r0
 8001cca:	0b24      	lsrs	r4, r4, #12
 8001ccc:	0d5b      	lsrs	r3, r3, #21
 8001cce:	e79d      	b.n	8001c0c <__aeabi_dmul+0xac>
 8001cd0:	2190      	movs	r1, #144	@ 0x90
 8001cd2:	0089      	lsls	r1, r1, #2
 8001cd4:	420f      	tst	r7, r1
 8001cd6:	d163      	bne.n	8001da0 <__aeabi_dmul+0x240>
 8001cd8:	2288      	movs	r2, #136	@ 0x88
 8001cda:	423a      	tst	r2, r7
 8001cdc:	d100      	bne.n	8001ce0 <__aeabi_dmul+0x180>
 8001cde:	e0d7      	b.n	8001e90 <__aeabi_dmul+0x330>
 8001ce0:	9b00      	ldr	r3, [sp, #0]
 8001ce2:	46a2      	mov	sl, r4
 8001ce4:	469b      	mov	fp, r3
 8001ce6:	4681      	mov	r9, r0
 8001ce8:	9602      	str	r6, [sp, #8]
 8001cea:	e7bf      	b.n	8001c6c <__aeabi_dmul+0x10c>
 8001cec:	0023      	movs	r3, r4
 8001cee:	4333      	orrs	r3, r6
 8001cf0:	d100      	bne.n	8001cf4 <__aeabi_dmul+0x194>
 8001cf2:	e07f      	b.n	8001df4 <__aeabi_dmul+0x294>
 8001cf4:	2c00      	cmp	r4, #0
 8001cf6:	d100      	bne.n	8001cfa <__aeabi_dmul+0x19a>
 8001cf8:	e1ad      	b.n	8002056 <__aeabi_dmul+0x4f6>
 8001cfa:	0020      	movs	r0, r4
 8001cfc:	f000 fe60 	bl	80029c0 <__clzsi2>
 8001d00:	0002      	movs	r2, r0
 8001d02:	0003      	movs	r3, r0
 8001d04:	3a0b      	subs	r2, #11
 8001d06:	201d      	movs	r0, #29
 8001d08:	0019      	movs	r1, r3
 8001d0a:	1a82      	subs	r2, r0, r2
 8001d0c:	0030      	movs	r0, r6
 8001d0e:	3908      	subs	r1, #8
 8001d10:	40d0      	lsrs	r0, r2
 8001d12:	408c      	lsls	r4, r1
 8001d14:	4304      	orrs	r4, r0
 8001d16:	0030      	movs	r0, r6
 8001d18:	4088      	lsls	r0, r1
 8001d1a:	4a5b      	ldr	r2, [pc, #364]	@ (8001e88 <__aeabi_dmul+0x328>)
 8001d1c:	1aeb      	subs	r3, r5, r3
 8001d1e:	4694      	mov	ip, r2
 8001d20:	4463      	add	r3, ip
 8001d22:	1c5a      	adds	r2, r3, #1
 8001d24:	9201      	str	r2, [sp, #4]
 8001d26:	4642      	mov	r2, r8
 8001d28:	2600      	movs	r6, #0
 8001d2a:	2a0a      	cmp	r2, #10
 8001d2c:	dc00      	bgt.n	8001d30 <__aeabi_dmul+0x1d0>
 8001d2e:	e75a      	b.n	8001be6 <__aeabi_dmul+0x86>
 8001d30:	e79c      	b.n	8001c6c <__aeabi_dmul+0x10c>
 8001d32:	4653      	mov	r3, sl
 8001d34:	4303      	orrs	r3, r0
 8001d36:	4699      	mov	r9, r3
 8001d38:	d054      	beq.n	8001de4 <__aeabi_dmul+0x284>
 8001d3a:	4653      	mov	r3, sl
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d100      	bne.n	8001d42 <__aeabi_dmul+0x1e2>
 8001d40:	e177      	b.n	8002032 <__aeabi_dmul+0x4d2>
 8001d42:	4650      	mov	r0, sl
 8001d44:	f000 fe3c 	bl	80029c0 <__clzsi2>
 8001d48:	230b      	movs	r3, #11
 8001d4a:	425b      	negs	r3, r3
 8001d4c:	469c      	mov	ip, r3
 8001d4e:	0002      	movs	r2, r0
 8001d50:	4484      	add	ip, r0
 8001d52:	0011      	movs	r1, r2
 8001d54:	4650      	mov	r0, sl
 8001d56:	3908      	subs	r1, #8
 8001d58:	4088      	lsls	r0, r1
 8001d5a:	231d      	movs	r3, #29
 8001d5c:	4680      	mov	r8, r0
 8001d5e:	4660      	mov	r0, ip
 8001d60:	1a1b      	subs	r3, r3, r0
 8001d62:	0020      	movs	r0, r4
 8001d64:	40d8      	lsrs	r0, r3
 8001d66:	0003      	movs	r3, r0
 8001d68:	4640      	mov	r0, r8
 8001d6a:	4303      	orrs	r3, r0
 8001d6c:	469a      	mov	sl, r3
 8001d6e:	0023      	movs	r3, r4
 8001d70:	408b      	lsls	r3, r1
 8001d72:	4699      	mov	r9, r3
 8001d74:	2300      	movs	r3, #0
 8001d76:	4d44      	ldr	r5, [pc, #272]	@ (8001e88 <__aeabi_dmul+0x328>)
 8001d78:	4698      	mov	r8, r3
 8001d7a:	1aad      	subs	r5, r5, r2
 8001d7c:	9302      	str	r3, [sp, #8]
 8001d7e:	e715      	b.n	8001bac <__aeabi_dmul+0x4c>
 8001d80:	4652      	mov	r2, sl
 8001d82:	4302      	orrs	r2, r0
 8001d84:	4691      	mov	r9, r2
 8001d86:	d126      	bne.n	8001dd6 <__aeabi_dmul+0x276>
 8001d88:	2200      	movs	r2, #0
 8001d8a:	001d      	movs	r5, r3
 8001d8c:	2302      	movs	r3, #2
 8001d8e:	4692      	mov	sl, r2
 8001d90:	3208      	adds	r2, #8
 8001d92:	4690      	mov	r8, r2
 8001d94:	9302      	str	r3, [sp, #8]
 8001d96:	e709      	b.n	8001bac <__aeabi_dmul+0x4c>
 8001d98:	2400      	movs	r4, #0
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	4b35      	ldr	r3, [pc, #212]	@ (8001e74 <__aeabi_dmul+0x314>)
 8001d9e:	e735      	b.n	8001c0c <__aeabi_dmul+0xac>
 8001da0:	2300      	movs	r3, #0
 8001da2:	2480      	movs	r4, #128	@ 0x80
 8001da4:	469b      	mov	fp, r3
 8001da6:	0324      	lsls	r4, r4, #12
 8001da8:	4b32      	ldr	r3, [pc, #200]	@ (8001e74 <__aeabi_dmul+0x314>)
 8001daa:	e72f      	b.n	8001c0c <__aeabi_dmul+0xac>
 8001dac:	2202      	movs	r2, #2
 8001dae:	4641      	mov	r1, r8
 8001db0:	4311      	orrs	r1, r2
 8001db2:	2280      	movs	r2, #128	@ 0x80
 8001db4:	0112      	lsls	r2, r2, #4
 8001db6:	4694      	mov	ip, r2
 8001db8:	002a      	movs	r2, r5
 8001dba:	4462      	add	r2, ip
 8001dbc:	4688      	mov	r8, r1
 8001dbe:	9201      	str	r2, [sp, #4]
 8001dc0:	290a      	cmp	r1, #10
 8001dc2:	dd00      	ble.n	8001dc6 <__aeabi_dmul+0x266>
 8001dc4:	e752      	b.n	8001c6c <__aeabi_dmul+0x10c>
 8001dc6:	465a      	mov	r2, fp
 8001dc8:	2000      	movs	r0, #0
 8001dca:	9900      	ldr	r1, [sp, #0]
 8001dcc:	0004      	movs	r4, r0
 8001dce:	404a      	eors	r2, r1
 8001dd0:	4693      	mov	fp, r2
 8001dd2:	2602      	movs	r6, #2
 8001dd4:	e70b      	b.n	8001bee <__aeabi_dmul+0x8e>
 8001dd6:	220c      	movs	r2, #12
 8001dd8:	001d      	movs	r5, r3
 8001dda:	2303      	movs	r3, #3
 8001ddc:	4681      	mov	r9, r0
 8001dde:	4690      	mov	r8, r2
 8001de0:	9302      	str	r3, [sp, #8]
 8001de2:	e6e3      	b.n	8001bac <__aeabi_dmul+0x4c>
 8001de4:	2300      	movs	r3, #0
 8001de6:	469a      	mov	sl, r3
 8001de8:	3304      	adds	r3, #4
 8001dea:	4698      	mov	r8, r3
 8001dec:	3b03      	subs	r3, #3
 8001dee:	2500      	movs	r5, #0
 8001df0:	9302      	str	r3, [sp, #8]
 8001df2:	e6db      	b.n	8001bac <__aeabi_dmul+0x4c>
 8001df4:	4642      	mov	r2, r8
 8001df6:	3301      	adds	r3, #1
 8001df8:	431a      	orrs	r2, r3
 8001dfa:	002b      	movs	r3, r5
 8001dfc:	4690      	mov	r8, r2
 8001dfe:	1c5a      	adds	r2, r3, #1
 8001e00:	9201      	str	r2, [sp, #4]
 8001e02:	4642      	mov	r2, r8
 8001e04:	2400      	movs	r4, #0
 8001e06:	2000      	movs	r0, #0
 8001e08:	2601      	movs	r6, #1
 8001e0a:	2a0a      	cmp	r2, #10
 8001e0c:	dc00      	bgt.n	8001e10 <__aeabi_dmul+0x2b0>
 8001e0e:	e6ea      	b.n	8001be6 <__aeabi_dmul+0x86>
 8001e10:	e72c      	b.n	8001c6c <__aeabi_dmul+0x10c>
 8001e12:	2201      	movs	r2, #1
 8001e14:	1ad2      	subs	r2, r2, r3
 8001e16:	2a38      	cmp	r2, #56	@ 0x38
 8001e18:	dd00      	ble.n	8001e1c <__aeabi_dmul+0x2bc>
 8001e1a:	e6f4      	b.n	8001c06 <__aeabi_dmul+0xa6>
 8001e1c:	2a1f      	cmp	r2, #31
 8001e1e:	dc00      	bgt.n	8001e22 <__aeabi_dmul+0x2c2>
 8001e20:	e12a      	b.n	8002078 <__aeabi_dmul+0x518>
 8001e22:	211f      	movs	r1, #31
 8001e24:	4249      	negs	r1, r1
 8001e26:	1acb      	subs	r3, r1, r3
 8001e28:	0021      	movs	r1, r4
 8001e2a:	40d9      	lsrs	r1, r3
 8001e2c:	000b      	movs	r3, r1
 8001e2e:	2a20      	cmp	r2, #32
 8001e30:	d005      	beq.n	8001e3e <__aeabi_dmul+0x2de>
 8001e32:	4a16      	ldr	r2, [pc, #88]	@ (8001e8c <__aeabi_dmul+0x32c>)
 8001e34:	9d01      	ldr	r5, [sp, #4]
 8001e36:	4694      	mov	ip, r2
 8001e38:	4465      	add	r5, ip
 8001e3a:	40ac      	lsls	r4, r5
 8001e3c:	4320      	orrs	r0, r4
 8001e3e:	1e42      	subs	r2, r0, #1
 8001e40:	4190      	sbcs	r0, r2
 8001e42:	4318      	orrs	r0, r3
 8001e44:	2307      	movs	r3, #7
 8001e46:	0019      	movs	r1, r3
 8001e48:	2400      	movs	r4, #0
 8001e4a:	4001      	ands	r1, r0
 8001e4c:	4203      	tst	r3, r0
 8001e4e:	d00c      	beq.n	8001e6a <__aeabi_dmul+0x30a>
 8001e50:	230f      	movs	r3, #15
 8001e52:	4003      	ands	r3, r0
 8001e54:	2b04      	cmp	r3, #4
 8001e56:	d100      	bne.n	8001e5a <__aeabi_dmul+0x2fa>
 8001e58:	e140      	b.n	80020dc <__aeabi_dmul+0x57c>
 8001e5a:	1d03      	adds	r3, r0, #4
 8001e5c:	4283      	cmp	r3, r0
 8001e5e:	41a4      	sbcs	r4, r4
 8001e60:	0018      	movs	r0, r3
 8001e62:	4264      	negs	r4, r4
 8001e64:	0761      	lsls	r1, r4, #29
 8001e66:	0264      	lsls	r4, r4, #9
 8001e68:	0b24      	lsrs	r4, r4, #12
 8001e6a:	08c2      	lsrs	r2, r0, #3
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	430a      	orrs	r2, r1
 8001e70:	e6cc      	b.n	8001c0c <__aeabi_dmul+0xac>
 8001e72:	46c0      	nop			@ (mov r8, r8)
 8001e74:	000007ff 	.word	0x000007ff
 8001e78:	fffffc01 	.word	0xfffffc01
 8001e7c:	000003ff 	.word	0x000003ff
 8001e80:	feffffff 	.word	0xfeffffff
 8001e84:	000007fe 	.word	0x000007fe
 8001e88:	fffffc0d 	.word	0xfffffc0d
 8001e8c:	0000043e 	.word	0x0000043e
 8001e90:	4649      	mov	r1, r9
 8001e92:	464a      	mov	r2, r9
 8001e94:	0409      	lsls	r1, r1, #16
 8001e96:	0c09      	lsrs	r1, r1, #16
 8001e98:	000d      	movs	r5, r1
 8001e9a:	0c16      	lsrs	r6, r2, #16
 8001e9c:	0c02      	lsrs	r2, r0, #16
 8001e9e:	0400      	lsls	r0, r0, #16
 8001ea0:	0c00      	lsrs	r0, r0, #16
 8001ea2:	4345      	muls	r5, r0
 8001ea4:	46ac      	mov	ip, r5
 8001ea6:	0005      	movs	r5, r0
 8001ea8:	4375      	muls	r5, r6
 8001eaa:	46a8      	mov	r8, r5
 8001eac:	0015      	movs	r5, r2
 8001eae:	000f      	movs	r7, r1
 8001eb0:	4375      	muls	r5, r6
 8001eb2:	9200      	str	r2, [sp, #0]
 8001eb4:	9502      	str	r5, [sp, #8]
 8001eb6:	002a      	movs	r2, r5
 8001eb8:	9d00      	ldr	r5, [sp, #0]
 8001eba:	436f      	muls	r7, r5
 8001ebc:	4665      	mov	r5, ip
 8001ebe:	0c2d      	lsrs	r5, r5, #16
 8001ec0:	46a9      	mov	r9, r5
 8001ec2:	4447      	add	r7, r8
 8001ec4:	444f      	add	r7, r9
 8001ec6:	45b8      	cmp	r8, r7
 8001ec8:	d905      	bls.n	8001ed6 <__aeabi_dmul+0x376>
 8001eca:	0015      	movs	r5, r2
 8001ecc:	2280      	movs	r2, #128	@ 0x80
 8001ece:	0252      	lsls	r2, r2, #9
 8001ed0:	4690      	mov	r8, r2
 8001ed2:	4445      	add	r5, r8
 8001ed4:	9502      	str	r5, [sp, #8]
 8001ed6:	0c3d      	lsrs	r5, r7, #16
 8001ed8:	9503      	str	r5, [sp, #12]
 8001eda:	4665      	mov	r5, ip
 8001edc:	042d      	lsls	r5, r5, #16
 8001ede:	043f      	lsls	r7, r7, #16
 8001ee0:	0c2d      	lsrs	r5, r5, #16
 8001ee2:	46ac      	mov	ip, r5
 8001ee4:	003d      	movs	r5, r7
 8001ee6:	4465      	add	r5, ip
 8001ee8:	9504      	str	r5, [sp, #16]
 8001eea:	0c25      	lsrs	r5, r4, #16
 8001eec:	0424      	lsls	r4, r4, #16
 8001eee:	0c24      	lsrs	r4, r4, #16
 8001ef0:	46ac      	mov	ip, r5
 8001ef2:	0025      	movs	r5, r4
 8001ef4:	4375      	muls	r5, r6
 8001ef6:	46a8      	mov	r8, r5
 8001ef8:	4665      	mov	r5, ip
 8001efa:	000f      	movs	r7, r1
 8001efc:	4369      	muls	r1, r5
 8001efe:	4441      	add	r1, r8
 8001f00:	4689      	mov	r9, r1
 8001f02:	4367      	muls	r7, r4
 8001f04:	0c39      	lsrs	r1, r7, #16
 8001f06:	4449      	add	r1, r9
 8001f08:	436e      	muls	r6, r5
 8001f0a:	4588      	cmp	r8, r1
 8001f0c:	d903      	bls.n	8001f16 <__aeabi_dmul+0x3b6>
 8001f0e:	2280      	movs	r2, #128	@ 0x80
 8001f10:	0252      	lsls	r2, r2, #9
 8001f12:	4690      	mov	r8, r2
 8001f14:	4446      	add	r6, r8
 8001f16:	0c0d      	lsrs	r5, r1, #16
 8001f18:	46a8      	mov	r8, r5
 8001f1a:	0035      	movs	r5, r6
 8001f1c:	4445      	add	r5, r8
 8001f1e:	9505      	str	r5, [sp, #20]
 8001f20:	9d03      	ldr	r5, [sp, #12]
 8001f22:	043f      	lsls	r7, r7, #16
 8001f24:	46a8      	mov	r8, r5
 8001f26:	0c3f      	lsrs	r7, r7, #16
 8001f28:	0409      	lsls	r1, r1, #16
 8001f2a:	19c9      	adds	r1, r1, r7
 8001f2c:	4488      	add	r8, r1
 8001f2e:	4645      	mov	r5, r8
 8001f30:	9503      	str	r5, [sp, #12]
 8001f32:	4655      	mov	r5, sl
 8001f34:	042e      	lsls	r6, r5, #16
 8001f36:	0c36      	lsrs	r6, r6, #16
 8001f38:	0c2f      	lsrs	r7, r5, #16
 8001f3a:	0035      	movs	r5, r6
 8001f3c:	4345      	muls	r5, r0
 8001f3e:	4378      	muls	r0, r7
 8001f40:	4681      	mov	r9, r0
 8001f42:	0038      	movs	r0, r7
 8001f44:	46a8      	mov	r8, r5
 8001f46:	0c2d      	lsrs	r5, r5, #16
 8001f48:	46aa      	mov	sl, r5
 8001f4a:	9a00      	ldr	r2, [sp, #0]
 8001f4c:	4350      	muls	r0, r2
 8001f4e:	4372      	muls	r2, r6
 8001f50:	444a      	add	r2, r9
 8001f52:	4452      	add	r2, sl
 8001f54:	4591      	cmp	r9, r2
 8001f56:	d903      	bls.n	8001f60 <__aeabi_dmul+0x400>
 8001f58:	2580      	movs	r5, #128	@ 0x80
 8001f5a:	026d      	lsls	r5, r5, #9
 8001f5c:	46a9      	mov	r9, r5
 8001f5e:	4448      	add	r0, r9
 8001f60:	0c15      	lsrs	r5, r2, #16
 8001f62:	46a9      	mov	r9, r5
 8001f64:	4645      	mov	r5, r8
 8001f66:	042d      	lsls	r5, r5, #16
 8001f68:	0c2d      	lsrs	r5, r5, #16
 8001f6a:	46a8      	mov	r8, r5
 8001f6c:	4665      	mov	r5, ip
 8001f6e:	437d      	muls	r5, r7
 8001f70:	0412      	lsls	r2, r2, #16
 8001f72:	4448      	add	r0, r9
 8001f74:	4490      	add	r8, r2
 8001f76:	46a9      	mov	r9, r5
 8001f78:	0032      	movs	r2, r6
 8001f7a:	4665      	mov	r5, ip
 8001f7c:	4362      	muls	r2, r4
 8001f7e:	436e      	muls	r6, r5
 8001f80:	437c      	muls	r4, r7
 8001f82:	0c17      	lsrs	r7, r2, #16
 8001f84:	1936      	adds	r6, r6, r4
 8001f86:	19bf      	adds	r7, r7, r6
 8001f88:	42bc      	cmp	r4, r7
 8001f8a:	d903      	bls.n	8001f94 <__aeabi_dmul+0x434>
 8001f8c:	2480      	movs	r4, #128	@ 0x80
 8001f8e:	0264      	lsls	r4, r4, #9
 8001f90:	46a4      	mov	ip, r4
 8001f92:	44e1      	add	r9, ip
 8001f94:	9c02      	ldr	r4, [sp, #8]
 8001f96:	9e03      	ldr	r6, [sp, #12]
 8001f98:	46a4      	mov	ip, r4
 8001f9a:	9d05      	ldr	r5, [sp, #20]
 8001f9c:	4466      	add	r6, ip
 8001f9e:	428e      	cmp	r6, r1
 8001fa0:	4189      	sbcs	r1, r1
 8001fa2:	46ac      	mov	ip, r5
 8001fa4:	0412      	lsls	r2, r2, #16
 8001fa6:	043c      	lsls	r4, r7, #16
 8001fa8:	0c12      	lsrs	r2, r2, #16
 8001faa:	18a2      	adds	r2, r4, r2
 8001fac:	4462      	add	r2, ip
 8001fae:	4249      	negs	r1, r1
 8001fb0:	1854      	adds	r4, r2, r1
 8001fb2:	4446      	add	r6, r8
 8001fb4:	46a4      	mov	ip, r4
 8001fb6:	4546      	cmp	r6, r8
 8001fb8:	41a4      	sbcs	r4, r4
 8001fba:	4682      	mov	sl, r0
 8001fbc:	4264      	negs	r4, r4
 8001fbe:	46a0      	mov	r8, r4
 8001fc0:	42aa      	cmp	r2, r5
 8001fc2:	4192      	sbcs	r2, r2
 8001fc4:	458c      	cmp	ip, r1
 8001fc6:	4189      	sbcs	r1, r1
 8001fc8:	44e2      	add	sl, ip
 8001fca:	44d0      	add	r8, sl
 8001fcc:	4249      	negs	r1, r1
 8001fce:	4252      	negs	r2, r2
 8001fd0:	430a      	orrs	r2, r1
 8001fd2:	45a0      	cmp	r8, r4
 8001fd4:	41a4      	sbcs	r4, r4
 8001fd6:	4582      	cmp	sl, r0
 8001fd8:	4189      	sbcs	r1, r1
 8001fda:	4264      	negs	r4, r4
 8001fdc:	4249      	negs	r1, r1
 8001fde:	430c      	orrs	r4, r1
 8001fe0:	4641      	mov	r1, r8
 8001fe2:	0c3f      	lsrs	r7, r7, #16
 8001fe4:	19d2      	adds	r2, r2, r7
 8001fe6:	1912      	adds	r2, r2, r4
 8001fe8:	0dcc      	lsrs	r4, r1, #23
 8001fea:	9904      	ldr	r1, [sp, #16]
 8001fec:	0270      	lsls	r0, r6, #9
 8001fee:	4308      	orrs	r0, r1
 8001ff0:	1e41      	subs	r1, r0, #1
 8001ff2:	4188      	sbcs	r0, r1
 8001ff4:	4641      	mov	r1, r8
 8001ff6:	444a      	add	r2, r9
 8001ff8:	0df6      	lsrs	r6, r6, #23
 8001ffa:	0252      	lsls	r2, r2, #9
 8001ffc:	4330      	orrs	r0, r6
 8001ffe:	0249      	lsls	r1, r1, #9
 8002000:	4314      	orrs	r4, r2
 8002002:	4308      	orrs	r0, r1
 8002004:	01d2      	lsls	r2, r2, #7
 8002006:	d535      	bpl.n	8002074 <__aeabi_dmul+0x514>
 8002008:	2201      	movs	r2, #1
 800200a:	0843      	lsrs	r3, r0, #1
 800200c:	4002      	ands	r2, r0
 800200e:	4313      	orrs	r3, r2
 8002010:	07e0      	lsls	r0, r4, #31
 8002012:	4318      	orrs	r0, r3
 8002014:	0864      	lsrs	r4, r4, #1
 8002016:	e634      	b.n	8001c82 <__aeabi_dmul+0x122>
 8002018:	9b00      	ldr	r3, [sp, #0]
 800201a:	46a2      	mov	sl, r4
 800201c:	469b      	mov	fp, r3
 800201e:	4681      	mov	r9, r0
 8002020:	2480      	movs	r4, #128	@ 0x80
 8002022:	4653      	mov	r3, sl
 8002024:	0324      	lsls	r4, r4, #12
 8002026:	431c      	orrs	r4, r3
 8002028:	0324      	lsls	r4, r4, #12
 800202a:	464a      	mov	r2, r9
 800202c:	4b2e      	ldr	r3, [pc, #184]	@ (80020e8 <__aeabi_dmul+0x588>)
 800202e:	0b24      	lsrs	r4, r4, #12
 8002030:	e5ec      	b.n	8001c0c <__aeabi_dmul+0xac>
 8002032:	f000 fcc5 	bl	80029c0 <__clzsi2>
 8002036:	2315      	movs	r3, #21
 8002038:	469c      	mov	ip, r3
 800203a:	4484      	add	ip, r0
 800203c:	0002      	movs	r2, r0
 800203e:	4663      	mov	r3, ip
 8002040:	3220      	adds	r2, #32
 8002042:	2b1c      	cmp	r3, #28
 8002044:	dc00      	bgt.n	8002048 <__aeabi_dmul+0x4e8>
 8002046:	e684      	b.n	8001d52 <__aeabi_dmul+0x1f2>
 8002048:	2300      	movs	r3, #0
 800204a:	4699      	mov	r9, r3
 800204c:	0023      	movs	r3, r4
 800204e:	3808      	subs	r0, #8
 8002050:	4083      	lsls	r3, r0
 8002052:	469a      	mov	sl, r3
 8002054:	e68e      	b.n	8001d74 <__aeabi_dmul+0x214>
 8002056:	f000 fcb3 	bl	80029c0 <__clzsi2>
 800205a:	0002      	movs	r2, r0
 800205c:	0003      	movs	r3, r0
 800205e:	3215      	adds	r2, #21
 8002060:	3320      	adds	r3, #32
 8002062:	2a1c      	cmp	r2, #28
 8002064:	dc00      	bgt.n	8002068 <__aeabi_dmul+0x508>
 8002066:	e64e      	b.n	8001d06 <__aeabi_dmul+0x1a6>
 8002068:	0002      	movs	r2, r0
 800206a:	0034      	movs	r4, r6
 800206c:	3a08      	subs	r2, #8
 800206e:	2000      	movs	r0, #0
 8002070:	4094      	lsls	r4, r2
 8002072:	e652      	b.n	8001d1a <__aeabi_dmul+0x1ba>
 8002074:	9301      	str	r3, [sp, #4]
 8002076:	e604      	b.n	8001c82 <__aeabi_dmul+0x122>
 8002078:	4b1c      	ldr	r3, [pc, #112]	@ (80020ec <__aeabi_dmul+0x58c>)
 800207a:	0021      	movs	r1, r4
 800207c:	469c      	mov	ip, r3
 800207e:	0003      	movs	r3, r0
 8002080:	9d01      	ldr	r5, [sp, #4]
 8002082:	40d3      	lsrs	r3, r2
 8002084:	4465      	add	r5, ip
 8002086:	40a9      	lsls	r1, r5
 8002088:	4319      	orrs	r1, r3
 800208a:	0003      	movs	r3, r0
 800208c:	40ab      	lsls	r3, r5
 800208e:	1e58      	subs	r0, r3, #1
 8002090:	4183      	sbcs	r3, r0
 8002092:	4319      	orrs	r1, r3
 8002094:	0008      	movs	r0, r1
 8002096:	40d4      	lsrs	r4, r2
 8002098:	074b      	lsls	r3, r1, #29
 800209a:	d009      	beq.n	80020b0 <__aeabi_dmul+0x550>
 800209c:	230f      	movs	r3, #15
 800209e:	400b      	ands	r3, r1
 80020a0:	2b04      	cmp	r3, #4
 80020a2:	d005      	beq.n	80020b0 <__aeabi_dmul+0x550>
 80020a4:	1d0b      	adds	r3, r1, #4
 80020a6:	428b      	cmp	r3, r1
 80020a8:	4180      	sbcs	r0, r0
 80020aa:	4240      	negs	r0, r0
 80020ac:	1824      	adds	r4, r4, r0
 80020ae:	0018      	movs	r0, r3
 80020b0:	0223      	lsls	r3, r4, #8
 80020b2:	d400      	bmi.n	80020b6 <__aeabi_dmul+0x556>
 80020b4:	e6d6      	b.n	8001e64 <__aeabi_dmul+0x304>
 80020b6:	2301      	movs	r3, #1
 80020b8:	2400      	movs	r4, #0
 80020ba:	2200      	movs	r2, #0
 80020bc:	e5a6      	b.n	8001c0c <__aeabi_dmul+0xac>
 80020be:	290f      	cmp	r1, #15
 80020c0:	d1aa      	bne.n	8002018 <__aeabi_dmul+0x4b8>
 80020c2:	2380      	movs	r3, #128	@ 0x80
 80020c4:	4652      	mov	r2, sl
 80020c6:	031b      	lsls	r3, r3, #12
 80020c8:	421a      	tst	r2, r3
 80020ca:	d0a9      	beq.n	8002020 <__aeabi_dmul+0x4c0>
 80020cc:	421c      	tst	r4, r3
 80020ce:	d1a7      	bne.n	8002020 <__aeabi_dmul+0x4c0>
 80020d0:	431c      	orrs	r4, r3
 80020d2:	9b00      	ldr	r3, [sp, #0]
 80020d4:	0002      	movs	r2, r0
 80020d6:	469b      	mov	fp, r3
 80020d8:	4b03      	ldr	r3, [pc, #12]	@ (80020e8 <__aeabi_dmul+0x588>)
 80020da:	e597      	b.n	8001c0c <__aeabi_dmul+0xac>
 80020dc:	2400      	movs	r4, #0
 80020de:	e6c1      	b.n	8001e64 <__aeabi_dmul+0x304>
 80020e0:	2400      	movs	r4, #0
 80020e2:	4b01      	ldr	r3, [pc, #4]	@ (80020e8 <__aeabi_dmul+0x588>)
 80020e4:	0022      	movs	r2, r4
 80020e6:	e591      	b.n	8001c0c <__aeabi_dmul+0xac>
 80020e8:	000007ff 	.word	0x000007ff
 80020ec:	0000041e 	.word	0x0000041e

080020f0 <__aeabi_dsub>:
 80020f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020f2:	464e      	mov	r6, r9
 80020f4:	4645      	mov	r5, r8
 80020f6:	46de      	mov	lr, fp
 80020f8:	4657      	mov	r7, sl
 80020fa:	b5e0      	push	{r5, r6, r7, lr}
 80020fc:	b085      	sub	sp, #20
 80020fe:	9000      	str	r0, [sp, #0]
 8002100:	9101      	str	r1, [sp, #4]
 8002102:	030c      	lsls	r4, r1, #12
 8002104:	004f      	lsls	r7, r1, #1
 8002106:	0fce      	lsrs	r6, r1, #31
 8002108:	0a61      	lsrs	r1, r4, #9
 800210a:	9c00      	ldr	r4, [sp, #0]
 800210c:	46b0      	mov	r8, r6
 800210e:	0f64      	lsrs	r4, r4, #29
 8002110:	430c      	orrs	r4, r1
 8002112:	9900      	ldr	r1, [sp, #0]
 8002114:	0d7f      	lsrs	r7, r7, #21
 8002116:	00c8      	lsls	r0, r1, #3
 8002118:	0011      	movs	r1, r2
 800211a:	001a      	movs	r2, r3
 800211c:	031b      	lsls	r3, r3, #12
 800211e:	469c      	mov	ip, r3
 8002120:	9100      	str	r1, [sp, #0]
 8002122:	9201      	str	r2, [sp, #4]
 8002124:	0051      	lsls	r1, r2, #1
 8002126:	0d4b      	lsrs	r3, r1, #21
 8002128:	4699      	mov	r9, r3
 800212a:	9b01      	ldr	r3, [sp, #4]
 800212c:	9d00      	ldr	r5, [sp, #0]
 800212e:	0fd9      	lsrs	r1, r3, #31
 8002130:	4663      	mov	r3, ip
 8002132:	0f6a      	lsrs	r2, r5, #29
 8002134:	0a5b      	lsrs	r3, r3, #9
 8002136:	4313      	orrs	r3, r2
 8002138:	00ea      	lsls	r2, r5, #3
 800213a:	4694      	mov	ip, r2
 800213c:	4693      	mov	fp, r2
 800213e:	4ac1      	ldr	r2, [pc, #772]	@ (8002444 <__aeabi_dsub+0x354>)
 8002140:	9003      	str	r0, [sp, #12]
 8002142:	9302      	str	r3, [sp, #8]
 8002144:	4591      	cmp	r9, r2
 8002146:	d100      	bne.n	800214a <__aeabi_dsub+0x5a>
 8002148:	e0cd      	b.n	80022e6 <__aeabi_dsub+0x1f6>
 800214a:	2501      	movs	r5, #1
 800214c:	4069      	eors	r1, r5
 800214e:	464d      	mov	r5, r9
 8002150:	1b7d      	subs	r5, r7, r5
 8002152:	46aa      	mov	sl, r5
 8002154:	428e      	cmp	r6, r1
 8002156:	d100      	bne.n	800215a <__aeabi_dsub+0x6a>
 8002158:	e080      	b.n	800225c <__aeabi_dsub+0x16c>
 800215a:	2d00      	cmp	r5, #0
 800215c:	dc00      	bgt.n	8002160 <__aeabi_dsub+0x70>
 800215e:	e335      	b.n	80027cc <__aeabi_dsub+0x6dc>
 8002160:	4649      	mov	r1, r9
 8002162:	2900      	cmp	r1, #0
 8002164:	d100      	bne.n	8002168 <__aeabi_dsub+0x78>
 8002166:	e0df      	b.n	8002328 <__aeabi_dsub+0x238>
 8002168:	4297      	cmp	r7, r2
 800216a:	d100      	bne.n	800216e <__aeabi_dsub+0x7e>
 800216c:	e194      	b.n	8002498 <__aeabi_dsub+0x3a8>
 800216e:	4652      	mov	r2, sl
 8002170:	2501      	movs	r5, #1
 8002172:	2a38      	cmp	r2, #56	@ 0x38
 8002174:	dc19      	bgt.n	80021aa <__aeabi_dsub+0xba>
 8002176:	2280      	movs	r2, #128	@ 0x80
 8002178:	9b02      	ldr	r3, [sp, #8]
 800217a:	0412      	lsls	r2, r2, #16
 800217c:	4313      	orrs	r3, r2
 800217e:	9302      	str	r3, [sp, #8]
 8002180:	4652      	mov	r2, sl
 8002182:	2a1f      	cmp	r2, #31
 8002184:	dd00      	ble.n	8002188 <__aeabi_dsub+0x98>
 8002186:	e1e3      	b.n	8002550 <__aeabi_dsub+0x460>
 8002188:	4653      	mov	r3, sl
 800218a:	2220      	movs	r2, #32
 800218c:	4661      	mov	r1, ip
 800218e:	9d02      	ldr	r5, [sp, #8]
 8002190:	1ad2      	subs	r2, r2, r3
 8002192:	4095      	lsls	r5, r2
 8002194:	40d9      	lsrs	r1, r3
 8002196:	430d      	orrs	r5, r1
 8002198:	4661      	mov	r1, ip
 800219a:	4091      	lsls	r1, r2
 800219c:	000a      	movs	r2, r1
 800219e:	1e51      	subs	r1, r2, #1
 80021a0:	418a      	sbcs	r2, r1
 80021a2:	4315      	orrs	r5, r2
 80021a4:	9a02      	ldr	r2, [sp, #8]
 80021a6:	40da      	lsrs	r2, r3
 80021a8:	1aa4      	subs	r4, r4, r2
 80021aa:	1b45      	subs	r5, r0, r5
 80021ac:	42a8      	cmp	r0, r5
 80021ae:	4180      	sbcs	r0, r0
 80021b0:	4240      	negs	r0, r0
 80021b2:	1a24      	subs	r4, r4, r0
 80021b4:	0223      	lsls	r3, r4, #8
 80021b6:	d400      	bmi.n	80021ba <__aeabi_dsub+0xca>
 80021b8:	e13d      	b.n	8002436 <__aeabi_dsub+0x346>
 80021ba:	0264      	lsls	r4, r4, #9
 80021bc:	0a64      	lsrs	r4, r4, #9
 80021be:	2c00      	cmp	r4, #0
 80021c0:	d100      	bne.n	80021c4 <__aeabi_dsub+0xd4>
 80021c2:	e147      	b.n	8002454 <__aeabi_dsub+0x364>
 80021c4:	0020      	movs	r0, r4
 80021c6:	f000 fbfb 	bl	80029c0 <__clzsi2>
 80021ca:	0003      	movs	r3, r0
 80021cc:	3b08      	subs	r3, #8
 80021ce:	2120      	movs	r1, #32
 80021d0:	0028      	movs	r0, r5
 80021d2:	1aca      	subs	r2, r1, r3
 80021d4:	40d0      	lsrs	r0, r2
 80021d6:	409c      	lsls	r4, r3
 80021d8:	0002      	movs	r2, r0
 80021da:	409d      	lsls	r5, r3
 80021dc:	4322      	orrs	r2, r4
 80021de:	429f      	cmp	r7, r3
 80021e0:	dd00      	ble.n	80021e4 <__aeabi_dsub+0xf4>
 80021e2:	e177      	b.n	80024d4 <__aeabi_dsub+0x3e4>
 80021e4:	1bd8      	subs	r0, r3, r7
 80021e6:	3001      	adds	r0, #1
 80021e8:	1a09      	subs	r1, r1, r0
 80021ea:	002c      	movs	r4, r5
 80021ec:	408d      	lsls	r5, r1
 80021ee:	40c4      	lsrs	r4, r0
 80021f0:	1e6b      	subs	r3, r5, #1
 80021f2:	419d      	sbcs	r5, r3
 80021f4:	0013      	movs	r3, r2
 80021f6:	40c2      	lsrs	r2, r0
 80021f8:	408b      	lsls	r3, r1
 80021fa:	4325      	orrs	r5, r4
 80021fc:	2700      	movs	r7, #0
 80021fe:	0014      	movs	r4, r2
 8002200:	431d      	orrs	r5, r3
 8002202:	076b      	lsls	r3, r5, #29
 8002204:	d009      	beq.n	800221a <__aeabi_dsub+0x12a>
 8002206:	230f      	movs	r3, #15
 8002208:	402b      	ands	r3, r5
 800220a:	2b04      	cmp	r3, #4
 800220c:	d005      	beq.n	800221a <__aeabi_dsub+0x12a>
 800220e:	1d2b      	adds	r3, r5, #4
 8002210:	42ab      	cmp	r3, r5
 8002212:	41ad      	sbcs	r5, r5
 8002214:	426d      	negs	r5, r5
 8002216:	1964      	adds	r4, r4, r5
 8002218:	001d      	movs	r5, r3
 800221a:	0223      	lsls	r3, r4, #8
 800221c:	d400      	bmi.n	8002220 <__aeabi_dsub+0x130>
 800221e:	e140      	b.n	80024a2 <__aeabi_dsub+0x3b2>
 8002220:	4a88      	ldr	r2, [pc, #544]	@ (8002444 <__aeabi_dsub+0x354>)
 8002222:	3701      	adds	r7, #1
 8002224:	4297      	cmp	r7, r2
 8002226:	d100      	bne.n	800222a <__aeabi_dsub+0x13a>
 8002228:	e101      	b.n	800242e <__aeabi_dsub+0x33e>
 800222a:	2601      	movs	r6, #1
 800222c:	4643      	mov	r3, r8
 800222e:	4986      	ldr	r1, [pc, #536]	@ (8002448 <__aeabi_dsub+0x358>)
 8002230:	08ed      	lsrs	r5, r5, #3
 8002232:	4021      	ands	r1, r4
 8002234:	074a      	lsls	r2, r1, #29
 8002236:	432a      	orrs	r2, r5
 8002238:	057c      	lsls	r4, r7, #21
 800223a:	024d      	lsls	r5, r1, #9
 800223c:	0b2d      	lsrs	r5, r5, #12
 800223e:	0d64      	lsrs	r4, r4, #21
 8002240:	401e      	ands	r6, r3
 8002242:	0524      	lsls	r4, r4, #20
 8002244:	432c      	orrs	r4, r5
 8002246:	07f6      	lsls	r6, r6, #31
 8002248:	4334      	orrs	r4, r6
 800224a:	0010      	movs	r0, r2
 800224c:	0021      	movs	r1, r4
 800224e:	b005      	add	sp, #20
 8002250:	bcf0      	pop	{r4, r5, r6, r7}
 8002252:	46bb      	mov	fp, r7
 8002254:	46b2      	mov	sl, r6
 8002256:	46a9      	mov	r9, r5
 8002258:	46a0      	mov	r8, r4
 800225a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800225c:	2d00      	cmp	r5, #0
 800225e:	dc00      	bgt.n	8002262 <__aeabi_dsub+0x172>
 8002260:	e2d0      	b.n	8002804 <__aeabi_dsub+0x714>
 8002262:	4649      	mov	r1, r9
 8002264:	2900      	cmp	r1, #0
 8002266:	d000      	beq.n	800226a <__aeabi_dsub+0x17a>
 8002268:	e0d4      	b.n	8002414 <__aeabi_dsub+0x324>
 800226a:	4661      	mov	r1, ip
 800226c:	9b02      	ldr	r3, [sp, #8]
 800226e:	4319      	orrs	r1, r3
 8002270:	d100      	bne.n	8002274 <__aeabi_dsub+0x184>
 8002272:	e12b      	b.n	80024cc <__aeabi_dsub+0x3dc>
 8002274:	1e69      	subs	r1, r5, #1
 8002276:	2d01      	cmp	r5, #1
 8002278:	d100      	bne.n	800227c <__aeabi_dsub+0x18c>
 800227a:	e1d9      	b.n	8002630 <__aeabi_dsub+0x540>
 800227c:	4295      	cmp	r5, r2
 800227e:	d100      	bne.n	8002282 <__aeabi_dsub+0x192>
 8002280:	e10a      	b.n	8002498 <__aeabi_dsub+0x3a8>
 8002282:	2501      	movs	r5, #1
 8002284:	2938      	cmp	r1, #56	@ 0x38
 8002286:	dc17      	bgt.n	80022b8 <__aeabi_dsub+0x1c8>
 8002288:	468a      	mov	sl, r1
 800228a:	4653      	mov	r3, sl
 800228c:	2b1f      	cmp	r3, #31
 800228e:	dd00      	ble.n	8002292 <__aeabi_dsub+0x1a2>
 8002290:	e1e7      	b.n	8002662 <__aeabi_dsub+0x572>
 8002292:	2220      	movs	r2, #32
 8002294:	1ad2      	subs	r2, r2, r3
 8002296:	9b02      	ldr	r3, [sp, #8]
 8002298:	4661      	mov	r1, ip
 800229a:	4093      	lsls	r3, r2
 800229c:	001d      	movs	r5, r3
 800229e:	4653      	mov	r3, sl
 80022a0:	40d9      	lsrs	r1, r3
 80022a2:	4663      	mov	r3, ip
 80022a4:	4093      	lsls	r3, r2
 80022a6:	001a      	movs	r2, r3
 80022a8:	430d      	orrs	r5, r1
 80022aa:	1e51      	subs	r1, r2, #1
 80022ac:	418a      	sbcs	r2, r1
 80022ae:	4653      	mov	r3, sl
 80022b0:	4315      	orrs	r5, r2
 80022b2:	9a02      	ldr	r2, [sp, #8]
 80022b4:	40da      	lsrs	r2, r3
 80022b6:	18a4      	adds	r4, r4, r2
 80022b8:	182d      	adds	r5, r5, r0
 80022ba:	4285      	cmp	r5, r0
 80022bc:	4180      	sbcs	r0, r0
 80022be:	4240      	negs	r0, r0
 80022c0:	1824      	adds	r4, r4, r0
 80022c2:	0223      	lsls	r3, r4, #8
 80022c4:	d400      	bmi.n	80022c8 <__aeabi_dsub+0x1d8>
 80022c6:	e0b6      	b.n	8002436 <__aeabi_dsub+0x346>
 80022c8:	4b5e      	ldr	r3, [pc, #376]	@ (8002444 <__aeabi_dsub+0x354>)
 80022ca:	3701      	adds	r7, #1
 80022cc:	429f      	cmp	r7, r3
 80022ce:	d100      	bne.n	80022d2 <__aeabi_dsub+0x1e2>
 80022d0:	e0ad      	b.n	800242e <__aeabi_dsub+0x33e>
 80022d2:	2101      	movs	r1, #1
 80022d4:	4b5c      	ldr	r3, [pc, #368]	@ (8002448 <__aeabi_dsub+0x358>)
 80022d6:	086a      	lsrs	r2, r5, #1
 80022d8:	401c      	ands	r4, r3
 80022da:	4029      	ands	r1, r5
 80022dc:	430a      	orrs	r2, r1
 80022de:	07e5      	lsls	r5, r4, #31
 80022e0:	4315      	orrs	r5, r2
 80022e2:	0864      	lsrs	r4, r4, #1
 80022e4:	e78d      	b.n	8002202 <__aeabi_dsub+0x112>
 80022e6:	4a59      	ldr	r2, [pc, #356]	@ (800244c <__aeabi_dsub+0x35c>)
 80022e8:	9b02      	ldr	r3, [sp, #8]
 80022ea:	4692      	mov	sl, r2
 80022ec:	4662      	mov	r2, ip
 80022ee:	44ba      	add	sl, r7
 80022f0:	431a      	orrs	r2, r3
 80022f2:	d02c      	beq.n	800234e <__aeabi_dsub+0x25e>
 80022f4:	428e      	cmp	r6, r1
 80022f6:	d02e      	beq.n	8002356 <__aeabi_dsub+0x266>
 80022f8:	4652      	mov	r2, sl
 80022fa:	2a00      	cmp	r2, #0
 80022fc:	d060      	beq.n	80023c0 <__aeabi_dsub+0x2d0>
 80022fe:	2f00      	cmp	r7, #0
 8002300:	d100      	bne.n	8002304 <__aeabi_dsub+0x214>
 8002302:	e0db      	b.n	80024bc <__aeabi_dsub+0x3cc>
 8002304:	4663      	mov	r3, ip
 8002306:	000e      	movs	r6, r1
 8002308:	9c02      	ldr	r4, [sp, #8]
 800230a:	08d8      	lsrs	r0, r3, #3
 800230c:	0762      	lsls	r2, r4, #29
 800230e:	4302      	orrs	r2, r0
 8002310:	08e4      	lsrs	r4, r4, #3
 8002312:	0013      	movs	r3, r2
 8002314:	4323      	orrs	r3, r4
 8002316:	d100      	bne.n	800231a <__aeabi_dsub+0x22a>
 8002318:	e254      	b.n	80027c4 <__aeabi_dsub+0x6d4>
 800231a:	2580      	movs	r5, #128	@ 0x80
 800231c:	032d      	lsls	r5, r5, #12
 800231e:	4325      	orrs	r5, r4
 8002320:	032d      	lsls	r5, r5, #12
 8002322:	4c48      	ldr	r4, [pc, #288]	@ (8002444 <__aeabi_dsub+0x354>)
 8002324:	0b2d      	lsrs	r5, r5, #12
 8002326:	e78c      	b.n	8002242 <__aeabi_dsub+0x152>
 8002328:	4661      	mov	r1, ip
 800232a:	9b02      	ldr	r3, [sp, #8]
 800232c:	4319      	orrs	r1, r3
 800232e:	d100      	bne.n	8002332 <__aeabi_dsub+0x242>
 8002330:	e0cc      	b.n	80024cc <__aeabi_dsub+0x3dc>
 8002332:	0029      	movs	r1, r5
 8002334:	3901      	subs	r1, #1
 8002336:	2d01      	cmp	r5, #1
 8002338:	d100      	bne.n	800233c <__aeabi_dsub+0x24c>
 800233a:	e188      	b.n	800264e <__aeabi_dsub+0x55e>
 800233c:	4295      	cmp	r5, r2
 800233e:	d100      	bne.n	8002342 <__aeabi_dsub+0x252>
 8002340:	e0aa      	b.n	8002498 <__aeabi_dsub+0x3a8>
 8002342:	2501      	movs	r5, #1
 8002344:	2938      	cmp	r1, #56	@ 0x38
 8002346:	dd00      	ble.n	800234a <__aeabi_dsub+0x25a>
 8002348:	e72f      	b.n	80021aa <__aeabi_dsub+0xba>
 800234a:	468a      	mov	sl, r1
 800234c:	e718      	b.n	8002180 <__aeabi_dsub+0x90>
 800234e:	2201      	movs	r2, #1
 8002350:	4051      	eors	r1, r2
 8002352:	428e      	cmp	r6, r1
 8002354:	d1d0      	bne.n	80022f8 <__aeabi_dsub+0x208>
 8002356:	4653      	mov	r3, sl
 8002358:	2b00      	cmp	r3, #0
 800235a:	d100      	bne.n	800235e <__aeabi_dsub+0x26e>
 800235c:	e0be      	b.n	80024dc <__aeabi_dsub+0x3ec>
 800235e:	2f00      	cmp	r7, #0
 8002360:	d000      	beq.n	8002364 <__aeabi_dsub+0x274>
 8002362:	e138      	b.n	80025d6 <__aeabi_dsub+0x4e6>
 8002364:	46ca      	mov	sl, r9
 8002366:	0022      	movs	r2, r4
 8002368:	4302      	orrs	r2, r0
 800236a:	d100      	bne.n	800236e <__aeabi_dsub+0x27e>
 800236c:	e1e2      	b.n	8002734 <__aeabi_dsub+0x644>
 800236e:	4653      	mov	r3, sl
 8002370:	1e59      	subs	r1, r3, #1
 8002372:	2b01      	cmp	r3, #1
 8002374:	d100      	bne.n	8002378 <__aeabi_dsub+0x288>
 8002376:	e20d      	b.n	8002794 <__aeabi_dsub+0x6a4>
 8002378:	4a32      	ldr	r2, [pc, #200]	@ (8002444 <__aeabi_dsub+0x354>)
 800237a:	4592      	cmp	sl, r2
 800237c:	d100      	bne.n	8002380 <__aeabi_dsub+0x290>
 800237e:	e1d2      	b.n	8002726 <__aeabi_dsub+0x636>
 8002380:	2701      	movs	r7, #1
 8002382:	2938      	cmp	r1, #56	@ 0x38
 8002384:	dc13      	bgt.n	80023ae <__aeabi_dsub+0x2be>
 8002386:	291f      	cmp	r1, #31
 8002388:	dd00      	ble.n	800238c <__aeabi_dsub+0x29c>
 800238a:	e1ee      	b.n	800276a <__aeabi_dsub+0x67a>
 800238c:	2220      	movs	r2, #32
 800238e:	9b02      	ldr	r3, [sp, #8]
 8002390:	1a52      	subs	r2, r2, r1
 8002392:	0025      	movs	r5, r4
 8002394:	0007      	movs	r7, r0
 8002396:	469a      	mov	sl, r3
 8002398:	40cc      	lsrs	r4, r1
 800239a:	4090      	lsls	r0, r2
 800239c:	4095      	lsls	r5, r2
 800239e:	40cf      	lsrs	r7, r1
 80023a0:	44a2      	add	sl, r4
 80023a2:	1e42      	subs	r2, r0, #1
 80023a4:	4190      	sbcs	r0, r2
 80023a6:	4653      	mov	r3, sl
 80023a8:	432f      	orrs	r7, r5
 80023aa:	4307      	orrs	r7, r0
 80023ac:	9302      	str	r3, [sp, #8]
 80023ae:	003d      	movs	r5, r7
 80023b0:	4465      	add	r5, ip
 80023b2:	4565      	cmp	r5, ip
 80023b4:	4192      	sbcs	r2, r2
 80023b6:	9b02      	ldr	r3, [sp, #8]
 80023b8:	4252      	negs	r2, r2
 80023ba:	464f      	mov	r7, r9
 80023bc:	18d4      	adds	r4, r2, r3
 80023be:	e780      	b.n	80022c2 <__aeabi_dsub+0x1d2>
 80023c0:	4a23      	ldr	r2, [pc, #140]	@ (8002450 <__aeabi_dsub+0x360>)
 80023c2:	1c7d      	adds	r5, r7, #1
 80023c4:	4215      	tst	r5, r2
 80023c6:	d000      	beq.n	80023ca <__aeabi_dsub+0x2da>
 80023c8:	e0aa      	b.n	8002520 <__aeabi_dsub+0x430>
 80023ca:	4662      	mov	r2, ip
 80023cc:	0025      	movs	r5, r4
 80023ce:	9b02      	ldr	r3, [sp, #8]
 80023d0:	4305      	orrs	r5, r0
 80023d2:	431a      	orrs	r2, r3
 80023d4:	2f00      	cmp	r7, #0
 80023d6:	d000      	beq.n	80023da <__aeabi_dsub+0x2ea>
 80023d8:	e0f5      	b.n	80025c6 <__aeabi_dsub+0x4d6>
 80023da:	2d00      	cmp	r5, #0
 80023dc:	d100      	bne.n	80023e0 <__aeabi_dsub+0x2f0>
 80023de:	e16b      	b.n	80026b8 <__aeabi_dsub+0x5c8>
 80023e0:	2a00      	cmp	r2, #0
 80023e2:	d100      	bne.n	80023e6 <__aeabi_dsub+0x2f6>
 80023e4:	e152      	b.n	800268c <__aeabi_dsub+0x59c>
 80023e6:	4663      	mov	r3, ip
 80023e8:	1ac5      	subs	r5, r0, r3
 80023ea:	9b02      	ldr	r3, [sp, #8]
 80023ec:	1ae2      	subs	r2, r4, r3
 80023ee:	42a8      	cmp	r0, r5
 80023f0:	419b      	sbcs	r3, r3
 80023f2:	425b      	negs	r3, r3
 80023f4:	1ad3      	subs	r3, r2, r3
 80023f6:	021a      	lsls	r2, r3, #8
 80023f8:	d400      	bmi.n	80023fc <__aeabi_dsub+0x30c>
 80023fa:	e1d5      	b.n	80027a8 <__aeabi_dsub+0x6b8>
 80023fc:	4663      	mov	r3, ip
 80023fe:	1a1d      	subs	r5, r3, r0
 8002400:	45ac      	cmp	ip, r5
 8002402:	4192      	sbcs	r2, r2
 8002404:	2601      	movs	r6, #1
 8002406:	9b02      	ldr	r3, [sp, #8]
 8002408:	4252      	negs	r2, r2
 800240a:	1b1c      	subs	r4, r3, r4
 800240c:	4688      	mov	r8, r1
 800240e:	1aa4      	subs	r4, r4, r2
 8002410:	400e      	ands	r6, r1
 8002412:	e6f6      	b.n	8002202 <__aeabi_dsub+0x112>
 8002414:	4297      	cmp	r7, r2
 8002416:	d03f      	beq.n	8002498 <__aeabi_dsub+0x3a8>
 8002418:	4652      	mov	r2, sl
 800241a:	2501      	movs	r5, #1
 800241c:	2a38      	cmp	r2, #56	@ 0x38
 800241e:	dd00      	ble.n	8002422 <__aeabi_dsub+0x332>
 8002420:	e74a      	b.n	80022b8 <__aeabi_dsub+0x1c8>
 8002422:	2280      	movs	r2, #128	@ 0x80
 8002424:	9b02      	ldr	r3, [sp, #8]
 8002426:	0412      	lsls	r2, r2, #16
 8002428:	4313      	orrs	r3, r2
 800242a:	9302      	str	r3, [sp, #8]
 800242c:	e72d      	b.n	800228a <__aeabi_dsub+0x19a>
 800242e:	003c      	movs	r4, r7
 8002430:	2500      	movs	r5, #0
 8002432:	2200      	movs	r2, #0
 8002434:	e705      	b.n	8002242 <__aeabi_dsub+0x152>
 8002436:	2307      	movs	r3, #7
 8002438:	402b      	ands	r3, r5
 800243a:	2b00      	cmp	r3, #0
 800243c:	d000      	beq.n	8002440 <__aeabi_dsub+0x350>
 800243e:	e6e2      	b.n	8002206 <__aeabi_dsub+0x116>
 8002440:	e06b      	b.n	800251a <__aeabi_dsub+0x42a>
 8002442:	46c0      	nop			@ (mov r8, r8)
 8002444:	000007ff 	.word	0x000007ff
 8002448:	ff7fffff 	.word	0xff7fffff
 800244c:	fffff801 	.word	0xfffff801
 8002450:	000007fe 	.word	0x000007fe
 8002454:	0028      	movs	r0, r5
 8002456:	f000 fab3 	bl	80029c0 <__clzsi2>
 800245a:	0003      	movs	r3, r0
 800245c:	3318      	adds	r3, #24
 800245e:	2b1f      	cmp	r3, #31
 8002460:	dc00      	bgt.n	8002464 <__aeabi_dsub+0x374>
 8002462:	e6b4      	b.n	80021ce <__aeabi_dsub+0xde>
 8002464:	002a      	movs	r2, r5
 8002466:	3808      	subs	r0, #8
 8002468:	4082      	lsls	r2, r0
 800246a:	429f      	cmp	r7, r3
 800246c:	dd00      	ble.n	8002470 <__aeabi_dsub+0x380>
 800246e:	e0b9      	b.n	80025e4 <__aeabi_dsub+0x4f4>
 8002470:	1bdb      	subs	r3, r3, r7
 8002472:	1c58      	adds	r0, r3, #1
 8002474:	281f      	cmp	r0, #31
 8002476:	dc00      	bgt.n	800247a <__aeabi_dsub+0x38a>
 8002478:	e1a0      	b.n	80027bc <__aeabi_dsub+0x6cc>
 800247a:	0015      	movs	r5, r2
 800247c:	3b1f      	subs	r3, #31
 800247e:	40dd      	lsrs	r5, r3
 8002480:	2820      	cmp	r0, #32
 8002482:	d005      	beq.n	8002490 <__aeabi_dsub+0x3a0>
 8002484:	2340      	movs	r3, #64	@ 0x40
 8002486:	1a1b      	subs	r3, r3, r0
 8002488:	409a      	lsls	r2, r3
 800248a:	1e53      	subs	r3, r2, #1
 800248c:	419a      	sbcs	r2, r3
 800248e:	4315      	orrs	r5, r2
 8002490:	2307      	movs	r3, #7
 8002492:	2700      	movs	r7, #0
 8002494:	402b      	ands	r3, r5
 8002496:	e7d0      	b.n	800243a <__aeabi_dsub+0x34a>
 8002498:	08c0      	lsrs	r0, r0, #3
 800249a:	0762      	lsls	r2, r4, #29
 800249c:	4302      	orrs	r2, r0
 800249e:	08e4      	lsrs	r4, r4, #3
 80024a0:	e737      	b.n	8002312 <__aeabi_dsub+0x222>
 80024a2:	08ea      	lsrs	r2, r5, #3
 80024a4:	0763      	lsls	r3, r4, #29
 80024a6:	431a      	orrs	r2, r3
 80024a8:	4bd3      	ldr	r3, [pc, #844]	@ (80027f8 <__aeabi_dsub+0x708>)
 80024aa:	08e4      	lsrs	r4, r4, #3
 80024ac:	429f      	cmp	r7, r3
 80024ae:	d100      	bne.n	80024b2 <__aeabi_dsub+0x3c2>
 80024b0:	e72f      	b.n	8002312 <__aeabi_dsub+0x222>
 80024b2:	0324      	lsls	r4, r4, #12
 80024b4:	0b25      	lsrs	r5, r4, #12
 80024b6:	057c      	lsls	r4, r7, #21
 80024b8:	0d64      	lsrs	r4, r4, #21
 80024ba:	e6c2      	b.n	8002242 <__aeabi_dsub+0x152>
 80024bc:	46ca      	mov	sl, r9
 80024be:	0022      	movs	r2, r4
 80024c0:	4302      	orrs	r2, r0
 80024c2:	d158      	bne.n	8002576 <__aeabi_dsub+0x486>
 80024c4:	4663      	mov	r3, ip
 80024c6:	000e      	movs	r6, r1
 80024c8:	9c02      	ldr	r4, [sp, #8]
 80024ca:	9303      	str	r3, [sp, #12]
 80024cc:	9b03      	ldr	r3, [sp, #12]
 80024ce:	4657      	mov	r7, sl
 80024d0:	08da      	lsrs	r2, r3, #3
 80024d2:	e7e7      	b.n	80024a4 <__aeabi_dsub+0x3b4>
 80024d4:	4cc9      	ldr	r4, [pc, #804]	@ (80027fc <__aeabi_dsub+0x70c>)
 80024d6:	1aff      	subs	r7, r7, r3
 80024d8:	4014      	ands	r4, r2
 80024da:	e692      	b.n	8002202 <__aeabi_dsub+0x112>
 80024dc:	4dc8      	ldr	r5, [pc, #800]	@ (8002800 <__aeabi_dsub+0x710>)
 80024de:	1c7a      	adds	r2, r7, #1
 80024e0:	422a      	tst	r2, r5
 80024e2:	d000      	beq.n	80024e6 <__aeabi_dsub+0x3f6>
 80024e4:	e084      	b.n	80025f0 <__aeabi_dsub+0x500>
 80024e6:	0022      	movs	r2, r4
 80024e8:	4302      	orrs	r2, r0
 80024ea:	2f00      	cmp	r7, #0
 80024ec:	d000      	beq.n	80024f0 <__aeabi_dsub+0x400>
 80024ee:	e0ef      	b.n	80026d0 <__aeabi_dsub+0x5e0>
 80024f0:	2a00      	cmp	r2, #0
 80024f2:	d100      	bne.n	80024f6 <__aeabi_dsub+0x406>
 80024f4:	e0e5      	b.n	80026c2 <__aeabi_dsub+0x5d2>
 80024f6:	4662      	mov	r2, ip
 80024f8:	9902      	ldr	r1, [sp, #8]
 80024fa:	430a      	orrs	r2, r1
 80024fc:	d100      	bne.n	8002500 <__aeabi_dsub+0x410>
 80024fe:	e0c5      	b.n	800268c <__aeabi_dsub+0x59c>
 8002500:	4663      	mov	r3, ip
 8002502:	18c5      	adds	r5, r0, r3
 8002504:	468c      	mov	ip, r1
 8002506:	4285      	cmp	r5, r0
 8002508:	4180      	sbcs	r0, r0
 800250a:	4464      	add	r4, ip
 800250c:	4240      	negs	r0, r0
 800250e:	1824      	adds	r4, r4, r0
 8002510:	0223      	lsls	r3, r4, #8
 8002512:	d502      	bpl.n	800251a <__aeabi_dsub+0x42a>
 8002514:	4bb9      	ldr	r3, [pc, #740]	@ (80027fc <__aeabi_dsub+0x70c>)
 8002516:	3701      	adds	r7, #1
 8002518:	401c      	ands	r4, r3
 800251a:	46ba      	mov	sl, r7
 800251c:	9503      	str	r5, [sp, #12]
 800251e:	e7d5      	b.n	80024cc <__aeabi_dsub+0x3dc>
 8002520:	4662      	mov	r2, ip
 8002522:	1a85      	subs	r5, r0, r2
 8002524:	42a8      	cmp	r0, r5
 8002526:	4192      	sbcs	r2, r2
 8002528:	4252      	negs	r2, r2
 800252a:	4691      	mov	r9, r2
 800252c:	9b02      	ldr	r3, [sp, #8]
 800252e:	1ae3      	subs	r3, r4, r3
 8002530:	001a      	movs	r2, r3
 8002532:	464b      	mov	r3, r9
 8002534:	1ad2      	subs	r2, r2, r3
 8002536:	0013      	movs	r3, r2
 8002538:	4691      	mov	r9, r2
 800253a:	021a      	lsls	r2, r3, #8
 800253c:	d46c      	bmi.n	8002618 <__aeabi_dsub+0x528>
 800253e:	464a      	mov	r2, r9
 8002540:	464c      	mov	r4, r9
 8002542:	432a      	orrs	r2, r5
 8002544:	d000      	beq.n	8002548 <__aeabi_dsub+0x458>
 8002546:	e63a      	b.n	80021be <__aeabi_dsub+0xce>
 8002548:	2600      	movs	r6, #0
 800254a:	2400      	movs	r4, #0
 800254c:	2500      	movs	r5, #0
 800254e:	e678      	b.n	8002242 <__aeabi_dsub+0x152>
 8002550:	9902      	ldr	r1, [sp, #8]
 8002552:	4653      	mov	r3, sl
 8002554:	000d      	movs	r5, r1
 8002556:	3a20      	subs	r2, #32
 8002558:	40d5      	lsrs	r5, r2
 800255a:	2b20      	cmp	r3, #32
 800255c:	d006      	beq.n	800256c <__aeabi_dsub+0x47c>
 800255e:	2240      	movs	r2, #64	@ 0x40
 8002560:	1ad2      	subs	r2, r2, r3
 8002562:	000b      	movs	r3, r1
 8002564:	4093      	lsls	r3, r2
 8002566:	4662      	mov	r2, ip
 8002568:	431a      	orrs	r2, r3
 800256a:	4693      	mov	fp, r2
 800256c:	465b      	mov	r3, fp
 800256e:	1e5a      	subs	r2, r3, #1
 8002570:	4193      	sbcs	r3, r2
 8002572:	431d      	orrs	r5, r3
 8002574:	e619      	b.n	80021aa <__aeabi_dsub+0xba>
 8002576:	4653      	mov	r3, sl
 8002578:	1e5a      	subs	r2, r3, #1
 800257a:	2b01      	cmp	r3, #1
 800257c:	d100      	bne.n	8002580 <__aeabi_dsub+0x490>
 800257e:	e0c6      	b.n	800270e <__aeabi_dsub+0x61e>
 8002580:	4e9d      	ldr	r6, [pc, #628]	@ (80027f8 <__aeabi_dsub+0x708>)
 8002582:	45b2      	cmp	sl, r6
 8002584:	d100      	bne.n	8002588 <__aeabi_dsub+0x498>
 8002586:	e6bd      	b.n	8002304 <__aeabi_dsub+0x214>
 8002588:	4688      	mov	r8, r1
 800258a:	000e      	movs	r6, r1
 800258c:	2501      	movs	r5, #1
 800258e:	2a38      	cmp	r2, #56	@ 0x38
 8002590:	dc10      	bgt.n	80025b4 <__aeabi_dsub+0x4c4>
 8002592:	2a1f      	cmp	r2, #31
 8002594:	dc7f      	bgt.n	8002696 <__aeabi_dsub+0x5a6>
 8002596:	2120      	movs	r1, #32
 8002598:	0025      	movs	r5, r4
 800259a:	1a89      	subs	r1, r1, r2
 800259c:	0007      	movs	r7, r0
 800259e:	4088      	lsls	r0, r1
 80025a0:	408d      	lsls	r5, r1
 80025a2:	40d7      	lsrs	r7, r2
 80025a4:	40d4      	lsrs	r4, r2
 80025a6:	1e41      	subs	r1, r0, #1
 80025a8:	4188      	sbcs	r0, r1
 80025aa:	9b02      	ldr	r3, [sp, #8]
 80025ac:	433d      	orrs	r5, r7
 80025ae:	1b1b      	subs	r3, r3, r4
 80025b0:	4305      	orrs	r5, r0
 80025b2:	9302      	str	r3, [sp, #8]
 80025b4:	4662      	mov	r2, ip
 80025b6:	1b55      	subs	r5, r2, r5
 80025b8:	45ac      	cmp	ip, r5
 80025ba:	4192      	sbcs	r2, r2
 80025bc:	9b02      	ldr	r3, [sp, #8]
 80025be:	4252      	negs	r2, r2
 80025c0:	464f      	mov	r7, r9
 80025c2:	1a9c      	subs	r4, r3, r2
 80025c4:	e5f6      	b.n	80021b4 <__aeabi_dsub+0xc4>
 80025c6:	2d00      	cmp	r5, #0
 80025c8:	d000      	beq.n	80025cc <__aeabi_dsub+0x4dc>
 80025ca:	e0b7      	b.n	800273c <__aeabi_dsub+0x64c>
 80025cc:	2a00      	cmp	r2, #0
 80025ce:	d100      	bne.n	80025d2 <__aeabi_dsub+0x4e2>
 80025d0:	e0f0      	b.n	80027b4 <__aeabi_dsub+0x6c4>
 80025d2:	2601      	movs	r6, #1
 80025d4:	400e      	ands	r6, r1
 80025d6:	4663      	mov	r3, ip
 80025d8:	9802      	ldr	r0, [sp, #8]
 80025da:	08d9      	lsrs	r1, r3, #3
 80025dc:	0742      	lsls	r2, r0, #29
 80025de:	430a      	orrs	r2, r1
 80025e0:	08c4      	lsrs	r4, r0, #3
 80025e2:	e696      	b.n	8002312 <__aeabi_dsub+0x222>
 80025e4:	4c85      	ldr	r4, [pc, #532]	@ (80027fc <__aeabi_dsub+0x70c>)
 80025e6:	1aff      	subs	r7, r7, r3
 80025e8:	4014      	ands	r4, r2
 80025ea:	0762      	lsls	r2, r4, #29
 80025ec:	08e4      	lsrs	r4, r4, #3
 80025ee:	e760      	b.n	80024b2 <__aeabi_dsub+0x3c2>
 80025f0:	4981      	ldr	r1, [pc, #516]	@ (80027f8 <__aeabi_dsub+0x708>)
 80025f2:	428a      	cmp	r2, r1
 80025f4:	d100      	bne.n	80025f8 <__aeabi_dsub+0x508>
 80025f6:	e0c9      	b.n	800278c <__aeabi_dsub+0x69c>
 80025f8:	4663      	mov	r3, ip
 80025fa:	18c1      	adds	r1, r0, r3
 80025fc:	4281      	cmp	r1, r0
 80025fe:	4180      	sbcs	r0, r0
 8002600:	9b02      	ldr	r3, [sp, #8]
 8002602:	4240      	negs	r0, r0
 8002604:	18e3      	adds	r3, r4, r3
 8002606:	181b      	adds	r3, r3, r0
 8002608:	07dd      	lsls	r5, r3, #31
 800260a:	085c      	lsrs	r4, r3, #1
 800260c:	2307      	movs	r3, #7
 800260e:	0849      	lsrs	r1, r1, #1
 8002610:	430d      	orrs	r5, r1
 8002612:	0017      	movs	r7, r2
 8002614:	402b      	ands	r3, r5
 8002616:	e710      	b.n	800243a <__aeabi_dsub+0x34a>
 8002618:	4663      	mov	r3, ip
 800261a:	1a1d      	subs	r5, r3, r0
 800261c:	45ac      	cmp	ip, r5
 800261e:	4192      	sbcs	r2, r2
 8002620:	2601      	movs	r6, #1
 8002622:	9b02      	ldr	r3, [sp, #8]
 8002624:	4252      	negs	r2, r2
 8002626:	1b1c      	subs	r4, r3, r4
 8002628:	4688      	mov	r8, r1
 800262a:	1aa4      	subs	r4, r4, r2
 800262c:	400e      	ands	r6, r1
 800262e:	e5c6      	b.n	80021be <__aeabi_dsub+0xce>
 8002630:	4663      	mov	r3, ip
 8002632:	18c5      	adds	r5, r0, r3
 8002634:	9b02      	ldr	r3, [sp, #8]
 8002636:	4285      	cmp	r5, r0
 8002638:	4180      	sbcs	r0, r0
 800263a:	469c      	mov	ip, r3
 800263c:	4240      	negs	r0, r0
 800263e:	4464      	add	r4, ip
 8002640:	1824      	adds	r4, r4, r0
 8002642:	2701      	movs	r7, #1
 8002644:	0223      	lsls	r3, r4, #8
 8002646:	d400      	bmi.n	800264a <__aeabi_dsub+0x55a>
 8002648:	e6f5      	b.n	8002436 <__aeabi_dsub+0x346>
 800264a:	2702      	movs	r7, #2
 800264c:	e641      	b.n	80022d2 <__aeabi_dsub+0x1e2>
 800264e:	4663      	mov	r3, ip
 8002650:	1ac5      	subs	r5, r0, r3
 8002652:	42a8      	cmp	r0, r5
 8002654:	4180      	sbcs	r0, r0
 8002656:	9b02      	ldr	r3, [sp, #8]
 8002658:	4240      	negs	r0, r0
 800265a:	1ae4      	subs	r4, r4, r3
 800265c:	2701      	movs	r7, #1
 800265e:	1a24      	subs	r4, r4, r0
 8002660:	e5a8      	b.n	80021b4 <__aeabi_dsub+0xc4>
 8002662:	9d02      	ldr	r5, [sp, #8]
 8002664:	4652      	mov	r2, sl
 8002666:	002b      	movs	r3, r5
 8002668:	3a20      	subs	r2, #32
 800266a:	40d3      	lsrs	r3, r2
 800266c:	0019      	movs	r1, r3
 800266e:	4653      	mov	r3, sl
 8002670:	2b20      	cmp	r3, #32
 8002672:	d006      	beq.n	8002682 <__aeabi_dsub+0x592>
 8002674:	2240      	movs	r2, #64	@ 0x40
 8002676:	1ad2      	subs	r2, r2, r3
 8002678:	002b      	movs	r3, r5
 800267a:	4093      	lsls	r3, r2
 800267c:	4662      	mov	r2, ip
 800267e:	431a      	orrs	r2, r3
 8002680:	4693      	mov	fp, r2
 8002682:	465d      	mov	r5, fp
 8002684:	1e6b      	subs	r3, r5, #1
 8002686:	419d      	sbcs	r5, r3
 8002688:	430d      	orrs	r5, r1
 800268a:	e615      	b.n	80022b8 <__aeabi_dsub+0x1c8>
 800268c:	0762      	lsls	r2, r4, #29
 800268e:	08c0      	lsrs	r0, r0, #3
 8002690:	4302      	orrs	r2, r0
 8002692:	08e4      	lsrs	r4, r4, #3
 8002694:	e70d      	b.n	80024b2 <__aeabi_dsub+0x3c2>
 8002696:	0011      	movs	r1, r2
 8002698:	0027      	movs	r7, r4
 800269a:	3920      	subs	r1, #32
 800269c:	40cf      	lsrs	r7, r1
 800269e:	2a20      	cmp	r2, #32
 80026a0:	d005      	beq.n	80026ae <__aeabi_dsub+0x5be>
 80026a2:	2140      	movs	r1, #64	@ 0x40
 80026a4:	1a8a      	subs	r2, r1, r2
 80026a6:	4094      	lsls	r4, r2
 80026a8:	0025      	movs	r5, r4
 80026aa:	4305      	orrs	r5, r0
 80026ac:	9503      	str	r5, [sp, #12]
 80026ae:	9d03      	ldr	r5, [sp, #12]
 80026b0:	1e6a      	subs	r2, r5, #1
 80026b2:	4195      	sbcs	r5, r2
 80026b4:	433d      	orrs	r5, r7
 80026b6:	e77d      	b.n	80025b4 <__aeabi_dsub+0x4c4>
 80026b8:	2a00      	cmp	r2, #0
 80026ba:	d100      	bne.n	80026be <__aeabi_dsub+0x5ce>
 80026bc:	e744      	b.n	8002548 <__aeabi_dsub+0x458>
 80026be:	2601      	movs	r6, #1
 80026c0:	400e      	ands	r6, r1
 80026c2:	4663      	mov	r3, ip
 80026c4:	08d9      	lsrs	r1, r3, #3
 80026c6:	9b02      	ldr	r3, [sp, #8]
 80026c8:	075a      	lsls	r2, r3, #29
 80026ca:	430a      	orrs	r2, r1
 80026cc:	08dc      	lsrs	r4, r3, #3
 80026ce:	e6f0      	b.n	80024b2 <__aeabi_dsub+0x3c2>
 80026d0:	2a00      	cmp	r2, #0
 80026d2:	d028      	beq.n	8002726 <__aeabi_dsub+0x636>
 80026d4:	4662      	mov	r2, ip
 80026d6:	9f02      	ldr	r7, [sp, #8]
 80026d8:	08c0      	lsrs	r0, r0, #3
 80026da:	433a      	orrs	r2, r7
 80026dc:	d100      	bne.n	80026e0 <__aeabi_dsub+0x5f0>
 80026de:	e6dc      	b.n	800249a <__aeabi_dsub+0x3aa>
 80026e0:	0762      	lsls	r2, r4, #29
 80026e2:	4310      	orrs	r0, r2
 80026e4:	2280      	movs	r2, #128	@ 0x80
 80026e6:	08e4      	lsrs	r4, r4, #3
 80026e8:	0312      	lsls	r2, r2, #12
 80026ea:	4214      	tst	r4, r2
 80026ec:	d009      	beq.n	8002702 <__aeabi_dsub+0x612>
 80026ee:	08fd      	lsrs	r5, r7, #3
 80026f0:	4215      	tst	r5, r2
 80026f2:	d106      	bne.n	8002702 <__aeabi_dsub+0x612>
 80026f4:	4663      	mov	r3, ip
 80026f6:	2601      	movs	r6, #1
 80026f8:	002c      	movs	r4, r5
 80026fa:	08d8      	lsrs	r0, r3, #3
 80026fc:	077b      	lsls	r3, r7, #29
 80026fe:	4318      	orrs	r0, r3
 8002700:	400e      	ands	r6, r1
 8002702:	0f42      	lsrs	r2, r0, #29
 8002704:	00c0      	lsls	r0, r0, #3
 8002706:	08c0      	lsrs	r0, r0, #3
 8002708:	0752      	lsls	r2, r2, #29
 800270a:	4302      	orrs	r2, r0
 800270c:	e601      	b.n	8002312 <__aeabi_dsub+0x222>
 800270e:	4663      	mov	r3, ip
 8002710:	1a1d      	subs	r5, r3, r0
 8002712:	45ac      	cmp	ip, r5
 8002714:	4192      	sbcs	r2, r2
 8002716:	9b02      	ldr	r3, [sp, #8]
 8002718:	4252      	negs	r2, r2
 800271a:	1b1c      	subs	r4, r3, r4
 800271c:	000e      	movs	r6, r1
 800271e:	4688      	mov	r8, r1
 8002720:	2701      	movs	r7, #1
 8002722:	1aa4      	subs	r4, r4, r2
 8002724:	e546      	b.n	80021b4 <__aeabi_dsub+0xc4>
 8002726:	4663      	mov	r3, ip
 8002728:	08d9      	lsrs	r1, r3, #3
 800272a:	9b02      	ldr	r3, [sp, #8]
 800272c:	075a      	lsls	r2, r3, #29
 800272e:	430a      	orrs	r2, r1
 8002730:	08dc      	lsrs	r4, r3, #3
 8002732:	e5ee      	b.n	8002312 <__aeabi_dsub+0x222>
 8002734:	4663      	mov	r3, ip
 8002736:	9c02      	ldr	r4, [sp, #8]
 8002738:	9303      	str	r3, [sp, #12]
 800273a:	e6c7      	b.n	80024cc <__aeabi_dsub+0x3dc>
 800273c:	08c0      	lsrs	r0, r0, #3
 800273e:	2a00      	cmp	r2, #0
 8002740:	d100      	bne.n	8002744 <__aeabi_dsub+0x654>
 8002742:	e6aa      	b.n	800249a <__aeabi_dsub+0x3aa>
 8002744:	0762      	lsls	r2, r4, #29
 8002746:	4310      	orrs	r0, r2
 8002748:	2280      	movs	r2, #128	@ 0x80
 800274a:	08e4      	lsrs	r4, r4, #3
 800274c:	0312      	lsls	r2, r2, #12
 800274e:	4214      	tst	r4, r2
 8002750:	d0d7      	beq.n	8002702 <__aeabi_dsub+0x612>
 8002752:	9f02      	ldr	r7, [sp, #8]
 8002754:	08fd      	lsrs	r5, r7, #3
 8002756:	4215      	tst	r5, r2
 8002758:	d1d3      	bne.n	8002702 <__aeabi_dsub+0x612>
 800275a:	4663      	mov	r3, ip
 800275c:	2601      	movs	r6, #1
 800275e:	08d8      	lsrs	r0, r3, #3
 8002760:	077b      	lsls	r3, r7, #29
 8002762:	002c      	movs	r4, r5
 8002764:	4318      	orrs	r0, r3
 8002766:	400e      	ands	r6, r1
 8002768:	e7cb      	b.n	8002702 <__aeabi_dsub+0x612>
 800276a:	000a      	movs	r2, r1
 800276c:	0027      	movs	r7, r4
 800276e:	3a20      	subs	r2, #32
 8002770:	40d7      	lsrs	r7, r2
 8002772:	2920      	cmp	r1, #32
 8002774:	d005      	beq.n	8002782 <__aeabi_dsub+0x692>
 8002776:	2240      	movs	r2, #64	@ 0x40
 8002778:	1a52      	subs	r2, r2, r1
 800277a:	4094      	lsls	r4, r2
 800277c:	0025      	movs	r5, r4
 800277e:	4305      	orrs	r5, r0
 8002780:	9503      	str	r5, [sp, #12]
 8002782:	9d03      	ldr	r5, [sp, #12]
 8002784:	1e6a      	subs	r2, r5, #1
 8002786:	4195      	sbcs	r5, r2
 8002788:	432f      	orrs	r7, r5
 800278a:	e610      	b.n	80023ae <__aeabi_dsub+0x2be>
 800278c:	0014      	movs	r4, r2
 800278e:	2500      	movs	r5, #0
 8002790:	2200      	movs	r2, #0
 8002792:	e556      	b.n	8002242 <__aeabi_dsub+0x152>
 8002794:	9b02      	ldr	r3, [sp, #8]
 8002796:	4460      	add	r0, ip
 8002798:	4699      	mov	r9, r3
 800279a:	4560      	cmp	r0, ip
 800279c:	4192      	sbcs	r2, r2
 800279e:	444c      	add	r4, r9
 80027a0:	4252      	negs	r2, r2
 80027a2:	0005      	movs	r5, r0
 80027a4:	18a4      	adds	r4, r4, r2
 80027a6:	e74c      	b.n	8002642 <__aeabi_dsub+0x552>
 80027a8:	001a      	movs	r2, r3
 80027aa:	001c      	movs	r4, r3
 80027ac:	432a      	orrs	r2, r5
 80027ae:	d000      	beq.n	80027b2 <__aeabi_dsub+0x6c2>
 80027b0:	e6b3      	b.n	800251a <__aeabi_dsub+0x42a>
 80027b2:	e6c9      	b.n	8002548 <__aeabi_dsub+0x458>
 80027b4:	2480      	movs	r4, #128	@ 0x80
 80027b6:	2600      	movs	r6, #0
 80027b8:	0324      	lsls	r4, r4, #12
 80027ba:	e5ae      	b.n	800231a <__aeabi_dsub+0x22a>
 80027bc:	2120      	movs	r1, #32
 80027be:	2500      	movs	r5, #0
 80027c0:	1a09      	subs	r1, r1, r0
 80027c2:	e517      	b.n	80021f4 <__aeabi_dsub+0x104>
 80027c4:	2200      	movs	r2, #0
 80027c6:	2500      	movs	r5, #0
 80027c8:	4c0b      	ldr	r4, [pc, #44]	@ (80027f8 <__aeabi_dsub+0x708>)
 80027ca:	e53a      	b.n	8002242 <__aeabi_dsub+0x152>
 80027cc:	2d00      	cmp	r5, #0
 80027ce:	d100      	bne.n	80027d2 <__aeabi_dsub+0x6e2>
 80027d0:	e5f6      	b.n	80023c0 <__aeabi_dsub+0x2d0>
 80027d2:	464b      	mov	r3, r9
 80027d4:	1bda      	subs	r2, r3, r7
 80027d6:	4692      	mov	sl, r2
 80027d8:	2f00      	cmp	r7, #0
 80027da:	d100      	bne.n	80027de <__aeabi_dsub+0x6ee>
 80027dc:	e66f      	b.n	80024be <__aeabi_dsub+0x3ce>
 80027de:	2a38      	cmp	r2, #56	@ 0x38
 80027e0:	dc05      	bgt.n	80027ee <__aeabi_dsub+0x6fe>
 80027e2:	2680      	movs	r6, #128	@ 0x80
 80027e4:	0436      	lsls	r6, r6, #16
 80027e6:	4334      	orrs	r4, r6
 80027e8:	4688      	mov	r8, r1
 80027ea:	000e      	movs	r6, r1
 80027ec:	e6d1      	b.n	8002592 <__aeabi_dsub+0x4a2>
 80027ee:	4688      	mov	r8, r1
 80027f0:	000e      	movs	r6, r1
 80027f2:	2501      	movs	r5, #1
 80027f4:	e6de      	b.n	80025b4 <__aeabi_dsub+0x4c4>
 80027f6:	46c0      	nop			@ (mov r8, r8)
 80027f8:	000007ff 	.word	0x000007ff
 80027fc:	ff7fffff 	.word	0xff7fffff
 8002800:	000007fe 	.word	0x000007fe
 8002804:	2d00      	cmp	r5, #0
 8002806:	d100      	bne.n	800280a <__aeabi_dsub+0x71a>
 8002808:	e668      	b.n	80024dc <__aeabi_dsub+0x3ec>
 800280a:	464b      	mov	r3, r9
 800280c:	1bd9      	subs	r1, r3, r7
 800280e:	2f00      	cmp	r7, #0
 8002810:	d101      	bne.n	8002816 <__aeabi_dsub+0x726>
 8002812:	468a      	mov	sl, r1
 8002814:	e5a7      	b.n	8002366 <__aeabi_dsub+0x276>
 8002816:	2701      	movs	r7, #1
 8002818:	2938      	cmp	r1, #56	@ 0x38
 800281a:	dd00      	ble.n	800281e <__aeabi_dsub+0x72e>
 800281c:	e5c7      	b.n	80023ae <__aeabi_dsub+0x2be>
 800281e:	2280      	movs	r2, #128	@ 0x80
 8002820:	0412      	lsls	r2, r2, #16
 8002822:	4314      	orrs	r4, r2
 8002824:	e5af      	b.n	8002386 <__aeabi_dsub+0x296>
 8002826:	46c0      	nop			@ (mov r8, r8)

08002828 <__aeabi_f2d>:
 8002828:	b570      	push	{r4, r5, r6, lr}
 800282a:	0242      	lsls	r2, r0, #9
 800282c:	0043      	lsls	r3, r0, #1
 800282e:	0fc4      	lsrs	r4, r0, #31
 8002830:	20fe      	movs	r0, #254	@ 0xfe
 8002832:	0e1b      	lsrs	r3, r3, #24
 8002834:	1c59      	adds	r1, r3, #1
 8002836:	0a55      	lsrs	r5, r2, #9
 8002838:	4208      	tst	r0, r1
 800283a:	d00c      	beq.n	8002856 <__aeabi_f2d+0x2e>
 800283c:	21e0      	movs	r1, #224	@ 0xe0
 800283e:	0089      	lsls	r1, r1, #2
 8002840:	468c      	mov	ip, r1
 8002842:	076d      	lsls	r5, r5, #29
 8002844:	0b12      	lsrs	r2, r2, #12
 8002846:	4463      	add	r3, ip
 8002848:	051b      	lsls	r3, r3, #20
 800284a:	4313      	orrs	r3, r2
 800284c:	07e4      	lsls	r4, r4, #31
 800284e:	4323      	orrs	r3, r4
 8002850:	0028      	movs	r0, r5
 8002852:	0019      	movs	r1, r3
 8002854:	bd70      	pop	{r4, r5, r6, pc}
 8002856:	2b00      	cmp	r3, #0
 8002858:	d114      	bne.n	8002884 <__aeabi_f2d+0x5c>
 800285a:	2d00      	cmp	r5, #0
 800285c:	d01b      	beq.n	8002896 <__aeabi_f2d+0x6e>
 800285e:	0028      	movs	r0, r5
 8002860:	f000 f8ae 	bl	80029c0 <__clzsi2>
 8002864:	280a      	cmp	r0, #10
 8002866:	dc1c      	bgt.n	80028a2 <__aeabi_f2d+0x7a>
 8002868:	230b      	movs	r3, #11
 800286a:	002a      	movs	r2, r5
 800286c:	1a1b      	subs	r3, r3, r0
 800286e:	40da      	lsrs	r2, r3
 8002870:	0003      	movs	r3, r0
 8002872:	3315      	adds	r3, #21
 8002874:	409d      	lsls	r5, r3
 8002876:	4b0e      	ldr	r3, [pc, #56]	@ (80028b0 <__aeabi_f2d+0x88>)
 8002878:	0312      	lsls	r2, r2, #12
 800287a:	1a1b      	subs	r3, r3, r0
 800287c:	055b      	lsls	r3, r3, #21
 800287e:	0b12      	lsrs	r2, r2, #12
 8002880:	0d5b      	lsrs	r3, r3, #21
 8002882:	e7e1      	b.n	8002848 <__aeabi_f2d+0x20>
 8002884:	2d00      	cmp	r5, #0
 8002886:	d009      	beq.n	800289c <__aeabi_f2d+0x74>
 8002888:	0b13      	lsrs	r3, r2, #12
 800288a:	2280      	movs	r2, #128	@ 0x80
 800288c:	0312      	lsls	r2, r2, #12
 800288e:	431a      	orrs	r2, r3
 8002890:	076d      	lsls	r5, r5, #29
 8002892:	4b08      	ldr	r3, [pc, #32]	@ (80028b4 <__aeabi_f2d+0x8c>)
 8002894:	e7d8      	b.n	8002848 <__aeabi_f2d+0x20>
 8002896:	2300      	movs	r3, #0
 8002898:	2200      	movs	r2, #0
 800289a:	e7d5      	b.n	8002848 <__aeabi_f2d+0x20>
 800289c:	2200      	movs	r2, #0
 800289e:	4b05      	ldr	r3, [pc, #20]	@ (80028b4 <__aeabi_f2d+0x8c>)
 80028a0:	e7d2      	b.n	8002848 <__aeabi_f2d+0x20>
 80028a2:	0003      	movs	r3, r0
 80028a4:	002a      	movs	r2, r5
 80028a6:	3b0b      	subs	r3, #11
 80028a8:	409a      	lsls	r2, r3
 80028aa:	2500      	movs	r5, #0
 80028ac:	e7e3      	b.n	8002876 <__aeabi_f2d+0x4e>
 80028ae:	46c0      	nop			@ (mov r8, r8)
 80028b0:	00000389 	.word	0x00000389
 80028b4:	000007ff 	.word	0x000007ff

080028b8 <__aeabi_d2f>:
 80028b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80028ba:	004b      	lsls	r3, r1, #1
 80028bc:	030f      	lsls	r7, r1, #12
 80028be:	0d5b      	lsrs	r3, r3, #21
 80028c0:	4c3b      	ldr	r4, [pc, #236]	@ (80029b0 <__aeabi_d2f+0xf8>)
 80028c2:	0f45      	lsrs	r5, r0, #29
 80028c4:	b083      	sub	sp, #12
 80028c6:	0a7f      	lsrs	r7, r7, #9
 80028c8:	1c5e      	adds	r6, r3, #1
 80028ca:	432f      	orrs	r7, r5
 80028cc:	9000      	str	r0, [sp, #0]
 80028ce:	9101      	str	r1, [sp, #4]
 80028d0:	0fca      	lsrs	r2, r1, #31
 80028d2:	00c5      	lsls	r5, r0, #3
 80028d4:	4226      	tst	r6, r4
 80028d6:	d00b      	beq.n	80028f0 <__aeabi_d2f+0x38>
 80028d8:	4936      	ldr	r1, [pc, #216]	@ (80029b4 <__aeabi_d2f+0xfc>)
 80028da:	185c      	adds	r4, r3, r1
 80028dc:	2cfe      	cmp	r4, #254	@ 0xfe
 80028de:	dd13      	ble.n	8002908 <__aeabi_d2f+0x50>
 80028e0:	20ff      	movs	r0, #255	@ 0xff
 80028e2:	2300      	movs	r3, #0
 80028e4:	05c0      	lsls	r0, r0, #23
 80028e6:	4318      	orrs	r0, r3
 80028e8:	07d2      	lsls	r2, r2, #31
 80028ea:	4310      	orrs	r0, r2
 80028ec:	b003      	add	sp, #12
 80028ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d102      	bne.n	80028fa <__aeabi_d2f+0x42>
 80028f4:	2000      	movs	r0, #0
 80028f6:	2300      	movs	r3, #0
 80028f8:	e7f4      	b.n	80028e4 <__aeabi_d2f+0x2c>
 80028fa:	433d      	orrs	r5, r7
 80028fc:	d0f0      	beq.n	80028e0 <__aeabi_d2f+0x28>
 80028fe:	2380      	movs	r3, #128	@ 0x80
 8002900:	03db      	lsls	r3, r3, #15
 8002902:	20ff      	movs	r0, #255	@ 0xff
 8002904:	433b      	orrs	r3, r7
 8002906:	e7ed      	b.n	80028e4 <__aeabi_d2f+0x2c>
 8002908:	2c00      	cmp	r4, #0
 800290a:	dd14      	ble.n	8002936 <__aeabi_d2f+0x7e>
 800290c:	9b00      	ldr	r3, [sp, #0]
 800290e:	00ff      	lsls	r7, r7, #3
 8002910:	019b      	lsls	r3, r3, #6
 8002912:	1e58      	subs	r0, r3, #1
 8002914:	4183      	sbcs	r3, r0
 8002916:	0f69      	lsrs	r1, r5, #29
 8002918:	433b      	orrs	r3, r7
 800291a:	430b      	orrs	r3, r1
 800291c:	0759      	lsls	r1, r3, #29
 800291e:	d041      	beq.n	80029a4 <__aeabi_d2f+0xec>
 8002920:	210f      	movs	r1, #15
 8002922:	4019      	ands	r1, r3
 8002924:	2904      	cmp	r1, #4
 8002926:	d028      	beq.n	800297a <__aeabi_d2f+0xc2>
 8002928:	3304      	adds	r3, #4
 800292a:	0159      	lsls	r1, r3, #5
 800292c:	d525      	bpl.n	800297a <__aeabi_d2f+0xc2>
 800292e:	3401      	adds	r4, #1
 8002930:	2300      	movs	r3, #0
 8002932:	b2e0      	uxtb	r0, r4
 8002934:	e7d6      	b.n	80028e4 <__aeabi_d2f+0x2c>
 8002936:	0021      	movs	r1, r4
 8002938:	3117      	adds	r1, #23
 800293a:	dbdb      	blt.n	80028f4 <__aeabi_d2f+0x3c>
 800293c:	2180      	movs	r1, #128	@ 0x80
 800293e:	201e      	movs	r0, #30
 8002940:	0409      	lsls	r1, r1, #16
 8002942:	4339      	orrs	r1, r7
 8002944:	1b00      	subs	r0, r0, r4
 8002946:	281f      	cmp	r0, #31
 8002948:	dd1b      	ble.n	8002982 <__aeabi_d2f+0xca>
 800294a:	2602      	movs	r6, #2
 800294c:	4276      	negs	r6, r6
 800294e:	1b34      	subs	r4, r6, r4
 8002950:	000e      	movs	r6, r1
 8002952:	40e6      	lsrs	r6, r4
 8002954:	0034      	movs	r4, r6
 8002956:	2820      	cmp	r0, #32
 8002958:	d004      	beq.n	8002964 <__aeabi_d2f+0xac>
 800295a:	4817      	ldr	r0, [pc, #92]	@ (80029b8 <__aeabi_d2f+0x100>)
 800295c:	4684      	mov	ip, r0
 800295e:	4463      	add	r3, ip
 8002960:	4099      	lsls	r1, r3
 8002962:	430d      	orrs	r5, r1
 8002964:	002b      	movs	r3, r5
 8002966:	1e59      	subs	r1, r3, #1
 8002968:	418b      	sbcs	r3, r1
 800296a:	4323      	orrs	r3, r4
 800296c:	0759      	lsls	r1, r3, #29
 800296e:	d015      	beq.n	800299c <__aeabi_d2f+0xe4>
 8002970:	210f      	movs	r1, #15
 8002972:	2400      	movs	r4, #0
 8002974:	4019      	ands	r1, r3
 8002976:	2904      	cmp	r1, #4
 8002978:	d117      	bne.n	80029aa <__aeabi_d2f+0xf2>
 800297a:	019b      	lsls	r3, r3, #6
 800297c:	0a5b      	lsrs	r3, r3, #9
 800297e:	b2e0      	uxtb	r0, r4
 8002980:	e7b0      	b.n	80028e4 <__aeabi_d2f+0x2c>
 8002982:	4c0e      	ldr	r4, [pc, #56]	@ (80029bc <__aeabi_d2f+0x104>)
 8002984:	191c      	adds	r4, r3, r4
 8002986:	002b      	movs	r3, r5
 8002988:	40a5      	lsls	r5, r4
 800298a:	40c3      	lsrs	r3, r0
 800298c:	40a1      	lsls	r1, r4
 800298e:	1e68      	subs	r0, r5, #1
 8002990:	4185      	sbcs	r5, r0
 8002992:	4329      	orrs	r1, r5
 8002994:	430b      	orrs	r3, r1
 8002996:	2400      	movs	r4, #0
 8002998:	0759      	lsls	r1, r3, #29
 800299a:	d1c1      	bne.n	8002920 <__aeabi_d2f+0x68>
 800299c:	019b      	lsls	r3, r3, #6
 800299e:	2000      	movs	r0, #0
 80029a0:	0a5b      	lsrs	r3, r3, #9
 80029a2:	e79f      	b.n	80028e4 <__aeabi_d2f+0x2c>
 80029a4:	08db      	lsrs	r3, r3, #3
 80029a6:	b2e0      	uxtb	r0, r4
 80029a8:	e79c      	b.n	80028e4 <__aeabi_d2f+0x2c>
 80029aa:	3304      	adds	r3, #4
 80029ac:	e7e5      	b.n	800297a <__aeabi_d2f+0xc2>
 80029ae:	46c0      	nop			@ (mov r8, r8)
 80029b0:	000007fe 	.word	0x000007fe
 80029b4:	fffffc80 	.word	0xfffffc80
 80029b8:	fffffca2 	.word	0xfffffca2
 80029bc:	fffffc82 	.word	0xfffffc82

080029c0 <__clzsi2>:
 80029c0:	211c      	movs	r1, #28
 80029c2:	2301      	movs	r3, #1
 80029c4:	041b      	lsls	r3, r3, #16
 80029c6:	4298      	cmp	r0, r3
 80029c8:	d301      	bcc.n	80029ce <__clzsi2+0xe>
 80029ca:	0c00      	lsrs	r0, r0, #16
 80029cc:	3910      	subs	r1, #16
 80029ce:	0a1b      	lsrs	r3, r3, #8
 80029d0:	4298      	cmp	r0, r3
 80029d2:	d301      	bcc.n	80029d8 <__clzsi2+0x18>
 80029d4:	0a00      	lsrs	r0, r0, #8
 80029d6:	3908      	subs	r1, #8
 80029d8:	091b      	lsrs	r3, r3, #4
 80029da:	4298      	cmp	r0, r3
 80029dc:	d301      	bcc.n	80029e2 <__clzsi2+0x22>
 80029de:	0900      	lsrs	r0, r0, #4
 80029e0:	3904      	subs	r1, #4
 80029e2:	a202      	add	r2, pc, #8	@ (adr r2, 80029ec <__clzsi2+0x2c>)
 80029e4:	5c10      	ldrb	r0, [r2, r0]
 80029e6:	1840      	adds	r0, r0, r1
 80029e8:	4770      	bx	lr
 80029ea:	46c0      	nop			@ (mov r8, r8)
 80029ec:	02020304 	.word	0x02020304
 80029f0:	01010101 	.word	0x01010101
	...

080029fc <__clzdi2>:
 80029fc:	b510      	push	{r4, lr}
 80029fe:	2900      	cmp	r1, #0
 8002a00:	d103      	bne.n	8002a0a <__clzdi2+0xe>
 8002a02:	f7ff ffdd 	bl	80029c0 <__clzsi2>
 8002a06:	3020      	adds	r0, #32
 8002a08:	e002      	b.n	8002a10 <__clzdi2+0x14>
 8002a0a:	0008      	movs	r0, r1
 8002a0c:	f7ff ffd8 	bl	80029c0 <__clzsi2>
 8002a10:	bd10      	pop	{r4, pc}
 8002a12:	46c0      	nop			@ (mov r8, r8)

08002a14 <SetCellPWM>:
#include "Control.h"




void SetCellPWM(uint8_t duty_percent){
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b084      	sub	sp, #16
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	0002      	movs	r2, r0
 8002a1c:	1dfb      	adds	r3, r7, #7
 8002a1e:	701a      	strb	r2, [r3, #0]
if (duty_percent > 100) duty_percent = 100;
 8002a20:	1dfb      	adds	r3, r7, #7
 8002a22:	781b      	ldrb	r3, [r3, #0]
 8002a24:	2b64      	cmp	r3, #100	@ 0x64
 8002a26:	d902      	bls.n	8002a2e <SetCellPWM+0x1a>
 8002a28:	1dfb      	adds	r3, r7, #7
 8002a2a:	2264      	movs	r2, #100	@ 0x64
 8002a2c:	701a      	strb	r2, [r3, #0]

   uint32_t pulse = duty_percent * (__HAL_TIM_GET_AUTORELOAD(&htim1) + 1) / 100;
 8002a2e:	1dfb      	adds	r3, r7, #7
 8002a30:	781a      	ldrb	r2, [r3, #0]
 8002a32:	4b09      	ldr	r3, [pc, #36]	@ (8002a58 <SetCellPWM+0x44>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a38:	3301      	adds	r3, #1
 8002a3a:	4353      	muls	r3, r2
 8002a3c:	2164      	movs	r1, #100	@ 0x64
 8002a3e:	0018      	movs	r0, r3
 8002a40:	f7fd fb60 	bl	8000104 <__udivsi3>
 8002a44:	0003      	movs	r3, r0
 8002a46:	60fb      	str	r3, [r7, #12]

   __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, pulse);
 8002a48:	4b03      	ldr	r3, [pc, #12]	@ (8002a58 <SetCellPWM+0x44>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	68fa      	ldr	r2, [r7, #12]
 8002a4e:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8002a50:	46c0      	nop			@ (mov r8, r8)
 8002a52:	46bd      	mov	sp, r7
 8002a54:	b004      	add	sp, #16
 8002a56:	bd80      	pop	{r7, pc}
 8002a58:	2000015c 	.word	0x2000015c

08002a5c <BLOWER>:
void BLOWER(uint8_t duty_percent){
 8002a5c:	b590      	push	{r4, r7, lr}
 8002a5e:	b083      	sub	sp, #12
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	0002      	movs	r2, r0
 8002a64:	1dfb      	adds	r3, r7, #7
 8002a66:	701a      	strb	r2, [r3, #0]


	    if (duty_percent > 100) duty_percent = 100;
 8002a68:	1dfb      	adds	r3, r7, #7
 8002a6a:	781b      	ldrb	r3, [r3, #0]
 8002a6c:	2b64      	cmp	r3, #100	@ 0x64
 8002a6e:	d902      	bls.n	8002a76 <BLOWER+0x1a>
 8002a70:	1dfb      	adds	r3, r7, #7
 8002a72:	2264      	movs	r2, #100	@ 0x64
 8002a74:	701a      	strb	r2, [r3, #0]
	    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, duty_percent * (__HAL_TIM_GET_AUTORELOAD(&htim3) + 1) / 100);
 8002a76:	1dfb      	adds	r3, r7, #7
 8002a78:	781a      	ldrb	r2, [r3, #0]
 8002a7a:	4b08      	ldr	r3, [pc, #32]	@ (8002a9c <BLOWER+0x40>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a80:	3301      	adds	r3, #1
 8002a82:	435a      	muls	r2, r3
 8002a84:	4b05      	ldr	r3, [pc, #20]	@ (8002a9c <BLOWER+0x40>)
 8002a86:	681c      	ldr	r4, [r3, #0]
 8002a88:	2164      	movs	r1, #100	@ 0x64
 8002a8a:	0010      	movs	r0, r2
 8002a8c:	f7fd fb3a 	bl	8000104 <__udivsi3>
 8002a90:	0003      	movs	r3, r0
 8002a92:	63e3      	str	r3, [r4, #60]	@ 0x3c

}
 8002a94:	46c0      	nop			@ (mov r8, r8)
 8002a96:	46bd      	mov	sp, r7
 8002a98:	b003      	add	sp, #12
 8002a9a:	bd90      	pop	{r4, r7, pc}
 8002a9c:	200001a8 	.word	0x200001a8

08002aa0 <Controlsystem>:


float CapacitorVoltage = 25.0f;
float CellVoltage = 0.0f;
float CellCurrent = 0.0f;
void Controlsystem(void){
 8002aa0:	b590      	push	{r4, r7, lr}
 8002aa2:	b087      	sub	sp, #28
 8002aa4:	af00      	add	r7, sp, #0
	Read_ADC_Channels();
 8002aa6:	f001 f991 	bl	8003dcc <Read_ADC_Channels>

    //float temperature = Convert_ADC_to_Temperature(adc_vals[0]);
	float rawCapacitorVoltage = Convert_ADC_to_CapacitorVoltage(adc_vals[3]);
 8002aaa:	4b9f      	ldr	r3, [pc, #636]	@ (8002d28 <Controlsystem+0x288>)
 8002aac:	68db      	ldr	r3, [r3, #12]
 8002aae:	1c18      	adds	r0, r3, #0
 8002ab0:	f7fd fcf8 	bl	80004a4 <__aeabi_f2uiz>
 8002ab4:	0003      	movs	r3, r0
 8002ab6:	b29b      	uxth	r3, r3
 8002ab8:	0018      	movs	r0, r3
 8002aba:	f000 fd35 	bl	8003528 <Convert_ADC_to_CapacitorVoltage>
 8002abe:	1c03      	adds	r3, r0, #0
 8002ac0:	617b      	str	r3, [r7, #20]
	float rawCellVoltage = Convert_ADC_to_CellVoltage(adc_vals[1]);
 8002ac2:	4b99      	ldr	r3, [pc, #612]	@ (8002d28 <Controlsystem+0x288>)
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	1c18      	adds	r0, r3, #0
 8002ac8:	f7fd fcec 	bl	80004a4 <__aeabi_f2uiz>
 8002acc:	0003      	movs	r3, r0
 8002ace:	b29b      	uxth	r3, r3
 8002ad0:	0018      	movs	r0, r3
 8002ad2:	f000 fd4f 	bl	8003574 <Convert_ADC_to_CellVoltage>
 8002ad6:	1c03      	adds	r3, r0, #0
 8002ad8:	613b      	str	r3, [r7, #16]
	float rawCellCurrent = Convert_ADC_to_CellCurrent(adc_vals[2]);
 8002ada:	4b93      	ldr	r3, [pc, #588]	@ (8002d28 <Controlsystem+0x288>)
 8002adc:	689b      	ldr	r3, [r3, #8]
 8002ade:	1c18      	adds	r0, r3, #0
 8002ae0:	f7fd fce0 	bl	80004a4 <__aeabi_f2uiz>
 8002ae4:	0003      	movs	r3, r0
 8002ae6:	b29b      	uxth	r3, r3
 8002ae8:	0018      	movs	r0, r3
 8002aea:	f000 fd6b 	bl	80035c4 <Convert_ADC_to_CellCurrent>
 8002aee:	1c03      	adds	r3, r0, #0
 8002af0:	60fb      	str	r3, [r7, #12]

	CapacitorVoltage = ALPHA * rawCapacitorVoltage + (1.0f - ALPHA) * CapacitorVoltage;
 8002af2:	498e      	ldr	r1, [pc, #568]	@ (8002d2c <Controlsystem+0x28c>)
 8002af4:	6978      	ldr	r0, [r7, #20]
 8002af6:	f7fe f929 	bl	8000d4c <__aeabi_fmul>
 8002afa:	1c03      	adds	r3, r0, #0
 8002afc:	1c1c      	adds	r4, r3, #0
 8002afe:	4b8c      	ldr	r3, [pc, #560]	@ (8002d30 <Controlsystem+0x290>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	498c      	ldr	r1, [pc, #560]	@ (8002d34 <Controlsystem+0x294>)
 8002b04:	1c18      	adds	r0, r3, #0
 8002b06:	f7fe f921 	bl	8000d4c <__aeabi_fmul>
 8002b0a:	1c03      	adds	r3, r0, #0
 8002b0c:	1c19      	adds	r1, r3, #0
 8002b0e:	1c20      	adds	r0, r4, #0
 8002b10:	f7fd fdac 	bl	800066c <__aeabi_fadd>
 8002b14:	1c03      	adds	r3, r0, #0
 8002b16:	1c1a      	adds	r2, r3, #0
 8002b18:	4b85      	ldr	r3, [pc, #532]	@ (8002d30 <Controlsystem+0x290>)
 8002b1a:	601a      	str	r2, [r3, #0]
	CellVoltage = ALPHA * rawCellVoltage + (1.0f - ALPHA) * CellVoltage;
 8002b1c:	4983      	ldr	r1, [pc, #524]	@ (8002d2c <Controlsystem+0x28c>)
 8002b1e:	6938      	ldr	r0, [r7, #16]
 8002b20:	f7fe f914 	bl	8000d4c <__aeabi_fmul>
 8002b24:	1c03      	adds	r3, r0, #0
 8002b26:	1c1c      	adds	r4, r3, #0
 8002b28:	4b83      	ldr	r3, [pc, #524]	@ (8002d38 <Controlsystem+0x298>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4981      	ldr	r1, [pc, #516]	@ (8002d34 <Controlsystem+0x294>)
 8002b2e:	1c18      	adds	r0, r3, #0
 8002b30:	f7fe f90c 	bl	8000d4c <__aeabi_fmul>
 8002b34:	1c03      	adds	r3, r0, #0
 8002b36:	1c19      	adds	r1, r3, #0
 8002b38:	1c20      	adds	r0, r4, #0
 8002b3a:	f7fd fd97 	bl	800066c <__aeabi_fadd>
 8002b3e:	1c03      	adds	r3, r0, #0
 8002b40:	1c1a      	adds	r2, r3, #0
 8002b42:	4b7d      	ldr	r3, [pc, #500]	@ (8002d38 <Controlsystem+0x298>)
 8002b44:	601a      	str	r2, [r3, #0]
	CellCurrent = ALPHA * rawCellCurrent + (1.0f - ALPHA) * CellCurrent;
 8002b46:	4979      	ldr	r1, [pc, #484]	@ (8002d2c <Controlsystem+0x28c>)
 8002b48:	68f8      	ldr	r0, [r7, #12]
 8002b4a:	f7fe f8ff 	bl	8000d4c <__aeabi_fmul>
 8002b4e:	1c03      	adds	r3, r0, #0
 8002b50:	1c1c      	adds	r4, r3, #0
 8002b52:	4b7a      	ldr	r3, [pc, #488]	@ (8002d3c <Controlsystem+0x29c>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4977      	ldr	r1, [pc, #476]	@ (8002d34 <Controlsystem+0x294>)
 8002b58:	1c18      	adds	r0, r3, #0
 8002b5a:	f7fe f8f7 	bl	8000d4c <__aeabi_fmul>
 8002b5e:	1c03      	adds	r3, r0, #0
 8002b60:	1c19      	adds	r1, r3, #0
 8002b62:	1c20      	adds	r0, r4, #0
 8002b64:	f7fd fd82 	bl	800066c <__aeabi_fadd>
 8002b68:	1c03      	adds	r3, r0, #0
 8002b6a:	1c1a      	adds	r2, r3, #0
 8002b6c:	4b73      	ldr	r3, [pc, #460]	@ (8002d3c <Controlsystem+0x29c>)
 8002b6e:	601a      	str	r2, [r3, #0]

	pt100isOK = Max31865_readTempC(&pt100,&t);
 8002b70:	4a73      	ldr	r2, [pc, #460]	@ (8002d40 <Controlsystem+0x2a0>)
 8002b72:	4b74      	ldr	r3, [pc, #464]	@ (8002d44 <Controlsystem+0x2a4>)
 8002b74:	0011      	movs	r1, r2
 8002b76:	0018      	movs	r0, r3
 8002b78:	f000 fb6a 	bl	8003250 <Max31865_readTempC>
 8002b7c:	0003      	movs	r3, r0
 8002b7e:	001a      	movs	r2, r3
 8002b80:	4b71      	ldr	r3, [pc, #452]	@ (8002d48 <Controlsystem+0x2a8>)
 8002b82:	701a      	strb	r2, [r3, #0]
	pt100Temp = Max31865_Filter(t,pt100Temp,0.1);
 8002b84:	4b6e      	ldr	r3, [pc, #440]	@ (8002d40 <Controlsystem+0x2a0>)
 8002b86:	6818      	ldr	r0, [r3, #0]
 8002b88:	4b70      	ldr	r3, [pc, #448]	@ (8002d4c <Controlsystem+0x2ac>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4a70      	ldr	r2, [pc, #448]	@ (8002d50 <Controlsystem+0x2b0>)
 8002b8e:	1c19      	adds	r1, r3, #0
 8002b90:	f000 fcaa 	bl	80034e8 <Max31865_Filter>
 8002b94:	1c02      	adds	r2, r0, #0
 8002b96:	4b6d      	ldr	r3, [pc, #436]	@ (8002d4c <Controlsystem+0x2ac>)
 8002b98:	601a      	str	r2, [r3, #0]

	bool manualOverride = HAL_GPIO_ReadPin(MANUAL_GPIO_Port, MANUAL_Pin) == GPIO_PIN_SET;
 8002b9a:	4b6e      	ldr	r3, [pc, #440]	@ (8002d54 <Controlsystem+0x2b4>)
 8002b9c:	2101      	movs	r1, #1
 8002b9e:	0018      	movs	r0, r3
 8002ba0:	f002 ff2a 	bl	80059f8 <HAL_GPIO_ReadPin>
 8002ba4:	0003      	movs	r3, r0
 8002ba6:	001a      	movs	r2, r3
 8002ba8:	230b      	movs	r3, #11
 8002baa:	18fb      	adds	r3, r7, r3
 8002bac:	3a01      	subs	r2, #1
 8002bae:	4251      	negs	r1, r2
 8002bb0:	414a      	adcs	r2, r1
 8002bb2:	701a      	strb	r2, [r3, #0]

	float POWER_CELL = CellVoltage * CellCurrent;
 8002bb4:	4b60      	ldr	r3, [pc, #384]	@ (8002d38 <Controlsystem+0x298>)
 8002bb6:	681a      	ldr	r2, [r3, #0]
 8002bb8:	4b60      	ldr	r3, [pc, #384]	@ (8002d3c <Controlsystem+0x29c>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	1c19      	adds	r1, r3, #0
 8002bbe:	1c10      	adds	r0, r2, #0
 8002bc0:	f7fe f8c4 	bl	8000d4c <__aeabi_fmul>
 8002bc4:	1c03      	adds	r3, r0, #0
 8002bc6:	607b      	str	r3, [r7, #4]

	if (pt100Temp > MAX_SAFE_TEMP || POWER_CELL > MAX_SAFE_POWER) {
 8002bc8:	4b60      	ldr	r3, [pc, #384]	@ (8002d4c <Controlsystem+0x2ac>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4962      	ldr	r1, [pc, #392]	@ (8002d58 <Controlsystem+0x2b8>)
 8002bce:	1c18      	adds	r0, r3, #0
 8002bd0:	f7fd fc34 	bl	800043c <__aeabi_fcmpgt>
 8002bd4:	1e03      	subs	r3, r0, #0
 8002bd6:	d105      	bne.n	8002be4 <Controlsystem+0x144>
 8002bd8:	4960      	ldr	r1, [pc, #384]	@ (8002d5c <Controlsystem+0x2bc>)
 8002bda:	6878      	ldr	r0, [r7, #4]
 8002bdc:	f7fd fc2e 	bl	800043c <__aeabi_fcmpgt>
 8002be0:	1e03      	subs	r3, r0, #0
 8002be2:	d003      	beq.n	8002bec <Controlsystem+0x14c>
	    safetyLockout = true;
 8002be4:	4b5e      	ldr	r3, [pc, #376]	@ (8002d60 <Controlsystem+0x2c0>)
 8002be6:	2201      	movs	r2, #1
 8002be8:	701a      	strb	r2, [r3, #0]
 8002bea:	e002      	b.n	8002bf2 <Controlsystem+0x152>
	} else {
	    safetyLockout = false;
 8002bec:	4b5c      	ldr	r3, [pc, #368]	@ (8002d60 <Controlsystem+0x2c0>)
 8002bee:	2200      	movs	r2, #0
 8002bf0:	701a      	strb	r2, [r3, #0]
	}

	if (CapacitorVoltage < CAPACITOR_LOW_LEVEL)
 8002bf2:	4b4f      	ldr	r3, [pc, #316]	@ (8002d30 <Controlsystem+0x290>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	495b      	ldr	r1, [pc, #364]	@ (8002d64 <Controlsystem+0x2c4>)
 8002bf8:	1c18      	adds	r0, r3, #0
 8002bfa:	f7fd fc0b 	bl	8000414 <__aeabi_fcmplt>
 8002bfe:	1e03      	subs	r3, r0, #0
 8002c00:	d003      	beq.n	8002c0a <Controlsystem+0x16a>
	{
		LoadFLAG = true;
 8002c02:	4b59      	ldr	r3, [pc, #356]	@ (8002d68 <Controlsystem+0x2c8>)
 8002c04:	2201      	movs	r2, #1
 8002c06:	701a      	strb	r2, [r3, #0]
 8002c08:	e00a      	b.n	8002c20 <Controlsystem+0x180>
	}
	else if (CapacitorVoltage > CAPACITOR_HIGH_LEVEL)
 8002c0a:	4b49      	ldr	r3, [pc, #292]	@ (8002d30 <Controlsystem+0x290>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4957      	ldr	r1, [pc, #348]	@ (8002d6c <Controlsystem+0x2cc>)
 8002c10:	1c18      	adds	r0, r3, #0
 8002c12:	f7fd fc13 	bl	800043c <__aeabi_fcmpgt>
 8002c16:	1e03      	subs	r3, r0, #0
 8002c18:	d002      	beq.n	8002c20 <Controlsystem+0x180>
	{
		LoadFLAG = false;
 8002c1a:	4b53      	ldr	r3, [pc, #332]	@ (8002d68 <Controlsystem+0x2c8>)
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	701a      	strb	r2, [r3, #0]
	}
	bool controlactive = (LoadFLAG || manualOverride) && !safetyLockout;
 8002c20:	4b51      	ldr	r3, [pc, #324]	@ (8002d68 <Controlsystem+0x2c8>)
 8002c22:	781b      	ldrb	r3, [r3, #0]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d104      	bne.n	8002c32 <Controlsystem+0x192>
 8002c28:	230b      	movs	r3, #11
 8002c2a:	18fb      	adds	r3, r7, r3
 8002c2c:	781b      	ldrb	r3, [r3, #0]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d008      	beq.n	8002c44 <Controlsystem+0x1a4>
 8002c32:	4b4b      	ldr	r3, [pc, #300]	@ (8002d60 <Controlsystem+0x2c0>)
 8002c34:	781b      	ldrb	r3, [r3, #0]
 8002c36:	2201      	movs	r2, #1
 8002c38:	4053      	eors	r3, r2
 8002c3a:	b2db      	uxtb	r3, r3
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d001      	beq.n	8002c44 <Controlsystem+0x1a4>
 8002c40:	2201      	movs	r2, #1
 8002c42:	e000      	b.n	8002c46 <Controlsystem+0x1a6>
 8002c44:	2200      	movs	r2, #0
 8002c46:	1cfb      	adds	r3, r7, #3
 8002c48:	701a      	strb	r2, [r3, #0]
 8002c4a:	781a      	ldrb	r2, [r3, #0]
 8002c4c:	2101      	movs	r1, #1
 8002c4e:	400a      	ands	r2, r1
 8002c50:	701a      	strb	r2, [r3, #0]
	if (controlactive && !previousLoadFlag) {
 8002c52:	1cfb      	adds	r3, r7, #3
 8002c54:	781b      	ldrb	r3, [r3, #0]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d022      	beq.n	8002ca0 <Controlsystem+0x200>
 8002c5a:	4b45      	ldr	r3, [pc, #276]	@ (8002d70 <Controlsystem+0x2d0>)
 8002c5c:	781b      	ldrb	r3, [r3, #0]
 8002c5e:	2201      	movs	r2, #1
 8002c60:	4053      	eors	r3, r2
 8002c62:	b2db      	uxtb	r3, r3
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d01b      	beq.n	8002ca0 <Controlsystem+0x200>
	    softStartActive = true;
 8002c68:	4b42      	ldr	r3, [pc, #264]	@ (8002d74 <Controlsystem+0x2d4>)
 8002c6a:	2201      	movs	r2, #1
 8002c6c:	701a      	strb	r2, [r3, #0]
	    soft_pwm = 100;
 8002c6e:	4b42      	ldr	r3, [pc, #264]	@ (8002d78 <Controlsystem+0x2d8>)
 8002c70:	2264      	movs	r2, #100	@ 0x64
 8002c72:	701a      	strb	r2, [r3, #0]

	    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_SET);
 8002c74:	4b37      	ldr	r3, [pc, #220]	@ (8002d54 <Controlsystem+0x2b4>)
 8002c76:	2201      	movs	r2, #1
 8002c78:	2110      	movs	r1, #16
 8002c7a:	0018      	movs	r0, r3
 8002c7c:	f002 fed9 	bl	8005a32 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(H_VALVE_GPIO_Port, H_VALVE_Pin, GPIO_PIN_SET);
 8002c80:	2380      	movs	r3, #128	@ 0x80
 8002c82:	005b      	lsls	r3, r3, #1
 8002c84:	4833      	ldr	r0, [pc, #204]	@ (8002d54 <Controlsystem+0x2b4>)
 8002c86:	2201      	movs	r2, #1
 8002c88:	0019      	movs	r1, r3
 8002c8a:	f002 fed2 	bl	8005a32 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(HUMIDIFIER_GPIO_Port, HUMIDIFIER_Pin, GPIO_PIN_SET);
 8002c8e:	4b3b      	ldr	r3, [pc, #236]	@ (8002d7c <Controlsystem+0x2dc>)
 8002c90:	2201      	movs	r2, #1
 8002c92:	2180      	movs	r1, #128	@ 0x80
 8002c94:	0018      	movs	r0, r3
 8002c96:	f002 fecc 	bl	8005a32 <HAL_GPIO_WritePin>
	    BLOWER(100);
 8002c9a:	2064      	movs	r0, #100	@ 0x64
 8002c9c:	f7ff fede 	bl	8002a5c <BLOWER>
	}
	previousLoadFlag = controlactive;
 8002ca0:	4b33      	ldr	r3, [pc, #204]	@ (8002d70 <Controlsystem+0x2d0>)
 8002ca2:	1cfa      	adds	r2, r7, #3
 8002ca4:	7812      	ldrb	r2, [r2, #0]
 8002ca6:	701a      	strb	r2, [r3, #0]

	    if (controlactive) {
 8002ca8:	1cfb      	adds	r3, r7, #3
 8002caa:	781b      	ldrb	r3, [r3, #0]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d01e      	beq.n	8002cee <Controlsystem+0x24e>
	        if (softStartActive) {
 8002cb0:	4b30      	ldr	r3, [pc, #192]	@ (8002d74 <Controlsystem+0x2d4>)
 8002cb2:	781b      	ldrb	r3, [r3, #0]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d016      	beq.n	8002ce6 <Controlsystem+0x246>
	            if (soft_pwm > 0) {
 8002cb8:	4b2f      	ldr	r3, [pc, #188]	@ (8002d78 <Controlsystem+0x2d8>)
 8002cba:	781b      	ldrb	r3, [r3, #0]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d00e      	beq.n	8002cde <Controlsystem+0x23e>
	                soft_pwm -= 4;
 8002cc0:	4b2d      	ldr	r3, [pc, #180]	@ (8002d78 <Controlsystem+0x2d8>)
 8002cc2:	781b      	ldrb	r3, [r3, #0]
 8002cc4:	3b04      	subs	r3, #4
 8002cc6:	b2da      	uxtb	r2, r3
 8002cc8:	4b2b      	ldr	r3, [pc, #172]	@ (8002d78 <Controlsystem+0x2d8>)
 8002cca:	701a      	strb	r2, [r3, #0]
	                SetCellPWM(soft_pwm);
 8002ccc:	4b2a      	ldr	r3, [pc, #168]	@ (8002d78 <Controlsystem+0x2d8>)
 8002cce:	781b      	ldrb	r3, [r3, #0]
 8002cd0:	0018      	movs	r0, r3
 8002cd2:	f7ff fe9f 	bl	8002a14 <SetCellPWM>
	                HAL_Delay(1);
 8002cd6:	2001      	movs	r0, #1
 8002cd8:	f001 fb84 	bl	80043e4 <HAL_Delay>
	        BLOWER(0);
	        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_RESET);
	        HAL_GPIO_WritePin(H_VALVE_GPIO_Port, H_VALVE_Pin, GPIO_PIN_RESET);
	        HAL_GPIO_WritePin(HUMIDIFIER_GPIO_Port, HUMIDIFIER_Pin, GPIO_PIN_RESET);
	    }
}
 8002cdc:	e020      	b.n	8002d20 <Controlsystem+0x280>
	                softStartActive = false;
 8002cde:	4b25      	ldr	r3, [pc, #148]	@ (8002d74 <Controlsystem+0x2d4>)
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	701a      	strb	r2, [r3, #0]
}
 8002ce4:	e01c      	b.n	8002d20 <Controlsystem+0x280>
	            SetCellPWM(0);
 8002ce6:	2000      	movs	r0, #0
 8002ce8:	f7ff fe94 	bl	8002a14 <SetCellPWM>
}
 8002cec:	e018      	b.n	8002d20 <Controlsystem+0x280>
	        SetCellPWM(100);
 8002cee:	2064      	movs	r0, #100	@ 0x64
 8002cf0:	f7ff fe90 	bl	8002a14 <SetCellPWM>
	        BLOWER(0);
 8002cf4:	2000      	movs	r0, #0
 8002cf6:	f7ff feb1 	bl	8002a5c <BLOWER>
	        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_RESET);
 8002cfa:	4b16      	ldr	r3, [pc, #88]	@ (8002d54 <Controlsystem+0x2b4>)
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	2110      	movs	r1, #16
 8002d00:	0018      	movs	r0, r3
 8002d02:	f002 fe96 	bl	8005a32 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(H_VALVE_GPIO_Port, H_VALVE_Pin, GPIO_PIN_RESET);
 8002d06:	2380      	movs	r3, #128	@ 0x80
 8002d08:	005b      	lsls	r3, r3, #1
 8002d0a:	4812      	ldr	r0, [pc, #72]	@ (8002d54 <Controlsystem+0x2b4>)
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	0019      	movs	r1, r3
 8002d10:	f002 fe8f 	bl	8005a32 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(HUMIDIFIER_GPIO_Port, HUMIDIFIER_Pin, GPIO_PIN_RESET);
 8002d14:	4b19      	ldr	r3, [pc, #100]	@ (8002d7c <Controlsystem+0x2dc>)
 8002d16:	2200      	movs	r2, #0
 8002d18:	2180      	movs	r1, #128	@ 0x80
 8002d1a:	0018      	movs	r0, r3
 8002d1c:	f002 fe89 	bl	8005a32 <HAL_GPIO_WritePin>
}
 8002d20:	46c0      	nop			@ (mov r8, r8)
 8002d22:	46bd      	mov	sp, r7
 8002d24:	b007      	add	sp, #28
 8002d26:	bd90      	pop	{r4, r7, pc}
 8002d28:	200002b0 	.word	0x200002b0
 8002d2c:	3e99999a 	.word	0x3e99999a
 8002d30:	20000004 	.word	0x20000004
 8002d34:	3f333333 	.word	0x3f333333
 8002d38:	2000008c 	.word	0x2000008c
 8002d3c:	20000090 	.word	0x20000090
 8002d40:	20000294 	.word	0x20000294
 8002d44:	200002a0 	.word	0x200002a0
 8002d48:	20000298 	.word	0x20000298
 8002d4c:	2000029c 	.word	0x2000029c
 8002d50:	3dcccccd 	.word	0x3dcccccd
 8002d54:	50000c00 	.word	0x50000c00
 8002d58:	42700000 	.word	0x42700000
 8002d5c:	447a0000 	.word	0x447a0000
 8002d60:	2000008b 	.word	0x2000008b
 8002d64:	41c80000 	.word	0x41c80000
 8002d68:	20000088 	.word	0x20000088
 8002d6c:	422a0000 	.word	0x422a0000
 8002d70:	20000089 	.word	0x20000089
 8002d74:	2000008a 	.word	0x2000008a
 8002d78:	20000000 	.word	0x20000000
 8002d7c:	50000800 	.word	0x50000800

08002d80 <ControlsystemInit>:

void ControlsystemInit(void){
 8002d80:	b580      	push	{r7, lr}
 8002d82:	af00      	add	r7, sp, #0

	SetCellPWM(100);
 8002d84:	2064      	movs	r0, #100	@ 0x64
 8002d86:	f7ff fe45 	bl	8002a14 <SetCellPWM>
	BLOWER(0);
 8002d8a:	2000      	movs	r0, #0
 8002d8c:	f7ff fe66 	bl	8002a5c <BLOWER>
	HAL_GPIO_WritePin(H_VALVE_GPIO_Port, H_VALVE_Pin, GPIO_PIN_RESET);
 8002d90:	2380      	movs	r3, #128	@ 0x80
 8002d92:	005b      	lsls	r3, r3, #1
 8002d94:	4809      	ldr	r0, [pc, #36]	@ (8002dbc <ControlsystemInit+0x3c>)
 8002d96:	2200      	movs	r2, #0
 8002d98:	0019      	movs	r1, r3
 8002d9a:	f002 fe4a 	bl	8005a32 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(HUMIDIFIER_GPIO_Port, HUMIDIFIER_Pin, GPIO_PIN_RESET);
 8002d9e:	4b08      	ldr	r3, [pc, #32]	@ (8002dc0 <ControlsystemInit+0x40>)
 8002da0:	2200      	movs	r2, #0
 8002da2:	2180      	movs	r1, #128	@ 0x80
 8002da4:	0018      	movs	r0, r3
 8002da6:	f002 fe44 	bl	8005a32 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PURGE_GPIO_Port, PURGE_Pin, GPIO_PIN_RESET);
 8002daa:	4b05      	ldr	r3, [pc, #20]	@ (8002dc0 <ControlsystemInit+0x40>)
 8002dac:	2200      	movs	r2, #0
 8002dae:	2140      	movs	r1, #64	@ 0x40
 8002db0:	0018      	movs	r0, r3
 8002db2:	f002 fe3e 	bl	8005a32 <HAL_GPIO_WritePin>

}
 8002db6:	46c0      	nop			@ (mov r8, r8)
 8002db8:	46bd      	mov	sp, r7
 8002dba:	bd80      	pop	{r7, pc}
 8002dbc:	50000c00 	.word	0x50000c00
 8002dc0:	50000800 	.word	0x50000800

08002dc4 <Max31865_delay>:

#define RTD_A 3.9083e-3
#define RTD_B -5.775e-7
//#########################################################################################################################
void  Max31865_delay(uint32_t delay_ms)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b082      	sub	sp, #8
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
  #if (_MAX31865_USE_FREERTOS == 1)
  osDelay(delay_ms);
  #else
  HAL_Delay(delay_ms);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	0018      	movs	r0, r3
 8002dd0:	f001 fb08 	bl	80043e4 <HAL_Delay>
  #endif
}
 8002dd4:	46c0      	nop			@ (mov r8, r8)
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	b002      	add	sp, #8
 8002dda:	bd80      	pop	{r7, pc}

08002ddc <Max31865_readRegisterN>:
//#########################################################################################################################
void Max31865_readRegisterN(Max31865_t *max31865,uint8_t addr, uint8_t *buffer, uint8_t n)
{
 8002ddc:	b590      	push	{r4, r7, lr}
 8002dde:	b089      	sub	sp, #36	@ 0x24
 8002de0:	af02      	add	r7, sp, #8
 8002de2:	60f8      	str	r0, [r7, #12]
 8002de4:	0008      	movs	r0, r1
 8002de6:	607a      	str	r2, [r7, #4]
 8002de8:	0019      	movs	r1, r3
 8002dea:	240b      	movs	r4, #11
 8002dec:	193b      	adds	r3, r7, r4
 8002dee:	1c02      	adds	r2, r0, #0
 8002df0:	701a      	strb	r2, [r3, #0]
 8002df2:	230a      	movs	r3, #10
 8002df4:	18fb      	adds	r3, r7, r3
 8002df6:	1c0a      	adds	r2, r1, #0
 8002df8:	701a      	strb	r2, [r3, #0]
  uint8_t tmp = 0xFF;
 8002dfa:	2317      	movs	r3, #23
 8002dfc:	18fb      	adds	r3, r7, r3
 8002dfe:	22ff      	movs	r2, #255	@ 0xff
 8002e00:	701a      	strb	r2, [r3, #0]
	addr &= 0x7F;
 8002e02:	193b      	adds	r3, r7, r4
 8002e04:	781b      	ldrb	r3, [r3, #0]
 8002e06:	227f      	movs	r2, #127	@ 0x7f
 8002e08:	4013      	ands	r3, r2
 8002e0a:	b2da      	uxtb	r2, r3
 8002e0c:	193b      	adds	r3, r7, r4
 8002e0e:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(max31865->cs_gpio, max31865->cs_pin, GPIO_PIN_RESET);
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	6818      	ldr	r0, [r3, #0]
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	889b      	ldrh	r3, [r3, #4]
 8002e18:	2200      	movs	r2, #0
 8002e1a:	0019      	movs	r1, r3
 8002e1c:	f002 fe09 	bl	8005a32 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(max31865->spi,&addr, 1, 100);
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	6898      	ldr	r0, [r3, #8]
 8002e24:	1939      	adds	r1, r7, r4
 8002e26:	2364      	movs	r3, #100	@ 0x64
 8002e28:	2201      	movs	r2, #1
 8002e2a:	f003 fd9f 	bl	800696c <HAL_SPI_Transmit>
	while (n--)
 8002e2e:	e00c      	b.n	8002e4a <Max31865_readRegisterN+0x6e>
	{
    HAL_SPI_TransmitReceive(max31865->spi, &tmp, buffer, 1, 100);
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	6898      	ldr	r0, [r3, #8]
 8002e34:	687a      	ldr	r2, [r7, #4]
 8002e36:	2317      	movs	r3, #23
 8002e38:	18f9      	adds	r1, r7, r3
 8002e3a:	2364      	movs	r3, #100	@ 0x64
 8002e3c:	9300      	str	r3, [sp, #0]
 8002e3e:	2301      	movs	r3, #1
 8002e40:	f003 fef4 	bl	8006c2c <HAL_SPI_TransmitReceive>
		buffer++;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	3301      	adds	r3, #1
 8002e48:	607b      	str	r3, [r7, #4]
	while (n--)
 8002e4a:	220a      	movs	r2, #10
 8002e4c:	18bb      	adds	r3, r7, r2
 8002e4e:	781b      	ldrb	r3, [r3, #0]
 8002e50:	18ba      	adds	r2, r7, r2
 8002e52:	1e59      	subs	r1, r3, #1
 8002e54:	7011      	strb	r1, [r2, #0]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d1ea      	bne.n	8002e30 <Max31865_readRegisterN+0x54>
	}
	HAL_GPIO_WritePin(max31865->cs_gpio, max31865->cs_pin, GPIO_PIN_SET);
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	6818      	ldr	r0, [r3, #0]
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	889b      	ldrh	r3, [r3, #4]
 8002e62:	2201      	movs	r2, #1
 8002e64:	0019      	movs	r1, r3
 8002e66:	f002 fde4 	bl	8005a32 <HAL_GPIO_WritePin>
}
 8002e6a:	46c0      	nop			@ (mov r8, r8)
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	b007      	add	sp, #28
 8002e70:	bd90      	pop	{r4, r7, pc}

08002e72 <Max31865_readRegister8>:
//#########################################################################################################################
uint8_t Max31865_readRegister8(Max31865_t *max31865,uint8_t addr)
{
 8002e72:	b590      	push	{r4, r7, lr}
 8002e74:	b085      	sub	sp, #20
 8002e76:	af00      	add	r7, sp, #0
 8002e78:	6078      	str	r0, [r7, #4]
 8002e7a:	000a      	movs	r2, r1
 8002e7c:	1cfb      	adds	r3, r7, #3
 8002e7e:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0;
 8002e80:	240f      	movs	r4, #15
 8002e82:	193b      	adds	r3, r7, r4
 8002e84:	2200      	movs	r2, #0
 8002e86:	701a      	strb	r2, [r3, #0]
	Max31865_readRegisterN(max31865, addr, &ret, 1);
 8002e88:	193a      	adds	r2, r7, r4
 8002e8a:	1cfb      	adds	r3, r7, #3
 8002e8c:	7819      	ldrb	r1, [r3, #0]
 8002e8e:	6878      	ldr	r0, [r7, #4]
 8002e90:	2301      	movs	r3, #1
 8002e92:	f7ff ffa3 	bl	8002ddc <Max31865_readRegisterN>
	return ret;
 8002e96:	193b      	adds	r3, r7, r4
 8002e98:	781b      	ldrb	r3, [r3, #0]
}
 8002e9a:	0018      	movs	r0, r3
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	b005      	add	sp, #20
 8002ea0:	bd90      	pop	{r4, r7, pc}

08002ea2 <Max31865_readRegister16>:
//#########################################################################################################################
uint16_t Max31865_readRegister16(Max31865_t *max31865,uint8_t addr)
{
 8002ea2:	b590      	push	{r4, r7, lr}
 8002ea4:	b085      	sub	sp, #20
 8002ea6:	af00      	add	r7, sp, #0
 8002ea8:	6078      	str	r0, [r7, #4]
 8002eaa:	000a      	movs	r2, r1
 8002eac:	1cfb      	adds	r3, r7, #3
 8002eae:	701a      	strb	r2, [r3, #0]
	uint8_t buffer[2] = {0, 0};
 8002eb0:	240c      	movs	r4, #12
 8002eb2:	193b      	adds	r3, r7, r4
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	801a      	strh	r2, [r3, #0]
	Max31865_readRegisterN(max31865, addr, buffer, 2);
 8002eb8:	193a      	adds	r2, r7, r4
 8002eba:	1cfb      	adds	r3, r7, #3
 8002ebc:	7819      	ldrb	r1, [r3, #0]
 8002ebe:	6878      	ldr	r0, [r7, #4]
 8002ec0:	2302      	movs	r3, #2
 8002ec2:	f7ff ff8b 	bl	8002ddc <Max31865_readRegisterN>
	uint16_t ret = buffer[0];
 8002ec6:	0021      	movs	r1, r4
 8002ec8:	187b      	adds	r3, r7, r1
 8002eca:	781a      	ldrb	r2, [r3, #0]
 8002ecc:	200e      	movs	r0, #14
 8002ece:	183b      	adds	r3, r7, r0
 8002ed0:	801a      	strh	r2, [r3, #0]
	ret <<= 8;
 8002ed2:	183b      	adds	r3, r7, r0
 8002ed4:	183a      	adds	r2, r7, r0
 8002ed6:	8812      	ldrh	r2, [r2, #0]
 8002ed8:	0212      	lsls	r2, r2, #8
 8002eda:	801a      	strh	r2, [r3, #0]
	ret |=  buffer[1];
 8002edc:	187b      	adds	r3, r7, r1
 8002ede:	785b      	ldrb	r3, [r3, #1]
 8002ee0:	0019      	movs	r1, r3
 8002ee2:	183b      	adds	r3, r7, r0
 8002ee4:	183a      	adds	r2, r7, r0
 8002ee6:	8812      	ldrh	r2, [r2, #0]
 8002ee8:	430a      	orrs	r2, r1
 8002eea:	801a      	strh	r2, [r3, #0]
	return ret;
 8002eec:	183b      	adds	r3, r7, r0
 8002eee:	881b      	ldrh	r3, [r3, #0]
}
 8002ef0:	0018      	movs	r0, r3
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	b005      	add	sp, #20
 8002ef6:	bd90      	pop	{r4, r7, pc}

08002ef8 <Max31865_writeRegister8>:
//#########################################################################################################################
void Max31865_writeRegister8(Max31865_t *max31865,uint8_t addr, uint8_t data)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b082      	sub	sp, #8
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
 8002f00:	0008      	movs	r0, r1
 8002f02:	0011      	movs	r1, r2
 8002f04:	1cfb      	adds	r3, r7, #3
 8002f06:	1c02      	adds	r2, r0, #0
 8002f08:	701a      	strb	r2, [r3, #0]
 8002f0a:	1cbb      	adds	r3, r7, #2
 8002f0c:	1c0a      	adds	r2, r1, #0
 8002f0e:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(max31865->cs_gpio, max31865->cs_pin, GPIO_PIN_RESET);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6818      	ldr	r0, [r3, #0]
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	889b      	ldrh	r3, [r3, #4]
 8002f18:	2200      	movs	r2, #0
 8002f1a:	0019      	movs	r1, r3
 8002f1c:	f002 fd89 	bl	8005a32 <HAL_GPIO_WritePin>
  addr |= 0x80;
 8002f20:	1cfb      	adds	r3, r7, #3
 8002f22:	781b      	ldrb	r3, [r3, #0]
 8002f24:	2280      	movs	r2, #128	@ 0x80
 8002f26:	4252      	negs	r2, r2
 8002f28:	4313      	orrs	r3, r2
 8002f2a:	b2da      	uxtb	r2, r3
 8002f2c:	1cfb      	adds	r3, r7, #3
 8002f2e:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(max31865->spi,&addr, 1, 100);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6898      	ldr	r0, [r3, #8]
 8002f34:	1cf9      	adds	r1, r7, #3
 8002f36:	2364      	movs	r3, #100	@ 0x64
 8002f38:	2201      	movs	r2, #1
 8002f3a:	f003 fd17 	bl	800696c <HAL_SPI_Transmit>
	HAL_SPI_Transmit(max31865->spi,&data, 1, 100);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6898      	ldr	r0, [r3, #8]
 8002f42:	1cb9      	adds	r1, r7, #2
 8002f44:	2364      	movs	r3, #100	@ 0x64
 8002f46:	2201      	movs	r2, #1
 8002f48:	f003 fd10 	bl	800696c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(max31865->cs_gpio, max31865->cs_pin, GPIO_PIN_SET);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6818      	ldr	r0, [r3, #0]
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	889b      	ldrh	r3, [r3, #4]
 8002f54:	2201      	movs	r2, #1
 8002f56:	0019      	movs	r1, r3
 8002f58:	f002 fd6b 	bl	8005a32 <HAL_GPIO_WritePin>
}
 8002f5c:	46c0      	nop			@ (mov r8, r8)
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	b002      	add	sp, #8
 8002f62:	bd80      	pop	{r7, pc}

08002f64 <Max31865_readFault>:
//#########################################################################################################################
uint8_t Max31865_readFault(Max31865_t *max31865)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b082      	sub	sp, #8
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
  return Max31865_readRegister8(max31865, MAX31856_FAULTSTAT_REG);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2107      	movs	r1, #7
 8002f70:	0018      	movs	r0, r3
 8002f72:	f7ff ff7e 	bl	8002e72 <Max31865_readRegister8>
 8002f76:	0003      	movs	r3, r0
}
 8002f78:	0018      	movs	r0, r3
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	b002      	add	sp, #8
 8002f7e:	bd80      	pop	{r7, pc}

08002f80 <Max31865_clearFault>:
//#########################################################################################################################
void Max31865_clearFault(Max31865_t *max31865)
{
 8002f80:	b5b0      	push	{r4, r5, r7, lr}
 8002f82:	b084      	sub	sp, #16
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
	uint8_t t = Max31865_readRegister8(max31865, MAX31856_CONFIG_REG);
 8002f88:	250f      	movs	r5, #15
 8002f8a:	197c      	adds	r4, r7, r5
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2100      	movs	r1, #0
 8002f90:	0018      	movs	r0, r3
 8002f92:	f7ff ff6e 	bl	8002e72 <Max31865_readRegister8>
 8002f96:	0003      	movs	r3, r0
 8002f98:	7023      	strb	r3, [r4, #0]
	t &= ~0x2C;
 8002f9a:	0028      	movs	r0, r5
 8002f9c:	183b      	adds	r3, r7, r0
 8002f9e:	183a      	adds	r2, r7, r0
 8002fa0:	7812      	ldrb	r2, [r2, #0]
 8002fa2:	212c      	movs	r1, #44	@ 0x2c
 8002fa4:	438a      	bics	r2, r1
 8002fa6:	701a      	strb	r2, [r3, #0]
	t |= MAX31856_CONFIG_FAULTSTAT;
 8002fa8:	183b      	adds	r3, r7, r0
 8002faa:	183a      	adds	r2, r7, r0
 8002fac:	7812      	ldrb	r2, [r2, #0]
 8002fae:	2102      	movs	r1, #2
 8002fb0:	430a      	orrs	r2, r1
 8002fb2:	701a      	strb	r2, [r3, #0]
	Max31865_writeRegister8(max31865, MAX31856_CONFIG_REG, t);
 8002fb4:	183b      	adds	r3, r7, r0
 8002fb6:	781a      	ldrb	r2, [r3, #0]
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2100      	movs	r1, #0
 8002fbc:	0018      	movs	r0, r3
 8002fbe:	f7ff ff9b 	bl	8002ef8 <Max31865_writeRegister8>
}
 8002fc2:	46c0      	nop			@ (mov r8, r8)
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	b004      	add	sp, #16
 8002fc8:	bdb0      	pop	{r4, r5, r7, pc}

08002fca <Max31865_enableBias>:
//#########################################################################################################################
void Max31865_enableBias(Max31865_t *max31865, uint8_t enable)
{
 8002fca:	b5b0      	push	{r4, r5, r7, lr}
 8002fcc:	b084      	sub	sp, #16
 8002fce:	af00      	add	r7, sp, #0
 8002fd0:	6078      	str	r0, [r7, #4]
 8002fd2:	000a      	movs	r2, r1
 8002fd4:	1cfb      	adds	r3, r7, #3
 8002fd6:	701a      	strb	r2, [r3, #0]
	uint8_t t = Max31865_readRegister8(max31865, MAX31856_CONFIG_REG);
 8002fd8:	250f      	movs	r5, #15
 8002fda:	197c      	adds	r4, r7, r5
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2100      	movs	r1, #0
 8002fe0:	0018      	movs	r0, r3
 8002fe2:	f7ff ff46 	bl	8002e72 <Max31865_readRegister8>
 8002fe6:	0003      	movs	r3, r0
 8002fe8:	7023      	strb	r3, [r4, #0]
	if (enable)
 8002fea:	1cfb      	adds	r3, r7, #3
 8002fec:	781b      	ldrb	r3, [r3, #0]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d007      	beq.n	8003002 <Max31865_enableBias+0x38>
		t |= MAX31856_CONFIG_BIAS;
 8002ff2:	197b      	adds	r3, r7, r5
 8002ff4:	197a      	adds	r2, r7, r5
 8002ff6:	7812      	ldrb	r2, [r2, #0]
 8002ff8:	2180      	movs	r1, #128	@ 0x80
 8002ffa:	4249      	negs	r1, r1
 8002ffc:	430a      	orrs	r2, r1
 8002ffe:	701a      	strb	r2, [r3, #0]
 8003000:	e006      	b.n	8003010 <Max31865_enableBias+0x46>
	else
		t &= ~MAX31856_CONFIG_BIAS;
 8003002:	220f      	movs	r2, #15
 8003004:	18bb      	adds	r3, r7, r2
 8003006:	18ba      	adds	r2, r7, r2
 8003008:	7812      	ldrb	r2, [r2, #0]
 800300a:	217f      	movs	r1, #127	@ 0x7f
 800300c:	400a      	ands	r2, r1
 800300e:	701a      	strb	r2, [r3, #0]
	Max31865_writeRegister8(max31865, MAX31856_CONFIG_REG, t);
 8003010:	230f      	movs	r3, #15
 8003012:	18fb      	adds	r3, r7, r3
 8003014:	781a      	ldrb	r2, [r3, #0]
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2100      	movs	r1, #0
 800301a:	0018      	movs	r0, r3
 800301c:	f7ff ff6c 	bl	8002ef8 <Max31865_writeRegister8>
}
 8003020:	46c0      	nop			@ (mov r8, r8)
 8003022:	46bd      	mov	sp, r7
 8003024:	b004      	add	sp, #16
 8003026:	bdb0      	pop	{r4, r5, r7, pc}

08003028 <Max31865_autoConvert>:
//#########################################################################################################################
void Max31865_autoConvert(Max31865_t *max31865, uint8_t enable)
{
 8003028:	b5b0      	push	{r4, r5, r7, lr}
 800302a:	b084      	sub	sp, #16
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
 8003030:	000a      	movs	r2, r1
 8003032:	1cfb      	adds	r3, r7, #3
 8003034:	701a      	strb	r2, [r3, #0]
	uint8_t t = Max31865_readRegister8(max31865, MAX31856_CONFIG_REG);
 8003036:	250f      	movs	r5, #15
 8003038:	197c      	adds	r4, r7, r5
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2100      	movs	r1, #0
 800303e:	0018      	movs	r0, r3
 8003040:	f7ff ff17 	bl	8002e72 <Max31865_readRegister8>
 8003044:	0003      	movs	r3, r0
 8003046:	7023      	strb	r3, [r4, #0]
	if (enable)
 8003048:	1cfb      	adds	r3, r7, #3
 800304a:	781b      	ldrb	r3, [r3, #0]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d006      	beq.n	800305e <Max31865_autoConvert+0x36>
		t |= MAX31856_CONFIG_MODEAUTO;
 8003050:	197b      	adds	r3, r7, r5
 8003052:	197a      	adds	r2, r7, r5
 8003054:	7812      	ldrb	r2, [r2, #0]
 8003056:	2140      	movs	r1, #64	@ 0x40
 8003058:	430a      	orrs	r2, r1
 800305a:	701a      	strb	r2, [r3, #0]
 800305c:	e006      	b.n	800306c <Max31865_autoConvert+0x44>
	else
		t &= ~MAX31856_CONFIG_MODEAUTO;
 800305e:	220f      	movs	r2, #15
 8003060:	18bb      	adds	r3, r7, r2
 8003062:	18ba      	adds	r2, r7, r2
 8003064:	7812      	ldrb	r2, [r2, #0]
 8003066:	2140      	movs	r1, #64	@ 0x40
 8003068:	438a      	bics	r2, r1
 800306a:	701a      	strb	r2, [r3, #0]
	Max31865_writeRegister8(max31865, MAX31856_CONFIG_REG, t);
 800306c:	230f      	movs	r3, #15
 800306e:	18fb      	adds	r3, r7, r3
 8003070:	781a      	ldrb	r2, [r3, #0]
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2100      	movs	r1, #0
 8003076:	0018      	movs	r0, r3
 8003078:	f7ff ff3e 	bl	8002ef8 <Max31865_writeRegister8>
}
 800307c:	46c0      	nop			@ (mov r8, r8)
 800307e:	46bd      	mov	sp, r7
 8003080:	b004      	add	sp, #16
 8003082:	bdb0      	pop	{r4, r5, r7, pc}

08003084 <Max31865_setWires>:
//#########################################################################################################################
void Max31865_setWires(Max31865_t *max31865, uint8_t numWires)
{
 8003084:	b5b0      	push	{r4, r5, r7, lr}
 8003086:	b084      	sub	sp, #16
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
 800308c:	000a      	movs	r2, r1
 800308e:	1cfb      	adds	r3, r7, #3
 8003090:	701a      	strb	r2, [r3, #0]
	uint8_t t = Max31865_readRegister8(max31865, MAX31856_CONFIG_REG);
 8003092:	250f      	movs	r5, #15
 8003094:	197c      	adds	r4, r7, r5
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2100      	movs	r1, #0
 800309a:	0018      	movs	r0, r3
 800309c:	f7ff fee9 	bl	8002e72 <Max31865_readRegister8>
 80030a0:	0003      	movs	r3, r0
 80030a2:	7023      	strb	r3, [r4, #0]
	if (numWires == 3)
 80030a4:	1cfb      	adds	r3, r7, #3
 80030a6:	781b      	ldrb	r3, [r3, #0]
 80030a8:	2b03      	cmp	r3, #3
 80030aa:	d106      	bne.n	80030ba <Max31865_setWires+0x36>
		t |= MAX31856_CONFIG_3WIRE;
 80030ac:	197b      	adds	r3, r7, r5
 80030ae:	197a      	adds	r2, r7, r5
 80030b0:	7812      	ldrb	r2, [r2, #0]
 80030b2:	2110      	movs	r1, #16
 80030b4:	430a      	orrs	r2, r1
 80030b6:	701a      	strb	r2, [r3, #0]
 80030b8:	e006      	b.n	80030c8 <Max31865_setWires+0x44>
	else
		t &= ~MAX31856_CONFIG_3WIRE;
 80030ba:	220f      	movs	r2, #15
 80030bc:	18bb      	adds	r3, r7, r2
 80030be:	18ba      	adds	r2, r7, r2
 80030c0:	7812      	ldrb	r2, [r2, #0]
 80030c2:	2110      	movs	r1, #16
 80030c4:	438a      	bics	r2, r1
 80030c6:	701a      	strb	r2, [r3, #0]
	Max31865_writeRegister8(max31865, MAX31856_CONFIG_REG, t);
 80030c8:	230f      	movs	r3, #15
 80030ca:	18fb      	adds	r3, r7, r3
 80030cc:	781a      	ldrb	r2, [r3, #0]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2100      	movs	r1, #0
 80030d2:	0018      	movs	r0, r3
 80030d4:	f7ff ff10 	bl	8002ef8 <Max31865_writeRegister8>
}
 80030d8:	46c0      	nop			@ (mov r8, r8)
 80030da:	46bd      	mov	sp, r7
 80030dc:	b004      	add	sp, #16
 80030de:	bdb0      	pop	{r4, r5, r7, pc}

080030e0 <Max31865_setFilter>:
//#########################################################################################################################
void Max31865_setFilter(Max31865_t *max31865, uint8_t filterHz)
{
 80030e0:	b5b0      	push	{r4, r5, r7, lr}
 80030e2:	b084      	sub	sp, #16
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
 80030e8:	000a      	movs	r2, r1
 80030ea:	1cfb      	adds	r3, r7, #3
 80030ec:	701a      	strb	r2, [r3, #0]
	uint8_t t = Max31865_readRegister8(max31865, MAX31856_CONFIG_REG);
 80030ee:	250f      	movs	r5, #15
 80030f0:	197c      	adds	r4, r7, r5
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2100      	movs	r1, #0
 80030f6:	0018      	movs	r0, r3
 80030f8:	f7ff febb 	bl	8002e72 <Max31865_readRegister8>
 80030fc:	0003      	movs	r3, r0
 80030fe:	7023      	strb	r3, [r4, #0]
	if (filterHz == 50)
 8003100:	1cfb      	adds	r3, r7, #3
 8003102:	781b      	ldrb	r3, [r3, #0]
 8003104:	2b32      	cmp	r3, #50	@ 0x32
 8003106:	d106      	bne.n	8003116 <Max31865_setFilter+0x36>
		t |= MAX31856_CONFIG_FILT50HZ;
 8003108:	197b      	adds	r3, r7, r5
 800310a:	197a      	adds	r2, r7, r5
 800310c:	7812      	ldrb	r2, [r2, #0]
 800310e:	2101      	movs	r1, #1
 8003110:	430a      	orrs	r2, r1
 8003112:	701a      	strb	r2, [r3, #0]
 8003114:	e006      	b.n	8003124 <Max31865_setFilter+0x44>
	else
		t &= ~MAX31856_CONFIG_FILT50HZ;
 8003116:	220f      	movs	r2, #15
 8003118:	18bb      	adds	r3, r7, r2
 800311a:	18ba      	adds	r2, r7, r2
 800311c:	7812      	ldrb	r2, [r2, #0]
 800311e:	2101      	movs	r1, #1
 8003120:	438a      	bics	r2, r1
 8003122:	701a      	strb	r2, [r3, #0]
	Max31865_writeRegister8(max31865, MAX31856_CONFIG_REG, t);
 8003124:	230f      	movs	r3, #15
 8003126:	18fb      	adds	r3, r7, r3
 8003128:	781a      	ldrb	r2, [r3, #0]
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2100      	movs	r1, #0
 800312e:	0018      	movs	r0, r3
 8003130:	f7ff fee2 	bl	8002ef8 <Max31865_writeRegister8>
}
 8003134:	46c0      	nop			@ (mov r8, r8)
 8003136:	46bd      	mov	sp, r7
 8003138:	b004      	add	sp, #16
 800313a:	bdb0      	pop	{r4, r5, r7, pc}

0800313c <Max31865_readRTD>:
//#########################################################################################################################
uint16_t Max31865_readRTD (Max31865_t *max31865)
{
 800313c:	b5b0      	push	{r4, r5, r7, lr}
 800313e:	b084      	sub	sp, #16
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
	Max31865_clearFault(max31865);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	0018      	movs	r0, r3
 8003148:	f7ff ff1a 	bl	8002f80 <Max31865_clearFault>
	Max31865_enableBias(max31865, 1);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2101      	movs	r1, #1
 8003150:	0018      	movs	r0, r3
 8003152:	f7ff ff3a 	bl	8002fca <Max31865_enableBias>
	Max31865_delay(10);
 8003156:	200a      	movs	r0, #10
 8003158:	f7ff fe34 	bl	8002dc4 <Max31865_delay>
	uint8_t t = Max31865_readRegister8(max31865, MAX31856_CONFIG_REG);
 800315c:	250f      	movs	r5, #15
 800315e:	197c      	adds	r4, r7, r5
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2100      	movs	r1, #0
 8003164:	0018      	movs	r0, r3
 8003166:	f7ff fe84 	bl	8002e72 <Max31865_readRegister8>
 800316a:	0003      	movs	r3, r0
 800316c:	7023      	strb	r3, [r4, #0]
	t |= MAX31856_CONFIG_1SHOT;
 800316e:	0028      	movs	r0, r5
 8003170:	183b      	adds	r3, r7, r0
 8003172:	183a      	adds	r2, r7, r0
 8003174:	7812      	ldrb	r2, [r2, #0]
 8003176:	2120      	movs	r1, #32
 8003178:	430a      	orrs	r2, r1
 800317a:	701a      	strb	r2, [r3, #0]
	Max31865_writeRegister8(max31865, MAX31856_CONFIG_REG, t);
 800317c:	183b      	adds	r3, r7, r0
 800317e:	781a      	ldrb	r2, [r3, #0]
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2100      	movs	r1, #0
 8003184:	0018      	movs	r0, r3
 8003186:	f7ff feb7 	bl	8002ef8 <Max31865_writeRegister8>
	Max31865_delay(65);
 800318a:	2041      	movs	r0, #65	@ 0x41
 800318c:	f7ff fe1a 	bl	8002dc4 <Max31865_delay>
	uint16_t rtd = Max31865_readRegister16(max31865, MAX31856_RTDMSB_REG);
 8003190:	250c      	movs	r5, #12
 8003192:	197c      	adds	r4, r7, r5
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2101      	movs	r1, #1
 8003198:	0018      	movs	r0, r3
 800319a:	f7ff fe82 	bl	8002ea2 <Max31865_readRegister16>
 800319e:	0003      	movs	r3, r0
 80031a0:	8023      	strh	r3, [r4, #0]
	rtd >>= 1;
 80031a2:	0029      	movs	r1, r5
 80031a4:	187b      	adds	r3, r7, r1
 80031a6:	187a      	adds	r2, r7, r1
 80031a8:	8812      	ldrh	r2, [r2, #0]
 80031aa:	0852      	lsrs	r2, r2, #1
 80031ac:	801a      	strh	r2, [r3, #0]
	return rtd;
 80031ae:	187b      	adds	r3, r7, r1
 80031b0:	881b      	ldrh	r3, [r3, #0]
}
 80031b2:	0018      	movs	r0, r3
 80031b4:	46bd      	mov	sp, r7
 80031b6:	b004      	add	sp, #16
 80031b8:	bdb0      	pop	{r4, r5, r7, pc}

080031ba <Max31865_init>:
//#########################################################################################################################
//#########################################################################################################################
//#########################################################################################################################
void  Max31865_init(Max31865_t *max31865,SPI_HandleTypeDef *spi,GPIO_TypeDef  *cs_gpio,uint16_t cs_pin,uint8_t  numwires, uint8_t filterHz)
{
 80031ba:	b580      	push	{r7, lr}
 80031bc:	b084      	sub	sp, #16
 80031be:	af00      	add	r7, sp, #0
 80031c0:	60f8      	str	r0, [r7, #12]
 80031c2:	60b9      	str	r1, [r7, #8]
 80031c4:	607a      	str	r2, [r7, #4]
 80031c6:	001a      	movs	r2, r3
 80031c8:	1cbb      	adds	r3, r7, #2
 80031ca:	801a      	strh	r2, [r3, #0]
  if(max31865->lock == 1)
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	7b1b      	ldrb	r3, [r3, #12]
 80031d0:	2b01      	cmp	r3, #1
 80031d2:	d102      	bne.n	80031da <Max31865_init+0x20>
    Max31865_delay(1);
 80031d4:	2001      	movs	r0, #1
 80031d6:	f7ff fdf5 	bl	8002dc4 <Max31865_delay>
  max31865->lock = 1;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	2201      	movs	r2, #1
 80031de:	731a      	strb	r2, [r3, #12]
  max31865->spi = spi;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	68ba      	ldr	r2, [r7, #8]
 80031e4:	609a      	str	r2, [r3, #8]
  max31865->cs_gpio = cs_gpio;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	687a      	ldr	r2, [r7, #4]
 80031ea:	601a      	str	r2, [r3, #0]
  max31865->cs_pin = cs_pin;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	1cba      	adds	r2, r7, #2
 80031f0:	8812      	ldrh	r2, [r2, #0]
 80031f2:	809a      	strh	r2, [r3, #4]
  HAL_GPIO_WritePin(max31865->cs_gpio,max31865->cs_pin,GPIO_PIN_SET);
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	6818      	ldr	r0, [r3, #0]
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	889b      	ldrh	r3, [r3, #4]
 80031fc:	2201      	movs	r2, #1
 80031fe:	0019      	movs	r1, r3
 8003200:	f002 fc17 	bl	8005a32 <HAL_GPIO_WritePin>
  Max31865_delay(100);
 8003204:	2064      	movs	r0, #100	@ 0x64
 8003206:	f7ff fddd 	bl	8002dc4 <Max31865_delay>
  Max31865_setWires(max31865, numwires);
 800320a:	2318      	movs	r3, #24
 800320c:	18fb      	adds	r3, r7, r3
 800320e:	781a      	ldrb	r2, [r3, #0]
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	0011      	movs	r1, r2
 8003214:	0018      	movs	r0, r3
 8003216:	f7ff ff35 	bl	8003084 <Max31865_setWires>
	Max31865_enableBias(max31865, 0);
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	2100      	movs	r1, #0
 800321e:	0018      	movs	r0, r3
 8003220:	f7ff fed3 	bl	8002fca <Max31865_enableBias>
	Max31865_autoConvert(max31865, 0);
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	2100      	movs	r1, #0
 8003228:	0018      	movs	r0, r3
 800322a:	f7ff fefd 	bl	8003028 <Max31865_autoConvert>
	Max31865_clearFault(max31865);
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	0018      	movs	r0, r3
 8003232:	f7ff fea5 	bl	8002f80 <Max31865_clearFault>
  Max31865_setFilter(max31865, filterHz);
 8003236:	231c      	movs	r3, #28
 8003238:	18fb      	adds	r3, r7, r3
 800323a:	781a      	ldrb	r2, [r3, #0]
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	0011      	movs	r1, r2
 8003240:	0018      	movs	r0, r3
 8003242:	f7ff ff4d 	bl	80030e0 <Max31865_setFilter>
}
 8003246:	46c0      	nop			@ (mov r8, r8)
 8003248:	46bd      	mov	sp, r7
 800324a:	b004      	add	sp, #16
 800324c:	bd80      	pop	{r7, pc}
	...

08003250 <Max31865_readTempC>:
//#########################################################################################################################
bool Max31865_readTempC(Max31865_t *max31865,float *readTemp)
{
 8003250:	b5b0      	push	{r4, r5, r7, lr}
 8003252:	b08a      	sub	sp, #40	@ 0x28
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
 8003258:	6039      	str	r1, [r7, #0]
  if(max31865->lock == 1)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	7b1b      	ldrb	r3, [r3, #12]
 800325e:	2b01      	cmp	r3, #1
 8003260:	d102      	bne.n	8003268 <Max31865_readTempC+0x18>
    Max31865_delay(1);
 8003262:	2001      	movs	r0, #1
 8003264:	f7ff fdae 	bl	8002dc4 <Max31865_delay>
  max31865->lock = 1;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2201      	movs	r2, #1
 800326c:	731a      	strb	r2, [r3, #12]
  bool isOk = false;
 800326e:	2427      	movs	r4, #39	@ 0x27
 8003270:	193b      	adds	r3, r7, r4
 8003272:	2200      	movs	r2, #0
 8003274:	701a      	strb	r2, [r3, #0]
  float Z1, Z2, Z3, Z4, Rt, temp;
	Rt = Max31865_readRTD(max31865);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	0018      	movs	r0, r3
 800327a:	f7ff ff5f 	bl	800313c <Max31865_readRTD>
 800327e:	0003      	movs	r3, r0
 8003280:	0018      	movs	r0, r3
 8003282:	f7fe f8c7 	bl	8001414 <__aeabi_ui2f>
 8003286:	1c03      	adds	r3, r0, #0
 8003288:	623b      	str	r3, [r7, #32]
	Rt /= 32768;
 800328a:	218e      	movs	r1, #142	@ 0x8e
 800328c:	05c9      	lsls	r1, r1, #23
 800328e:	6a38      	ldr	r0, [r7, #32]
 8003290:	f7fd fb76 	bl	8000980 <__aeabi_fdiv>
 8003294:	1c03      	adds	r3, r0, #0
 8003296:	623b      	str	r3, [r7, #32]
	Rt *= _MAX31865_RREF;
 8003298:	4981      	ldr	r1, [pc, #516]	@ (80034a0 <Max31865_readTempC+0x250>)
 800329a:	6a38      	ldr	r0, [r7, #32]
 800329c:	f7fd fd56 	bl	8000d4c <__aeabi_fmul>
 80032a0:	1c03      	adds	r3, r0, #0
 80032a2:	623b      	str	r3, [r7, #32]
	Z1 = -RTD_A;
 80032a4:	4b7f      	ldr	r3, [pc, #508]	@ (80034a4 <Max31865_readTempC+0x254>)
 80032a6:	61fb      	str	r3, [r7, #28]
	Z2 = RTD_A * RTD_A - (4 * RTD_B);
 80032a8:	4b7f      	ldr	r3, [pc, #508]	@ (80034a8 <Max31865_readTempC+0x258>)
 80032aa:	61bb      	str	r3, [r7, #24]
	Z3 = (4 * RTD_B) / _MAX31865_RNOMINAL;
 80032ac:	4b7f      	ldr	r3, [pc, #508]	@ (80034ac <Max31865_readTempC+0x25c>)
 80032ae:	617b      	str	r3, [r7, #20]
	Z4 = 2 * RTD_B;
 80032b0:	4b7f      	ldr	r3, [pc, #508]	@ (80034b0 <Max31865_readTempC+0x260>)
 80032b2:	613b      	str	r3, [r7, #16]
	temp = Z2 + (Z3 * Rt);
 80032b4:	6a39      	ldr	r1, [r7, #32]
 80032b6:	6978      	ldr	r0, [r7, #20]
 80032b8:	f7fd fd48 	bl	8000d4c <__aeabi_fmul>
 80032bc:	1c03      	adds	r3, r0, #0
 80032be:	1c19      	adds	r1, r3, #0
 80032c0:	69b8      	ldr	r0, [r7, #24]
 80032c2:	f7fd f9d3 	bl	800066c <__aeabi_fadd>
 80032c6:	1c03      	adds	r3, r0, #0
 80032c8:	60fb      	str	r3, [r7, #12]
	temp = (sqrtf(temp) + Z1) / Z4;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	1c18      	adds	r0, r3, #0
 80032ce:	f005 fe23 	bl	8008f18 <sqrtf>
 80032d2:	1c03      	adds	r3, r0, #0
 80032d4:	69f9      	ldr	r1, [r7, #28]
 80032d6:	1c18      	adds	r0, r3, #0
 80032d8:	f7fd f9c8 	bl	800066c <__aeabi_fadd>
 80032dc:	1c03      	adds	r3, r0, #0
 80032de:	6939      	ldr	r1, [r7, #16]
 80032e0:	1c18      	adds	r0, r3, #0
 80032e2:	f7fd fb4d 	bl	8000980 <__aeabi_fdiv>
 80032e6:	1c03      	adds	r3, r0, #0
 80032e8:	60fb      	str	r3, [r7, #12]

	if (temp >= 0)
 80032ea:	2100      	movs	r1, #0
 80032ec:	68f8      	ldr	r0, [r7, #12]
 80032ee:	f7fd f8af 	bl	8000450 <__aeabi_fcmpge>
 80032f2:	1e03      	subs	r3, r0, #0
 80032f4:	d012      	beq.n	800331c <Max31865_readTempC+0xcc>
  {
    *readTemp = temp;
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	68fa      	ldr	r2, [r7, #12]
 80032fa:	601a      	str	r2, [r3, #0]
    if(Max31865_readFault(max31865) == 0)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	0018      	movs	r0, r3
 8003300:	f7ff fe30 	bl	8002f64 <Max31865_readFault>
 8003304:	1e03      	subs	r3, r0, #0
 8003306:	d102      	bne.n	800330e <Max31865_readTempC+0xbe>
      isOk = true;
 8003308:	193b      	adds	r3, r7, r4
 800330a:	2201      	movs	r2, #1
 800330c:	701a      	strb	r2, [r3, #0]
    max31865->lock = 0;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2200      	movs	r2, #0
 8003312:	731a      	strb	r2, [r3, #12]
    return isOk;
 8003314:	2327      	movs	r3, #39	@ 0x27
 8003316:	18fb      	adds	r3, r7, r3
 8003318:	781b      	ldrb	r3, [r3, #0]
 800331a:	e0bc      	b.n	8003496 <Max31865_readTempC+0x246>
  }
	Rt /= _MAX31865_RNOMINAL;
 800331c:	4965      	ldr	r1, [pc, #404]	@ (80034b4 <Max31865_readTempC+0x264>)
 800331e:	6a38      	ldr	r0, [r7, #32]
 8003320:	f7fd fb2e 	bl	8000980 <__aeabi_fdiv>
 8003324:	1c03      	adds	r3, r0, #0
 8003326:	623b      	str	r3, [r7, #32]
	//Rt *= 100;
	Rt *= 5000;
 8003328:	4963      	ldr	r1, [pc, #396]	@ (80034b8 <Max31865_readTempC+0x268>)
 800332a:	6a38      	ldr	r0, [r7, #32]
 800332c:	f7fd fd0e 	bl	8000d4c <__aeabi_fmul>
 8003330:	1c03      	adds	r3, r0, #0
 8003332:	623b      	str	r3, [r7, #32]
	float rpoly = Rt;
 8003334:	6a3b      	ldr	r3, [r7, #32]
 8003336:	60bb      	str	r3, [r7, #8]
	temp = -242.02;
 8003338:	4b60      	ldr	r3, [pc, #384]	@ (80034bc <Max31865_readTempC+0x26c>)
 800333a:	60fb      	str	r3, [r7, #12]
	temp += 2.2228 * rpoly;
 800333c:	68f8      	ldr	r0, [r7, #12]
 800333e:	f7ff fa73 	bl	8002828 <__aeabi_f2d>
 8003342:	0004      	movs	r4, r0
 8003344:	000d      	movs	r5, r1
 8003346:	68b8      	ldr	r0, [r7, #8]
 8003348:	f7ff fa6e 	bl	8002828 <__aeabi_f2d>
 800334c:	4a5c      	ldr	r2, [pc, #368]	@ (80034c0 <Max31865_readTempC+0x270>)
 800334e:	4b5d      	ldr	r3, [pc, #372]	@ (80034c4 <Max31865_readTempC+0x274>)
 8003350:	f7fe fc06 	bl	8001b60 <__aeabi_dmul>
 8003354:	0002      	movs	r2, r0
 8003356:	000b      	movs	r3, r1
 8003358:	0020      	movs	r0, r4
 800335a:	0029      	movs	r1, r5
 800335c:	f7fe f89c 	bl	8001498 <__aeabi_dadd>
 8003360:	0002      	movs	r2, r0
 8003362:	000b      	movs	r3, r1
 8003364:	0010      	movs	r0, r2
 8003366:	0019      	movs	r1, r3
 8003368:	f7ff faa6 	bl	80028b8 <__aeabi_d2f>
 800336c:	1c03      	adds	r3, r0, #0
 800336e:	60fb      	str	r3, [r7, #12]
	rpoly *= Rt;  // square
 8003370:	6a39      	ldr	r1, [r7, #32]
 8003372:	68b8      	ldr	r0, [r7, #8]
 8003374:	f7fd fcea 	bl	8000d4c <__aeabi_fmul>
 8003378:	1c03      	adds	r3, r0, #0
 800337a:	60bb      	str	r3, [r7, #8]
	temp += 2.5859e-3 * rpoly;
 800337c:	68f8      	ldr	r0, [r7, #12]
 800337e:	f7ff fa53 	bl	8002828 <__aeabi_f2d>
 8003382:	0004      	movs	r4, r0
 8003384:	000d      	movs	r5, r1
 8003386:	68b8      	ldr	r0, [r7, #8]
 8003388:	f7ff fa4e 	bl	8002828 <__aeabi_f2d>
 800338c:	4a4e      	ldr	r2, [pc, #312]	@ (80034c8 <Max31865_readTempC+0x278>)
 800338e:	4b4f      	ldr	r3, [pc, #316]	@ (80034cc <Max31865_readTempC+0x27c>)
 8003390:	f7fe fbe6 	bl	8001b60 <__aeabi_dmul>
 8003394:	0002      	movs	r2, r0
 8003396:	000b      	movs	r3, r1
 8003398:	0020      	movs	r0, r4
 800339a:	0029      	movs	r1, r5
 800339c:	f7fe f87c 	bl	8001498 <__aeabi_dadd>
 80033a0:	0002      	movs	r2, r0
 80033a2:	000b      	movs	r3, r1
 80033a4:	0010      	movs	r0, r2
 80033a6:	0019      	movs	r1, r3
 80033a8:	f7ff fa86 	bl	80028b8 <__aeabi_d2f>
 80033ac:	1c03      	adds	r3, r0, #0
 80033ae:	60fb      	str	r3, [r7, #12]
	rpoly *= Rt;  // ^3
 80033b0:	6a39      	ldr	r1, [r7, #32]
 80033b2:	68b8      	ldr	r0, [r7, #8]
 80033b4:	f7fd fcca 	bl	8000d4c <__aeabi_fmul>
 80033b8:	1c03      	adds	r3, r0, #0
 80033ba:	60bb      	str	r3, [r7, #8]
	temp -= 4.8260e-6 * rpoly;
 80033bc:	68f8      	ldr	r0, [r7, #12]
 80033be:	f7ff fa33 	bl	8002828 <__aeabi_f2d>
 80033c2:	0004      	movs	r4, r0
 80033c4:	000d      	movs	r5, r1
 80033c6:	68b8      	ldr	r0, [r7, #8]
 80033c8:	f7ff fa2e 	bl	8002828 <__aeabi_f2d>
 80033cc:	4a40      	ldr	r2, [pc, #256]	@ (80034d0 <Max31865_readTempC+0x280>)
 80033ce:	4b41      	ldr	r3, [pc, #260]	@ (80034d4 <Max31865_readTempC+0x284>)
 80033d0:	f7fe fbc6 	bl	8001b60 <__aeabi_dmul>
 80033d4:	0002      	movs	r2, r0
 80033d6:	000b      	movs	r3, r1
 80033d8:	0020      	movs	r0, r4
 80033da:	0029      	movs	r1, r5
 80033dc:	f7fe fe88 	bl	80020f0 <__aeabi_dsub>
 80033e0:	0002      	movs	r2, r0
 80033e2:	000b      	movs	r3, r1
 80033e4:	0010      	movs	r0, r2
 80033e6:	0019      	movs	r1, r3
 80033e8:	f7ff fa66 	bl	80028b8 <__aeabi_d2f>
 80033ec:	1c03      	adds	r3, r0, #0
 80033ee:	60fb      	str	r3, [r7, #12]
	rpoly *= Rt;  // ^4
 80033f0:	6a39      	ldr	r1, [r7, #32]
 80033f2:	68b8      	ldr	r0, [r7, #8]
 80033f4:	f7fd fcaa 	bl	8000d4c <__aeabi_fmul>
 80033f8:	1c03      	adds	r3, r0, #0
 80033fa:	60bb      	str	r3, [r7, #8]
	temp -= 2.8183e-8 * rpoly;
 80033fc:	68f8      	ldr	r0, [r7, #12]
 80033fe:	f7ff fa13 	bl	8002828 <__aeabi_f2d>
 8003402:	0004      	movs	r4, r0
 8003404:	000d      	movs	r5, r1
 8003406:	68b8      	ldr	r0, [r7, #8]
 8003408:	f7ff fa0e 	bl	8002828 <__aeabi_f2d>
 800340c:	4a32      	ldr	r2, [pc, #200]	@ (80034d8 <Max31865_readTempC+0x288>)
 800340e:	4b33      	ldr	r3, [pc, #204]	@ (80034dc <Max31865_readTempC+0x28c>)
 8003410:	f7fe fba6 	bl	8001b60 <__aeabi_dmul>
 8003414:	0002      	movs	r2, r0
 8003416:	000b      	movs	r3, r1
 8003418:	0020      	movs	r0, r4
 800341a:	0029      	movs	r1, r5
 800341c:	f7fe fe68 	bl	80020f0 <__aeabi_dsub>
 8003420:	0002      	movs	r2, r0
 8003422:	000b      	movs	r3, r1
 8003424:	0010      	movs	r0, r2
 8003426:	0019      	movs	r1, r3
 8003428:	f7ff fa46 	bl	80028b8 <__aeabi_d2f>
 800342c:	1c03      	adds	r3, r0, #0
 800342e:	60fb      	str	r3, [r7, #12]
	rpoly *= Rt;  // ^5
 8003430:	6a39      	ldr	r1, [r7, #32]
 8003432:	68b8      	ldr	r0, [r7, #8]
 8003434:	f7fd fc8a 	bl	8000d4c <__aeabi_fmul>
 8003438:	1c03      	adds	r3, r0, #0
 800343a:	60bb      	str	r3, [r7, #8]
	temp += 1.5243e-10 * rpoly;
 800343c:	68f8      	ldr	r0, [r7, #12]
 800343e:	f7ff f9f3 	bl	8002828 <__aeabi_f2d>
 8003442:	0004      	movs	r4, r0
 8003444:	000d      	movs	r5, r1
 8003446:	68b8      	ldr	r0, [r7, #8]
 8003448:	f7ff f9ee 	bl	8002828 <__aeabi_f2d>
 800344c:	4a24      	ldr	r2, [pc, #144]	@ (80034e0 <Max31865_readTempC+0x290>)
 800344e:	4b25      	ldr	r3, [pc, #148]	@ (80034e4 <Max31865_readTempC+0x294>)
 8003450:	f7fe fb86 	bl	8001b60 <__aeabi_dmul>
 8003454:	0002      	movs	r2, r0
 8003456:	000b      	movs	r3, r1
 8003458:	0020      	movs	r0, r4
 800345a:	0029      	movs	r1, r5
 800345c:	f7fe f81c 	bl	8001498 <__aeabi_dadd>
 8003460:	0002      	movs	r2, r0
 8003462:	000b      	movs	r3, r1
 8003464:	0010      	movs	r0, r2
 8003466:	0019      	movs	r1, r3
 8003468:	f7ff fa26 	bl	80028b8 <__aeabi_d2f>
 800346c:	1c03      	adds	r3, r0, #0
 800346e:	60fb      	str	r3, [r7, #12]

  *readTemp = temp;
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	68fa      	ldr	r2, [r7, #12]
 8003474:	601a      	str	r2, [r3, #0]
  if(Max31865_readFault(max31865) == 0)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	0018      	movs	r0, r3
 800347a:	f7ff fd73 	bl	8002f64 <Max31865_readFault>
 800347e:	1e03      	subs	r3, r0, #0
 8003480:	d103      	bne.n	800348a <Max31865_readTempC+0x23a>
    isOk = true;
 8003482:	2327      	movs	r3, #39	@ 0x27
 8003484:	18fb      	adds	r3, r7, r3
 8003486:	2201      	movs	r2, #1
 8003488:	701a      	strb	r2, [r3, #0]
  max31865->lock = 0;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2200      	movs	r2, #0
 800348e:	731a      	strb	r2, [r3, #12]
  return isOk;
 8003490:	2327      	movs	r3, #39	@ 0x27
 8003492:	18fb      	adds	r3, r7, r3
 8003494:	781b      	ldrb	r3, [r3, #0]
}
 8003496:	0018      	movs	r0, r3
 8003498:	46bd      	mov	sp, r7
 800349a:	b00a      	add	sp, #40	@ 0x28
 800349c:	bdb0      	pop	{r4, r5, r7, pc}
 800349e:	46c0      	nop			@ (mov r8, r8)
 80034a0:	45866000 	.word	0x45866000
 80034a4:	bb801132 	.word	0xbb801132
 80034a8:	37938317 	.word	0x37938317
 80034ac:	b11ebdf3 	.word	0xb11ebdf3
 80034b0:	b59b057f 	.word	0xb59b057f
 80034b4:	447a0000 	.word	0x447a0000
 80034b8:	459c4000 	.word	0x459c4000
 80034bc:	c372051f 	.word	0xc372051f
 80034c0:	5dcc63f1 	.word	0x5dcc63f1
 80034c4:	4001c84b 	.word	0x4001c84b
 80034c8:	7dc882bb 	.word	0x7dc882bb
 80034cc:	3f652f06 	.word	0x3f652f06
 80034d0:	c766c293 	.word	0xc766c293
 80034d4:	3ed43de0 	.word	0x3ed43de0
 80034d8:	513156ce 	.word	0x513156ce
 80034dc:	3e5e42e2 	.word	0x3e5e42e2
 80034e0:	61e4fa3e 	.word	0x61e4fa3e
 80034e4:	3de4f327 	.word	0x3de4f327

080034e8 <Max31865_Filter>:
  *readTemp = (*readTemp * 9.0f / 5.0f) + 32.0f;
  return isOk;
}
//#########################################################################################################################
float Max31865_Filter(float	newInput, float	lastOutput, float efectiveFactor)
{
 80034e8:	b590      	push	{r4, r7, lr}
 80034ea:	b085      	sub	sp, #20
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	60f8      	str	r0, [r7, #12]
 80034f0:	60b9      	str	r1, [r7, #8]
 80034f2:	607a      	str	r2, [r7, #4]
	return ((float)lastOutput*(1.0f-efectiveFactor)) + ((float)newInput*efectiveFactor) ;
 80034f4:	6879      	ldr	r1, [r7, #4]
 80034f6:	20fe      	movs	r0, #254	@ 0xfe
 80034f8:	0580      	lsls	r0, r0, #22
 80034fa:	f7fd fd65 	bl	8000fc8 <__aeabi_fsub>
 80034fe:	1c03      	adds	r3, r0, #0
 8003500:	68b9      	ldr	r1, [r7, #8]
 8003502:	1c18      	adds	r0, r3, #0
 8003504:	f7fd fc22 	bl	8000d4c <__aeabi_fmul>
 8003508:	1c03      	adds	r3, r0, #0
 800350a:	1c1c      	adds	r4, r3, #0
 800350c:	6879      	ldr	r1, [r7, #4]
 800350e:	68f8      	ldr	r0, [r7, #12]
 8003510:	f7fd fc1c 	bl	8000d4c <__aeabi_fmul>
 8003514:	1c03      	adds	r3, r0, #0
 8003516:	1c19      	adds	r1, r3, #0
 8003518:	1c20      	adds	r0, r4, #0
 800351a:	f7fd f8a7 	bl	800066c <__aeabi_fadd>
 800351e:	1c03      	adds	r3, r0, #0
}
 8003520:	1c18      	adds	r0, r3, #0
 8003522:	46bd      	mov	sp, r7
 8003524:	b005      	add	sp, #20
 8003526:	bd90      	pop	{r4, r7, pc}

08003528 <Convert_ADC_to_CapacitorVoltage>:

//float Convert_ADC_to_Temperature(uint16_t adc_value){

//}
#define CAPACITOR_DIVIDER 16.0f
float Convert_ADC_to_CapacitorVoltage(uint16_t adc_value){
 8003528:	b580      	push	{r7, lr}
 800352a:	b084      	sub	sp, #16
 800352c:	af00      	add	r7, sp, #0
 800352e:	0002      	movs	r2, r0
 8003530:	1dbb      	adds	r3, r7, #6
 8003532:	801a      	strh	r2, [r3, #0]
	float CapacitorVoltage=((adc_value / ADC_MAX) * VREF)*CAPACITOR_DIVIDER;
 8003534:	1dbb      	adds	r3, r7, #6
 8003536:	881b      	ldrh	r3, [r3, #0]
 8003538:	0018      	movs	r0, r3
 800353a:	f7fd ff1f 	bl	800137c <__aeabi_i2f>
 800353e:	1c03      	adds	r3, r0, #0
 8003540:	490a      	ldr	r1, [pc, #40]	@ (800356c <Convert_ADC_to_CapacitorVoltage+0x44>)
 8003542:	1c18      	adds	r0, r3, #0
 8003544:	f7fd fa1c 	bl	8000980 <__aeabi_fdiv>
 8003548:	1c03      	adds	r3, r0, #0
 800354a:	4909      	ldr	r1, [pc, #36]	@ (8003570 <Convert_ADC_to_CapacitorVoltage+0x48>)
 800354c:	1c18      	adds	r0, r3, #0
 800354e:	f7fd fbfd 	bl	8000d4c <__aeabi_fmul>
 8003552:	1c03      	adds	r3, r0, #0
 8003554:	2183      	movs	r1, #131	@ 0x83
 8003556:	05c9      	lsls	r1, r1, #23
 8003558:	1c18      	adds	r0, r3, #0
 800355a:	f7fd fbf7 	bl	8000d4c <__aeabi_fmul>
 800355e:	1c03      	adds	r3, r0, #0
 8003560:	60fb      	str	r3, [r7, #12]
	return CapacitorVoltage;
 8003562:	68fb      	ldr	r3, [r7, #12]
}
 8003564:	1c18      	adds	r0, r3, #0
 8003566:	46bd      	mov	sp, r7
 8003568:	b004      	add	sp, #16
 800356a:	bd80      	pop	{r7, pc}
 800356c:	457ff000 	.word	0x457ff000
 8003570:	40533333 	.word	0x40533333

08003574 <Convert_ADC_to_CellVoltage>:


#define CELL_DIVIDER 9.5f
float Convert_ADC_to_CellVoltage(uint16_t adc_value){
 8003574:	b580      	push	{r7, lr}
 8003576:	b084      	sub	sp, #16
 8003578:	af00      	add	r7, sp, #0
 800357a:	0002      	movs	r2, r0
 800357c:	1dbb      	adds	r3, r7, #6
 800357e:	801a      	strh	r2, [r3, #0]
	float CellVoltage=((adc_value / ADC_MAX) * VREF)*CELL_DIVIDER;
 8003580:	1dbb      	adds	r3, r7, #6
 8003582:	881b      	ldrh	r3, [r3, #0]
 8003584:	0018      	movs	r0, r3
 8003586:	f7fd fef9 	bl	800137c <__aeabi_i2f>
 800358a:	1c03      	adds	r3, r0, #0
 800358c:	490a      	ldr	r1, [pc, #40]	@ (80035b8 <Convert_ADC_to_CellVoltage+0x44>)
 800358e:	1c18      	adds	r0, r3, #0
 8003590:	f7fd f9f6 	bl	8000980 <__aeabi_fdiv>
 8003594:	1c03      	adds	r3, r0, #0
 8003596:	4909      	ldr	r1, [pc, #36]	@ (80035bc <Convert_ADC_to_CellVoltage+0x48>)
 8003598:	1c18      	adds	r0, r3, #0
 800359a:	f7fd fbd7 	bl	8000d4c <__aeabi_fmul>
 800359e:	1c03      	adds	r3, r0, #0
 80035a0:	4907      	ldr	r1, [pc, #28]	@ (80035c0 <Convert_ADC_to_CellVoltage+0x4c>)
 80035a2:	1c18      	adds	r0, r3, #0
 80035a4:	f7fd fbd2 	bl	8000d4c <__aeabi_fmul>
 80035a8:	1c03      	adds	r3, r0, #0
 80035aa:	60fb      	str	r3, [r7, #12]
	return CellVoltage;
 80035ac:	68fb      	ldr	r3, [r7, #12]
}
 80035ae:	1c18      	adds	r0, r3, #0
 80035b0:	46bd      	mov	sp, r7
 80035b2:	b004      	add	sp, #16
 80035b4:	bd80      	pop	{r7, pc}
 80035b6:	46c0      	nop			@ (mov r8, r8)
 80035b8:	457ff000 	.word	0x457ff000
 80035bc:	40533333 	.word	0x40533333
 80035c0:	41180000 	.word	0x41180000

080035c4 <Convert_ADC_to_CellCurrent>:

#define ACS_SENS 0.0203f
float Convert_ADC_to_CellCurrent(uint16_t adc_value){
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b084      	sub	sp, #16
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	0002      	movs	r2, r0
 80035cc:	1dbb      	adds	r3, r7, #6
 80035ce:	801a      	strh	r2, [r3, #0]
	float voltage = ((adc_value / ADC_MAX) * VREF);
 80035d0:	1dbb      	adds	r3, r7, #6
 80035d2:	881b      	ldrh	r3, [r3, #0]
 80035d4:	0018      	movs	r0, r3
 80035d6:	f7fd fed1 	bl	800137c <__aeabi_i2f>
 80035da:	1c03      	adds	r3, r0, #0
 80035dc:	490d      	ldr	r1, [pc, #52]	@ (8003614 <Convert_ADC_to_CellCurrent+0x50>)
 80035de:	1c18      	adds	r0, r3, #0
 80035e0:	f7fd f9ce 	bl	8000980 <__aeabi_fdiv>
 80035e4:	1c03      	adds	r3, r0, #0
 80035e6:	490c      	ldr	r1, [pc, #48]	@ (8003618 <Convert_ADC_to_CellCurrent+0x54>)
 80035e8:	1c18      	adds	r0, r3, #0
 80035ea:	f7fd fbaf 	bl	8000d4c <__aeabi_fmul>
 80035ee:	1c03      	adds	r3, r0, #0
 80035f0:	60fb      	str	r3, [r7, #12]
	float CellCurrent = (1.65f-voltage) / ACS_SENS;
 80035f2:	68f9      	ldr	r1, [r7, #12]
 80035f4:	4809      	ldr	r0, [pc, #36]	@ (800361c <Convert_ADC_to_CellCurrent+0x58>)
 80035f6:	f7fd fce7 	bl	8000fc8 <__aeabi_fsub>
 80035fa:	1c03      	adds	r3, r0, #0
 80035fc:	4908      	ldr	r1, [pc, #32]	@ (8003620 <Convert_ADC_to_CellCurrent+0x5c>)
 80035fe:	1c18      	adds	r0, r3, #0
 8003600:	f7fd f9be 	bl	8000980 <__aeabi_fdiv>
 8003604:	1c03      	adds	r3, r0, #0
 8003606:	60bb      	str	r3, [r7, #8]
	return CellCurrent;
 8003608:	68bb      	ldr	r3, [r7, #8]
}
 800360a:	1c18      	adds	r0, r3, #0
 800360c:	46bd      	mov	sp, r7
 800360e:	b004      	add	sp, #16
 8003610:	bd80      	pop	{r7, pc}
 8003612:	46c0      	nop			@ (mov r8, r8)
 8003614:	457ff000 	.word	0x457ff000
 8003618:	40533333 	.word	0x40533333
 800361c:	3fd33333 	.word	0x3fd33333
 8003620:	3ca64c30 	.word	0x3ca64c30

08003624 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003624:	b590      	push	{r4, r7, lr}
 8003626:	b083      	sub	sp, #12
 8003628:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800362a:	f000 fe55 	bl	80042d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800362e:	f000 f897 	bl	8003760 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003632:	f000 fb1d 	bl	8003c70 <MX_GPIO_Init>
  MX_ADC1_Init();
 8003636:	f000 f8db 	bl	80037f0 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 800363a:	f000 facb 	bl	8003bd4 <MX_USART1_UART_Init>
  MX_TIM3_Init();
 800363e:	f000 fa67 	bl	8003b10 <MX_TIM3_Init>
  MX_SPI2_Init();
 8003642:	f000 f979 	bl	8003938 <MX_SPI2_Init>
  MX_TIM1_Init();
 8003646:	f000 f9b5 	bl	80039b4 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADCEx_Calibration_Start(&hadc1);
 800364a:	4b34      	ldr	r3, [pc, #208]	@ (800371c <main+0xf8>)
 800364c:	0018      	movs	r0, r3
 800364e:	f001 febf 	bl	80053d0 <HAL_ADCEx_Calibration_Start>
  Max31865_init(&pt100, &hspi2, GPIOC, GPIO_PIN_8, 2, 50);
 8003652:	2380      	movs	r3, #128	@ 0x80
 8003654:	005b      	lsls	r3, r3, #1
 8003656:	4c32      	ldr	r4, [pc, #200]	@ (8003720 <main+0xfc>)
 8003658:	4932      	ldr	r1, [pc, #200]	@ (8003724 <main+0x100>)
 800365a:	4833      	ldr	r0, [pc, #204]	@ (8003728 <main+0x104>)
 800365c:	2232      	movs	r2, #50	@ 0x32
 800365e:	9201      	str	r2, [sp, #4]
 8003660:	2202      	movs	r2, #2
 8003662:	9200      	str	r2, [sp, #0]
 8003664:	0022      	movs	r2, r4
 8003666:	f7ff fda8 	bl	80031ba <Max31865_init>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 800366a:	4b30      	ldr	r3, [pc, #192]	@ (800372c <main+0x108>)
 800366c:	2108      	movs	r1, #8
 800366e:	0018      	movs	r0, r3
 8003670:	f003 fe8c 	bl	800738c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8003674:	4b2e      	ldr	r3, [pc, #184]	@ (8003730 <main+0x10c>)
 8003676:	2108      	movs	r1, #8
 8003678:	0018      	movs	r0, r3
 800367a:	f003 fe87 	bl	800738c <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 800367e:	4b2c      	ldr	r3, [pc, #176]	@ (8003730 <main+0x10c>)
 8003680:	2108      	movs	r1, #8
 8003682:	0018      	movs	r0, r3
 8003684:	f004 fbe2 	bl	8007e4c <HAL_TIMEx_PWMN_Start>

  //__HAL_TIM_MOE_ENABLE(&htim1);

  ControlsystemInit();
 8003688:	f7ff fb7a 	bl	8002d80 <ControlsystemInit>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  Controlsystem();
 800368c:	f7ff fa08 	bl	8002aa0 <Controlsystem>
	  voltage1=((adc_vals[1] / 4095.0f) * 3.3f*9.41f);
 8003690:	4b28      	ldr	r3, [pc, #160]	@ (8003734 <main+0x110>)
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	4928      	ldr	r1, [pc, #160]	@ (8003738 <main+0x114>)
 8003696:	1c18      	adds	r0, r3, #0
 8003698:	f7fd f972 	bl	8000980 <__aeabi_fdiv>
 800369c:	1c03      	adds	r3, r0, #0
 800369e:	4927      	ldr	r1, [pc, #156]	@ (800373c <main+0x118>)
 80036a0:	1c18      	adds	r0, r3, #0
 80036a2:	f7fd fb53 	bl	8000d4c <__aeabi_fmul>
 80036a6:	1c03      	adds	r3, r0, #0
 80036a8:	4925      	ldr	r1, [pc, #148]	@ (8003740 <main+0x11c>)
 80036aa:	1c18      	adds	r0, r3, #0
 80036ac:	f7fd fb4e 	bl	8000d4c <__aeabi_fmul>
 80036b0:	1c03      	adds	r3, r0, #0
 80036b2:	1c1a      	adds	r2, r3, #0
 80036b4:	4b23      	ldr	r3, [pc, #140]	@ (8003744 <main+0x120>)
 80036b6:	601a      	str	r2, [r3, #0]
	  CellVoltagee = Convert_ADC_to_CapacitorVoltage(adc_vals[3]);
 80036b8:	4b1e      	ldr	r3, [pc, #120]	@ (8003734 <main+0x110>)
 80036ba:	68db      	ldr	r3, [r3, #12]
 80036bc:	1c18      	adds	r0, r3, #0
 80036be:	f7fc fef1 	bl	80004a4 <__aeabi_f2uiz>
 80036c2:	0003      	movs	r3, r0
 80036c4:	b29b      	uxth	r3, r3
 80036c6:	0018      	movs	r0, r3
 80036c8:	f7ff ff2e 	bl	8003528 <Convert_ADC_to_CapacitorVoltage>
 80036cc:	1c02      	adds	r2, r0, #0
 80036ce:	4b1e      	ldr	r3, [pc, #120]	@ (8003748 <main+0x124>)
 80036d0:	601a      	str	r2, [r3, #0]
	  prad = Convert_ADC_to_CellCurrent(adc_vals[2]);
 80036d2:	4b18      	ldr	r3, [pc, #96]	@ (8003734 <main+0x110>)
 80036d4:	689b      	ldr	r3, [r3, #8]
 80036d6:	1c18      	adds	r0, r3, #0
 80036d8:	f7fc fee4 	bl	80004a4 <__aeabi_f2uiz>
 80036dc:	0003      	movs	r3, r0
 80036de:	b29b      	uxth	r3, r3
 80036e0:	0018      	movs	r0, r3
 80036e2:	f7ff ff6f 	bl	80035c4 <Convert_ADC_to_CellCurrent>
 80036e6:	1c02      	adds	r2, r0, #0
 80036e8:	4b18      	ldr	r3, [pc, #96]	@ (800374c <main+0x128>)
 80036ea:	601a      	str	r2, [r3, #0]

	  pt100isOK = Max31865_readTempC(&pt100,&t);
 80036ec:	4a18      	ldr	r2, [pc, #96]	@ (8003750 <main+0x12c>)
 80036ee:	4b0e      	ldr	r3, [pc, #56]	@ (8003728 <main+0x104>)
 80036f0:	0011      	movs	r1, r2
 80036f2:	0018      	movs	r0, r3
 80036f4:	f7ff fdac 	bl	8003250 <Max31865_readTempC>
 80036f8:	0003      	movs	r3, r0
 80036fa:	001a      	movs	r2, r3
 80036fc:	4b15      	ldr	r3, [pc, #84]	@ (8003754 <main+0x130>)
 80036fe:	701a      	strb	r2, [r3, #0]
	  pt100Temp = Max31865_Filter(t,pt100Temp,0.1);
 8003700:	4b13      	ldr	r3, [pc, #76]	@ (8003750 <main+0x12c>)
 8003702:	6818      	ldr	r0, [r3, #0]
 8003704:	4b14      	ldr	r3, [pc, #80]	@ (8003758 <main+0x134>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4a14      	ldr	r2, [pc, #80]	@ (800375c <main+0x138>)
 800370a:	1c19      	adds	r1, r3, #0
 800370c:	f7ff feec 	bl	80034e8 <Max31865_Filter>
 8003710:	1c02      	adds	r2, r0, #0
 8003712:	4b11      	ldr	r3, [pc, #68]	@ (8003758 <main+0x134>)
 8003714:	601a      	str	r2, [r3, #0]
	  Controlsystem();
 8003716:	46c0      	nop			@ (mov r8, r8)
 8003718:	e7b8      	b.n	800368c <main+0x68>
 800371a:	46c0      	nop			@ (mov r8, r8)
 800371c:	20000094 	.word	0x20000094
 8003720:	50000800 	.word	0x50000800
 8003724:	200000f8 	.word	0x200000f8
 8003728:	200002a0 	.word	0x200002a0
 800372c:	200001a8 	.word	0x200001a8
 8003730:	2000015c 	.word	0x2000015c
 8003734:	200002b0 	.word	0x200002b0
 8003738:	457ff000 	.word	0x457ff000
 800373c:	40533333 	.word	0x40533333
 8003740:	41168f5c 	.word	0x41168f5c
 8003744:	20000288 	.word	0x20000288
 8003748:	20000290 	.word	0x20000290
 800374c:	2000028c 	.word	0x2000028c
 8003750:	20000294 	.word	0x20000294
 8003754:	20000298 	.word	0x20000298
 8003758:	2000029c 	.word	0x2000029c
 800375c:	3dcccccd 	.word	0x3dcccccd

08003760 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003760:	b590      	push	{r4, r7, lr}
 8003762:	b093      	sub	sp, #76	@ 0x4c
 8003764:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003766:	2410      	movs	r4, #16
 8003768:	193b      	adds	r3, r7, r4
 800376a:	0018      	movs	r0, r3
 800376c:	2338      	movs	r3, #56	@ 0x38
 800376e:	001a      	movs	r2, r3
 8003770:	2100      	movs	r1, #0
 8003772:	f005 fb9f 	bl	8008eb4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003776:	003b      	movs	r3, r7
 8003778:	0018      	movs	r0, r3
 800377a:	2310      	movs	r3, #16
 800377c:	001a      	movs	r2, r3
 800377e:	2100      	movs	r1, #0
 8003780:	f005 fb98 	bl	8008eb4 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003784:	2380      	movs	r3, #128	@ 0x80
 8003786:	009b      	lsls	r3, r3, #2
 8003788:	0018      	movs	r0, r3
 800378a:	f002 f96f 	bl	8005a6c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800378e:	193b      	adds	r3, r7, r4
 8003790:	2202      	movs	r2, #2
 8003792:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003794:	193b      	adds	r3, r7, r4
 8003796:	2280      	movs	r2, #128	@ 0x80
 8003798:	0052      	lsls	r2, r2, #1
 800379a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 800379c:	193b      	adds	r3, r7, r4
 800379e:	2200      	movs	r2, #0
 80037a0:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80037a2:	193b      	adds	r3, r7, r4
 80037a4:	2240      	movs	r2, #64	@ 0x40
 80037a6:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80037a8:	193b      	adds	r3, r7, r4
 80037aa:	2200      	movs	r2, #0
 80037ac:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80037ae:	193b      	adds	r3, r7, r4
 80037b0:	0018      	movs	r0, r3
 80037b2:	f002 f9a7 	bl	8005b04 <HAL_RCC_OscConfig>
 80037b6:	1e03      	subs	r3, r0, #0
 80037b8:	d001      	beq.n	80037be <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80037ba:	f000 fb01 	bl	8003dc0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80037be:	003b      	movs	r3, r7
 80037c0:	2207      	movs	r2, #7
 80037c2:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80037c4:	003b      	movs	r3, r7
 80037c6:	2200      	movs	r2, #0
 80037c8:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80037ca:	003b      	movs	r3, r7
 80037cc:	2200      	movs	r2, #0
 80037ce:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80037d0:	003b      	movs	r3, r7
 80037d2:	2200      	movs	r2, #0
 80037d4:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80037d6:	003b      	movs	r3, r7
 80037d8:	2100      	movs	r1, #0
 80037da:	0018      	movs	r0, r3
 80037dc:	f002 fcac 	bl	8006138 <HAL_RCC_ClockConfig>
 80037e0:	1e03      	subs	r3, r0, #0
 80037e2:	d001      	beq.n	80037e8 <SystemClock_Config+0x88>
  {
    Error_Handler();
 80037e4:	f000 faec 	bl	8003dc0 <Error_Handler>
  }
}
 80037e8:	46c0      	nop			@ (mov r8, r8)
 80037ea:	46bd      	mov	sp, r7
 80037ec:	b013      	add	sp, #76	@ 0x4c
 80037ee:	bd90      	pop	{r4, r7, pc}

080037f0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b084      	sub	sp, #16
 80037f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80037f6:	1d3b      	adds	r3, r7, #4
 80037f8:	0018      	movs	r0, r3
 80037fa:	230c      	movs	r3, #12
 80037fc:	001a      	movs	r2, r3
 80037fe:	2100      	movs	r1, #0
 8003800:	f005 fb58 	bl	8008eb4 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8003804:	4b46      	ldr	r3, [pc, #280]	@ (8003920 <MX_ADC1_Init+0x130>)
 8003806:	4a47      	ldr	r2, [pc, #284]	@ (8003924 <MX_ADC1_Init+0x134>)
 8003808:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800380a:	4b45      	ldr	r3, [pc, #276]	@ (8003920 <MX_ADC1_Init+0x130>)
 800380c:	2280      	movs	r2, #128	@ 0x80
 800380e:	05d2      	lsls	r2, r2, #23
 8003810:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8003812:	4b43      	ldr	r3, [pc, #268]	@ (8003920 <MX_ADC1_Init+0x130>)
 8003814:	2200      	movs	r2, #0
 8003816:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003818:	4b41      	ldr	r3, [pc, #260]	@ (8003920 <MX_ADC1_Init+0x130>)
 800381a:	2200      	movs	r2, #0
 800381c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800381e:	4b40      	ldr	r3, [pc, #256]	@ (8003920 <MX_ADC1_Init+0x130>)
 8003820:	2280      	movs	r2, #128	@ 0x80
 8003822:	0392      	lsls	r2, r2, #14
 8003824:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003826:	4b3e      	ldr	r3, [pc, #248]	@ (8003920 <MX_ADC1_Init+0x130>)
 8003828:	2204      	movs	r2, #4
 800382a:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800382c:	4b3c      	ldr	r3, [pc, #240]	@ (8003920 <MX_ADC1_Init+0x130>)
 800382e:	2200      	movs	r2, #0
 8003830:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8003832:	4b3b      	ldr	r3, [pc, #236]	@ (8003920 <MX_ADC1_Init+0x130>)
 8003834:	2200      	movs	r2, #0
 8003836:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8003838:	4b39      	ldr	r3, [pc, #228]	@ (8003920 <MX_ADC1_Init+0x130>)
 800383a:	2200      	movs	r2, #0
 800383c:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 4;
 800383e:	4b38      	ldr	r3, [pc, #224]	@ (8003920 <MX_ADC1_Init+0x130>)
 8003840:	2204      	movs	r2, #4
 8003842:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003844:	4b36      	ldr	r3, [pc, #216]	@ (8003920 <MX_ADC1_Init+0x130>)
 8003846:	2220      	movs	r2, #32
 8003848:	2100      	movs	r1, #0
 800384a:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800384c:	4b34      	ldr	r3, [pc, #208]	@ (8003920 <MX_ADC1_Init+0x130>)
 800384e:	2200      	movs	r2, #0
 8003850:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003852:	4b33      	ldr	r3, [pc, #204]	@ (8003920 <MX_ADC1_Init+0x130>)
 8003854:	2200      	movs	r2, #0
 8003856:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8003858:	4b31      	ldr	r3, [pc, #196]	@ (8003920 <MX_ADC1_Init+0x130>)
 800385a:	222c      	movs	r2, #44	@ 0x2c
 800385c:	2100      	movs	r1, #0
 800385e:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8003860:	4b2f      	ldr	r3, [pc, #188]	@ (8003920 <MX_ADC1_Init+0x130>)
 8003862:	2200      	movs	r2, #0
 8003864:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
 8003866:	4b2e      	ldr	r3, [pc, #184]	@ (8003920 <MX_ADC1_Init+0x130>)
 8003868:	2207      	movs	r2, #7
 800386a:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 800386c:	4b2c      	ldr	r3, [pc, #176]	@ (8003920 <MX_ADC1_Init+0x130>)
 800386e:	2200      	movs	r2, #0
 8003870:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8003872:	4b2b      	ldr	r3, [pc, #172]	@ (8003920 <MX_ADC1_Init+0x130>)
 8003874:	223c      	movs	r2, #60	@ 0x3c
 8003876:	2100      	movs	r1, #0
 8003878:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 800387a:	4b29      	ldr	r3, [pc, #164]	@ (8003920 <MX_ADC1_Init+0x130>)
 800387c:	2200      	movs	r2, #0
 800387e:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003880:	4b27      	ldr	r3, [pc, #156]	@ (8003920 <MX_ADC1_Init+0x130>)
 8003882:	0018      	movs	r0, r3
 8003884:	f000 ff3c 	bl	8004700 <HAL_ADC_Init>
 8003888:	1e03      	subs	r3, r0, #0
 800388a:	d001      	beq.n	8003890 <MX_ADC1_Init+0xa0>
  {
    Error_Handler();
 800388c:	f000 fa98 	bl	8003dc0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8003890:	1d3b      	adds	r3, r7, #4
 8003892:	4a25      	ldr	r2, [pc, #148]	@ (8003928 <MX_ADC1_Init+0x138>)
 8003894:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003896:	1d3b      	adds	r3, r7, #4
 8003898:	2200      	movs	r2, #0
 800389a:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 800389c:	1d3b      	adds	r3, r7, #4
 800389e:	2200      	movs	r2, #0
 80038a0:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80038a2:	1d3a      	adds	r2, r7, #4
 80038a4:	4b1e      	ldr	r3, [pc, #120]	@ (8003920 <MX_ADC1_Init+0x130>)
 80038a6:	0011      	movs	r1, r2
 80038a8:	0018      	movs	r0, r3
 80038aa:	f001 f9fb 	bl	8004ca4 <HAL_ADC_ConfigChannel>
 80038ae:	1e03      	subs	r3, r0, #0
 80038b0:	d001      	beq.n	80038b6 <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 80038b2:	f000 fa85 	bl	8003dc0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80038b6:	1d3b      	adds	r3, r7, #4
 80038b8:	4a1c      	ldr	r2, [pc, #112]	@ (800392c <MX_ADC1_Init+0x13c>)
 80038ba:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80038bc:	1d3b      	adds	r3, r7, #4
 80038be:	2204      	movs	r2, #4
 80038c0:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80038c2:	1d3a      	adds	r2, r7, #4
 80038c4:	4b16      	ldr	r3, [pc, #88]	@ (8003920 <MX_ADC1_Init+0x130>)
 80038c6:	0011      	movs	r1, r2
 80038c8:	0018      	movs	r0, r3
 80038ca:	f001 f9eb 	bl	8004ca4 <HAL_ADC_ConfigChannel>
 80038ce:	1e03      	subs	r3, r0, #0
 80038d0:	d001      	beq.n	80038d6 <MX_ADC1_Init+0xe6>
  {
    Error_Handler();
 80038d2:	f000 fa75 	bl	8003dc0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80038d6:	1d3b      	adds	r3, r7, #4
 80038d8:	4a15      	ldr	r2, [pc, #84]	@ (8003930 <MX_ADC1_Init+0x140>)
 80038da:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80038dc:	1d3b      	adds	r3, r7, #4
 80038de:	2208      	movs	r2, #8
 80038e0:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80038e2:	1d3a      	adds	r2, r7, #4
 80038e4:	4b0e      	ldr	r3, [pc, #56]	@ (8003920 <MX_ADC1_Init+0x130>)
 80038e6:	0011      	movs	r1, r2
 80038e8:	0018      	movs	r0, r3
 80038ea:	f001 f9db 	bl	8004ca4 <HAL_ADC_ConfigChannel>
 80038ee:	1e03      	subs	r3, r0, #0
 80038f0:	d001      	beq.n	80038f6 <MX_ADC1_Init+0x106>
  {
    Error_Handler();
 80038f2:	f000 fa65 	bl	8003dc0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80038f6:	1d3b      	adds	r3, r7, #4
 80038f8:	4a0e      	ldr	r2, [pc, #56]	@ (8003934 <MX_ADC1_Init+0x144>)
 80038fa:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80038fc:	1d3b      	adds	r3, r7, #4
 80038fe:	220c      	movs	r2, #12
 8003900:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003902:	1d3a      	adds	r2, r7, #4
 8003904:	4b06      	ldr	r3, [pc, #24]	@ (8003920 <MX_ADC1_Init+0x130>)
 8003906:	0011      	movs	r1, r2
 8003908:	0018      	movs	r0, r3
 800390a:	f001 f9cb 	bl	8004ca4 <HAL_ADC_ConfigChannel>
 800390e:	1e03      	subs	r3, r0, #0
 8003910:	d001      	beq.n	8003916 <MX_ADC1_Init+0x126>
  {
    Error_Handler();
 8003912:	f000 fa55 	bl	8003dc0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8003916:	46c0      	nop			@ (mov r8, r8)
 8003918:	46bd      	mov	sp, r7
 800391a:	b004      	add	sp, #16
 800391c:	bd80      	pop	{r7, pc}
 800391e:	46c0      	nop			@ (mov r8, r8)
 8003920:	20000094 	.word	0x20000094
 8003924:	40012400 	.word	0x40012400
 8003928:	04000002 	.word	0x04000002
 800392c:	08000004 	.word	0x08000004
 8003930:	0c000008 	.word	0x0c000008
 8003934:	10000010 	.word	0x10000010

08003938 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800393c:	4b1b      	ldr	r3, [pc, #108]	@ (80039ac <MX_SPI2_Init+0x74>)
 800393e:	4a1c      	ldr	r2, [pc, #112]	@ (80039b0 <MX_SPI2_Init+0x78>)
 8003940:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8003942:	4b1a      	ldr	r3, [pc, #104]	@ (80039ac <MX_SPI2_Init+0x74>)
 8003944:	2282      	movs	r2, #130	@ 0x82
 8003946:	0052      	lsls	r2, r2, #1
 8003948:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800394a:	4b18      	ldr	r3, [pc, #96]	@ (80039ac <MX_SPI2_Init+0x74>)
 800394c:	2200      	movs	r2, #0
 800394e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8003950:	4b16      	ldr	r3, [pc, #88]	@ (80039ac <MX_SPI2_Init+0x74>)
 8003952:	22e0      	movs	r2, #224	@ 0xe0
 8003954:	00d2      	lsls	r2, r2, #3
 8003956:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003958:	4b14      	ldr	r3, [pc, #80]	@ (80039ac <MX_SPI2_Init+0x74>)
 800395a:	2200      	movs	r2, #0
 800395c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 800395e:	4b13      	ldr	r3, [pc, #76]	@ (80039ac <MX_SPI2_Init+0x74>)
 8003960:	2201      	movs	r2, #1
 8003962:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8003964:	4b11      	ldr	r3, [pc, #68]	@ (80039ac <MX_SPI2_Init+0x74>)
 8003966:	2280      	movs	r2, #128	@ 0x80
 8003968:	0092      	lsls	r2, r2, #2
 800396a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 800396c:	4b0f      	ldr	r3, [pc, #60]	@ (80039ac <MX_SPI2_Init+0x74>)
 800396e:	2230      	movs	r2, #48	@ 0x30
 8003970:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003972:	4b0e      	ldr	r3, [pc, #56]	@ (80039ac <MX_SPI2_Init+0x74>)
 8003974:	2200      	movs	r2, #0
 8003976:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8003978:	4b0c      	ldr	r3, [pc, #48]	@ (80039ac <MX_SPI2_Init+0x74>)
 800397a:	2200      	movs	r2, #0
 800397c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800397e:	4b0b      	ldr	r3, [pc, #44]	@ (80039ac <MX_SPI2_Init+0x74>)
 8003980:	2200      	movs	r2, #0
 8003982:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8003984:	4b09      	ldr	r3, [pc, #36]	@ (80039ac <MX_SPI2_Init+0x74>)
 8003986:	2207      	movs	r2, #7
 8003988:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800398a:	4b08      	ldr	r3, [pc, #32]	@ (80039ac <MX_SPI2_Init+0x74>)
 800398c:	2200      	movs	r2, #0
 800398e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8003990:	4b06      	ldr	r3, [pc, #24]	@ (80039ac <MX_SPI2_Init+0x74>)
 8003992:	2200      	movs	r2, #0
 8003994:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003996:	4b05      	ldr	r3, [pc, #20]	@ (80039ac <MX_SPI2_Init+0x74>)
 8003998:	0018      	movs	r0, r3
 800399a:	f002 ff2f 	bl	80067fc <HAL_SPI_Init>
 800399e:	1e03      	subs	r3, r0, #0
 80039a0:	d001      	beq.n	80039a6 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80039a2:	f000 fa0d 	bl	8003dc0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80039a6:	46c0      	nop			@ (mov r8, r8)
 80039a8:	46bd      	mov	sp, r7
 80039aa:	bd80      	pop	{r7, pc}
 80039ac:	200000f8 	.word	0x200000f8
 80039b0:	40003800 	.word	0x40003800

080039b4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b098      	sub	sp, #96	@ 0x60
 80039b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80039ba:	2354      	movs	r3, #84	@ 0x54
 80039bc:	18fb      	adds	r3, r7, r3
 80039be:	0018      	movs	r0, r3
 80039c0:	230c      	movs	r3, #12
 80039c2:	001a      	movs	r2, r3
 80039c4:	2100      	movs	r1, #0
 80039c6:	f005 fa75 	bl	8008eb4 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80039ca:	2338      	movs	r3, #56	@ 0x38
 80039cc:	18fb      	adds	r3, r7, r3
 80039ce:	0018      	movs	r0, r3
 80039d0:	231c      	movs	r3, #28
 80039d2:	001a      	movs	r2, r3
 80039d4:	2100      	movs	r1, #0
 80039d6:	f005 fa6d 	bl	8008eb4 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80039da:	1d3b      	adds	r3, r7, #4
 80039dc:	0018      	movs	r0, r3
 80039de:	2334      	movs	r3, #52	@ 0x34
 80039e0:	001a      	movs	r2, r3
 80039e2:	2100      	movs	r1, #0
 80039e4:	f005 fa66 	bl	8008eb4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80039e8:	4b46      	ldr	r3, [pc, #280]	@ (8003b04 <MX_TIM1_Init+0x150>)
 80039ea:	4a47      	ldr	r2, [pc, #284]	@ (8003b08 <MX_TIM1_Init+0x154>)
 80039ec:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80039ee:	4b45      	ldr	r3, [pc, #276]	@ (8003b04 <MX_TIM1_Init+0x150>)
 80039f0:	2200      	movs	r2, #0
 80039f2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80039f4:	4b43      	ldr	r3, [pc, #268]	@ (8003b04 <MX_TIM1_Init+0x150>)
 80039f6:	2200      	movs	r2, #0
 80039f8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1500;
 80039fa:	4b42      	ldr	r3, [pc, #264]	@ (8003b04 <MX_TIM1_Init+0x150>)
 80039fc:	4a43      	ldr	r2, [pc, #268]	@ (8003b0c <MX_TIM1_Init+0x158>)
 80039fe:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003a00:	4b40      	ldr	r3, [pc, #256]	@ (8003b04 <MX_TIM1_Init+0x150>)
 8003a02:	2200      	movs	r2, #0
 8003a04:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003a06:	4b3f      	ldr	r3, [pc, #252]	@ (8003b04 <MX_TIM1_Init+0x150>)
 8003a08:	2200      	movs	r2, #0
 8003a0a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003a0c:	4b3d      	ldr	r3, [pc, #244]	@ (8003b04 <MX_TIM1_Init+0x150>)
 8003a0e:	2200      	movs	r2, #0
 8003a10:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003a12:	4b3c      	ldr	r3, [pc, #240]	@ (8003b04 <MX_TIM1_Init+0x150>)
 8003a14:	0018      	movs	r0, r3
 8003a16:	f003 fc61 	bl	80072dc <HAL_TIM_PWM_Init>
 8003a1a:	1e03      	subs	r3, r0, #0
 8003a1c:	d001      	beq.n	8003a22 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8003a1e:	f000 f9cf 	bl	8003dc0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003a22:	2154      	movs	r1, #84	@ 0x54
 8003a24:	187b      	adds	r3, r7, r1
 8003a26:	2200      	movs	r2, #0
 8003a28:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003a2a:	187b      	adds	r3, r7, r1
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003a30:	187b      	adds	r3, r7, r1
 8003a32:	2200      	movs	r2, #0
 8003a34:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003a36:	187a      	adds	r2, r7, r1
 8003a38:	4b32      	ldr	r3, [pc, #200]	@ (8003b04 <MX_TIM1_Init+0x150>)
 8003a3a:	0011      	movs	r1, r2
 8003a3c:	0018      	movs	r0, r3
 8003a3e:	f004 faa9 	bl	8007f94 <HAL_TIMEx_MasterConfigSynchronization>
 8003a42:	1e03      	subs	r3, r0, #0
 8003a44:	d001      	beq.n	8003a4a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8003a46:	f000 f9bb 	bl	8003dc0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003a4a:	2138      	movs	r1, #56	@ 0x38
 8003a4c:	187b      	adds	r3, r7, r1
 8003a4e:	2260      	movs	r2, #96	@ 0x60
 8003a50:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8003a52:	187b      	adds	r3, r7, r1
 8003a54:	2200      	movs	r2, #0
 8003a56:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003a58:	187b      	adds	r3, r7, r1
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003a5e:	187b      	adds	r3, r7, r1
 8003a60:	2200      	movs	r2, #0
 8003a62:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003a64:	187b      	adds	r3, r7, r1
 8003a66:	2200      	movs	r2, #0
 8003a68:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003a6a:	187b      	adds	r3, r7, r1
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003a70:	187b      	adds	r3, r7, r1
 8003a72:	2200      	movs	r2, #0
 8003a74:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003a76:	1879      	adds	r1, r7, r1
 8003a78:	4b22      	ldr	r3, [pc, #136]	@ (8003b04 <MX_TIM1_Init+0x150>)
 8003a7a:	2208      	movs	r2, #8
 8003a7c:	0018      	movs	r0, r3
 8003a7e:	f003 fd6f 	bl	8007560 <HAL_TIM_PWM_ConfigChannel>
 8003a82:	1e03      	subs	r3, r0, #0
 8003a84:	d001      	beq.n	8003a8a <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8003a86:	f000 f99b 	bl	8003dc0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003a8a:	1d3b      	adds	r3, r7, #4
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003a90:	1d3b      	adds	r3, r7, #4
 8003a92:	2200      	movs	r2, #0
 8003a94:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003a96:	1d3b      	adds	r3, r7, #4
 8003a98:	2200      	movs	r2, #0
 8003a9a:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003a9c:	1d3b      	adds	r3, r7, #4
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003aa2:	1d3b      	adds	r3, r7, #4
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003aa8:	1d3b      	adds	r3, r7, #4
 8003aaa:	2280      	movs	r2, #128	@ 0x80
 8003aac:	0192      	lsls	r2, r2, #6
 8003aae:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8003ab0:	1d3b      	adds	r3, r7, #4
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8003ab6:	1d3b      	adds	r3, r7, #4
 8003ab8:	2200      	movs	r2, #0
 8003aba:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8003abc:	1d3b      	adds	r3, r7, #4
 8003abe:	2200      	movs	r2, #0
 8003ac0:	621a      	str	r2, [r3, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8003ac2:	1d3b      	adds	r3, r7, #4
 8003ac4:	2280      	movs	r2, #128	@ 0x80
 8003ac6:	0492      	lsls	r2, r2, #18
 8003ac8:	625a      	str	r2, [r3, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8003aca:	1d3b      	adds	r3, r7, #4
 8003acc:	2200      	movs	r2, #0
 8003ace:	629a      	str	r2, [r3, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8003ad0:	1d3b      	adds	r3, r7, #4
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	62da      	str	r2, [r3, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_ENABLE;
 8003ad6:	1d3b      	adds	r3, r7, #4
 8003ad8:	2280      	movs	r2, #128	@ 0x80
 8003ada:	01d2      	lsls	r2, r2, #7
 8003adc:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003ade:	1d3a      	adds	r2, r7, #4
 8003ae0:	4b08      	ldr	r3, [pc, #32]	@ (8003b04 <MX_TIM1_Init+0x150>)
 8003ae2:	0011      	movs	r1, r2
 8003ae4:	0018      	movs	r0, r3
 8003ae6:	f004 fac3 	bl	8008070 <HAL_TIMEx_ConfigBreakDeadTime>
 8003aea:	1e03      	subs	r3, r0, #0
 8003aec:	d001      	beq.n	8003af2 <MX_TIM1_Init+0x13e>
  {
    Error_Handler();
 8003aee:	f000 f967 	bl	8003dc0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8003af2:	4b04      	ldr	r3, [pc, #16]	@ (8003b04 <MX_TIM1_Init+0x150>)
 8003af4:	0018      	movs	r0, r3
 8003af6:	f000 fab9 	bl	800406c <HAL_TIM_MspPostInit>

}
 8003afa:	46c0      	nop			@ (mov r8, r8)
 8003afc:	46bd      	mov	sp, r7
 8003afe:	b018      	add	sp, #96	@ 0x60
 8003b00:	bd80      	pop	{r7, pc}
 8003b02:	46c0      	nop			@ (mov r8, r8)
 8003b04:	2000015c 	.word	0x2000015c
 8003b08:	40012c00 	.word	0x40012c00
 8003b0c:	000005dc 	.word	0x000005dc

08003b10 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b08a      	sub	sp, #40	@ 0x28
 8003b14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003b16:	231c      	movs	r3, #28
 8003b18:	18fb      	adds	r3, r7, r3
 8003b1a:	0018      	movs	r0, r3
 8003b1c:	230c      	movs	r3, #12
 8003b1e:	001a      	movs	r2, r3
 8003b20:	2100      	movs	r1, #0
 8003b22:	f005 f9c7 	bl	8008eb4 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003b26:	003b      	movs	r3, r7
 8003b28:	0018      	movs	r0, r3
 8003b2a:	231c      	movs	r3, #28
 8003b2c:	001a      	movs	r2, r3
 8003b2e:	2100      	movs	r1, #0
 8003b30:	f005 f9c0 	bl	8008eb4 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003b34:	4b24      	ldr	r3, [pc, #144]	@ (8003bc8 <MX_TIM3_Init+0xb8>)
 8003b36:	4a25      	ldr	r2, [pc, #148]	@ (8003bcc <MX_TIM3_Init+0xbc>)
 8003b38:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8003b3a:	4b23      	ldr	r3, [pc, #140]	@ (8003bc8 <MX_TIM3_Init+0xb8>)
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003b40:	4b21      	ldr	r3, [pc, #132]	@ (8003bc8 <MX_TIM3_Init+0xb8>)
 8003b42:	2200      	movs	r2, #0
 8003b44:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1500;
 8003b46:	4b20      	ldr	r3, [pc, #128]	@ (8003bc8 <MX_TIM3_Init+0xb8>)
 8003b48:	4a21      	ldr	r2, [pc, #132]	@ (8003bd0 <MX_TIM3_Init+0xc0>)
 8003b4a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003b4c:	4b1e      	ldr	r3, [pc, #120]	@ (8003bc8 <MX_TIM3_Init+0xb8>)
 8003b4e:	2200      	movs	r2, #0
 8003b50:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003b52:	4b1d      	ldr	r3, [pc, #116]	@ (8003bc8 <MX_TIM3_Init+0xb8>)
 8003b54:	2200      	movs	r2, #0
 8003b56:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8003b58:	4b1b      	ldr	r3, [pc, #108]	@ (8003bc8 <MX_TIM3_Init+0xb8>)
 8003b5a:	0018      	movs	r0, r3
 8003b5c:	f003 fbbe 	bl	80072dc <HAL_TIM_PWM_Init>
 8003b60:	1e03      	subs	r3, r0, #0
 8003b62:	d001      	beq.n	8003b68 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8003b64:	f000 f92c 	bl	8003dc0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003b68:	211c      	movs	r1, #28
 8003b6a:	187b      	adds	r3, r7, r1
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003b70:	187b      	adds	r3, r7, r1
 8003b72:	2200      	movs	r2, #0
 8003b74:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003b76:	187a      	adds	r2, r7, r1
 8003b78:	4b13      	ldr	r3, [pc, #76]	@ (8003bc8 <MX_TIM3_Init+0xb8>)
 8003b7a:	0011      	movs	r1, r2
 8003b7c:	0018      	movs	r0, r3
 8003b7e:	f004 fa09 	bl	8007f94 <HAL_TIMEx_MasterConfigSynchronization>
 8003b82:	1e03      	subs	r3, r0, #0
 8003b84:	d001      	beq.n	8003b8a <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 8003b86:	f000 f91b 	bl	8003dc0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003b8a:	003b      	movs	r3, r7
 8003b8c:	2260      	movs	r2, #96	@ 0x60
 8003b8e:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8003b90:	003b      	movs	r3, r7
 8003b92:	2200      	movs	r2, #0
 8003b94:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003b96:	003b      	movs	r3, r7
 8003b98:	2200      	movs	r2, #0
 8003b9a:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003b9c:	003b      	movs	r3, r7
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003ba2:	0039      	movs	r1, r7
 8003ba4:	4b08      	ldr	r3, [pc, #32]	@ (8003bc8 <MX_TIM3_Init+0xb8>)
 8003ba6:	2208      	movs	r2, #8
 8003ba8:	0018      	movs	r0, r3
 8003baa:	f003 fcd9 	bl	8007560 <HAL_TIM_PWM_ConfigChannel>
 8003bae:	1e03      	subs	r3, r0, #0
 8003bb0:	d001      	beq.n	8003bb6 <MX_TIM3_Init+0xa6>
  {
    Error_Handler();
 8003bb2:	f000 f905 	bl	8003dc0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8003bb6:	4b04      	ldr	r3, [pc, #16]	@ (8003bc8 <MX_TIM3_Init+0xb8>)
 8003bb8:	0018      	movs	r0, r3
 8003bba:	f000 fa57 	bl	800406c <HAL_TIM_MspPostInit>

}
 8003bbe:	46c0      	nop			@ (mov r8, r8)
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	b00a      	add	sp, #40	@ 0x28
 8003bc4:	bd80      	pop	{r7, pc}
 8003bc6:	46c0      	nop			@ (mov r8, r8)
 8003bc8:	200001a8 	.word	0x200001a8
 8003bcc:	40000400 	.word	0x40000400
 8003bd0:	000005dc 	.word	0x000005dc

08003bd4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003bd8:	4b23      	ldr	r3, [pc, #140]	@ (8003c68 <MX_USART1_UART_Init+0x94>)
 8003bda:	4a24      	ldr	r2, [pc, #144]	@ (8003c6c <MX_USART1_UART_Init+0x98>)
 8003bdc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003bde:	4b22      	ldr	r3, [pc, #136]	@ (8003c68 <MX_USART1_UART_Init+0x94>)
 8003be0:	22e1      	movs	r2, #225	@ 0xe1
 8003be2:	0252      	lsls	r2, r2, #9
 8003be4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003be6:	4b20      	ldr	r3, [pc, #128]	@ (8003c68 <MX_USART1_UART_Init+0x94>)
 8003be8:	2200      	movs	r2, #0
 8003bea:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003bec:	4b1e      	ldr	r3, [pc, #120]	@ (8003c68 <MX_USART1_UART_Init+0x94>)
 8003bee:	2200      	movs	r2, #0
 8003bf0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003bf2:	4b1d      	ldr	r3, [pc, #116]	@ (8003c68 <MX_USART1_UART_Init+0x94>)
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003bf8:	4b1b      	ldr	r3, [pc, #108]	@ (8003c68 <MX_USART1_UART_Init+0x94>)
 8003bfa:	220c      	movs	r2, #12
 8003bfc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003bfe:	4b1a      	ldr	r3, [pc, #104]	@ (8003c68 <MX_USART1_UART_Init+0x94>)
 8003c00:	2200      	movs	r2, #0
 8003c02:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003c04:	4b18      	ldr	r3, [pc, #96]	@ (8003c68 <MX_USART1_UART_Init+0x94>)
 8003c06:	2200      	movs	r2, #0
 8003c08:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003c0a:	4b17      	ldr	r3, [pc, #92]	@ (8003c68 <MX_USART1_UART_Init+0x94>)
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003c10:	4b15      	ldr	r3, [pc, #84]	@ (8003c68 <MX_USART1_UART_Init+0x94>)
 8003c12:	2200      	movs	r2, #0
 8003c14:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003c16:	4b14      	ldr	r3, [pc, #80]	@ (8003c68 <MX_USART1_UART_Init+0x94>)
 8003c18:	2200      	movs	r2, #0
 8003c1a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003c1c:	4b12      	ldr	r3, [pc, #72]	@ (8003c68 <MX_USART1_UART_Init+0x94>)
 8003c1e:	0018      	movs	r0, r3
 8003c20:	f004 fae6 	bl	80081f0 <HAL_UART_Init>
 8003c24:	1e03      	subs	r3, r0, #0
 8003c26:	d001      	beq.n	8003c2c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8003c28:	f000 f8ca 	bl	8003dc0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003c2c:	4b0e      	ldr	r3, [pc, #56]	@ (8003c68 <MX_USART1_UART_Init+0x94>)
 8003c2e:	2100      	movs	r1, #0
 8003c30:	0018      	movs	r0, r3
 8003c32:	f005 f85f 	bl	8008cf4 <HAL_UARTEx_SetTxFifoThreshold>
 8003c36:	1e03      	subs	r3, r0, #0
 8003c38:	d001      	beq.n	8003c3e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8003c3a:	f000 f8c1 	bl	8003dc0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003c3e:	4b0a      	ldr	r3, [pc, #40]	@ (8003c68 <MX_USART1_UART_Init+0x94>)
 8003c40:	2100      	movs	r1, #0
 8003c42:	0018      	movs	r0, r3
 8003c44:	f005 f896 	bl	8008d74 <HAL_UARTEx_SetRxFifoThreshold>
 8003c48:	1e03      	subs	r3, r0, #0
 8003c4a:	d001      	beq.n	8003c50 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8003c4c:	f000 f8b8 	bl	8003dc0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8003c50:	4b05      	ldr	r3, [pc, #20]	@ (8003c68 <MX_USART1_UART_Init+0x94>)
 8003c52:	0018      	movs	r0, r3
 8003c54:	f005 f814 	bl	8008c80 <HAL_UARTEx_DisableFifoMode>
 8003c58:	1e03      	subs	r3, r0, #0
 8003c5a:	d001      	beq.n	8003c60 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8003c5c:	f000 f8b0 	bl	8003dc0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003c60:	46c0      	nop			@ (mov r8, r8)
 8003c62:	46bd      	mov	sp, r7
 8003c64:	bd80      	pop	{r7, pc}
 8003c66:	46c0      	nop			@ (mov r8, r8)
 8003c68:	200001f4 	.word	0x200001f4
 8003c6c:	40013800 	.word	0x40013800

08003c70 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003c70:	b590      	push	{r4, r7, lr}
 8003c72:	b08b      	sub	sp, #44	@ 0x2c
 8003c74:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c76:	2414      	movs	r4, #20
 8003c78:	193b      	adds	r3, r7, r4
 8003c7a:	0018      	movs	r0, r3
 8003c7c:	2314      	movs	r3, #20
 8003c7e:	001a      	movs	r2, r3
 8003c80:	2100      	movs	r1, #0
 8003c82:	f005 f917 	bl	8008eb4 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003c86:	4b4b      	ldr	r3, [pc, #300]	@ (8003db4 <MX_GPIO_Init+0x144>)
 8003c88:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003c8a:	4b4a      	ldr	r3, [pc, #296]	@ (8003db4 <MX_GPIO_Init+0x144>)
 8003c8c:	2104      	movs	r1, #4
 8003c8e:	430a      	orrs	r2, r1
 8003c90:	635a      	str	r2, [r3, #52]	@ 0x34
 8003c92:	4b48      	ldr	r3, [pc, #288]	@ (8003db4 <MX_GPIO_Init+0x144>)
 8003c94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c96:	2204      	movs	r2, #4
 8003c98:	4013      	ands	r3, r2
 8003c9a:	613b      	str	r3, [r7, #16]
 8003c9c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c9e:	4b45      	ldr	r3, [pc, #276]	@ (8003db4 <MX_GPIO_Init+0x144>)
 8003ca0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003ca2:	4b44      	ldr	r3, [pc, #272]	@ (8003db4 <MX_GPIO_Init+0x144>)
 8003ca4:	2101      	movs	r1, #1
 8003ca6:	430a      	orrs	r2, r1
 8003ca8:	635a      	str	r2, [r3, #52]	@ 0x34
 8003caa:	4b42      	ldr	r3, [pc, #264]	@ (8003db4 <MX_GPIO_Init+0x144>)
 8003cac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003cae:	2201      	movs	r2, #1
 8003cb0:	4013      	ands	r3, r2
 8003cb2:	60fb      	str	r3, [r7, #12]
 8003cb4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003cb6:	4b3f      	ldr	r3, [pc, #252]	@ (8003db4 <MX_GPIO_Init+0x144>)
 8003cb8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003cba:	4b3e      	ldr	r3, [pc, #248]	@ (8003db4 <MX_GPIO_Init+0x144>)
 8003cbc:	2102      	movs	r1, #2
 8003cbe:	430a      	orrs	r2, r1
 8003cc0:	635a      	str	r2, [r3, #52]	@ 0x34
 8003cc2:	4b3c      	ldr	r3, [pc, #240]	@ (8003db4 <MX_GPIO_Init+0x144>)
 8003cc4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003cc6:	2202      	movs	r2, #2
 8003cc8:	4013      	ands	r3, r2
 8003cca:	60bb      	str	r3, [r7, #8]
 8003ccc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003cce:	4b39      	ldr	r3, [pc, #228]	@ (8003db4 <MX_GPIO_Init+0x144>)
 8003cd0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003cd2:	4b38      	ldr	r3, [pc, #224]	@ (8003db4 <MX_GPIO_Init+0x144>)
 8003cd4:	2108      	movs	r1, #8
 8003cd6:	430a      	orrs	r2, r1
 8003cd8:	635a      	str	r2, [r3, #52]	@ 0x34
 8003cda:	4b36      	ldr	r3, [pc, #216]	@ (8003db4 <MX_GPIO_Init+0x144>)
 8003cdc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003cde:	2208      	movs	r2, #8
 8003ce0:	4013      	ands	r3, r2
 8003ce2:	607b      	str	r3, [r7, #4]
 8003ce4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, PURGE_Pin|HUMIDIFIER_Pin|CS_TEMPERATURE_Pin, GPIO_PIN_RESET);
 8003ce6:	23e0      	movs	r3, #224	@ 0xe0
 8003ce8:	005b      	lsls	r3, r3, #1
 8003cea:	4833      	ldr	r0, [pc, #204]	@ (8003db8 <MX_GPIO_Init+0x148>)
 8003cec:	2200      	movs	r2, #0
 8003cee:	0019      	movs	r1, r3
 8003cf0:	f001 fe9f 	bl	8005a32 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, H_VALVE_Pin|GPIO_PIN_3|GPIO_PIN_5, GPIO_PIN_RESET);
 8003cf4:	2394      	movs	r3, #148	@ 0x94
 8003cf6:	005b      	lsls	r3, r3, #1
 8003cf8:	4830      	ldr	r0, [pc, #192]	@ (8003dbc <MX_GPIO_Init+0x14c>)
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	0019      	movs	r1, r3
 8003cfe:	f001 fe98 	bl	8005a32 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_CARD_GPIO_Port, CS_CARD_Pin, GPIO_PIN_RESET);
 8003d02:	2380      	movs	r3, #128	@ 0x80
 8003d04:	0219      	lsls	r1, r3, #8
 8003d06:	23a0      	movs	r3, #160	@ 0xa0
 8003d08:	05db      	lsls	r3, r3, #23
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	0018      	movs	r0, r3
 8003d0e:	f001 fe90 	bl	8005a32 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PURGE_Pin HUMIDIFIER_Pin CS_TEMPERATURE_Pin */
  GPIO_InitStruct.Pin = PURGE_Pin|HUMIDIFIER_Pin|CS_TEMPERATURE_Pin;
 8003d12:	193b      	adds	r3, r7, r4
 8003d14:	22e0      	movs	r2, #224	@ 0xe0
 8003d16:	0052      	lsls	r2, r2, #1
 8003d18:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003d1a:	193b      	adds	r3, r7, r4
 8003d1c:	2201      	movs	r2, #1
 8003d1e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d20:	193b      	adds	r3, r7, r4
 8003d22:	2200      	movs	r2, #0
 8003d24:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d26:	193b      	adds	r3, r7, r4
 8003d28:	2200      	movs	r2, #0
 8003d2a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003d2c:	193b      	adds	r3, r7, r4
 8003d2e:	4a22      	ldr	r2, [pc, #136]	@ (8003db8 <MX_GPIO_Init+0x148>)
 8003d30:	0019      	movs	r1, r3
 8003d32:	0010      	movs	r0, r2
 8003d34:	f001 fcfc 	bl	8005730 <HAL_GPIO_Init>

  /*Configure GPIO pins : H_VALVE_Pin PD3 PD5 */
  GPIO_InitStruct.Pin = H_VALVE_Pin|GPIO_PIN_3|GPIO_PIN_5;
 8003d38:	0021      	movs	r1, r4
 8003d3a:	187b      	adds	r3, r7, r1
 8003d3c:	2294      	movs	r2, #148	@ 0x94
 8003d3e:	0052      	lsls	r2, r2, #1
 8003d40:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003d42:	000c      	movs	r4, r1
 8003d44:	193b      	adds	r3, r7, r4
 8003d46:	2201      	movs	r2, #1
 8003d48:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d4a:	193b      	adds	r3, r7, r4
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d50:	193b      	adds	r3, r7, r4
 8003d52:	2200      	movs	r2, #0
 8003d54:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003d56:	193b      	adds	r3, r7, r4
 8003d58:	4a18      	ldr	r2, [pc, #96]	@ (8003dbc <MX_GPIO_Init+0x14c>)
 8003d5a:	0019      	movs	r1, r3
 8003d5c:	0010      	movs	r0, r2
 8003d5e:	f001 fce7 	bl	8005730 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_CARD_Pin */
  GPIO_InitStruct.Pin = CS_CARD_Pin;
 8003d62:	0021      	movs	r1, r4
 8003d64:	187b      	adds	r3, r7, r1
 8003d66:	2280      	movs	r2, #128	@ 0x80
 8003d68:	0212      	lsls	r2, r2, #8
 8003d6a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003d6c:	000c      	movs	r4, r1
 8003d6e:	193b      	adds	r3, r7, r4
 8003d70:	2201      	movs	r2, #1
 8003d72:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d74:	193b      	adds	r3, r7, r4
 8003d76:	2200      	movs	r2, #0
 8003d78:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d7a:	193b      	adds	r3, r7, r4
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(CS_CARD_GPIO_Port, &GPIO_InitStruct);
 8003d80:	193a      	adds	r2, r7, r4
 8003d82:	23a0      	movs	r3, #160	@ 0xa0
 8003d84:	05db      	lsls	r3, r3, #23
 8003d86:	0011      	movs	r1, r2
 8003d88:	0018      	movs	r0, r3
 8003d8a:	f001 fcd1 	bl	8005730 <HAL_GPIO_Init>

  /*Configure GPIO pin : MANUAL_Pin */
  GPIO_InitStruct.Pin = MANUAL_Pin;
 8003d8e:	193b      	adds	r3, r7, r4
 8003d90:	2201      	movs	r2, #1
 8003d92:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003d94:	193b      	adds	r3, r7, r4
 8003d96:	2200      	movs	r2, #0
 8003d98:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003d9a:	193b      	adds	r3, r7, r4
 8003d9c:	2202      	movs	r2, #2
 8003d9e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(MANUAL_GPIO_Port, &GPIO_InitStruct);
 8003da0:	193b      	adds	r3, r7, r4
 8003da2:	4a06      	ldr	r2, [pc, #24]	@ (8003dbc <MX_GPIO_Init+0x14c>)
 8003da4:	0019      	movs	r1, r3
 8003da6:	0010      	movs	r0, r2
 8003da8:	f001 fcc2 	bl	8005730 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003dac:	46c0      	nop			@ (mov r8, r8)
 8003dae:	46bd      	mov	sp, r7
 8003db0:	b00b      	add	sp, #44	@ 0x2c
 8003db2:	bd90      	pop	{r4, r7, pc}
 8003db4:	40021000 	.word	0x40021000
 8003db8:	50000800 	.word	0x50000800
 8003dbc:	50000c00 	.word	0x50000c00

08003dc0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003dc4:	b672      	cpsid	i
}
 8003dc6:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003dc8:	46c0      	nop			@ (mov r8, r8)
 8003dca:	e7fd      	b.n	8003dc8 <Error_Handler+0x8>

08003dcc <Read_ADC_Channels>:
extern ADC_HandleTypeDef hadc1;

float adc_vals[4];

void Read_ADC_Channels(void)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b082      	sub	sp, #8
 8003dd0:	af00      	add	r7, sp, #0
    HAL_ADC_Start(&hadc1);
 8003dd2:	4b14      	ldr	r3, [pc, #80]	@ (8003e24 <Read_ADC_Channels+0x58>)
 8003dd4:	0018      	movs	r0, r3
 8003dd6:	f000 fe3b 	bl	8004a50 <HAL_ADC_Start>

    for (int i = 0; i < 4; i++)
 8003dda:	2300      	movs	r3, #0
 8003ddc:	607b      	str	r3, [r7, #4]
 8003dde:	e016      	b.n	8003e0e <Read_ADC_Channels+0x42>
    {
        HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8003de0:	2301      	movs	r3, #1
 8003de2:	425a      	negs	r2, r3
 8003de4:	4b0f      	ldr	r3, [pc, #60]	@ (8003e24 <Read_ADC_Channels+0x58>)
 8003de6:	0011      	movs	r1, r2
 8003de8:	0018      	movs	r0, r3
 8003dea:	f000 febb 	bl	8004b64 <HAL_ADC_PollForConversion>
        adc_vals[i] = HAL_ADC_GetValue(&hadc1);
 8003dee:	4b0d      	ldr	r3, [pc, #52]	@ (8003e24 <Read_ADC_Channels+0x58>)
 8003df0:	0018      	movs	r0, r3
 8003df2:	f000 ff4b 	bl	8004c8c <HAL_ADC_GetValue>
 8003df6:	0003      	movs	r3, r0
 8003df8:	0018      	movs	r0, r3
 8003dfa:	f7fd fb0b 	bl	8001414 <__aeabi_ui2f>
 8003dfe:	1c01      	adds	r1, r0, #0
 8003e00:	4b09      	ldr	r3, [pc, #36]	@ (8003e28 <Read_ADC_Channels+0x5c>)
 8003e02:	687a      	ldr	r2, [r7, #4]
 8003e04:	0092      	lsls	r2, r2, #2
 8003e06:	50d1      	str	r1, [r2, r3]
    for (int i = 0; i < 4; i++)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	3301      	adds	r3, #1
 8003e0c:	607b      	str	r3, [r7, #4]
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2b03      	cmp	r3, #3
 8003e12:	dde5      	ble.n	8003de0 <Read_ADC_Channels+0x14>
    }

    HAL_ADC_Stop(&hadc1);
 8003e14:	4b03      	ldr	r3, [pc, #12]	@ (8003e24 <Read_ADC_Channels+0x58>)
 8003e16:	0018      	movs	r0, r3
 8003e18:	f000 fe68 	bl	8004aec <HAL_ADC_Stop>
}
 8003e1c:	46c0      	nop			@ (mov r8, r8)
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	b002      	add	sp, #8
 8003e22:	bd80      	pop	{r7, pc}
 8003e24:	20000094 	.word	0x20000094
 8003e28:	200002b0 	.word	0x200002b0

08003e2c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b082      	sub	sp, #8
 8003e30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e32:	4b0f      	ldr	r3, [pc, #60]	@ (8003e70 <HAL_MspInit+0x44>)
 8003e34:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003e36:	4b0e      	ldr	r3, [pc, #56]	@ (8003e70 <HAL_MspInit+0x44>)
 8003e38:	2101      	movs	r1, #1
 8003e3a:	430a      	orrs	r2, r1
 8003e3c:	641a      	str	r2, [r3, #64]	@ 0x40
 8003e3e:	4b0c      	ldr	r3, [pc, #48]	@ (8003e70 <HAL_MspInit+0x44>)
 8003e40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e42:	2201      	movs	r2, #1
 8003e44:	4013      	ands	r3, r2
 8003e46:	607b      	str	r3, [r7, #4]
 8003e48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003e4a:	4b09      	ldr	r3, [pc, #36]	@ (8003e70 <HAL_MspInit+0x44>)
 8003e4c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003e4e:	4b08      	ldr	r3, [pc, #32]	@ (8003e70 <HAL_MspInit+0x44>)
 8003e50:	2180      	movs	r1, #128	@ 0x80
 8003e52:	0549      	lsls	r1, r1, #21
 8003e54:	430a      	orrs	r2, r1
 8003e56:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003e58:	4b05      	ldr	r3, [pc, #20]	@ (8003e70 <HAL_MspInit+0x44>)
 8003e5a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003e5c:	2380      	movs	r3, #128	@ 0x80
 8003e5e:	055b      	lsls	r3, r3, #21
 8003e60:	4013      	ands	r3, r2
 8003e62:	603b      	str	r3, [r7, #0]
 8003e64:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003e66:	46c0      	nop			@ (mov r8, r8)
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	b002      	add	sp, #8
 8003e6c:	bd80      	pop	{r7, pc}
 8003e6e:	46c0      	nop			@ (mov r8, r8)
 8003e70:	40021000 	.word	0x40021000

08003e74 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003e74:	b590      	push	{r4, r7, lr}
 8003e76:	b08b      	sub	sp, #44	@ 0x2c
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e7c:	2414      	movs	r4, #20
 8003e7e:	193b      	adds	r3, r7, r4
 8003e80:	0018      	movs	r0, r3
 8003e82:	2314      	movs	r3, #20
 8003e84:	001a      	movs	r2, r3
 8003e86:	2100      	movs	r1, #0
 8003e88:	f005 f814 	bl	8008eb4 <memset>
  if(hadc->Instance==ADC1)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4a18      	ldr	r2, [pc, #96]	@ (8003ef4 <HAL_ADC_MspInit+0x80>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d129      	bne.n	8003eea <HAL_ADC_MspInit+0x76>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8003e96:	4b18      	ldr	r3, [pc, #96]	@ (8003ef8 <HAL_ADC_MspInit+0x84>)
 8003e98:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003e9a:	4b17      	ldr	r3, [pc, #92]	@ (8003ef8 <HAL_ADC_MspInit+0x84>)
 8003e9c:	2180      	movs	r1, #128	@ 0x80
 8003e9e:	0349      	lsls	r1, r1, #13
 8003ea0:	430a      	orrs	r2, r1
 8003ea2:	641a      	str	r2, [r3, #64]	@ 0x40
 8003ea4:	4b14      	ldr	r3, [pc, #80]	@ (8003ef8 <HAL_ADC_MspInit+0x84>)
 8003ea6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003ea8:	2380      	movs	r3, #128	@ 0x80
 8003eaa:	035b      	lsls	r3, r3, #13
 8003eac:	4013      	ands	r3, r2
 8003eae:	613b      	str	r3, [r7, #16]
 8003eb0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003eb2:	4b11      	ldr	r3, [pc, #68]	@ (8003ef8 <HAL_ADC_MspInit+0x84>)
 8003eb4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003eb6:	4b10      	ldr	r3, [pc, #64]	@ (8003ef8 <HAL_ADC_MspInit+0x84>)
 8003eb8:	2101      	movs	r1, #1
 8003eba:	430a      	orrs	r2, r1
 8003ebc:	635a      	str	r2, [r3, #52]	@ 0x34
 8003ebe:	4b0e      	ldr	r3, [pc, #56]	@ (8003ef8 <HAL_ADC_MspInit+0x84>)
 8003ec0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ec2:	2201      	movs	r2, #1
 8003ec4:	4013      	ands	r3, r2
 8003ec6:	60fb      	str	r3, [r7, #12]
 8003ec8:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 8003eca:	193b      	adds	r3, r7, r4
 8003ecc:	221e      	movs	r2, #30
 8003ece:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003ed0:	193b      	adds	r3, r7, r4
 8003ed2:	2203      	movs	r2, #3
 8003ed4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ed6:	193b      	adds	r3, r7, r4
 8003ed8:	2200      	movs	r2, #0
 8003eda:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003edc:	193a      	adds	r2, r7, r4
 8003ede:	23a0      	movs	r3, #160	@ 0xa0
 8003ee0:	05db      	lsls	r3, r3, #23
 8003ee2:	0011      	movs	r1, r2
 8003ee4:	0018      	movs	r0, r3
 8003ee6:	f001 fc23 	bl	8005730 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8003eea:	46c0      	nop			@ (mov r8, r8)
 8003eec:	46bd      	mov	sp, r7
 8003eee:	b00b      	add	sp, #44	@ 0x2c
 8003ef0:	bd90      	pop	{r4, r7, pc}
 8003ef2:	46c0      	nop			@ (mov r8, r8)
 8003ef4:	40012400 	.word	0x40012400
 8003ef8:	40021000 	.word	0x40021000

08003efc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003efc:	b590      	push	{r4, r7, lr}
 8003efe:	b08b      	sub	sp, #44	@ 0x2c
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f04:	2414      	movs	r4, #20
 8003f06:	193b      	adds	r3, r7, r4
 8003f08:	0018      	movs	r0, r3
 8003f0a:	2314      	movs	r3, #20
 8003f0c:	001a      	movs	r2, r3
 8003f0e:	2100      	movs	r1, #0
 8003f10:	f004 ffd0 	bl	8008eb4 <memset>
  if(hspi->Instance==SPI2)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4a2c      	ldr	r2, [pc, #176]	@ (8003fcc <HAL_SPI_MspInit+0xd0>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d151      	bne.n	8003fc2 <HAL_SPI_MspInit+0xc6>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003f1e:	4b2c      	ldr	r3, [pc, #176]	@ (8003fd0 <HAL_SPI_MspInit+0xd4>)
 8003f20:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003f22:	4b2b      	ldr	r3, [pc, #172]	@ (8003fd0 <HAL_SPI_MspInit+0xd4>)
 8003f24:	2180      	movs	r1, #128	@ 0x80
 8003f26:	01c9      	lsls	r1, r1, #7
 8003f28:	430a      	orrs	r2, r1
 8003f2a:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003f2c:	4b28      	ldr	r3, [pc, #160]	@ (8003fd0 <HAL_SPI_MspInit+0xd4>)
 8003f2e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003f30:	2380      	movs	r3, #128	@ 0x80
 8003f32:	01db      	lsls	r3, r3, #7
 8003f34:	4013      	ands	r3, r2
 8003f36:	613b      	str	r3, [r7, #16]
 8003f38:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003f3a:	4b25      	ldr	r3, [pc, #148]	@ (8003fd0 <HAL_SPI_MspInit+0xd4>)
 8003f3c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003f3e:	4b24      	ldr	r3, [pc, #144]	@ (8003fd0 <HAL_SPI_MspInit+0xd4>)
 8003f40:	2104      	movs	r1, #4
 8003f42:	430a      	orrs	r2, r1
 8003f44:	635a      	str	r2, [r3, #52]	@ 0x34
 8003f46:	4b22      	ldr	r3, [pc, #136]	@ (8003fd0 <HAL_SPI_MspInit+0xd4>)
 8003f48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f4a:	2204      	movs	r2, #4
 8003f4c:	4013      	ands	r3, r2
 8003f4e:	60fb      	str	r3, [r7, #12]
 8003f50:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f52:	4b1f      	ldr	r3, [pc, #124]	@ (8003fd0 <HAL_SPI_MspInit+0xd4>)
 8003f54:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003f56:	4b1e      	ldr	r3, [pc, #120]	@ (8003fd0 <HAL_SPI_MspInit+0xd4>)
 8003f58:	2101      	movs	r1, #1
 8003f5a:	430a      	orrs	r2, r1
 8003f5c:	635a      	str	r2, [r3, #52]	@ 0x34
 8003f5e:	4b1c      	ldr	r3, [pc, #112]	@ (8003fd0 <HAL_SPI_MspInit+0xd4>)
 8003f60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f62:	2201      	movs	r2, #1
 8003f64:	4013      	ands	r3, r2
 8003f66:	60bb      	str	r3, [r7, #8]
 8003f68:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PA0     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003f6a:	193b      	adds	r3, r7, r4
 8003f6c:	220c      	movs	r2, #12
 8003f6e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f70:	193b      	adds	r3, r7, r4
 8003f72:	2202      	movs	r2, #2
 8003f74:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f76:	193b      	adds	r3, r7, r4
 8003f78:	2200      	movs	r2, #0
 8003f7a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f7c:	193b      	adds	r3, r7, r4
 8003f7e:	2200      	movs	r2, #0
 8003f80:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_SPI2;
 8003f82:	193b      	adds	r3, r7, r4
 8003f84:	2201      	movs	r2, #1
 8003f86:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003f88:	193b      	adds	r3, r7, r4
 8003f8a:	4a12      	ldr	r2, [pc, #72]	@ (8003fd4 <HAL_SPI_MspInit+0xd8>)
 8003f8c:	0019      	movs	r1, r3
 8003f8e:	0010      	movs	r0, r2
 8003f90:	f001 fbce 	bl	8005730 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003f94:	0021      	movs	r1, r4
 8003f96:	187b      	adds	r3, r7, r1
 8003f98:	2201      	movs	r2, #1
 8003f9a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f9c:	187b      	adds	r3, r7, r1
 8003f9e:	2202      	movs	r2, #2
 8003fa0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fa2:	187b      	adds	r3, r7, r1
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003fa8:	187b      	adds	r3, r7, r1
 8003faa:	2200      	movs	r2, #0
 8003fac:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 8003fae:	187b      	adds	r3, r7, r1
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003fb4:	187a      	adds	r2, r7, r1
 8003fb6:	23a0      	movs	r3, #160	@ 0xa0
 8003fb8:	05db      	lsls	r3, r3, #23
 8003fba:	0011      	movs	r1, r2
 8003fbc:	0018      	movs	r0, r3
 8003fbe:	f001 fbb7 	bl	8005730 <HAL_GPIO_Init>

  /* USER CODE END SPI2_MspInit 1 */

  }

}
 8003fc2:	46c0      	nop			@ (mov r8, r8)
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	b00b      	add	sp, #44	@ 0x2c
 8003fc8:	bd90      	pop	{r4, r7, pc}
 8003fca:	46c0      	nop			@ (mov r8, r8)
 8003fcc:	40003800 	.word	0x40003800
 8003fd0:	40021000 	.word	0x40021000
 8003fd4:	50000800 	.word	0x50000800

08003fd8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003fd8:	b590      	push	{r4, r7, lr}
 8003fda:	b093      	sub	sp, #76	@ 0x4c
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003fe0:	2414      	movs	r4, #20
 8003fe2:	193b      	adds	r3, r7, r4
 8003fe4:	0018      	movs	r0, r3
 8003fe6:	2334      	movs	r3, #52	@ 0x34
 8003fe8:	001a      	movs	r2, r3
 8003fea:	2100      	movs	r1, #0
 8003fec:	f004 ff62 	bl	8008eb4 <memset>
  if(htim_pwm->Instance==TIM1)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4a1a      	ldr	r2, [pc, #104]	@ (8004060 <HAL_TIM_PWM_MspInit+0x88>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d11d      	bne.n	8004036 <HAL_TIM_PWM_MspInit+0x5e>

  /* USER CODE END TIM1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 8003ffa:	193b      	adds	r3, r7, r4
 8003ffc:	2280      	movs	r2, #128	@ 0x80
 8003ffe:	0392      	lsls	r2, r2, #14
 8004000:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLKSOURCE_PCLK1;
 8004002:	193b      	adds	r3, r7, r4
 8004004:	2200      	movs	r2, #0
 8004006:	629a      	str	r2, [r3, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004008:	193b      	adds	r3, r7, r4
 800400a:	0018      	movs	r0, r3
 800400c:	f002 fa3e 	bl	800648c <HAL_RCCEx_PeriphCLKConfig>
 8004010:	1e03      	subs	r3, r0, #0
 8004012:	d001      	beq.n	8004018 <HAL_TIM_PWM_MspInit+0x40>
    {
      Error_Handler();
 8004014:	f7ff fed4 	bl	8003dc0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004018:	4b12      	ldr	r3, [pc, #72]	@ (8004064 <HAL_TIM_PWM_MspInit+0x8c>)
 800401a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800401c:	4b11      	ldr	r3, [pc, #68]	@ (8004064 <HAL_TIM_PWM_MspInit+0x8c>)
 800401e:	2180      	movs	r1, #128	@ 0x80
 8004020:	0109      	lsls	r1, r1, #4
 8004022:	430a      	orrs	r2, r1
 8004024:	641a      	str	r2, [r3, #64]	@ 0x40
 8004026:	4b0f      	ldr	r3, [pc, #60]	@ (8004064 <HAL_TIM_PWM_MspInit+0x8c>)
 8004028:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800402a:	2380      	movs	r3, #128	@ 0x80
 800402c:	011b      	lsls	r3, r3, #4
 800402e:	4013      	ands	r3, r2
 8004030:	613b      	str	r3, [r7, #16]
 8004032:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8004034:	e010      	b.n	8004058 <HAL_TIM_PWM_MspInit+0x80>
  else if(htim_pwm->Instance==TIM3)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	4a0b      	ldr	r2, [pc, #44]	@ (8004068 <HAL_TIM_PWM_MspInit+0x90>)
 800403c:	4293      	cmp	r3, r2
 800403e:	d10b      	bne.n	8004058 <HAL_TIM_PWM_MspInit+0x80>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004040:	4b08      	ldr	r3, [pc, #32]	@ (8004064 <HAL_TIM_PWM_MspInit+0x8c>)
 8004042:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004044:	4b07      	ldr	r3, [pc, #28]	@ (8004064 <HAL_TIM_PWM_MspInit+0x8c>)
 8004046:	2102      	movs	r1, #2
 8004048:	430a      	orrs	r2, r1
 800404a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800404c:	4b05      	ldr	r3, [pc, #20]	@ (8004064 <HAL_TIM_PWM_MspInit+0x8c>)
 800404e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004050:	2202      	movs	r2, #2
 8004052:	4013      	ands	r3, r2
 8004054:	60fb      	str	r3, [r7, #12]
 8004056:	68fb      	ldr	r3, [r7, #12]
}
 8004058:	46c0      	nop			@ (mov r8, r8)
 800405a:	46bd      	mov	sp, r7
 800405c:	b013      	add	sp, #76	@ 0x4c
 800405e:	bd90      	pop	{r4, r7, pc}
 8004060:	40012c00 	.word	0x40012c00
 8004064:	40021000 	.word	0x40021000
 8004068:	40000400 	.word	0x40000400

0800406c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800406c:	b590      	push	{r4, r7, lr}
 800406e:	b08b      	sub	sp, #44	@ 0x2c
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004074:	2414      	movs	r4, #20
 8004076:	193b      	adds	r3, r7, r4
 8004078:	0018      	movs	r0, r3
 800407a:	2314      	movs	r3, #20
 800407c:	001a      	movs	r2, r3
 800407e:	2100      	movs	r1, #0
 8004080:	f004 ff18 	bl	8008eb4 <memset>
  if(htim->Instance==TIM1)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	4a39      	ldr	r2, [pc, #228]	@ (8004170 <HAL_TIM_MspPostInit+0x104>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d145      	bne.n	800411a <HAL_TIM_MspPostInit+0xae>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800408e:	4b39      	ldr	r3, [pc, #228]	@ (8004174 <HAL_TIM_MspPostInit+0x108>)
 8004090:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004092:	4b38      	ldr	r3, [pc, #224]	@ (8004174 <HAL_TIM_MspPostInit+0x108>)
 8004094:	2101      	movs	r1, #1
 8004096:	430a      	orrs	r2, r1
 8004098:	635a      	str	r2, [r3, #52]	@ 0x34
 800409a:	4b36      	ldr	r3, [pc, #216]	@ (8004174 <HAL_TIM_MspPostInit+0x108>)
 800409c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800409e:	2201      	movs	r2, #1
 80040a0:	4013      	ands	r3, r2
 80040a2:	613b      	str	r3, [r7, #16]
 80040a4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80040a6:	4b33      	ldr	r3, [pc, #204]	@ (8004174 <HAL_TIM_MspPostInit+0x108>)
 80040a8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80040aa:	4b32      	ldr	r3, [pc, #200]	@ (8004174 <HAL_TIM_MspPostInit+0x108>)
 80040ac:	2108      	movs	r1, #8
 80040ae:	430a      	orrs	r2, r1
 80040b0:	635a      	str	r2, [r3, #52]	@ 0x34
 80040b2:	4b30      	ldr	r3, [pc, #192]	@ (8004174 <HAL_TIM_MspPostInit+0x108>)
 80040b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80040b6:	2208      	movs	r2, #8
 80040b8:	4013      	ands	r3, r2
 80040ba:	60fb      	str	r3, [r7, #12]
 80040bc:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA10     ------> TIM1_CH3
    PD4     ------> TIM1_CH3N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80040be:	193b      	adds	r3, r7, r4
 80040c0:	2280      	movs	r2, #128	@ 0x80
 80040c2:	00d2      	lsls	r2, r2, #3
 80040c4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040c6:	193b      	adds	r3, r7, r4
 80040c8:	2202      	movs	r2, #2
 80040ca:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040cc:	193b      	adds	r3, r7, r4
 80040ce:	2200      	movs	r2, #0
 80040d0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80040d2:	193b      	adds	r3, r7, r4
 80040d4:	2200      	movs	r2, #0
 80040d6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80040d8:	193b      	adds	r3, r7, r4
 80040da:	2202      	movs	r2, #2
 80040dc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80040de:	193a      	adds	r2, r7, r4
 80040e0:	23a0      	movs	r3, #160	@ 0xa0
 80040e2:	05db      	lsls	r3, r3, #23
 80040e4:	0011      	movs	r1, r2
 80040e6:	0018      	movs	r0, r3
 80040e8:	f001 fb22 	bl	8005730 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80040ec:	0021      	movs	r1, r4
 80040ee:	187b      	adds	r3, r7, r1
 80040f0:	2210      	movs	r2, #16
 80040f2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040f4:	187b      	adds	r3, r7, r1
 80040f6:	2202      	movs	r2, #2
 80040f8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040fa:	187b      	adds	r3, r7, r1
 80040fc:	2200      	movs	r2, #0
 80040fe:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004100:	187b      	adds	r3, r7, r1
 8004102:	2200      	movs	r2, #0
 8004104:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8004106:	187b      	adds	r3, r7, r1
 8004108:	2202      	movs	r2, #2
 800410a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800410c:	187b      	adds	r3, r7, r1
 800410e:	4a1a      	ldr	r2, [pc, #104]	@ (8004178 <HAL_TIM_MspPostInit+0x10c>)
 8004110:	0019      	movs	r1, r3
 8004112:	0010      	movs	r0, r2
 8004114:	f001 fb0c 	bl	8005730 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8004118:	e026      	b.n	8004168 <HAL_TIM_MspPostInit+0xfc>
  else if(htim->Instance==TIM3)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4a17      	ldr	r2, [pc, #92]	@ (800417c <HAL_TIM_MspPostInit+0x110>)
 8004120:	4293      	cmp	r3, r2
 8004122:	d121      	bne.n	8004168 <HAL_TIM_MspPostInit+0xfc>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004124:	4b13      	ldr	r3, [pc, #76]	@ (8004174 <HAL_TIM_MspPostInit+0x108>)
 8004126:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004128:	4b12      	ldr	r3, [pc, #72]	@ (8004174 <HAL_TIM_MspPostInit+0x108>)
 800412a:	2102      	movs	r1, #2
 800412c:	430a      	orrs	r2, r1
 800412e:	635a      	str	r2, [r3, #52]	@ 0x34
 8004130:	4b10      	ldr	r3, [pc, #64]	@ (8004174 <HAL_TIM_MspPostInit+0x108>)
 8004132:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004134:	2202      	movs	r2, #2
 8004136:	4013      	ands	r3, r2
 8004138:	60bb      	str	r3, [r7, #8]
 800413a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800413c:	2114      	movs	r1, #20
 800413e:	187b      	adds	r3, r7, r1
 8004140:	2201      	movs	r2, #1
 8004142:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004144:	187b      	adds	r3, r7, r1
 8004146:	2202      	movs	r2, #2
 8004148:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800414a:	187b      	adds	r3, r7, r1
 800414c:	2200      	movs	r2, #0
 800414e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004150:	187b      	adds	r3, r7, r1
 8004152:	2200      	movs	r2, #0
 8004154:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8004156:	187b      	adds	r3, r7, r1
 8004158:	2201      	movs	r2, #1
 800415a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800415c:	187b      	adds	r3, r7, r1
 800415e:	4a08      	ldr	r2, [pc, #32]	@ (8004180 <HAL_TIM_MspPostInit+0x114>)
 8004160:	0019      	movs	r1, r3
 8004162:	0010      	movs	r0, r2
 8004164:	f001 fae4 	bl	8005730 <HAL_GPIO_Init>
}
 8004168:	46c0      	nop			@ (mov r8, r8)
 800416a:	46bd      	mov	sp, r7
 800416c:	b00b      	add	sp, #44	@ 0x2c
 800416e:	bd90      	pop	{r4, r7, pc}
 8004170:	40012c00 	.word	0x40012c00
 8004174:	40021000 	.word	0x40021000
 8004178:	50000c00 	.word	0x50000c00
 800417c:	40000400 	.word	0x40000400
 8004180:	50000400 	.word	0x50000400

08004184 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004184:	b590      	push	{r4, r7, lr}
 8004186:	b097      	sub	sp, #92	@ 0x5c
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800418c:	2344      	movs	r3, #68	@ 0x44
 800418e:	18fb      	adds	r3, r7, r3
 8004190:	0018      	movs	r0, r3
 8004192:	2314      	movs	r3, #20
 8004194:	001a      	movs	r2, r3
 8004196:	2100      	movs	r1, #0
 8004198:	f004 fe8c 	bl	8008eb4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800419c:	2410      	movs	r4, #16
 800419e:	193b      	adds	r3, r7, r4
 80041a0:	0018      	movs	r0, r3
 80041a2:	2334      	movs	r3, #52	@ 0x34
 80041a4:	001a      	movs	r2, r3
 80041a6:	2100      	movs	r1, #0
 80041a8:	f004 fe84 	bl	8008eb4 <memset>
  if(huart->Instance==USART1)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	4a22      	ldr	r2, [pc, #136]	@ (800423c <HAL_UART_MspInit+0xb8>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d13d      	bne.n	8004232 <HAL_UART_MspInit+0xae>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80041b6:	193b      	adds	r3, r7, r4
 80041b8:	2201      	movs	r2, #1
 80041ba:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80041bc:	193b      	adds	r3, r7, r4
 80041be:	2200      	movs	r2, #0
 80041c0:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80041c2:	193b      	adds	r3, r7, r4
 80041c4:	0018      	movs	r0, r3
 80041c6:	f002 f961 	bl	800648c <HAL_RCCEx_PeriphCLKConfig>
 80041ca:	1e03      	subs	r3, r0, #0
 80041cc:	d001      	beq.n	80041d2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80041ce:	f7ff fdf7 	bl	8003dc0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80041d2:	4b1b      	ldr	r3, [pc, #108]	@ (8004240 <HAL_UART_MspInit+0xbc>)
 80041d4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80041d6:	4b1a      	ldr	r3, [pc, #104]	@ (8004240 <HAL_UART_MspInit+0xbc>)
 80041d8:	2180      	movs	r1, #128	@ 0x80
 80041da:	01c9      	lsls	r1, r1, #7
 80041dc:	430a      	orrs	r2, r1
 80041de:	641a      	str	r2, [r3, #64]	@ 0x40
 80041e0:	4b17      	ldr	r3, [pc, #92]	@ (8004240 <HAL_UART_MspInit+0xbc>)
 80041e2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80041e4:	2380      	movs	r3, #128	@ 0x80
 80041e6:	01db      	lsls	r3, r3, #7
 80041e8:	4013      	ands	r3, r2
 80041ea:	60fb      	str	r3, [r7, #12]
 80041ec:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80041ee:	4b14      	ldr	r3, [pc, #80]	@ (8004240 <HAL_UART_MspInit+0xbc>)
 80041f0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80041f2:	4b13      	ldr	r3, [pc, #76]	@ (8004240 <HAL_UART_MspInit+0xbc>)
 80041f4:	2104      	movs	r1, #4
 80041f6:	430a      	orrs	r2, r1
 80041f8:	635a      	str	r2, [r3, #52]	@ 0x34
 80041fa:	4b11      	ldr	r3, [pc, #68]	@ (8004240 <HAL_UART_MspInit+0xbc>)
 80041fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80041fe:	2204      	movs	r2, #4
 8004200:	4013      	ands	r3, r2
 8004202:	60bb      	str	r3, [r7, #8]
 8004204:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8004206:	2144      	movs	r1, #68	@ 0x44
 8004208:	187b      	adds	r3, r7, r1
 800420a:	2230      	movs	r2, #48	@ 0x30
 800420c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800420e:	187b      	adds	r3, r7, r1
 8004210:	2202      	movs	r2, #2
 8004212:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004214:	187b      	adds	r3, r7, r1
 8004216:	2200      	movs	r2, #0
 8004218:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800421a:	187b      	adds	r3, r7, r1
 800421c:	2200      	movs	r2, #0
 800421e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8004220:	187b      	adds	r3, r7, r1
 8004222:	2201      	movs	r2, #1
 8004224:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004226:	187b      	adds	r3, r7, r1
 8004228:	4a06      	ldr	r2, [pc, #24]	@ (8004244 <HAL_UART_MspInit+0xc0>)
 800422a:	0019      	movs	r1, r3
 800422c:	0010      	movs	r0, r2
 800422e:	f001 fa7f 	bl	8005730 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8004232:	46c0      	nop			@ (mov r8, r8)
 8004234:	46bd      	mov	sp, r7
 8004236:	b017      	add	sp, #92	@ 0x5c
 8004238:	bd90      	pop	{r4, r7, pc}
 800423a:	46c0      	nop			@ (mov r8, r8)
 800423c:	40013800 	.word	0x40013800
 8004240:	40021000 	.word	0x40021000
 8004244:	50000800 	.word	0x50000800

08004248 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800424c:	46c0      	nop			@ (mov r8, r8)
 800424e:	e7fd      	b.n	800424c <NMI_Handler+0x4>

08004250 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004250:	b580      	push	{r7, lr}
 8004252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004254:	46c0      	nop			@ (mov r8, r8)
 8004256:	e7fd      	b.n	8004254 <HardFault_Handler+0x4>

08004258 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800425c:	46c0      	nop			@ (mov r8, r8)
 800425e:	46bd      	mov	sp, r7
 8004260:	bd80      	pop	{r7, pc}

08004262 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004262:	b580      	push	{r7, lr}
 8004264:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004266:	46c0      	nop			@ (mov r8, r8)
 8004268:	46bd      	mov	sp, r7
 800426a:	bd80      	pop	{r7, pc}

0800426c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800426c:	b580      	push	{r7, lr}
 800426e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004270:	f000 f89c 	bl	80043ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004274:	46c0      	nop			@ (mov r8, r8)
 8004276:	46bd      	mov	sp, r7
 8004278:	bd80      	pop	{r7, pc}

0800427a <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800427a:	b580      	push	{r7, lr}
 800427c:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800427e:	46c0      	nop			@ (mov r8, r8)
 8004280:	46bd      	mov	sp, r7
 8004282:	bd80      	pop	{r7, pc}

08004284 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004284:	480d      	ldr	r0, [pc, #52]	@ (80042bc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8004286:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8004288:	f7ff fff7 	bl	800427a <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800428c:	480c      	ldr	r0, [pc, #48]	@ (80042c0 <LoopForever+0x6>)
  ldr r1, =_edata
 800428e:	490d      	ldr	r1, [pc, #52]	@ (80042c4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8004290:	4a0d      	ldr	r2, [pc, #52]	@ (80042c8 <LoopForever+0xe>)
  movs r3, #0
 8004292:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004294:	e002      	b.n	800429c <LoopCopyDataInit>

08004296 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004296:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004298:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800429a:	3304      	adds	r3, #4

0800429c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800429c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800429e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80042a0:	d3f9      	bcc.n	8004296 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80042a2:	4a0a      	ldr	r2, [pc, #40]	@ (80042cc <LoopForever+0x12>)
  ldr r4, =_ebss
 80042a4:	4c0a      	ldr	r4, [pc, #40]	@ (80042d0 <LoopForever+0x16>)
  movs r3, #0
 80042a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80042a8:	e001      	b.n	80042ae <LoopFillZerobss>

080042aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80042aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80042ac:	3204      	adds	r2, #4

080042ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80042ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80042b0:	d3fb      	bcc.n	80042aa <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80042b2:	f004 fe0d 	bl	8008ed0 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80042b6:	f7ff f9b5 	bl	8003624 <main>

080042ba <LoopForever>:

LoopForever:
  b LoopForever
 80042ba:	e7fe      	b.n	80042ba <LoopForever>
  ldr   r0, =_estack
 80042bc:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 80042c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80042c4:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 80042c8:	080091c0 	.word	0x080091c0
  ldr r2, =_sbss
 80042cc:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 80042d0:	200003fc 	.word	0x200003fc

080042d4 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80042d4:	e7fe      	b.n	80042d4 <ADC1_COMP_IRQHandler>
	...

080042d8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b082      	sub	sp, #8
 80042dc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80042de:	1dfb      	adds	r3, r7, #7
 80042e0:	2200      	movs	r2, #0
 80042e2:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80042e4:	4b0b      	ldr	r3, [pc, #44]	@ (8004314 <HAL_Init+0x3c>)
 80042e6:	681a      	ldr	r2, [r3, #0]
 80042e8:	4b0a      	ldr	r3, [pc, #40]	@ (8004314 <HAL_Init+0x3c>)
 80042ea:	2180      	movs	r1, #128	@ 0x80
 80042ec:	0049      	lsls	r1, r1, #1
 80042ee:	430a      	orrs	r2, r1
 80042f0:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80042f2:	2003      	movs	r0, #3
 80042f4:	f000 f810 	bl	8004318 <HAL_InitTick>
 80042f8:	1e03      	subs	r3, r0, #0
 80042fa:	d003      	beq.n	8004304 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80042fc:	1dfb      	adds	r3, r7, #7
 80042fe:	2201      	movs	r2, #1
 8004300:	701a      	strb	r2, [r3, #0]
 8004302:	e001      	b.n	8004308 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8004304:	f7ff fd92 	bl	8003e2c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004308:	1dfb      	adds	r3, r7, #7
 800430a:	781b      	ldrb	r3, [r3, #0]
}
 800430c:	0018      	movs	r0, r3
 800430e:	46bd      	mov	sp, r7
 8004310:	b002      	add	sp, #8
 8004312:	bd80      	pop	{r7, pc}
 8004314:	40022000 	.word	0x40022000

08004318 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004318:	b590      	push	{r4, r7, lr}
 800431a:	b085      	sub	sp, #20
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8004320:	230f      	movs	r3, #15
 8004322:	18fb      	adds	r3, r7, r3
 8004324:	2200      	movs	r2, #0
 8004326:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8004328:	4b1d      	ldr	r3, [pc, #116]	@ (80043a0 <HAL_InitTick+0x88>)
 800432a:	781b      	ldrb	r3, [r3, #0]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d02b      	beq.n	8004388 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8004330:	4b1c      	ldr	r3, [pc, #112]	@ (80043a4 <HAL_InitTick+0x8c>)
 8004332:	681c      	ldr	r4, [r3, #0]
 8004334:	4b1a      	ldr	r3, [pc, #104]	@ (80043a0 <HAL_InitTick+0x88>)
 8004336:	781b      	ldrb	r3, [r3, #0]
 8004338:	0019      	movs	r1, r3
 800433a:	23fa      	movs	r3, #250	@ 0xfa
 800433c:	0098      	lsls	r0, r3, #2
 800433e:	f7fb fee1 	bl	8000104 <__udivsi3>
 8004342:	0003      	movs	r3, r0
 8004344:	0019      	movs	r1, r3
 8004346:	0020      	movs	r0, r4
 8004348:	f7fb fedc 	bl	8000104 <__udivsi3>
 800434c:	0003      	movs	r3, r0
 800434e:	0018      	movs	r0, r3
 8004350:	f001 f9e1 	bl	8005716 <HAL_SYSTICK_Config>
 8004354:	1e03      	subs	r3, r0, #0
 8004356:	d112      	bne.n	800437e <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2b03      	cmp	r3, #3
 800435c:	d80a      	bhi.n	8004374 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800435e:	6879      	ldr	r1, [r7, #4]
 8004360:	2301      	movs	r3, #1
 8004362:	425b      	negs	r3, r3
 8004364:	2200      	movs	r2, #0
 8004366:	0018      	movs	r0, r3
 8004368:	f001 f9c0 	bl	80056ec <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800436c:	4b0e      	ldr	r3, [pc, #56]	@ (80043a8 <HAL_InitTick+0x90>)
 800436e:	687a      	ldr	r2, [r7, #4]
 8004370:	601a      	str	r2, [r3, #0]
 8004372:	e00d      	b.n	8004390 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8004374:	230f      	movs	r3, #15
 8004376:	18fb      	adds	r3, r7, r3
 8004378:	2201      	movs	r2, #1
 800437a:	701a      	strb	r2, [r3, #0]
 800437c:	e008      	b.n	8004390 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800437e:	230f      	movs	r3, #15
 8004380:	18fb      	adds	r3, r7, r3
 8004382:	2201      	movs	r2, #1
 8004384:	701a      	strb	r2, [r3, #0]
 8004386:	e003      	b.n	8004390 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8004388:	230f      	movs	r3, #15
 800438a:	18fb      	adds	r3, r7, r3
 800438c:	2201      	movs	r2, #1
 800438e:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8004390:	230f      	movs	r3, #15
 8004392:	18fb      	adds	r3, r7, r3
 8004394:	781b      	ldrb	r3, [r3, #0]
}
 8004396:	0018      	movs	r0, r3
 8004398:	46bd      	mov	sp, r7
 800439a:	b005      	add	sp, #20
 800439c:	bd90      	pop	{r4, r7, pc}
 800439e:	46c0      	nop			@ (mov r8, r8)
 80043a0:	20000010 	.word	0x20000010
 80043a4:	20000008 	.word	0x20000008
 80043a8:	2000000c 	.word	0x2000000c

080043ac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80043b0:	4b05      	ldr	r3, [pc, #20]	@ (80043c8 <HAL_IncTick+0x1c>)
 80043b2:	781b      	ldrb	r3, [r3, #0]
 80043b4:	001a      	movs	r2, r3
 80043b6:	4b05      	ldr	r3, [pc, #20]	@ (80043cc <HAL_IncTick+0x20>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	18d2      	adds	r2, r2, r3
 80043bc:	4b03      	ldr	r3, [pc, #12]	@ (80043cc <HAL_IncTick+0x20>)
 80043be:	601a      	str	r2, [r3, #0]
}
 80043c0:	46c0      	nop			@ (mov r8, r8)
 80043c2:	46bd      	mov	sp, r7
 80043c4:	bd80      	pop	{r7, pc}
 80043c6:	46c0      	nop			@ (mov r8, r8)
 80043c8:	20000010 	.word	0x20000010
 80043cc:	200002c0 	.word	0x200002c0

080043d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	af00      	add	r7, sp, #0
  return uwTick;
 80043d4:	4b02      	ldr	r3, [pc, #8]	@ (80043e0 <HAL_GetTick+0x10>)
 80043d6:	681b      	ldr	r3, [r3, #0]
}
 80043d8:	0018      	movs	r0, r3
 80043da:	46bd      	mov	sp, r7
 80043dc:	bd80      	pop	{r7, pc}
 80043de:	46c0      	nop			@ (mov r8, r8)
 80043e0:	200002c0 	.word	0x200002c0

080043e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b084      	sub	sp, #16
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80043ec:	f7ff fff0 	bl	80043d0 <HAL_GetTick>
 80043f0:	0003      	movs	r3, r0
 80043f2:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	3301      	adds	r3, #1
 80043fc:	d005      	beq.n	800440a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80043fe:	4b0a      	ldr	r3, [pc, #40]	@ (8004428 <HAL_Delay+0x44>)
 8004400:	781b      	ldrb	r3, [r3, #0]
 8004402:	001a      	movs	r2, r3
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	189b      	adds	r3, r3, r2
 8004408:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800440a:	46c0      	nop			@ (mov r8, r8)
 800440c:	f7ff ffe0 	bl	80043d0 <HAL_GetTick>
 8004410:	0002      	movs	r2, r0
 8004412:	68bb      	ldr	r3, [r7, #8]
 8004414:	1ad3      	subs	r3, r2, r3
 8004416:	68fa      	ldr	r2, [r7, #12]
 8004418:	429a      	cmp	r2, r3
 800441a:	d8f7      	bhi.n	800440c <HAL_Delay+0x28>
  {
  }
}
 800441c:	46c0      	nop			@ (mov r8, r8)
 800441e:	46c0      	nop			@ (mov r8, r8)
 8004420:	46bd      	mov	sp, r7
 8004422:	b004      	add	sp, #16
 8004424:	bd80      	pop	{r7, pc}
 8004426:	46c0      	nop			@ (mov r8, r8)
 8004428:	20000010 	.word	0x20000010

0800442c <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b082      	sub	sp, #8
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
 8004434:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	4a05      	ldr	r2, [pc, #20]	@ (8004450 <LL_ADC_SetCommonPathInternalCh+0x24>)
 800443c:	401a      	ands	r2, r3
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	431a      	orrs	r2, r3
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	601a      	str	r2, [r3, #0]
}
 8004446:	46c0      	nop			@ (mov r8, r8)
 8004448:	46bd      	mov	sp, r7
 800444a:	b002      	add	sp, #8
 800444c:	bd80      	pop	{r7, pc}
 800444e:	46c0      	nop			@ (mov r8, r8)
 8004450:	fe3fffff 	.word	0xfe3fffff

08004454 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004454:	b580      	push	{r7, lr}
 8004456:	b082      	sub	sp, #8
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681a      	ldr	r2, [r3, #0]
 8004460:	23e0      	movs	r3, #224	@ 0xe0
 8004462:	045b      	lsls	r3, r3, #17
 8004464:	4013      	ands	r3, r2
}
 8004466:	0018      	movs	r0, r3
 8004468:	46bd      	mov	sp, r7
 800446a:	b002      	add	sp, #8
 800446c:	bd80      	pop	{r7, pc}

0800446e <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 800446e:	b580      	push	{r7, lr}
 8004470:	b084      	sub	sp, #16
 8004472:	af00      	add	r7, sp, #0
 8004474:	60f8      	str	r0, [r7, #12]
 8004476:	60b9      	str	r1, [r7, #8]
 8004478:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	695b      	ldr	r3, [r3, #20]
 800447e:	68ba      	ldr	r2, [r7, #8]
 8004480:	2104      	movs	r1, #4
 8004482:	400a      	ands	r2, r1
 8004484:	2107      	movs	r1, #7
 8004486:	4091      	lsls	r1, r2
 8004488:	000a      	movs	r2, r1
 800448a:	43d2      	mvns	r2, r2
 800448c:	401a      	ands	r2, r3
 800448e:	68bb      	ldr	r3, [r7, #8]
 8004490:	2104      	movs	r1, #4
 8004492:	400b      	ands	r3, r1
 8004494:	6879      	ldr	r1, [r7, #4]
 8004496:	4099      	lsls	r1, r3
 8004498:	000b      	movs	r3, r1
 800449a:	431a      	orrs	r2, r3
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 80044a0:	46c0      	nop			@ (mov r8, r8)
 80044a2:	46bd      	mov	sp, r7
 80044a4:	b004      	add	sp, #16
 80044a6:	bd80      	pop	{r7, pc}

080044a8 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(const ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b082      	sub	sp, #8
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
 80044b0:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	695b      	ldr	r3, [r3, #20]
 80044b6:	683a      	ldr	r2, [r7, #0]
 80044b8:	2104      	movs	r1, #4
 80044ba:	400a      	ands	r2, r1
 80044bc:	2107      	movs	r1, #7
 80044be:	4091      	lsls	r1, r2
 80044c0:	000a      	movs	r2, r1
 80044c2:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	2104      	movs	r1, #4
 80044c8:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80044ca:	40da      	lsrs	r2, r3
 80044cc:	0013      	movs	r3, r2
}
 80044ce:	0018      	movs	r0, r3
 80044d0:	46bd      	mov	sp, r7
 80044d2:	b002      	add	sp, #8
 80044d4:	bd80      	pop	{r7, pc}

080044d6 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80044d6:	b580      	push	{r7, lr}
 80044d8:	b082      	sub	sp, #8
 80044da:	af00      	add	r7, sp, #0
 80044dc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	68da      	ldr	r2, [r3, #12]
 80044e2:	23c0      	movs	r3, #192	@ 0xc0
 80044e4:	011b      	lsls	r3, r3, #4
 80044e6:	4013      	ands	r3, r2
 80044e8:	d101      	bne.n	80044ee <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80044ea:	2301      	movs	r3, #1
 80044ec:	e000      	b.n	80044f0 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80044ee:	2300      	movs	r3, #0
}
 80044f0:	0018      	movs	r0, r3
 80044f2:	46bd      	mov	sp, r7
 80044f4:	b002      	add	sp, #8
 80044f6:	bd80      	pop	{r7, pc}

080044f8 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b084      	sub	sp, #16
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	60f8      	str	r0, [r7, #12]
 8004500:	60b9      	str	r1, [r7, #8]
 8004502:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004508:	68ba      	ldr	r2, [r7, #8]
 800450a:	211f      	movs	r1, #31
 800450c:	400a      	ands	r2, r1
 800450e:	210f      	movs	r1, #15
 8004510:	4091      	lsls	r1, r2
 8004512:	000a      	movs	r2, r1
 8004514:	43d2      	mvns	r2, r2
 8004516:	401a      	ands	r2, r3
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	0e9b      	lsrs	r3, r3, #26
 800451c:	210f      	movs	r1, #15
 800451e:	4019      	ands	r1, r3
 8004520:	68bb      	ldr	r3, [r7, #8]
 8004522:	201f      	movs	r0, #31
 8004524:	4003      	ands	r3, r0
 8004526:	4099      	lsls	r1, r3
 8004528:	000b      	movs	r3, r1
 800452a:	431a      	orrs	r2, r3
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8004530:	46c0      	nop			@ (mov r8, r8)
 8004532:	46bd      	mov	sp, r7
 8004534:	b004      	add	sp, #16
 8004536:	bd80      	pop	{r7, pc}

08004538 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8004538:	b580      	push	{r7, lr}
 800453a:	b082      	sub	sp, #8
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
 8004540:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	035b      	lsls	r3, r3, #13
 800454a:	0b5b      	lsrs	r3, r3, #13
 800454c:	431a      	orrs	r2, r3
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004552:	46c0      	nop			@ (mov r8, r8)
 8004554:	46bd      	mov	sp, r7
 8004556:	b002      	add	sp, #8
 8004558:	bd80      	pop	{r7, pc}

0800455a <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 800455a:	b580      	push	{r7, lr}
 800455c:	b082      	sub	sp, #8
 800455e:	af00      	add	r7, sp, #0
 8004560:	6078      	str	r0, [r7, #4]
 8004562:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004568:	683a      	ldr	r2, [r7, #0]
 800456a:	0352      	lsls	r2, r2, #13
 800456c:	0b52      	lsrs	r2, r2, #13
 800456e:	43d2      	mvns	r2, r2
 8004570:	401a      	ands	r2, r3
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004576:	46c0      	nop			@ (mov r8, r8)
 8004578:	46bd      	mov	sp, r7
 800457a:	b002      	add	sp, #8
 800457c:	bd80      	pop	{r7, pc}
	...

08004580 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b084      	sub	sp, #16
 8004584:	af00      	add	r7, sp, #0
 8004586:	60f8      	str	r0, [r7, #12]
 8004588:	60b9      	str	r1, [r7, #8]
 800458a:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	695b      	ldr	r3, [r3, #20]
 8004590:	68ba      	ldr	r2, [r7, #8]
 8004592:	0212      	lsls	r2, r2, #8
 8004594:	43d2      	mvns	r2, r2
 8004596:	401a      	ands	r2, r3
 8004598:	68bb      	ldr	r3, [r7, #8]
 800459a:	021b      	lsls	r3, r3, #8
 800459c:	6879      	ldr	r1, [r7, #4]
 800459e:	400b      	ands	r3, r1
 80045a0:	4904      	ldr	r1, [pc, #16]	@ (80045b4 <LL_ADC_SetChannelSamplingTime+0x34>)
 80045a2:	400b      	ands	r3, r1
 80045a4:	431a      	orrs	r2, r3
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 80045aa:	46c0      	nop			@ (mov r8, r8)
 80045ac:	46bd      	mov	sp, r7
 80045ae:	b004      	add	sp, #16
 80045b0:	bd80      	pop	{r7, pc}
 80045b2:	46c0      	nop			@ (mov r8, r8)
 80045b4:	07ffff00 	.word	0x07ffff00

080045b8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b082      	sub	sp, #8
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	689b      	ldr	r3, [r3, #8]
 80045c4:	4a05      	ldr	r2, [pc, #20]	@ (80045dc <LL_ADC_EnableInternalRegulator+0x24>)
 80045c6:	4013      	ands	r3, r2
 80045c8:	2280      	movs	r2, #128	@ 0x80
 80045ca:	0552      	lsls	r2, r2, #21
 80045cc:	431a      	orrs	r2, r3
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80045d2:	46c0      	nop			@ (mov r8, r8)
 80045d4:	46bd      	mov	sp, r7
 80045d6:	b002      	add	sp, #8
 80045d8:	bd80      	pop	{r7, pc}
 80045da:	46c0      	nop			@ (mov r8, r8)
 80045dc:	6fffffe8 	.word	0x6fffffe8

080045e0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b082      	sub	sp, #8
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	689a      	ldr	r2, [r3, #8]
 80045ec:	2380      	movs	r3, #128	@ 0x80
 80045ee:	055b      	lsls	r3, r3, #21
 80045f0:	401a      	ands	r2, r3
 80045f2:	2380      	movs	r3, #128	@ 0x80
 80045f4:	055b      	lsls	r3, r3, #21
 80045f6:	429a      	cmp	r2, r3
 80045f8:	d101      	bne.n	80045fe <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 80045fa:	2301      	movs	r3, #1
 80045fc:	e000      	b.n	8004600 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 80045fe:	2300      	movs	r3, #0
}
 8004600:	0018      	movs	r0, r3
 8004602:	46bd      	mov	sp, r7
 8004604:	b002      	add	sp, #8
 8004606:	bd80      	pop	{r7, pc}

08004608 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b082      	sub	sp, #8
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	689b      	ldr	r3, [r3, #8]
 8004614:	4a04      	ldr	r2, [pc, #16]	@ (8004628 <LL_ADC_Enable+0x20>)
 8004616:	4013      	ands	r3, r2
 8004618:	2201      	movs	r2, #1
 800461a:	431a      	orrs	r2, r3
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8004620:	46c0      	nop			@ (mov r8, r8)
 8004622:	46bd      	mov	sp, r7
 8004624:	b002      	add	sp, #8
 8004626:	bd80      	pop	{r7, pc}
 8004628:	7fffffe8 	.word	0x7fffffe8

0800462c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 800462c:	b580      	push	{r7, lr}
 800462e:	b082      	sub	sp, #8
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	689b      	ldr	r3, [r3, #8]
 8004638:	4a04      	ldr	r2, [pc, #16]	@ (800464c <LL_ADC_Disable+0x20>)
 800463a:	4013      	ands	r3, r2
 800463c:	2202      	movs	r2, #2
 800463e:	431a      	orrs	r2, r3
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8004644:	46c0      	nop			@ (mov r8, r8)
 8004646:	46bd      	mov	sp, r7
 8004648:	b002      	add	sp, #8
 800464a:	bd80      	pop	{r7, pc}
 800464c:	7fffffe8 	.word	0x7fffffe8

08004650 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8004650:	b580      	push	{r7, lr}
 8004652:	b082      	sub	sp, #8
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	689b      	ldr	r3, [r3, #8]
 800465c:	2201      	movs	r2, #1
 800465e:	4013      	ands	r3, r2
 8004660:	2b01      	cmp	r3, #1
 8004662:	d101      	bne.n	8004668 <LL_ADC_IsEnabled+0x18>
 8004664:	2301      	movs	r3, #1
 8004666:	e000      	b.n	800466a <LL_ADC_IsEnabled+0x1a>
 8004668:	2300      	movs	r3, #0
}
 800466a:	0018      	movs	r0, r3
 800466c:	46bd      	mov	sp, r7
 800466e:	b002      	add	sp, #8
 8004670:	bd80      	pop	{r7, pc}

08004672 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8004672:	b580      	push	{r7, lr}
 8004674:	b082      	sub	sp, #8
 8004676:	af00      	add	r7, sp, #0
 8004678:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	689b      	ldr	r3, [r3, #8]
 800467e:	2202      	movs	r2, #2
 8004680:	4013      	ands	r3, r2
 8004682:	2b02      	cmp	r3, #2
 8004684:	d101      	bne.n	800468a <LL_ADC_IsDisableOngoing+0x18>
 8004686:	2301      	movs	r3, #1
 8004688:	e000      	b.n	800468c <LL_ADC_IsDisableOngoing+0x1a>
 800468a:	2300      	movs	r3, #0
}
 800468c:	0018      	movs	r0, r3
 800468e:	46bd      	mov	sp, r7
 8004690:	b002      	add	sp, #8
 8004692:	bd80      	pop	{r7, pc}

08004694 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8004694:	b580      	push	{r7, lr}
 8004696:	b082      	sub	sp, #8
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	689b      	ldr	r3, [r3, #8]
 80046a0:	4a04      	ldr	r2, [pc, #16]	@ (80046b4 <LL_ADC_REG_StartConversion+0x20>)
 80046a2:	4013      	ands	r3, r2
 80046a4:	2204      	movs	r2, #4
 80046a6:	431a      	orrs	r2, r3
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80046ac:	46c0      	nop			@ (mov r8, r8)
 80046ae:	46bd      	mov	sp, r7
 80046b0:	b002      	add	sp, #8
 80046b2:	bd80      	pop	{r7, pc}
 80046b4:	7fffffe8 	.word	0x7fffffe8

080046b8 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b082      	sub	sp, #8
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	689b      	ldr	r3, [r3, #8]
 80046c4:	4a04      	ldr	r2, [pc, #16]	@ (80046d8 <LL_ADC_REG_StopConversion+0x20>)
 80046c6:	4013      	ands	r3, r2
 80046c8:	2210      	movs	r2, #16
 80046ca:	431a      	orrs	r2, r3
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 80046d0:	46c0      	nop			@ (mov r8, r8)
 80046d2:	46bd      	mov	sp, r7
 80046d4:	b002      	add	sp, #8
 80046d6:	bd80      	pop	{r7, pc}
 80046d8:	7fffffe8 	.word	0x7fffffe8

080046dc <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	b082      	sub	sp, #8
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	689b      	ldr	r3, [r3, #8]
 80046e8:	2204      	movs	r2, #4
 80046ea:	4013      	ands	r3, r2
 80046ec:	2b04      	cmp	r3, #4
 80046ee:	d101      	bne.n	80046f4 <LL_ADC_REG_IsConversionOngoing+0x18>
 80046f0:	2301      	movs	r3, #1
 80046f2:	e000      	b.n	80046f6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80046f4:	2300      	movs	r3, #0
}
 80046f6:	0018      	movs	r0, r3
 80046f8:	46bd      	mov	sp, r7
 80046fa:	b002      	add	sp, #8
 80046fc:	bd80      	pop	{r7, pc}
	...

08004700 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b088      	sub	sp, #32
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004708:	231f      	movs	r3, #31
 800470a:	18fb      	adds	r3, r7, r3
 800470c:	2200      	movs	r2, #0
 800470e:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_cfgr1 = 0UL;
 8004710:	2300      	movs	r3, #0
 8004712:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr2 = 0UL;
 8004714:	2300      	movs	r3, #0
 8004716:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8004718:	2300      	movs	r3, #0
 800471a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d101      	bne.n	8004726 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8004722:	2301      	movs	r3, #1
 8004724:	e17f      	b.n	8004a26 <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800472a:	2b00      	cmp	r3, #0
 800472c:	d10a      	bne.n	8004744 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	0018      	movs	r0, r3
 8004732:	f7ff fb9f 	bl	8003e74 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2200      	movs	r2, #0
 800473a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2254      	movs	r2, #84	@ 0x54
 8004740:	2100      	movs	r1, #0
 8004742:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	0018      	movs	r0, r3
 800474a:	f7ff ff49 	bl	80045e0 <LL_ADC_IsInternalRegulatorEnabled>
 800474e:	1e03      	subs	r3, r0, #0
 8004750:	d115      	bne.n	800477e <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	0018      	movs	r0, r3
 8004758:	f7ff ff2e 	bl	80045b8 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800475c:	4bb4      	ldr	r3, [pc, #720]	@ (8004a30 <HAL_ADC_Init+0x330>)
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	49b4      	ldr	r1, [pc, #720]	@ (8004a34 <HAL_ADC_Init+0x334>)
 8004762:	0018      	movs	r0, r3
 8004764:	f7fb fcce 	bl	8000104 <__udivsi3>
 8004768:	0003      	movs	r3, r0
 800476a:	3301      	adds	r3, #1
 800476c:	005b      	lsls	r3, r3, #1
 800476e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004770:	e002      	b.n	8004778 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	3b01      	subs	r3, #1
 8004776:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d1f9      	bne.n	8004772 <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	0018      	movs	r0, r3
 8004784:	f7ff ff2c 	bl	80045e0 <LL_ADC_IsInternalRegulatorEnabled>
 8004788:	1e03      	subs	r3, r0, #0
 800478a:	d10f      	bne.n	80047ac <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004790:	2210      	movs	r2, #16
 8004792:	431a      	orrs	r2, r3
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800479c:	2201      	movs	r2, #1
 800479e:	431a      	orrs	r2, r3
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80047a4:	231f      	movs	r3, #31
 80047a6:	18fb      	adds	r3, r7, r3
 80047a8:	2201      	movs	r2, #1
 80047aa:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	0018      	movs	r0, r3
 80047b2:	f7ff ff93 	bl	80046dc <LL_ADC_REG_IsConversionOngoing>
 80047b6:	0003      	movs	r3, r0
 80047b8:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047be:	2210      	movs	r2, #16
 80047c0:	4013      	ands	r3, r2
 80047c2:	d000      	beq.n	80047c6 <HAL_ADC_Init+0xc6>
 80047c4:	e122      	b.n	8004a0c <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80047c6:	693b      	ldr	r3, [r7, #16]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d000      	beq.n	80047ce <HAL_ADC_Init+0xce>
 80047cc:	e11e      	b.n	8004a0c <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047d2:	4a99      	ldr	r2, [pc, #612]	@ (8004a38 <HAL_ADC_Init+0x338>)
 80047d4:	4013      	ands	r3, r2
 80047d6:	2202      	movs	r2, #2
 80047d8:	431a      	orrs	r2, r3
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	0018      	movs	r0, r3
 80047e4:	f7ff ff34 	bl	8004650 <LL_ADC_IsEnabled>
 80047e8:	1e03      	subs	r3, r0, #0
 80047ea:	d000      	beq.n	80047ee <HAL_ADC_Init+0xee>
 80047ec:	e0ad      	b.n	800494a <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	689a      	ldr	r2, [r3, #8]
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	7e1b      	ldrb	r3, [r3, #24]
 80047f6:	039b      	lsls	r3, r3, #14
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 80047f8:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	7e5b      	ldrb	r3, [r3, #25]
 80047fe:	03db      	lsls	r3, r3, #15
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8004800:	431a      	orrs	r2, r3
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	7e9b      	ldrb	r3, [r3, #26]
 8004806:	035b      	lsls	r3, r3, #13
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8004808:	431a      	orrs	r2, r3
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800480e:	2b00      	cmp	r3, #0
 8004810:	d002      	beq.n	8004818 <HAL_ADC_Init+0x118>
 8004812:	2380      	movs	r3, #128	@ 0x80
 8004814:	015b      	lsls	r3, r3, #5
 8004816:	e000      	b.n	800481a <HAL_ADC_Init+0x11a>
 8004818:	2300      	movs	r3, #0
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800481a:	431a      	orrs	r2, r3
                    hadc->Init.DataAlign                                           |
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	68db      	ldr	r3, [r3, #12]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8004820:	431a      	orrs	r2, r3
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	691b      	ldr	r3, [r3, #16]
 8004826:	2b00      	cmp	r3, #0
 8004828:	da04      	bge.n	8004834 <HAL_ADC_Init+0x134>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	691b      	ldr	r3, [r3, #16]
 800482e:	005b      	lsls	r3, r3, #1
 8004830:	085b      	lsrs	r3, r3, #1
 8004832:	e001      	b.n	8004838 <HAL_ADC_Init+0x138>
 8004834:	2380      	movs	r3, #128	@ 0x80
 8004836:	039b      	lsls	r3, r3, #14
                    hadc->Init.DataAlign                                           |
 8004838:	431a      	orrs	r2, r3
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	212c      	movs	r1, #44	@ 0x2c
 800483e:	5c5b      	ldrb	r3, [r3, r1]
 8004840:	005b      	lsls	r3, r3, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8004842:	4313      	orrs	r3, r2
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8004844:	69ba      	ldr	r2, [r7, #24]
 8004846:	4313      	orrs	r3, r2
 8004848:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2220      	movs	r2, #32
 800484e:	5c9b      	ldrb	r3, [r3, r2]
 8004850:	2b01      	cmp	r3, #1
 8004852:	d115      	bne.n	8004880 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	7e9b      	ldrb	r3, [r3, #26]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d105      	bne.n	8004868 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 800485c:	69bb      	ldr	r3, [r7, #24]
 800485e:	2280      	movs	r2, #128	@ 0x80
 8004860:	0252      	lsls	r2, r2, #9
 8004862:	4313      	orrs	r3, r2
 8004864:	61bb      	str	r3, [r7, #24]
 8004866:	e00b      	b.n	8004880 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800486c:	2220      	movs	r2, #32
 800486e:	431a      	orrs	r2, r3
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004878:	2201      	movs	r2, #1
 800487a:	431a      	orrs	r2, r3
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004884:	2b00      	cmp	r3, #0
 8004886:	d00a      	beq.n	800489e <HAL_ADC_Init+0x19e>
      {
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800488c:	23e0      	movs	r3, #224	@ 0xe0
 800488e:	005b      	lsls	r3, r3, #1
 8004890:	401a      	ands	r2, r3
                      hadc->Init.ExternalTrigConvEdge);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8004896:	4313      	orrs	r3, r2
 8004898:	69ba      	ldr	r2, [r7, #24]
 800489a:	4313      	orrs	r3, r2
 800489c:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	68db      	ldr	r3, [r3, #12]
 80048a4:	4a65      	ldr	r2, [pc, #404]	@ (8004a3c <HAL_ADC_Init+0x33c>)
 80048a6:	4013      	ands	r3, r2
 80048a8:	0019      	movs	r1, r3
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	69ba      	ldr	r2, [r7, #24]
 80048b0:	430a      	orrs	r2, r1
 80048b2:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN     |
                 ADC_CFGR1_SCANDIR   |
                 ADC_CFGR1_DMACFG,
                 tmp_cfgr1);

      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	685b      	ldr	r3, [r3, #4]
 80048b8:	0f9b      	lsrs	r3, r3, #30
 80048ba:	079a      	lsls	r2, r3, #30
                    hadc->Init.TriggerFrequencyMode
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80048c0:	4313      	orrs	r3, r2
 80048c2:	697a      	ldr	r2, [r7, #20]
 80048c4:	4313      	orrs	r3, r2
 80048c6:	617b      	str	r3, [r7, #20]
                   );

      if (hadc->Init.OversamplingMode == ENABLE)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	223c      	movs	r2, #60	@ 0x3c
 80048cc:	5c9b      	ldrb	r3, [r3, r2]
 80048ce:	2b01      	cmp	r3, #1
 80048d0:	d111      	bne.n	80048f6 <HAL_ADC_Init+0x1f6>
      {
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	685b      	ldr	r3, [r3, #4]
 80048d6:	0f9b      	lsrs	r3, r3, #30
 80048d8:	079a      	lsls	r2, r3, #30
                      hadc->Init.Oversampling.Ratio         |
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80048de:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.RightBitShift |
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                      hadc->Init.Oversampling.Ratio         |
 80048e4:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.TriggeredMode
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                      hadc->Init.Oversampling.RightBitShift |
 80048ea:	431a      	orrs	r2, r3
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 80048ec:	697b      	ldr	r3, [r7, #20]
 80048ee:	4313      	orrs	r3, r2
 80048f0:	2201      	movs	r2, #1
 80048f2:	4313      	orrs	r3, r2
 80048f4:	617b      	str	r3, [r7, #20]
                     );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	691b      	ldr	r3, [r3, #16]
 80048fc:	4a50      	ldr	r2, [pc, #320]	@ (8004a40 <HAL_ADC_Init+0x340>)
 80048fe:	4013      	ands	r3, r2
 8004900:	0019      	movs	r1, r3
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	697a      	ldr	r2, [r7, #20]
 8004908:	430a      	orrs	r2, r1
 800490a:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmp_cfgr2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	685a      	ldr	r2, [r3, #4]
 8004910:	23c0      	movs	r3, #192	@ 0xc0
 8004912:	061b      	lsls	r3, r3, #24
 8004914:	429a      	cmp	r2, r3
 8004916:	d018      	beq.n	800494a <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 800491c:	2380      	movs	r3, #128	@ 0x80
 800491e:	05db      	lsls	r3, r3, #23
 8004920:	429a      	cmp	r2, r3
 8004922:	d012      	beq.n	800494a <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8004928:	2380      	movs	r3, #128	@ 0x80
 800492a:	061b      	lsls	r3, r3, #24
 800492c:	429a      	cmp	r2, r3
 800492e:	d00c      	beq.n	800494a <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8004930:	4b44      	ldr	r3, [pc, #272]	@ (8004a44 <HAL_ADC_Init+0x344>)
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	4a44      	ldr	r2, [pc, #272]	@ (8004a48 <HAL_ADC_Init+0x348>)
 8004936:	4013      	ands	r3, r2
 8004938:	0019      	movs	r1, r3
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	685a      	ldr	r2, [r3, #4]
 800493e:	23f0      	movs	r3, #240	@ 0xf0
 8004940:	039b      	lsls	r3, r3, #14
 8004942:	401a      	ands	r2, r3
 8004944:	4b3f      	ldr	r3, [pc, #252]	@ (8004a44 <HAL_ADC_Init+0x344>)
 8004946:	430a      	orrs	r2, r1
 8004948:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6818      	ldr	r0, [r3, #0]
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004952:	001a      	movs	r2, r3
 8004954:	2100      	movs	r1, #0
 8004956:	f7ff fd8a 	bl	800446e <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6818      	ldr	r0, [r3, #0]
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004962:	493a      	ldr	r1, [pc, #232]	@ (8004a4c <HAL_ADC_Init+0x34c>)
 8004964:	001a      	movs	r2, r3
 8004966:	f7ff fd82 	bl	800446e <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	691b      	ldr	r3, [r3, #16]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d109      	bne.n	8004986 <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	2110      	movs	r1, #16
 800497e:	4249      	negs	r1, r1
 8004980:	430a      	orrs	r2, r1
 8004982:	629a      	str	r2, [r3, #40]	@ 0x28
 8004984:	e018      	b.n	80049b8 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	691a      	ldr	r2, [r3, #16]
 800498a:	2380      	movs	r3, #128	@ 0x80
 800498c:	039b      	lsls	r3, r3, #14
 800498e:	429a      	cmp	r2, r3
 8004990:	d112      	bne.n	80049b8 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	69db      	ldr	r3, [r3, #28]
 800499c:	3b01      	subs	r3, #1
 800499e:	009b      	lsls	r3, r3, #2
 80049a0:	221c      	movs	r2, #28
 80049a2:	4013      	ands	r3, r2
 80049a4:	2210      	movs	r2, #16
 80049a6:	4252      	negs	r2, r2
 80049a8:	409a      	lsls	r2, r3
 80049aa:	0011      	movs	r1, r2
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	430a      	orrs	r2, r1
 80049b6:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	2100      	movs	r1, #0
 80049be:	0018      	movs	r0, r3
 80049c0:	f7ff fd72 	bl	80044a8 <LL_ADC_GetSamplingTimeCommonChannels>
 80049c4:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80049ca:	429a      	cmp	r2, r3
 80049cc:	d10b      	bne.n	80049e6 <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2200      	movs	r2, #0
 80049d2:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049d8:	2203      	movs	r2, #3
 80049da:	4393      	bics	r3, r2
 80049dc:	2201      	movs	r2, #1
 80049de:	431a      	orrs	r2, r3
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	659a      	str	r2, [r3, #88]	@ 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80049e4:	e01c      	b.n	8004a20 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049ea:	2212      	movs	r2, #18
 80049ec:	4393      	bics	r3, r2
 80049ee:	2210      	movs	r2, #16
 80049f0:	431a      	orrs	r2, r3
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049fa:	2201      	movs	r2, #1
 80049fc:	431a      	orrs	r2, r3
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 8004a02:	231f      	movs	r3, #31
 8004a04:	18fb      	adds	r3, r7, r3
 8004a06:	2201      	movs	r2, #1
 8004a08:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8004a0a:	e009      	b.n	8004a20 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a10:	2210      	movs	r2, #16
 8004a12:	431a      	orrs	r2, r3
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8004a18:	231f      	movs	r3, #31
 8004a1a:	18fb      	adds	r3, r7, r3
 8004a1c:	2201      	movs	r2, #1
 8004a1e:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8004a20:	231f      	movs	r3, #31
 8004a22:	18fb      	adds	r3, r7, r3
 8004a24:	781b      	ldrb	r3, [r3, #0]
}
 8004a26:	0018      	movs	r0, r3
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	b008      	add	sp, #32
 8004a2c:	bd80      	pop	{r7, pc}
 8004a2e:	46c0      	nop			@ (mov r8, r8)
 8004a30:	20000008 	.word	0x20000008
 8004a34:	00030d40 	.word	0x00030d40
 8004a38:	fffffefd 	.word	0xfffffefd
 8004a3c:	ffde0201 	.word	0xffde0201
 8004a40:	1ffffc02 	.word	0x1ffffc02
 8004a44:	40012708 	.word	0x40012708
 8004a48:	ffc3ffff 	.word	0xffc3ffff
 8004a4c:	07ffff04 	.word	0x07ffff04

08004a50 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8004a50:	b5b0      	push	{r4, r5, r7, lr}
 8004a52:	b084      	sub	sp, #16
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	0018      	movs	r0, r3
 8004a5e:	f7ff fe3d 	bl	80046dc <LL_ADC_REG_IsConversionOngoing>
 8004a62:	1e03      	subs	r3, r0, #0
 8004a64:	d135      	bne.n	8004ad2 <HAL_ADC_Start+0x82>
  {
    __HAL_LOCK(hadc);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2254      	movs	r2, #84	@ 0x54
 8004a6a:	5c9b      	ldrb	r3, [r3, r2]
 8004a6c:	2b01      	cmp	r3, #1
 8004a6e:	d101      	bne.n	8004a74 <HAL_ADC_Start+0x24>
 8004a70:	2302      	movs	r3, #2
 8004a72:	e035      	b.n	8004ae0 <HAL_ADC_Start+0x90>
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2254      	movs	r2, #84	@ 0x54
 8004a78:	2101      	movs	r1, #1
 8004a7a:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8004a7c:	250f      	movs	r5, #15
 8004a7e:	197c      	adds	r4, r7, r5
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	0018      	movs	r0, r3
 8004a84:	f000 fb28 	bl	80050d8 <ADC_Enable>
 8004a88:	0003      	movs	r3, r0
 8004a8a:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8004a8c:	197b      	adds	r3, r7, r5
 8004a8e:	781b      	ldrb	r3, [r3, #0]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d119      	bne.n	8004ac8 <HAL_ADC_Start+0x78>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a98:	4a13      	ldr	r2, [pc, #76]	@ (8004ae8 <HAL_ADC_Start+0x98>)
 8004a9a:	4013      	ands	r3, r2
 8004a9c:	2280      	movs	r2, #128	@ 0x80
 8004a9e:	0052      	lsls	r2, r2, #1
 8004aa0:	431a      	orrs	r2, r3
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	221c      	movs	r2, #28
 8004ab2:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2254      	movs	r2, #84	@ 0x54
 8004ab8:	2100      	movs	r1, #0
 8004aba:	5499      	strb	r1, [r3, r2]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	0018      	movs	r0, r3
 8004ac2:	f7ff fde7 	bl	8004694 <LL_ADC_REG_StartConversion>
 8004ac6:	e008      	b.n	8004ada <HAL_ADC_Start+0x8a>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2254      	movs	r2, #84	@ 0x54
 8004acc:	2100      	movs	r1, #0
 8004ace:	5499      	strb	r1, [r3, r2]
 8004ad0:	e003      	b.n	8004ada <HAL_ADC_Start+0x8a>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004ad2:	230f      	movs	r3, #15
 8004ad4:	18fb      	adds	r3, r7, r3
 8004ad6:	2202      	movs	r2, #2
 8004ad8:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8004ada:	230f      	movs	r3, #15
 8004adc:	18fb      	adds	r3, r7, r3
 8004ade:	781b      	ldrb	r3, [r3, #0]
}
 8004ae0:	0018      	movs	r0, r3
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	b004      	add	sp, #16
 8004ae6:	bdb0      	pop	{r4, r5, r7, pc}
 8004ae8:	fffff0fe 	.word	0xfffff0fe

08004aec <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8004aec:	b5b0      	push	{r4, r5, r7, lr}
 8004aee:	b084      	sub	sp, #16
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2254      	movs	r2, #84	@ 0x54
 8004af8:	5c9b      	ldrb	r3, [r3, r2]
 8004afa:	2b01      	cmp	r3, #1
 8004afc:	d101      	bne.n	8004b02 <HAL_ADC_Stop+0x16>
 8004afe:	2302      	movs	r3, #2
 8004b00:	e029      	b.n	8004b56 <HAL_ADC_Stop+0x6a>
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2254      	movs	r2, #84	@ 0x54
 8004b06:	2101      	movs	r1, #1
 8004b08:	5499      	strb	r1, [r3, r2]

  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8004b0a:	250f      	movs	r5, #15
 8004b0c:	197c      	adds	r4, r7, r5
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	0018      	movs	r0, r3
 8004b12:	f000 fa9f 	bl	8005054 <ADC_ConversionStop>
 8004b16:	0003      	movs	r3, r0
 8004b18:	7023      	strb	r3, [r4, #0]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8004b1a:	197b      	adds	r3, r7, r5
 8004b1c:	781b      	ldrb	r3, [r3, #0]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d112      	bne.n	8004b48 <HAL_ADC_Stop+0x5c>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8004b22:	197c      	adds	r4, r7, r5
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	0018      	movs	r0, r3
 8004b28:	f000 fb5c 	bl	80051e4 <ADC_Disable>
 8004b2c:	0003      	movs	r3, r0
 8004b2e:	7023      	strb	r3, [r4, #0]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8004b30:	197b      	adds	r3, r7, r5
 8004b32:	781b      	ldrb	r3, [r3, #0]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d107      	bne.n	8004b48 <HAL_ADC_Stop+0x5c>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b3c:	4a08      	ldr	r2, [pc, #32]	@ (8004b60 <HAL_ADC_Stop+0x74>)
 8004b3e:	4013      	ands	r3, r2
 8004b40:	2201      	movs	r2, #1
 8004b42:	431a      	orrs	r2, r3
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_REG_BUSY,
                        HAL_ADC_STATE_READY);
    }
  }

  __HAL_UNLOCK(hadc);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2254      	movs	r2, #84	@ 0x54
 8004b4c:	2100      	movs	r1, #0
 8004b4e:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8004b50:	230f      	movs	r3, #15
 8004b52:	18fb      	adds	r3, r7, r3
 8004b54:	781b      	ldrb	r3, [r3, #0]
}
 8004b56:	0018      	movs	r0, r3
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	b004      	add	sp, #16
 8004b5c:	bdb0      	pop	{r4, r5, r7, pc}
 8004b5e:	46c0      	nop			@ (mov r8, r8)
 8004b60:	fffffefe 	.word	0xfffffefe

08004b64 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b084      	sub	sp, #16
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
 8004b6c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	695b      	ldr	r3, [r3, #20]
 8004b72:	2b08      	cmp	r3, #8
 8004b74:	d102      	bne.n	8004b7c <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 8004b76:	2308      	movs	r3, #8
 8004b78:	60fb      	str	r3, [r7, #12]
 8004b7a:	e00f      	b.n	8004b9c <HAL_ADC_PollForConversion+0x38>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	68db      	ldr	r3, [r3, #12]
 8004b82:	2201      	movs	r2, #1
 8004b84:	4013      	ands	r3, r2
 8004b86:	d007      	beq.n	8004b98 <HAL_ADC_PollForConversion+0x34>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b8c:	2220      	movs	r2, #32
 8004b8e:	431a      	orrs	r2, r3
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8004b94:	2301      	movs	r3, #1
 8004b96:	e072      	b.n	8004c7e <HAL_ADC_PollForConversion+0x11a>
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 8004b98:	2304      	movs	r3, #4
 8004b9a:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8004b9c:	f7ff fc18 	bl	80043d0 <HAL_GetTick>
 8004ba0:	0003      	movs	r3, r0
 8004ba2:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8004ba4:	e01f      	b.n	8004be6 <HAL_ADC_PollForConversion+0x82>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	3301      	adds	r3, #1
 8004baa:	d01c      	beq.n	8004be6 <HAL_ADC_PollForConversion+0x82>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8004bac:	f7ff fc10 	bl	80043d0 <HAL_GetTick>
 8004bb0:	0002      	movs	r2, r0
 8004bb2:	68bb      	ldr	r3, [r7, #8]
 8004bb4:	1ad3      	subs	r3, r2, r3
 8004bb6:	683a      	ldr	r2, [r7, #0]
 8004bb8:	429a      	cmp	r2, r3
 8004bba:	d302      	bcc.n	8004bc2 <HAL_ADC_PollForConversion+0x5e>
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d111      	bne.n	8004be6 <HAL_ADC_PollForConversion+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	68fa      	ldr	r2, [r7, #12]
 8004bca:	4013      	ands	r3, r2
 8004bcc:	d10b      	bne.n	8004be6 <HAL_ADC_PollForConversion+0x82>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004bd2:	2204      	movs	r2, #4
 8004bd4:	431a      	orrs	r2, r3
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	659a      	str	r2, [r3, #88]	@ 0x58

          __HAL_UNLOCK(hadc);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	2254      	movs	r2, #84	@ 0x54
 8004bde:	2100      	movs	r1, #0
 8004be0:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004be2:	2303      	movs	r3, #3
 8004be4:	e04b      	b.n	8004c7e <HAL_ADC_PollForConversion+0x11a>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	68fa      	ldr	r2, [r7, #12]
 8004bee:	4013      	ands	r3, r2
 8004bf0:	d0d9      	beq.n	8004ba6 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004bf6:	2280      	movs	r2, #128	@ 0x80
 8004bf8:	0092      	lsls	r2, r2, #2
 8004bfa:	431a      	orrs	r2, r3
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	0018      	movs	r0, r3
 8004c06:	f7ff fc66 	bl	80044d6 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004c0a:	1e03      	subs	r3, r0, #0
 8004c0c:	d02e      	beq.n	8004c6c <HAL_ADC_PollForConversion+0x108>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	7e9b      	ldrb	r3, [r3, #26]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d12a      	bne.n	8004c6c <HAL_ADC_PollForConversion+0x108>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	2208      	movs	r2, #8
 8004c1e:	4013      	ands	r3, r2
 8004c20:	2b08      	cmp	r3, #8
 8004c22:	d123      	bne.n	8004c6c <HAL_ADC_PollForConversion+0x108>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	0018      	movs	r0, r3
 8004c2a:	f7ff fd57 	bl	80046dc <LL_ADC_REG_IsConversionOngoing>
 8004c2e:	1e03      	subs	r3, r0, #0
 8004c30:	d110      	bne.n	8004c54 <HAL_ADC_PollForConversion+0xf0>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	685a      	ldr	r2, [r3, #4]
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	210c      	movs	r1, #12
 8004c3e:	438a      	bics	r2, r1
 8004c40:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c46:	4a10      	ldr	r2, [pc, #64]	@ (8004c88 <HAL_ADC_PollForConversion+0x124>)
 8004c48:	4013      	ands	r3, r2
 8004c4a:	2201      	movs	r2, #1
 8004c4c:	431a      	orrs	r2, r3
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	659a      	str	r2, [r3, #88]	@ 0x58
 8004c52:	e00b      	b.n	8004c6c <HAL_ADC_PollForConversion+0x108>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c58:	2220      	movs	r2, #32
 8004c5a:	431a      	orrs	r2, r3
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c64:	2201      	movs	r2, #1
 8004c66:	431a      	orrs	r2, r3
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	7e1b      	ldrb	r3, [r3, #24]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d103      	bne.n	8004c7c <HAL_ADC_PollForConversion+0x118>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	220c      	movs	r2, #12
 8004c7a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004c7c:	2300      	movs	r3, #0
}
 8004c7e:	0018      	movs	r0, r3
 8004c80:	46bd      	mov	sp, r7
 8004c82:	b004      	add	sp, #16
 8004c84:	bd80      	pop	{r7, pc}
 8004c86:	46c0      	nop			@ (mov r8, r8)
 8004c88:	fffffefe 	.word	0xfffffefe

08004c8c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b082      	sub	sp, #8
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8004c9a:	0018      	movs	r0, r3
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	b002      	add	sp, #8
 8004ca0:	bd80      	pop	{r7, pc}
	...

08004ca4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b086      	sub	sp, #24
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
 8004cac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004cae:	2317      	movs	r3, #23
 8004cb0:	18fb      	adds	r3, r7, r3
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2254      	movs	r2, #84	@ 0x54
 8004cbe:	5c9b      	ldrb	r3, [r3, r2]
 8004cc0:	2b01      	cmp	r3, #1
 8004cc2:	d101      	bne.n	8004cc8 <HAL_ADC_ConfigChannel+0x24>
 8004cc4:	2302      	movs	r3, #2
 8004cc6:	e1c0      	b.n	800504a <HAL_ADC_ConfigChannel+0x3a6>
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2254      	movs	r2, #84	@ 0x54
 8004ccc:	2101      	movs	r1, #1
 8004cce:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	0018      	movs	r0, r3
 8004cd6:	f7ff fd01 	bl	80046dc <LL_ADC_REG_IsConversionOngoing>
 8004cda:	1e03      	subs	r3, r0, #0
 8004cdc:	d000      	beq.n	8004ce0 <HAL_ADC_ConfigChannel+0x3c>
 8004cde:	e1a3      	b.n	8005028 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	685b      	ldr	r3, [r3, #4]
 8004ce4:	2b02      	cmp	r3, #2
 8004ce6:	d100      	bne.n	8004cea <HAL_ADC_ConfigChannel+0x46>
 8004ce8:	e143      	b.n	8004f72 <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	691a      	ldr	r2, [r3, #16]
 8004cee:	2380      	movs	r3, #128	@ 0x80
 8004cf0:	061b      	lsls	r3, r3, #24
 8004cf2:	429a      	cmp	r2, r3
 8004cf4:	d004      	beq.n	8004d00 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8004cfa:	4ac1      	ldr	r2, [pc, #772]	@ (8005000 <HAL_ADC_ConfigChannel+0x35c>)
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d108      	bne.n	8004d12 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681a      	ldr	r2, [r3, #0]
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	0019      	movs	r1, r3
 8004d0a:	0010      	movs	r0, r2
 8004d0c:	f7ff fc14 	bl	8004538 <LL_ADC_REG_SetSequencerChAdd>
 8004d10:	e0c9      	b.n	8004ea6 <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	685b      	ldr	r3, [r3, #4]
 8004d1a:	211f      	movs	r1, #31
 8004d1c:	400b      	ands	r3, r1
 8004d1e:	210f      	movs	r1, #15
 8004d20:	4099      	lsls	r1, r3
 8004d22:	000b      	movs	r3, r1
 8004d24:	43db      	mvns	r3, r3
 8004d26:	4013      	ands	r3, r2
 8004d28:	0019      	movs	r1, r3
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	035b      	lsls	r3, r3, #13
 8004d30:	0b5b      	lsrs	r3, r3, #13
 8004d32:	d105      	bne.n	8004d40 <HAL_ADC_ConfigChannel+0x9c>
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	0e9b      	lsrs	r3, r3, #26
 8004d3a:	221f      	movs	r2, #31
 8004d3c:	4013      	ands	r3, r2
 8004d3e:	e098      	b.n	8004e72 <HAL_ADC_ConfigChannel+0x1ce>
 8004d40:	683b      	ldr	r3, [r7, #0]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	2201      	movs	r2, #1
 8004d46:	4013      	ands	r3, r2
 8004d48:	d000      	beq.n	8004d4c <HAL_ADC_ConfigChannel+0xa8>
 8004d4a:	e091      	b.n	8004e70 <HAL_ADC_ConfigChannel+0x1cc>
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	2202      	movs	r2, #2
 8004d52:	4013      	ands	r3, r2
 8004d54:	d000      	beq.n	8004d58 <HAL_ADC_ConfigChannel+0xb4>
 8004d56:	e089      	b.n	8004e6c <HAL_ADC_ConfigChannel+0x1c8>
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	2204      	movs	r2, #4
 8004d5e:	4013      	ands	r3, r2
 8004d60:	d000      	beq.n	8004d64 <HAL_ADC_ConfigChannel+0xc0>
 8004d62:	e081      	b.n	8004e68 <HAL_ADC_ConfigChannel+0x1c4>
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	2208      	movs	r2, #8
 8004d6a:	4013      	ands	r3, r2
 8004d6c:	d000      	beq.n	8004d70 <HAL_ADC_ConfigChannel+0xcc>
 8004d6e:	e079      	b.n	8004e64 <HAL_ADC_ConfigChannel+0x1c0>
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	2210      	movs	r2, #16
 8004d76:	4013      	ands	r3, r2
 8004d78:	d000      	beq.n	8004d7c <HAL_ADC_ConfigChannel+0xd8>
 8004d7a:	e071      	b.n	8004e60 <HAL_ADC_ConfigChannel+0x1bc>
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	2220      	movs	r2, #32
 8004d82:	4013      	ands	r3, r2
 8004d84:	d000      	beq.n	8004d88 <HAL_ADC_ConfigChannel+0xe4>
 8004d86:	e069      	b.n	8004e5c <HAL_ADC_ConfigChannel+0x1b8>
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	2240      	movs	r2, #64	@ 0x40
 8004d8e:	4013      	ands	r3, r2
 8004d90:	d000      	beq.n	8004d94 <HAL_ADC_ConfigChannel+0xf0>
 8004d92:	e061      	b.n	8004e58 <HAL_ADC_ConfigChannel+0x1b4>
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	2280      	movs	r2, #128	@ 0x80
 8004d9a:	4013      	ands	r3, r2
 8004d9c:	d000      	beq.n	8004da0 <HAL_ADC_ConfigChannel+0xfc>
 8004d9e:	e059      	b.n	8004e54 <HAL_ADC_ConfigChannel+0x1b0>
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	681a      	ldr	r2, [r3, #0]
 8004da4:	2380      	movs	r3, #128	@ 0x80
 8004da6:	005b      	lsls	r3, r3, #1
 8004da8:	4013      	ands	r3, r2
 8004daa:	d151      	bne.n	8004e50 <HAL_ADC_ConfigChannel+0x1ac>
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	681a      	ldr	r2, [r3, #0]
 8004db0:	2380      	movs	r3, #128	@ 0x80
 8004db2:	009b      	lsls	r3, r3, #2
 8004db4:	4013      	ands	r3, r2
 8004db6:	d149      	bne.n	8004e4c <HAL_ADC_ConfigChannel+0x1a8>
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	681a      	ldr	r2, [r3, #0]
 8004dbc:	2380      	movs	r3, #128	@ 0x80
 8004dbe:	00db      	lsls	r3, r3, #3
 8004dc0:	4013      	ands	r3, r2
 8004dc2:	d141      	bne.n	8004e48 <HAL_ADC_ConfigChannel+0x1a4>
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	681a      	ldr	r2, [r3, #0]
 8004dc8:	2380      	movs	r3, #128	@ 0x80
 8004dca:	011b      	lsls	r3, r3, #4
 8004dcc:	4013      	ands	r3, r2
 8004dce:	d139      	bne.n	8004e44 <HAL_ADC_ConfigChannel+0x1a0>
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	681a      	ldr	r2, [r3, #0]
 8004dd4:	2380      	movs	r3, #128	@ 0x80
 8004dd6:	015b      	lsls	r3, r3, #5
 8004dd8:	4013      	ands	r3, r2
 8004dda:	d131      	bne.n	8004e40 <HAL_ADC_ConfigChannel+0x19c>
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	681a      	ldr	r2, [r3, #0]
 8004de0:	2380      	movs	r3, #128	@ 0x80
 8004de2:	019b      	lsls	r3, r3, #6
 8004de4:	4013      	ands	r3, r2
 8004de6:	d129      	bne.n	8004e3c <HAL_ADC_ConfigChannel+0x198>
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	681a      	ldr	r2, [r3, #0]
 8004dec:	2380      	movs	r3, #128	@ 0x80
 8004dee:	01db      	lsls	r3, r3, #7
 8004df0:	4013      	ands	r3, r2
 8004df2:	d121      	bne.n	8004e38 <HAL_ADC_ConfigChannel+0x194>
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	681a      	ldr	r2, [r3, #0]
 8004df8:	2380      	movs	r3, #128	@ 0x80
 8004dfa:	021b      	lsls	r3, r3, #8
 8004dfc:	4013      	ands	r3, r2
 8004dfe:	d119      	bne.n	8004e34 <HAL_ADC_ConfigChannel+0x190>
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	681a      	ldr	r2, [r3, #0]
 8004e04:	2380      	movs	r3, #128	@ 0x80
 8004e06:	025b      	lsls	r3, r3, #9
 8004e08:	4013      	ands	r3, r2
 8004e0a:	d111      	bne.n	8004e30 <HAL_ADC_ConfigChannel+0x18c>
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	681a      	ldr	r2, [r3, #0]
 8004e10:	2380      	movs	r3, #128	@ 0x80
 8004e12:	029b      	lsls	r3, r3, #10
 8004e14:	4013      	ands	r3, r2
 8004e16:	d109      	bne.n	8004e2c <HAL_ADC_ConfigChannel+0x188>
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	681a      	ldr	r2, [r3, #0]
 8004e1c:	2380      	movs	r3, #128	@ 0x80
 8004e1e:	02db      	lsls	r3, r3, #11
 8004e20:	4013      	ands	r3, r2
 8004e22:	d001      	beq.n	8004e28 <HAL_ADC_ConfigChannel+0x184>
 8004e24:	2312      	movs	r3, #18
 8004e26:	e024      	b.n	8004e72 <HAL_ADC_ConfigChannel+0x1ce>
 8004e28:	2300      	movs	r3, #0
 8004e2a:	e022      	b.n	8004e72 <HAL_ADC_ConfigChannel+0x1ce>
 8004e2c:	2311      	movs	r3, #17
 8004e2e:	e020      	b.n	8004e72 <HAL_ADC_ConfigChannel+0x1ce>
 8004e30:	2310      	movs	r3, #16
 8004e32:	e01e      	b.n	8004e72 <HAL_ADC_ConfigChannel+0x1ce>
 8004e34:	230f      	movs	r3, #15
 8004e36:	e01c      	b.n	8004e72 <HAL_ADC_ConfigChannel+0x1ce>
 8004e38:	230e      	movs	r3, #14
 8004e3a:	e01a      	b.n	8004e72 <HAL_ADC_ConfigChannel+0x1ce>
 8004e3c:	230d      	movs	r3, #13
 8004e3e:	e018      	b.n	8004e72 <HAL_ADC_ConfigChannel+0x1ce>
 8004e40:	230c      	movs	r3, #12
 8004e42:	e016      	b.n	8004e72 <HAL_ADC_ConfigChannel+0x1ce>
 8004e44:	230b      	movs	r3, #11
 8004e46:	e014      	b.n	8004e72 <HAL_ADC_ConfigChannel+0x1ce>
 8004e48:	230a      	movs	r3, #10
 8004e4a:	e012      	b.n	8004e72 <HAL_ADC_ConfigChannel+0x1ce>
 8004e4c:	2309      	movs	r3, #9
 8004e4e:	e010      	b.n	8004e72 <HAL_ADC_ConfigChannel+0x1ce>
 8004e50:	2308      	movs	r3, #8
 8004e52:	e00e      	b.n	8004e72 <HAL_ADC_ConfigChannel+0x1ce>
 8004e54:	2307      	movs	r3, #7
 8004e56:	e00c      	b.n	8004e72 <HAL_ADC_ConfigChannel+0x1ce>
 8004e58:	2306      	movs	r3, #6
 8004e5a:	e00a      	b.n	8004e72 <HAL_ADC_ConfigChannel+0x1ce>
 8004e5c:	2305      	movs	r3, #5
 8004e5e:	e008      	b.n	8004e72 <HAL_ADC_ConfigChannel+0x1ce>
 8004e60:	2304      	movs	r3, #4
 8004e62:	e006      	b.n	8004e72 <HAL_ADC_ConfigChannel+0x1ce>
 8004e64:	2303      	movs	r3, #3
 8004e66:	e004      	b.n	8004e72 <HAL_ADC_ConfigChannel+0x1ce>
 8004e68:	2302      	movs	r3, #2
 8004e6a:	e002      	b.n	8004e72 <HAL_ADC_ConfigChannel+0x1ce>
 8004e6c:	2301      	movs	r3, #1
 8004e6e:	e000      	b.n	8004e72 <HAL_ADC_ConfigChannel+0x1ce>
 8004e70:	2300      	movs	r3, #0
 8004e72:	683a      	ldr	r2, [r7, #0]
 8004e74:	6852      	ldr	r2, [r2, #4]
 8004e76:	201f      	movs	r0, #31
 8004e78:	4002      	ands	r2, r0
 8004e7a:	4093      	lsls	r3, r2
 8004e7c:	000a      	movs	r2, r1
 8004e7e:	431a      	orrs	r2, r3
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	685b      	ldr	r3, [r3, #4]
 8004e88:	089b      	lsrs	r3, r3, #2
 8004e8a:	1c5a      	adds	r2, r3, #1
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	69db      	ldr	r3, [r3, #28]
 8004e90:	429a      	cmp	r2, r3
 8004e92:	d808      	bhi.n	8004ea6 <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6818      	ldr	r0, [r3, #0]
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	6859      	ldr	r1, [r3, #4]
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	001a      	movs	r2, r3
 8004ea2:	f7ff fb29 	bl	80044f8 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6818      	ldr	r0, [r3, #0]
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	6819      	ldr	r1, [r3, #0]
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	689b      	ldr	r3, [r3, #8]
 8004eb2:	001a      	movs	r2, r3
 8004eb4:	f7ff fb64 	bl	8004580 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	db00      	blt.n	8004ec2 <HAL_ADC_ConfigChannel+0x21e>
 8004ec0:	e0bc      	b.n	800503c <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004ec2:	4b50      	ldr	r3, [pc, #320]	@ (8005004 <HAL_ADC_ConfigChannel+0x360>)
 8004ec4:	0018      	movs	r0, r3
 8004ec6:	f7ff fac5 	bl	8004454 <LL_ADC_GetCommonPathInternalCh>
 8004eca:	0003      	movs	r3, r0
 8004ecc:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	4a4d      	ldr	r2, [pc, #308]	@ (8005008 <HAL_ADC_ConfigChannel+0x364>)
 8004ed4:	4293      	cmp	r3, r2
 8004ed6:	d122      	bne.n	8004f1e <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004ed8:	693a      	ldr	r2, [r7, #16]
 8004eda:	2380      	movs	r3, #128	@ 0x80
 8004edc:	041b      	lsls	r3, r3, #16
 8004ede:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8004ee0:	d11d      	bne.n	8004f1e <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004ee2:	693b      	ldr	r3, [r7, #16]
 8004ee4:	2280      	movs	r2, #128	@ 0x80
 8004ee6:	0412      	lsls	r2, r2, #16
 8004ee8:	4313      	orrs	r3, r2
 8004eea:	4a46      	ldr	r2, [pc, #280]	@ (8005004 <HAL_ADC_ConfigChannel+0x360>)
 8004eec:	0019      	movs	r1, r3
 8004eee:	0010      	movs	r0, r2
 8004ef0:	f7ff fa9c 	bl	800442c <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004ef4:	4b45      	ldr	r3, [pc, #276]	@ (800500c <HAL_ADC_ConfigChannel+0x368>)
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	4945      	ldr	r1, [pc, #276]	@ (8005010 <HAL_ADC_ConfigChannel+0x36c>)
 8004efa:	0018      	movs	r0, r3
 8004efc:	f7fb f902 	bl	8000104 <__udivsi3>
 8004f00:	0003      	movs	r3, r0
 8004f02:	1c5a      	adds	r2, r3, #1
 8004f04:	0013      	movs	r3, r2
 8004f06:	005b      	lsls	r3, r3, #1
 8004f08:	189b      	adds	r3, r3, r2
 8004f0a:	009b      	lsls	r3, r3, #2
 8004f0c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004f0e:	e002      	b.n	8004f16 <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	3b01      	subs	r3, #1
 8004f14:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d1f9      	bne.n	8004f10 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8004f1c:	e08e      	b.n	800503c <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	4a3c      	ldr	r2, [pc, #240]	@ (8005014 <HAL_ADC_ConfigChannel+0x370>)
 8004f24:	4293      	cmp	r3, r2
 8004f26:	d10e      	bne.n	8004f46 <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004f28:	693a      	ldr	r2, [r7, #16]
 8004f2a:	2380      	movs	r3, #128	@ 0x80
 8004f2c:	045b      	lsls	r3, r3, #17
 8004f2e:	4013      	ands	r3, r2
 8004f30:	d109      	bne.n	8004f46 <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004f32:	693b      	ldr	r3, [r7, #16]
 8004f34:	2280      	movs	r2, #128	@ 0x80
 8004f36:	0452      	lsls	r2, r2, #17
 8004f38:	4313      	orrs	r3, r2
 8004f3a:	4a32      	ldr	r2, [pc, #200]	@ (8005004 <HAL_ADC_ConfigChannel+0x360>)
 8004f3c:	0019      	movs	r1, r3
 8004f3e:	0010      	movs	r0, r2
 8004f40:	f7ff fa74 	bl	800442c <LL_ADC_SetCommonPathInternalCh>
 8004f44:	e07a      	b.n	800503c <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	4a33      	ldr	r2, [pc, #204]	@ (8005018 <HAL_ADC_ConfigChannel+0x374>)
 8004f4c:	4293      	cmp	r3, r2
 8004f4e:	d000      	beq.n	8004f52 <HAL_ADC_ConfigChannel+0x2ae>
 8004f50:	e074      	b.n	800503c <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004f52:	693a      	ldr	r2, [r7, #16]
 8004f54:	2380      	movs	r3, #128	@ 0x80
 8004f56:	03db      	lsls	r3, r3, #15
 8004f58:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8004f5a:	d000      	beq.n	8004f5e <HAL_ADC_ConfigChannel+0x2ba>
 8004f5c:	e06e      	b.n	800503c <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004f5e:	693b      	ldr	r3, [r7, #16]
 8004f60:	2280      	movs	r2, #128	@ 0x80
 8004f62:	03d2      	lsls	r2, r2, #15
 8004f64:	4313      	orrs	r3, r2
 8004f66:	4a27      	ldr	r2, [pc, #156]	@ (8005004 <HAL_ADC_ConfigChannel+0x360>)
 8004f68:	0019      	movs	r1, r3
 8004f6a:	0010      	movs	r0, r2
 8004f6c:	f7ff fa5e 	bl	800442c <LL_ADC_SetCommonPathInternalCh>
 8004f70:	e064      	b.n	800503c <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	691a      	ldr	r2, [r3, #16]
 8004f76:	2380      	movs	r3, #128	@ 0x80
 8004f78:	061b      	lsls	r3, r3, #24
 8004f7a:	429a      	cmp	r2, r3
 8004f7c:	d004      	beq.n	8004f88 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8004f82:	4a1f      	ldr	r2, [pc, #124]	@ (8005000 <HAL_ADC_ConfigChannel+0x35c>)
 8004f84:	4293      	cmp	r3, r2
 8004f86:	d107      	bne.n	8004f98 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681a      	ldr	r2, [r3, #0]
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	0019      	movs	r1, r3
 8004f92:	0010      	movs	r0, r2
 8004f94:	f7ff fae1 	bl	800455a <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	da4d      	bge.n	800503c <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004fa0:	4b18      	ldr	r3, [pc, #96]	@ (8005004 <HAL_ADC_ConfigChannel+0x360>)
 8004fa2:	0018      	movs	r0, r3
 8004fa4:	f7ff fa56 	bl	8004454 <LL_ADC_GetCommonPathInternalCh>
 8004fa8:	0003      	movs	r3, r0
 8004faa:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	4a15      	ldr	r2, [pc, #84]	@ (8005008 <HAL_ADC_ConfigChannel+0x364>)
 8004fb2:	4293      	cmp	r3, r2
 8004fb4:	d108      	bne.n	8004fc8 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004fb6:	693b      	ldr	r3, [r7, #16]
 8004fb8:	4a18      	ldr	r2, [pc, #96]	@ (800501c <HAL_ADC_ConfigChannel+0x378>)
 8004fba:	4013      	ands	r3, r2
 8004fbc:	4a11      	ldr	r2, [pc, #68]	@ (8005004 <HAL_ADC_ConfigChannel+0x360>)
 8004fbe:	0019      	movs	r1, r3
 8004fc0:	0010      	movs	r0, r2
 8004fc2:	f7ff fa33 	bl	800442c <LL_ADC_SetCommonPathInternalCh>
 8004fc6:	e039      	b.n	800503c <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	4a11      	ldr	r2, [pc, #68]	@ (8005014 <HAL_ADC_ConfigChannel+0x370>)
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d108      	bne.n	8004fe4 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004fd2:	693b      	ldr	r3, [r7, #16]
 8004fd4:	4a12      	ldr	r2, [pc, #72]	@ (8005020 <HAL_ADC_ConfigChannel+0x37c>)
 8004fd6:	4013      	ands	r3, r2
 8004fd8:	4a0a      	ldr	r2, [pc, #40]	@ (8005004 <HAL_ADC_ConfigChannel+0x360>)
 8004fda:	0019      	movs	r1, r3
 8004fdc:	0010      	movs	r0, r2
 8004fde:	f7ff fa25 	bl	800442c <LL_ADC_SetCommonPathInternalCh>
 8004fe2:	e02b      	b.n	800503c <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	4a0b      	ldr	r2, [pc, #44]	@ (8005018 <HAL_ADC_ConfigChannel+0x374>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d126      	bne.n	800503c <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004fee:	693b      	ldr	r3, [r7, #16]
 8004ff0:	4a0c      	ldr	r2, [pc, #48]	@ (8005024 <HAL_ADC_ConfigChannel+0x380>)
 8004ff2:	4013      	ands	r3, r2
 8004ff4:	4a03      	ldr	r2, [pc, #12]	@ (8005004 <HAL_ADC_ConfigChannel+0x360>)
 8004ff6:	0019      	movs	r1, r3
 8004ff8:	0010      	movs	r0, r2
 8004ffa:	f7ff fa17 	bl	800442c <LL_ADC_SetCommonPathInternalCh>
 8004ffe:	e01d      	b.n	800503c <HAL_ADC_ConfigChannel+0x398>
 8005000:	80000004 	.word	0x80000004
 8005004:	40012708 	.word	0x40012708
 8005008:	b0001000 	.word	0xb0001000
 800500c:	20000008 	.word	0x20000008
 8005010:	00030d40 	.word	0x00030d40
 8005014:	b8004000 	.word	0xb8004000
 8005018:	b4002000 	.word	0xb4002000
 800501c:	ff7fffff 	.word	0xff7fffff
 8005020:	feffffff 	.word	0xfeffffff
 8005024:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800502c:	2220      	movs	r2, #32
 800502e:	431a      	orrs	r2, r3
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8005034:	2317      	movs	r3, #23
 8005036:	18fb      	adds	r3, r7, r3
 8005038:	2201      	movs	r2, #1
 800503a:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2254      	movs	r2, #84	@ 0x54
 8005040:	2100      	movs	r1, #0
 8005042:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8005044:	2317      	movs	r3, #23
 8005046:	18fb      	adds	r3, r7, r3
 8005048:	781b      	ldrb	r3, [r3, #0]
}
 800504a:	0018      	movs	r0, r3
 800504c:	46bd      	mov	sp, r7
 800504e:	b006      	add	sp, #24
 8005050:	bd80      	pop	{r7, pc}
 8005052:	46c0      	nop			@ (mov r8, r8)

08005054 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 8005054:	b580      	push	{r7, lr}
 8005056:	b084      	sub	sp, #16
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	0018      	movs	r0, r3
 8005062:	f7ff fb3b 	bl	80046dc <LL_ADC_REG_IsConversionOngoing>
 8005066:	1e03      	subs	r3, r0, #0
 8005068:	d031      	beq.n	80050ce <ADC_ConversionStop+0x7a>
  {
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	0018      	movs	r0, r3
 8005070:	f7ff faff 	bl	8004672 <LL_ADC_IsDisableOngoing>
 8005074:	1e03      	subs	r3, r0, #0
 8005076:	d104      	bne.n	8005082 <ADC_ConversionStop+0x2e>
    {
      /* Stop ADC group regular conversion */
      LL_ADC_REG_StopConversion(hadc->Instance);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	0018      	movs	r0, r3
 800507e:	f7ff fb1b 	bl	80046b8 <LL_ADC_REG_StopConversion>
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8005082:	f7ff f9a5 	bl	80043d0 <HAL_GetTick>
 8005086:	0003      	movs	r3, r0
 8005088:	60fb      	str	r3, [r7, #12]

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 800508a:	e01a      	b.n	80050c2 <ADC_ConversionStop+0x6e>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800508c:	f7ff f9a0 	bl	80043d0 <HAL_GetTick>
 8005090:	0002      	movs	r2, r0
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	1ad3      	subs	r3, r2, r3
 8005096:	2b02      	cmp	r3, #2
 8005098:	d913      	bls.n	80050c2 <ADC_ConversionStop+0x6e>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	689b      	ldr	r3, [r3, #8]
 80050a0:	2204      	movs	r2, #4
 80050a2:	4013      	ands	r3, r2
 80050a4:	d00d      	beq.n	80050c2 <ADC_ConversionStop+0x6e>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80050aa:	2210      	movs	r2, #16
 80050ac:	431a      	orrs	r2, r3
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80050b6:	2201      	movs	r2, #1
 80050b8:	431a      	orrs	r2, r3
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 80050be:	2301      	movs	r3, #1
 80050c0:	e006      	b.n	80050d0 <ADC_ConversionStop+0x7c>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	689b      	ldr	r3, [r3, #8]
 80050c8:	2204      	movs	r2, #4
 80050ca:	4013      	ands	r3, r2
 80050cc:	d1de      	bne.n	800508c <ADC_ConversionStop+0x38>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 80050ce:	2300      	movs	r3, #0
}
 80050d0:	0018      	movs	r0, r3
 80050d2:	46bd      	mov	sp, r7
 80050d4:	b004      	add	sp, #16
 80050d6:	bd80      	pop	{r7, pc}

080050d8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80050d8:	b580      	push	{r7, lr}
 80050da:	b084      	sub	sp, #16
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80050e0:	2300      	movs	r3, #0
 80050e2:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	0018      	movs	r0, r3
 80050ea:	f7ff fab1 	bl	8004650 <LL_ADC_IsEnabled>
 80050ee:	1e03      	subs	r3, r0, #0
 80050f0:	d000      	beq.n	80050f4 <ADC_Enable+0x1c>
 80050f2:	e069      	b.n	80051c8 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	689b      	ldr	r3, [r3, #8]
 80050fa:	4a36      	ldr	r2, [pc, #216]	@ (80051d4 <ADC_Enable+0xfc>)
 80050fc:	4013      	ands	r3, r2
 80050fe:	d00d      	beq.n	800511c <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005104:	2210      	movs	r2, #16
 8005106:	431a      	orrs	r2, r3
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005110:	2201      	movs	r2, #1
 8005112:	431a      	orrs	r2, r3
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8005118:	2301      	movs	r3, #1
 800511a:	e056      	b.n	80051ca <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	0018      	movs	r0, r3
 8005122:	f7ff fa71 	bl	8004608 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR)
 8005126:	4b2c      	ldr	r3, [pc, #176]	@ (80051d8 <ADC_Enable+0x100>)
 8005128:	0018      	movs	r0, r3
 800512a:	f7ff f993 	bl	8004454 <LL_ADC_GetCommonPathInternalCh>
 800512e:	0002      	movs	r2, r0
 8005130:	2380      	movs	r3, #128	@ 0x80
 8005132:	041b      	lsls	r3, r3, #16
 8005134:	4013      	ands	r3, r2
 8005136:	d00f      	beq.n	8005158 <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005138:	4b28      	ldr	r3, [pc, #160]	@ (80051dc <ADC_Enable+0x104>)
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	4928      	ldr	r1, [pc, #160]	@ (80051e0 <ADC_Enable+0x108>)
 800513e:	0018      	movs	r0, r3
 8005140:	f7fa ffe0 	bl	8000104 <__udivsi3>
 8005144:	0003      	movs	r3, r0
 8005146:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
 8005148:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800514a:	e002      	b.n	8005152 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 800514c:	68bb      	ldr	r3, [r7, #8]
 800514e:	3b01      	subs	r3, #1
 8005150:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8005152:	68bb      	ldr	r3, [r7, #8]
 8005154:	2b00      	cmp	r3, #0
 8005156:	d1f9      	bne.n	800514c <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	7e5b      	ldrb	r3, [r3, #25]
 800515c:	2b01      	cmp	r3, #1
 800515e:	d033      	beq.n	80051c8 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8005160:	f7ff f936 	bl	80043d0 <HAL_GetTick>
 8005164:	0003      	movs	r3, r0
 8005166:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005168:	e027      	b.n	80051ba <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	0018      	movs	r0, r3
 8005170:	f7ff fa6e 	bl	8004650 <LL_ADC_IsEnabled>
 8005174:	1e03      	subs	r3, r0, #0
 8005176:	d104      	bne.n	8005182 <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	0018      	movs	r0, r3
 800517e:	f7ff fa43 	bl	8004608 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005182:	f7ff f925 	bl	80043d0 <HAL_GetTick>
 8005186:	0002      	movs	r2, r0
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	1ad3      	subs	r3, r2, r3
 800518c:	2b02      	cmp	r3, #2
 800518e:	d914      	bls.n	80051ba <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	2201      	movs	r2, #1
 8005198:	4013      	ands	r3, r2
 800519a:	2b01      	cmp	r3, #1
 800519c:	d00d      	beq.n	80051ba <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80051a2:	2210      	movs	r2, #16
 80051a4:	431a      	orrs	r2, r3
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	659a      	str	r2, [r3, #88]	@ 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80051ae:	2201      	movs	r2, #1
 80051b0:	431a      	orrs	r2, r3
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	65da      	str	r2, [r3, #92]	@ 0x5c

            return HAL_ERROR;
 80051b6:	2301      	movs	r3, #1
 80051b8:	e007      	b.n	80051ca <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	2201      	movs	r2, #1
 80051c2:	4013      	ands	r3, r2
 80051c4:	2b01      	cmp	r3, #1
 80051c6:	d1d0      	bne.n	800516a <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80051c8:	2300      	movs	r3, #0
}
 80051ca:	0018      	movs	r0, r3
 80051cc:	46bd      	mov	sp, r7
 80051ce:	b004      	add	sp, #16
 80051d0:	bd80      	pop	{r7, pc}
 80051d2:	46c0      	nop			@ (mov r8, r8)
 80051d4:	80000017 	.word	0x80000017
 80051d8:	40012708 	.word	0x40012708
 80051dc:	20000008 	.word	0x20000008
 80051e0:	00030d40 	.word	0x00030d40

080051e4 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80051e4:	b580      	push	{r7, lr}
 80051e6:	b084      	sub	sp, #16
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	0018      	movs	r0, r3
 80051f2:	f7ff fa3e 	bl	8004672 <LL_ADC_IsDisableOngoing>
 80051f6:	0003      	movs	r3, r0
 80051f8:	60fb      	str	r3, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	0018      	movs	r0, r3
 8005200:	f7ff fa26 	bl	8004650 <LL_ADC_IsEnabled>
 8005204:	1e03      	subs	r3, r0, #0
 8005206:	d046      	beq.n	8005296 <ADC_Disable+0xb2>
      && (tmp_adc_is_disable_on_going == 0UL)
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	2b00      	cmp	r3, #0
 800520c:	d143      	bne.n	8005296 <ADC_Disable+0xb2>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	689b      	ldr	r3, [r3, #8]
 8005214:	2205      	movs	r2, #5
 8005216:	4013      	ands	r3, r2
 8005218:	2b01      	cmp	r3, #1
 800521a:	d10d      	bne.n	8005238 <ADC_Disable+0x54>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	0018      	movs	r0, r3
 8005222:	f7ff fa03 	bl	800462c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	2203      	movs	r2, #3
 800522c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800522e:	f7ff f8cf 	bl	80043d0 <HAL_GetTick>
 8005232:	0003      	movs	r3, r0
 8005234:	60bb      	str	r3, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005236:	e028      	b.n	800528a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800523c:	2210      	movs	r2, #16
 800523e:	431a      	orrs	r2, r3
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	659a      	str	r2, [r3, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005248:	2201      	movs	r2, #1
 800524a:	431a      	orrs	r2, r3
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 8005250:	2301      	movs	r3, #1
 8005252:	e021      	b.n	8005298 <ADC_Disable+0xb4>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8005254:	f7ff f8bc 	bl	80043d0 <HAL_GetTick>
 8005258:	0002      	movs	r2, r0
 800525a:	68bb      	ldr	r3, [r7, #8]
 800525c:	1ad3      	subs	r3, r2, r3
 800525e:	2b02      	cmp	r3, #2
 8005260:	d913      	bls.n	800528a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	689b      	ldr	r3, [r3, #8]
 8005268:	2201      	movs	r2, #1
 800526a:	4013      	ands	r3, r2
 800526c:	d00d      	beq.n	800528a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005272:	2210      	movs	r2, #16
 8005274:	431a      	orrs	r2, r3
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800527e:	2201      	movs	r2, #1
 8005280:	431a      	orrs	r2, r3
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8005286:	2301      	movs	r3, #1
 8005288:	e006      	b.n	8005298 <ADC_Disable+0xb4>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	689b      	ldr	r3, [r3, #8]
 8005290:	2201      	movs	r2, #1
 8005292:	4013      	ands	r3, r2
 8005294:	d1de      	bne.n	8005254 <ADC_Disable+0x70>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005296:	2300      	movs	r3, #0
}
 8005298:	0018      	movs	r0, r3
 800529a:	46bd      	mov	sp, r7
 800529c:	b004      	add	sp, #16
 800529e:	bd80      	pop	{r7, pc}

080052a0 <LL_ADC_GetCommonClock>:
{
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b082      	sub	sp, #8
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_PRESC));
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681a      	ldr	r2, [r3, #0]
 80052ac:	23f0      	movs	r3, #240	@ 0xf0
 80052ae:	039b      	lsls	r3, r3, #14
 80052b0:	4013      	ands	r3, r2
}
 80052b2:	0018      	movs	r0, r3
 80052b4:	46bd      	mov	sp, r7
 80052b6:	b002      	add	sp, #8
 80052b8:	bd80      	pop	{r7, pc}

080052ba <LL_ADC_GetClock>:
{
 80052ba:	b580      	push	{r7, lr}
 80052bc:	b082      	sub	sp, #8
 80052be:	af00      	add	r7, sp, #0
 80052c0:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR2, ADC_CFGR2_CKMODE));
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	691b      	ldr	r3, [r3, #16]
 80052c6:	0f9b      	lsrs	r3, r3, #30
 80052c8:	079b      	lsls	r3, r3, #30
}
 80052ca:	0018      	movs	r0, r3
 80052cc:	46bd      	mov	sp, r7
 80052ce:	b002      	add	sp, #8
 80052d0:	bd80      	pop	{r7, pc}

080052d2 <LL_ADC_SetCalibrationFactor>:
{
 80052d2:	b580      	push	{r7, lr}
 80052d4:	b082      	sub	sp, #8
 80052d6:	af00      	add	r7, sp, #0
 80052d8:	6078      	str	r0, [r7, #4]
 80052da:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CALFACT,
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	22b4      	movs	r2, #180	@ 0xb4
 80052e0:	589b      	ldr	r3, [r3, r2]
 80052e2:	227f      	movs	r2, #127	@ 0x7f
 80052e4:	4393      	bics	r3, r2
 80052e6:	001a      	movs	r2, r3
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	431a      	orrs	r2, r3
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	21b4      	movs	r1, #180	@ 0xb4
 80052f0:	505a      	str	r2, [r3, r1]
}
 80052f2:	46c0      	nop			@ (mov r8, r8)
 80052f4:	46bd      	mov	sp, r7
 80052f6:	b002      	add	sp, #8
 80052f8:	bd80      	pop	{r7, pc}

080052fa <LL_ADC_GetCalibrationFactor>:
{
 80052fa:	b580      	push	{r7, lr}
 80052fc:	b082      	sub	sp, #8
 80052fe:	af00      	add	r7, sp, #0
 8005300:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	22b4      	movs	r2, #180	@ 0xb4
 8005306:	589b      	ldr	r3, [r3, r2]
 8005308:	227f      	movs	r2, #127	@ 0x7f
 800530a:	4013      	ands	r3, r2
}
 800530c:	0018      	movs	r0, r3
 800530e:	46bd      	mov	sp, r7
 8005310:	b002      	add	sp, #8
 8005312:	bd80      	pop	{r7, pc}

08005314 <LL_ADC_Enable>:
{
 8005314:	b580      	push	{r7, lr}
 8005316:	b082      	sub	sp, #8
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	689b      	ldr	r3, [r3, #8]
 8005320:	4a04      	ldr	r2, [pc, #16]	@ (8005334 <LL_ADC_Enable+0x20>)
 8005322:	4013      	ands	r3, r2
 8005324:	2201      	movs	r2, #1
 8005326:	431a      	orrs	r2, r3
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	609a      	str	r2, [r3, #8]
}
 800532c:	46c0      	nop			@ (mov r8, r8)
 800532e:	46bd      	mov	sp, r7
 8005330:	b002      	add	sp, #8
 8005332:	bd80      	pop	{r7, pc}
 8005334:	7fffffe8 	.word	0x7fffffe8

08005338 <LL_ADC_Disable>:
{
 8005338:	b580      	push	{r7, lr}
 800533a:	b082      	sub	sp, #8
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	689b      	ldr	r3, [r3, #8]
 8005344:	4a04      	ldr	r2, [pc, #16]	@ (8005358 <LL_ADC_Disable+0x20>)
 8005346:	4013      	ands	r3, r2
 8005348:	2202      	movs	r2, #2
 800534a:	431a      	orrs	r2, r3
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	609a      	str	r2, [r3, #8]
}
 8005350:	46c0      	nop			@ (mov r8, r8)
 8005352:	46bd      	mov	sp, r7
 8005354:	b002      	add	sp, #8
 8005356:	bd80      	pop	{r7, pc}
 8005358:	7fffffe8 	.word	0x7fffffe8

0800535c <LL_ADC_IsEnabled>:
{
 800535c:	b580      	push	{r7, lr}
 800535e:	b082      	sub	sp, #8
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	689b      	ldr	r3, [r3, #8]
 8005368:	2201      	movs	r2, #1
 800536a:	4013      	ands	r3, r2
 800536c:	2b01      	cmp	r3, #1
 800536e:	d101      	bne.n	8005374 <LL_ADC_IsEnabled+0x18>
 8005370:	2301      	movs	r3, #1
 8005372:	e000      	b.n	8005376 <LL_ADC_IsEnabled+0x1a>
 8005374:	2300      	movs	r3, #0
}
 8005376:	0018      	movs	r0, r3
 8005378:	46bd      	mov	sp, r7
 800537a:	b002      	add	sp, #8
 800537c:	bd80      	pop	{r7, pc}
	...

08005380 <LL_ADC_StartCalibration>:
{
 8005380:	b580      	push	{r7, lr}
 8005382:	b082      	sub	sp, #8
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	689b      	ldr	r3, [r3, #8]
 800538c:	4a05      	ldr	r2, [pc, #20]	@ (80053a4 <LL_ADC_StartCalibration+0x24>)
 800538e:	4013      	ands	r3, r2
 8005390:	2280      	movs	r2, #128	@ 0x80
 8005392:	0612      	lsls	r2, r2, #24
 8005394:	431a      	orrs	r2, r3
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	609a      	str	r2, [r3, #8]
}
 800539a:	46c0      	nop			@ (mov r8, r8)
 800539c:	46bd      	mov	sp, r7
 800539e:	b002      	add	sp, #8
 80053a0:	bd80      	pop	{r7, pc}
 80053a2:	46c0      	nop			@ (mov r8, r8)
 80053a4:	7fffffe8 	.word	0x7fffffe8

080053a8 <LL_ADC_IsCalibrationOnGoing>:
{
 80053a8:	b580      	push	{r7, lr}
 80053aa:	b082      	sub	sp, #8
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	689b      	ldr	r3, [r3, #8]
 80053b4:	0fdb      	lsrs	r3, r3, #31
 80053b6:	07da      	lsls	r2, r3, #31
 80053b8:	2380      	movs	r3, #128	@ 0x80
 80053ba:	061b      	lsls	r3, r3, #24
 80053bc:	429a      	cmp	r2, r3
 80053be:	d101      	bne.n	80053c4 <LL_ADC_IsCalibrationOnGoing+0x1c>
 80053c0:	2301      	movs	r3, #1
 80053c2:	e000      	b.n	80053c6 <LL_ADC_IsCalibrationOnGoing+0x1e>
 80053c4:	2300      	movs	r3, #0
}
 80053c6:	0018      	movs	r0, r3
 80053c8:	46bd      	mov	sp, r7
 80053ca:	b002      	add	sp, #8
 80053cc:	bd80      	pop	{r7, pc}
	...

080053d0 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 80053d0:	b590      	push	{r4, r7, lr}
 80053d2:	b08b      	sub	sp, #44	@ 0x2c
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80053d8:	2300      	movs	r3, #0
 80053da:	60fb      	str	r3, [r7, #12]
  uint32_t backup_setting_cfgr1;
  uint32_t calibration_index;
  uint32_t calibration_factor_accumulated = 0;
 80053dc:	2300      	movs	r3, #0
 80053de:	623b      	str	r3, [r7, #32]
  __IO uint32_t delay_cpu_cycles;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2254      	movs	r2, #84	@ 0x54
 80053e4:	5c9b      	ldrb	r3, [r3, r2]
 80053e6:	2b01      	cmp	r3, #1
 80053e8:	d101      	bne.n	80053ee <HAL_ADCEx_Calibration_Start+0x1e>
 80053ea:	2302      	movs	r3, #2
 80053ec:	e0dd      	b.n	80055aa <HAL_ADCEx_Calibration_Start+0x1da>
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2254      	movs	r2, #84	@ 0x54
 80053f2:	2101      	movs	r1, #1
 80053f4:	5499      	strb	r1, [r3, r2]

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80053f6:	231f      	movs	r3, #31
 80053f8:	18fc      	adds	r4, r7, r3
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	0018      	movs	r0, r3
 80053fe:	f7ff fef1 	bl	80051e4 <ADC_Disable>
 8005402:	0003      	movs	r3, r0
 8005404:	7023      	strb	r3, [r4, #0]

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	0018      	movs	r0, r3
 800540c:	f7ff ffa6 	bl	800535c <LL_ADC_IsEnabled>
 8005410:	1e03      	subs	r3, r0, #0
 8005412:	d000      	beq.n	8005416 <HAL_ADCEx_Calibration_Start+0x46>
 8005414:	e0bc      	b.n	8005590 <HAL_ADCEx_Calibration_Start+0x1c0>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800541a:	4a66      	ldr	r2, [pc, #408]	@ (80055b4 <HAL_ADCEx_Calibration_Start+0x1e4>)
 800541c:	4013      	ands	r3, r2
 800541e:	2202      	movs	r2, #2
 8005420:	431a      	orrs	r2, r3
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	68db      	ldr	r3, [r3, #12]
 800542c:	4a62      	ldr	r2, [pc, #392]	@ (80055b8 <HAL_ADCEx_Calibration_Start+0x1e8>)
 800542e:	4013      	ands	r3, r2
 8005430:	61bb      	str	r3, [r7, #24]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	68da      	ldr	r2, [r3, #12]
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	495f      	ldr	r1, [pc, #380]	@ (80055bc <HAL_ADCEx_Calibration_Start+0x1ec>)
 800543e:	400a      	ands	r2, r1
 8005440:	60da      	str	r2, [r3, #12]

    /* ADC calibration procedure */
    /* Note: Perform an averaging of 8 calibrations for optimized accuracy */
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8005442:	2300      	movs	r3, #0
 8005444:	627b      	str	r3, [r7, #36]	@ 0x24
 8005446:	e02d      	b.n	80054a4 <HAL_ADCEx_Calibration_Start+0xd4>
    {
      /* Start ADC calibration */
      LL_ADC_StartCalibration(hadc->Instance);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	0018      	movs	r0, r3
 800544e:	f7ff ff97 	bl	8005380 <LL_ADC_StartCalibration>

      /* Wait for calibration completion */
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8005452:	e014      	b.n	800547e <HAL_ADCEx_Calibration_Start+0xae>
      {
        wait_loop_index++;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	3301      	adds	r3, #1
 8005458:	60fb      	str	r3, [r7, #12]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	4a58      	ldr	r2, [pc, #352]	@ (80055c0 <HAL_ADCEx_Calibration_Start+0x1f0>)
 800545e:	4293      	cmp	r3, r2
 8005460:	d90d      	bls.n	800547e <HAL_ADCEx_Calibration_Start+0xae>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005466:	2212      	movs	r2, #18
 8005468:	4393      	bics	r3, r2
 800546a:	2210      	movs	r2, #16
 800546c:	431a      	orrs	r2, r3
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	659a      	str	r2, [r3, #88]	@ 0x58
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          __HAL_UNLOCK(hadc);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	2254      	movs	r2, #84	@ 0x54
 8005476:	2100      	movs	r1, #0
 8005478:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800547a:	2301      	movs	r3, #1
 800547c:	e095      	b.n	80055aa <HAL_ADCEx_Calibration_Start+0x1da>
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	0018      	movs	r0, r3
 8005484:	f7ff ff90 	bl	80053a8 <LL_ADC_IsCalibrationOnGoing>
 8005488:	1e03      	subs	r3, r0, #0
 800548a:	d1e3      	bne.n	8005454 <HAL_ADCEx_Calibration_Start+0x84>
        }
      }

      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	0018      	movs	r0, r3
 8005492:	f7ff ff32 	bl	80052fa <LL_ADC_GetCalibrationFactor>
 8005496:	0002      	movs	r2, r0
 8005498:	6a3b      	ldr	r3, [r7, #32]
 800549a:	189b      	adds	r3, r3, r2
 800549c:	623b      	str	r3, [r7, #32]
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 800549e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054a0:	3301      	adds	r3, #1
 80054a2:	627b      	str	r3, [r7, #36]	@ 0x24
 80054a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054a6:	2b07      	cmp	r3, #7
 80054a8:	d9ce      	bls.n	8005448 <HAL_ADCEx_Calibration_Start+0x78>
    }
    /* Compute average */
    calibration_factor_accumulated /= calibration_index;
 80054aa:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80054ac:	6a38      	ldr	r0, [r7, #32]
 80054ae:	f7fa fe29 	bl	8000104 <__udivsi3>
 80054b2:	0003      	movs	r3, r0
 80054b4:	623b      	str	r3, [r7, #32]

    /* Apply calibration factor (requires ADC enable and disable process) */
    LL_ADC_Enable(hadc->Instance);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	0018      	movs	r0, r3
 80054bc:	f7ff ff2a 	bl	8005314 <LL_ADC_Enable>

    /* Case of ADC clocked at low frequency: Delay required between ADC enable and disable actions */
    if (LL_ADC_GetClock(hadc->Instance) == LL_ADC_CLOCK_ASYNC)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	0018      	movs	r0, r3
 80054c6:	f7ff fef8 	bl	80052ba <LL_ADC_GetClock>
 80054ca:	1e03      	subs	r3, r0, #0
 80054cc:	d11b      	bne.n	8005506 <HAL_ADCEx_Calibration_Start+0x136>
    {
      adc_clk_async_presc = LL_ADC_GetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80054ce:	4b3d      	ldr	r3, [pc, #244]	@ (80055c4 <HAL_ADCEx_Calibration_Start+0x1f4>)
 80054d0:	0018      	movs	r0, r3
 80054d2:	f7ff fee5 	bl	80052a0 <LL_ADC_GetCommonClock>
 80054d6:	0003      	movs	r3, r0
 80054d8:	617b      	str	r3, [r7, #20]

      if (adc_clk_async_presc >= LL_ADC_CLOCK_ASYNC_DIV16)
 80054da:	697a      	ldr	r2, [r7, #20]
 80054dc:	23e0      	movs	r3, #224	@ 0xe0
 80054de:	035b      	lsls	r3, r3, #13
 80054e0:	429a      	cmp	r2, r3
 80054e2:	d310      	bcc.n	8005506 <HAL_ADCEx_Calibration_Start+0x136>
      {
        /* Delay loop initialization and execution */
        /* Delay depends on ADC clock prescaler: Compute ADC clock asynchronous prescaler to decimal format */
        delay_cpu_cycles = (1UL << ((adc_clk_async_presc >> ADC_CCR_PRESC_Pos) - 3UL));
 80054e4:	697b      	ldr	r3, [r7, #20]
 80054e6:	0c9b      	lsrs	r3, r3, #18
 80054e8:	3b03      	subs	r3, #3
 80054ea:	2201      	movs	r2, #1
 80054ec:	409a      	lsls	r2, r3
 80054ee:	0013      	movs	r3, r2
 80054f0:	60bb      	str	r3, [r7, #8]
        /* Divide variable by 2 to compensate partially CPU processing cycles */
        delay_cpu_cycles >>= 1UL;
 80054f2:	68bb      	ldr	r3, [r7, #8]
 80054f4:	085b      	lsrs	r3, r3, #1
 80054f6:	60bb      	str	r3, [r7, #8]

        while (delay_cpu_cycles != 0UL)
 80054f8:	e002      	b.n	8005500 <HAL_ADCEx_Calibration_Start+0x130>
        {
          delay_cpu_cycles--;
 80054fa:	68bb      	ldr	r3, [r7, #8]
 80054fc:	3b01      	subs	r3, #1
 80054fe:	60bb      	str	r3, [r7, #8]
        while (delay_cpu_cycles != 0UL)
 8005500:	68bb      	ldr	r3, [r7, #8]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d1f9      	bne.n	80054fa <HAL_ADCEx_Calibration_Start+0x12a>
        }
      }
    }

    LL_ADC_SetCalibrationFactor(hadc->Instance, calibration_factor_accumulated);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	6a3a      	ldr	r2, [r7, #32]
 800550c:	0011      	movs	r1, r2
 800550e:	0018      	movs	r0, r3
 8005510:	f7ff fedf 	bl	80052d2 <LL_ADC_SetCalibrationFactor>
    LL_ADC_Disable(hadc->Instance);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	0018      	movs	r0, r3
 800551a:	f7ff ff0d 	bl	8005338 <LL_ADC_Disable>

    /* Wait for ADC effectively disabled before changing configuration */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800551e:	f7fe ff57 	bl	80043d0 <HAL_GetTick>
 8005522:	0003      	movs	r3, r0
 8005524:	613b      	str	r3, [r7, #16]

    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8005526:	e01b      	b.n	8005560 <HAL_ADCEx_Calibration_Start+0x190>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8005528:	f7fe ff52 	bl	80043d0 <HAL_GetTick>
 800552c:	0002      	movs	r2, r0
 800552e:	693b      	ldr	r3, [r7, #16]
 8005530:	1ad3      	subs	r3, r2, r3
 8005532:	2b02      	cmp	r3, #2
 8005534:	d914      	bls.n	8005560 <HAL_ADCEx_Calibration_Start+0x190>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	0018      	movs	r0, r3
 800553c:	f7ff ff0e 	bl	800535c <LL_ADC_IsEnabled>
 8005540:	1e03      	subs	r3, r0, #0
 8005542:	d00d      	beq.n	8005560 <HAL_ADCEx_Calibration_Start+0x190>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005548:	2210      	movs	r2, #16
 800554a:	431a      	orrs	r2, r3
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005554:	2201      	movs	r2, #1
 8005556:	431a      	orrs	r2, r3
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 800555c:	2301      	movs	r3, #1
 800555e:	e024      	b.n	80055aa <HAL_ADCEx_Calibration_Start+0x1da>
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	0018      	movs	r0, r3
 8005566:	f7ff fef9 	bl	800535c <LL_ADC_IsEnabled>
 800556a:	1e03      	subs	r3, r0, #0
 800556c:	d1dc      	bne.n	8005528 <HAL_ADCEx_Calibration_Start+0x158>
        }
      }
    }

    /* Restore configuration after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	68d9      	ldr	r1, [r3, #12]
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	69ba      	ldr	r2, [r7, #24]
 800557a:	430a      	orrs	r2, r1
 800557c:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005582:	2203      	movs	r2, #3
 8005584:	4393      	bics	r3, r2
 8005586:	2201      	movs	r2, #1
 8005588:	431a      	orrs	r2, r3
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	659a      	str	r2, [r3, #88]	@ 0x58
 800558e:	e005      	b.n	800559c <HAL_ADCEx_Calibration_Start+0x1cc>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005594:	2210      	movs	r2, #16
 8005596:	431a      	orrs	r2, r3
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2254      	movs	r2, #84	@ 0x54
 80055a0:	2100      	movs	r1, #0
 80055a2:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 80055a4:	231f      	movs	r3, #31
 80055a6:	18fb      	adds	r3, r7, r3
 80055a8:	781b      	ldrb	r3, [r3, #0]
}
 80055aa:	0018      	movs	r0, r3
 80055ac:	46bd      	mov	sp, r7
 80055ae:	b00b      	add	sp, #44	@ 0x2c
 80055b0:	bd90      	pop	{r4, r7, pc}
 80055b2:	46c0      	nop			@ (mov r8, r8)
 80055b4:	fffffefd 	.word	0xfffffefd
 80055b8:	00008003 	.word	0x00008003
 80055bc:	ffff7ffc 	.word	0xffff7ffc
 80055c0:	0002f1ff 	.word	0x0002f1ff
 80055c4:	40012708 	.word	0x40012708

080055c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80055c8:	b590      	push	{r4, r7, lr}
 80055ca:	b083      	sub	sp, #12
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	0002      	movs	r2, r0
 80055d0:	6039      	str	r1, [r7, #0]
 80055d2:	1dfb      	adds	r3, r7, #7
 80055d4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80055d6:	1dfb      	adds	r3, r7, #7
 80055d8:	781b      	ldrb	r3, [r3, #0]
 80055da:	2b7f      	cmp	r3, #127	@ 0x7f
 80055dc:	d828      	bhi.n	8005630 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80055de:	4a2f      	ldr	r2, [pc, #188]	@ (800569c <__NVIC_SetPriority+0xd4>)
 80055e0:	1dfb      	adds	r3, r7, #7
 80055e2:	781b      	ldrb	r3, [r3, #0]
 80055e4:	b25b      	sxtb	r3, r3
 80055e6:	089b      	lsrs	r3, r3, #2
 80055e8:	33c0      	adds	r3, #192	@ 0xc0
 80055ea:	009b      	lsls	r3, r3, #2
 80055ec:	589b      	ldr	r3, [r3, r2]
 80055ee:	1dfa      	adds	r2, r7, #7
 80055f0:	7812      	ldrb	r2, [r2, #0]
 80055f2:	0011      	movs	r1, r2
 80055f4:	2203      	movs	r2, #3
 80055f6:	400a      	ands	r2, r1
 80055f8:	00d2      	lsls	r2, r2, #3
 80055fa:	21ff      	movs	r1, #255	@ 0xff
 80055fc:	4091      	lsls	r1, r2
 80055fe:	000a      	movs	r2, r1
 8005600:	43d2      	mvns	r2, r2
 8005602:	401a      	ands	r2, r3
 8005604:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	019b      	lsls	r3, r3, #6
 800560a:	22ff      	movs	r2, #255	@ 0xff
 800560c:	401a      	ands	r2, r3
 800560e:	1dfb      	adds	r3, r7, #7
 8005610:	781b      	ldrb	r3, [r3, #0]
 8005612:	0018      	movs	r0, r3
 8005614:	2303      	movs	r3, #3
 8005616:	4003      	ands	r3, r0
 8005618:	00db      	lsls	r3, r3, #3
 800561a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800561c:	481f      	ldr	r0, [pc, #124]	@ (800569c <__NVIC_SetPriority+0xd4>)
 800561e:	1dfb      	adds	r3, r7, #7
 8005620:	781b      	ldrb	r3, [r3, #0]
 8005622:	b25b      	sxtb	r3, r3
 8005624:	089b      	lsrs	r3, r3, #2
 8005626:	430a      	orrs	r2, r1
 8005628:	33c0      	adds	r3, #192	@ 0xc0
 800562a:	009b      	lsls	r3, r3, #2
 800562c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800562e:	e031      	b.n	8005694 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005630:	4a1b      	ldr	r2, [pc, #108]	@ (80056a0 <__NVIC_SetPriority+0xd8>)
 8005632:	1dfb      	adds	r3, r7, #7
 8005634:	781b      	ldrb	r3, [r3, #0]
 8005636:	0019      	movs	r1, r3
 8005638:	230f      	movs	r3, #15
 800563a:	400b      	ands	r3, r1
 800563c:	3b08      	subs	r3, #8
 800563e:	089b      	lsrs	r3, r3, #2
 8005640:	3306      	adds	r3, #6
 8005642:	009b      	lsls	r3, r3, #2
 8005644:	18d3      	adds	r3, r2, r3
 8005646:	3304      	adds	r3, #4
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	1dfa      	adds	r2, r7, #7
 800564c:	7812      	ldrb	r2, [r2, #0]
 800564e:	0011      	movs	r1, r2
 8005650:	2203      	movs	r2, #3
 8005652:	400a      	ands	r2, r1
 8005654:	00d2      	lsls	r2, r2, #3
 8005656:	21ff      	movs	r1, #255	@ 0xff
 8005658:	4091      	lsls	r1, r2
 800565a:	000a      	movs	r2, r1
 800565c:	43d2      	mvns	r2, r2
 800565e:	401a      	ands	r2, r3
 8005660:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8005662:	683b      	ldr	r3, [r7, #0]
 8005664:	019b      	lsls	r3, r3, #6
 8005666:	22ff      	movs	r2, #255	@ 0xff
 8005668:	401a      	ands	r2, r3
 800566a:	1dfb      	adds	r3, r7, #7
 800566c:	781b      	ldrb	r3, [r3, #0]
 800566e:	0018      	movs	r0, r3
 8005670:	2303      	movs	r3, #3
 8005672:	4003      	ands	r3, r0
 8005674:	00db      	lsls	r3, r3, #3
 8005676:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005678:	4809      	ldr	r0, [pc, #36]	@ (80056a0 <__NVIC_SetPriority+0xd8>)
 800567a:	1dfb      	adds	r3, r7, #7
 800567c:	781b      	ldrb	r3, [r3, #0]
 800567e:	001c      	movs	r4, r3
 8005680:	230f      	movs	r3, #15
 8005682:	4023      	ands	r3, r4
 8005684:	3b08      	subs	r3, #8
 8005686:	089b      	lsrs	r3, r3, #2
 8005688:	430a      	orrs	r2, r1
 800568a:	3306      	adds	r3, #6
 800568c:	009b      	lsls	r3, r3, #2
 800568e:	18c3      	adds	r3, r0, r3
 8005690:	3304      	adds	r3, #4
 8005692:	601a      	str	r2, [r3, #0]
}
 8005694:	46c0      	nop			@ (mov r8, r8)
 8005696:	46bd      	mov	sp, r7
 8005698:	b003      	add	sp, #12
 800569a:	bd90      	pop	{r4, r7, pc}
 800569c:	e000e100 	.word	0xe000e100
 80056a0:	e000ed00 	.word	0xe000ed00

080056a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80056a4:	b580      	push	{r7, lr}
 80056a6:	b082      	sub	sp, #8
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	1e5a      	subs	r2, r3, #1
 80056b0:	2380      	movs	r3, #128	@ 0x80
 80056b2:	045b      	lsls	r3, r3, #17
 80056b4:	429a      	cmp	r2, r3
 80056b6:	d301      	bcc.n	80056bc <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80056b8:	2301      	movs	r3, #1
 80056ba:	e010      	b.n	80056de <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80056bc:	4b0a      	ldr	r3, [pc, #40]	@ (80056e8 <SysTick_Config+0x44>)
 80056be:	687a      	ldr	r2, [r7, #4]
 80056c0:	3a01      	subs	r2, #1
 80056c2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80056c4:	2301      	movs	r3, #1
 80056c6:	425b      	negs	r3, r3
 80056c8:	2103      	movs	r1, #3
 80056ca:	0018      	movs	r0, r3
 80056cc:	f7ff ff7c 	bl	80055c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80056d0:	4b05      	ldr	r3, [pc, #20]	@ (80056e8 <SysTick_Config+0x44>)
 80056d2:	2200      	movs	r2, #0
 80056d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80056d6:	4b04      	ldr	r3, [pc, #16]	@ (80056e8 <SysTick_Config+0x44>)
 80056d8:	2207      	movs	r2, #7
 80056da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80056dc:	2300      	movs	r3, #0
}
 80056de:	0018      	movs	r0, r3
 80056e0:	46bd      	mov	sp, r7
 80056e2:	b002      	add	sp, #8
 80056e4:	bd80      	pop	{r7, pc}
 80056e6:	46c0      	nop			@ (mov r8, r8)
 80056e8:	e000e010 	.word	0xe000e010

080056ec <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80056ec:	b580      	push	{r7, lr}
 80056ee:	b084      	sub	sp, #16
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	60b9      	str	r1, [r7, #8]
 80056f4:	607a      	str	r2, [r7, #4]
 80056f6:	210f      	movs	r1, #15
 80056f8:	187b      	adds	r3, r7, r1
 80056fa:	1c02      	adds	r2, r0, #0
 80056fc:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80056fe:	68ba      	ldr	r2, [r7, #8]
 8005700:	187b      	adds	r3, r7, r1
 8005702:	781b      	ldrb	r3, [r3, #0]
 8005704:	b25b      	sxtb	r3, r3
 8005706:	0011      	movs	r1, r2
 8005708:	0018      	movs	r0, r3
 800570a:	f7ff ff5d 	bl	80055c8 <__NVIC_SetPriority>
}
 800570e:	46c0      	nop			@ (mov r8, r8)
 8005710:	46bd      	mov	sp, r7
 8005712:	b004      	add	sp, #16
 8005714:	bd80      	pop	{r7, pc}

08005716 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005716:	b580      	push	{r7, lr}
 8005718:	b082      	sub	sp, #8
 800571a:	af00      	add	r7, sp, #0
 800571c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	0018      	movs	r0, r3
 8005722:	f7ff ffbf 	bl	80056a4 <SysTick_Config>
 8005726:	0003      	movs	r3, r0
}
 8005728:	0018      	movs	r0, r3
 800572a:	46bd      	mov	sp, r7
 800572c:	b002      	add	sp, #8
 800572e:	bd80      	pop	{r7, pc}

08005730 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005730:	b580      	push	{r7, lr}
 8005732:	b086      	sub	sp, #24
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
 8005738:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800573a:	2300      	movs	r3, #0
 800573c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800573e:	e147      	b.n	80059d0 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005740:	683b      	ldr	r3, [r7, #0]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	2101      	movs	r1, #1
 8005746:	697a      	ldr	r2, [r7, #20]
 8005748:	4091      	lsls	r1, r2
 800574a:	000a      	movs	r2, r1
 800574c:	4013      	ands	r3, r2
 800574e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	2b00      	cmp	r3, #0
 8005754:	d100      	bne.n	8005758 <HAL_GPIO_Init+0x28>
 8005756:	e138      	b.n	80059ca <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	685b      	ldr	r3, [r3, #4]
 800575c:	2203      	movs	r2, #3
 800575e:	4013      	ands	r3, r2
 8005760:	2b01      	cmp	r3, #1
 8005762:	d005      	beq.n	8005770 <HAL_GPIO_Init+0x40>
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	685b      	ldr	r3, [r3, #4]
 8005768:	2203      	movs	r2, #3
 800576a:	4013      	ands	r3, r2
 800576c:	2b02      	cmp	r3, #2
 800576e:	d130      	bne.n	80057d2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	689b      	ldr	r3, [r3, #8]
 8005774:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8005776:	697b      	ldr	r3, [r7, #20]
 8005778:	005b      	lsls	r3, r3, #1
 800577a:	2203      	movs	r2, #3
 800577c:	409a      	lsls	r2, r3
 800577e:	0013      	movs	r3, r2
 8005780:	43da      	mvns	r2, r3
 8005782:	693b      	ldr	r3, [r7, #16]
 8005784:	4013      	ands	r3, r2
 8005786:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	68da      	ldr	r2, [r3, #12]
 800578c:	697b      	ldr	r3, [r7, #20]
 800578e:	005b      	lsls	r3, r3, #1
 8005790:	409a      	lsls	r2, r3
 8005792:	0013      	movs	r3, r2
 8005794:	693a      	ldr	r2, [r7, #16]
 8005796:	4313      	orrs	r3, r2
 8005798:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	693a      	ldr	r2, [r7, #16]
 800579e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	685b      	ldr	r3, [r3, #4]
 80057a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80057a6:	2201      	movs	r2, #1
 80057a8:	697b      	ldr	r3, [r7, #20]
 80057aa:	409a      	lsls	r2, r3
 80057ac:	0013      	movs	r3, r2
 80057ae:	43da      	mvns	r2, r3
 80057b0:	693b      	ldr	r3, [r7, #16]
 80057b2:	4013      	ands	r3, r2
 80057b4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80057b6:	683b      	ldr	r3, [r7, #0]
 80057b8:	685b      	ldr	r3, [r3, #4]
 80057ba:	091b      	lsrs	r3, r3, #4
 80057bc:	2201      	movs	r2, #1
 80057be:	401a      	ands	r2, r3
 80057c0:	697b      	ldr	r3, [r7, #20]
 80057c2:	409a      	lsls	r2, r3
 80057c4:	0013      	movs	r3, r2
 80057c6:	693a      	ldr	r2, [r7, #16]
 80057c8:	4313      	orrs	r3, r2
 80057ca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	693a      	ldr	r2, [r7, #16]
 80057d0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	685b      	ldr	r3, [r3, #4]
 80057d6:	2203      	movs	r2, #3
 80057d8:	4013      	ands	r3, r2
 80057da:	2b03      	cmp	r3, #3
 80057dc:	d017      	beq.n	800580e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	68db      	ldr	r3, [r3, #12]
 80057e2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80057e4:	697b      	ldr	r3, [r7, #20]
 80057e6:	005b      	lsls	r3, r3, #1
 80057e8:	2203      	movs	r2, #3
 80057ea:	409a      	lsls	r2, r3
 80057ec:	0013      	movs	r3, r2
 80057ee:	43da      	mvns	r2, r3
 80057f0:	693b      	ldr	r3, [r7, #16]
 80057f2:	4013      	ands	r3, r2
 80057f4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	689a      	ldr	r2, [r3, #8]
 80057fa:	697b      	ldr	r3, [r7, #20]
 80057fc:	005b      	lsls	r3, r3, #1
 80057fe:	409a      	lsls	r2, r3
 8005800:	0013      	movs	r3, r2
 8005802:	693a      	ldr	r2, [r7, #16]
 8005804:	4313      	orrs	r3, r2
 8005806:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	693a      	ldr	r2, [r7, #16]
 800580c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800580e:	683b      	ldr	r3, [r7, #0]
 8005810:	685b      	ldr	r3, [r3, #4]
 8005812:	2203      	movs	r2, #3
 8005814:	4013      	ands	r3, r2
 8005816:	2b02      	cmp	r3, #2
 8005818:	d123      	bne.n	8005862 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800581a:	697b      	ldr	r3, [r7, #20]
 800581c:	08da      	lsrs	r2, r3, #3
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	3208      	adds	r2, #8
 8005822:	0092      	lsls	r2, r2, #2
 8005824:	58d3      	ldr	r3, [r2, r3]
 8005826:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005828:	697b      	ldr	r3, [r7, #20]
 800582a:	2207      	movs	r2, #7
 800582c:	4013      	ands	r3, r2
 800582e:	009b      	lsls	r3, r3, #2
 8005830:	220f      	movs	r2, #15
 8005832:	409a      	lsls	r2, r3
 8005834:	0013      	movs	r3, r2
 8005836:	43da      	mvns	r2, r3
 8005838:	693b      	ldr	r3, [r7, #16]
 800583a:	4013      	ands	r3, r2
 800583c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800583e:	683b      	ldr	r3, [r7, #0]
 8005840:	691a      	ldr	r2, [r3, #16]
 8005842:	697b      	ldr	r3, [r7, #20]
 8005844:	2107      	movs	r1, #7
 8005846:	400b      	ands	r3, r1
 8005848:	009b      	lsls	r3, r3, #2
 800584a:	409a      	lsls	r2, r3
 800584c:	0013      	movs	r3, r2
 800584e:	693a      	ldr	r2, [r7, #16]
 8005850:	4313      	orrs	r3, r2
 8005852:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005854:	697b      	ldr	r3, [r7, #20]
 8005856:	08da      	lsrs	r2, r3, #3
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	3208      	adds	r2, #8
 800585c:	0092      	lsls	r2, r2, #2
 800585e:	6939      	ldr	r1, [r7, #16]
 8005860:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8005868:	697b      	ldr	r3, [r7, #20]
 800586a:	005b      	lsls	r3, r3, #1
 800586c:	2203      	movs	r2, #3
 800586e:	409a      	lsls	r2, r3
 8005870:	0013      	movs	r3, r2
 8005872:	43da      	mvns	r2, r3
 8005874:	693b      	ldr	r3, [r7, #16]
 8005876:	4013      	ands	r3, r2
 8005878:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	685b      	ldr	r3, [r3, #4]
 800587e:	2203      	movs	r2, #3
 8005880:	401a      	ands	r2, r3
 8005882:	697b      	ldr	r3, [r7, #20]
 8005884:	005b      	lsls	r3, r3, #1
 8005886:	409a      	lsls	r2, r3
 8005888:	0013      	movs	r3, r2
 800588a:	693a      	ldr	r2, [r7, #16]
 800588c:	4313      	orrs	r3, r2
 800588e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	693a      	ldr	r2, [r7, #16]
 8005894:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	685a      	ldr	r2, [r3, #4]
 800589a:	23c0      	movs	r3, #192	@ 0xc0
 800589c:	029b      	lsls	r3, r3, #10
 800589e:	4013      	ands	r3, r2
 80058a0:	d100      	bne.n	80058a4 <HAL_GPIO_Init+0x174>
 80058a2:	e092      	b.n	80059ca <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80058a4:	4a50      	ldr	r2, [pc, #320]	@ (80059e8 <HAL_GPIO_Init+0x2b8>)
 80058a6:	697b      	ldr	r3, [r7, #20]
 80058a8:	089b      	lsrs	r3, r3, #2
 80058aa:	3318      	adds	r3, #24
 80058ac:	009b      	lsls	r3, r3, #2
 80058ae:	589b      	ldr	r3, [r3, r2]
 80058b0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80058b2:	697b      	ldr	r3, [r7, #20]
 80058b4:	2203      	movs	r2, #3
 80058b6:	4013      	ands	r3, r2
 80058b8:	00db      	lsls	r3, r3, #3
 80058ba:	220f      	movs	r2, #15
 80058bc:	409a      	lsls	r2, r3
 80058be:	0013      	movs	r3, r2
 80058c0:	43da      	mvns	r2, r3
 80058c2:	693b      	ldr	r3, [r7, #16]
 80058c4:	4013      	ands	r3, r2
 80058c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80058c8:	687a      	ldr	r2, [r7, #4]
 80058ca:	23a0      	movs	r3, #160	@ 0xa0
 80058cc:	05db      	lsls	r3, r3, #23
 80058ce:	429a      	cmp	r2, r3
 80058d0:	d013      	beq.n	80058fa <HAL_GPIO_Init+0x1ca>
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	4a45      	ldr	r2, [pc, #276]	@ (80059ec <HAL_GPIO_Init+0x2bc>)
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d00d      	beq.n	80058f6 <HAL_GPIO_Init+0x1c6>
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	4a44      	ldr	r2, [pc, #272]	@ (80059f0 <HAL_GPIO_Init+0x2c0>)
 80058de:	4293      	cmp	r3, r2
 80058e0:	d007      	beq.n	80058f2 <HAL_GPIO_Init+0x1c2>
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	4a43      	ldr	r2, [pc, #268]	@ (80059f4 <HAL_GPIO_Init+0x2c4>)
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d101      	bne.n	80058ee <HAL_GPIO_Init+0x1be>
 80058ea:	2303      	movs	r3, #3
 80058ec:	e006      	b.n	80058fc <HAL_GPIO_Init+0x1cc>
 80058ee:	2305      	movs	r3, #5
 80058f0:	e004      	b.n	80058fc <HAL_GPIO_Init+0x1cc>
 80058f2:	2302      	movs	r3, #2
 80058f4:	e002      	b.n	80058fc <HAL_GPIO_Init+0x1cc>
 80058f6:	2301      	movs	r3, #1
 80058f8:	e000      	b.n	80058fc <HAL_GPIO_Init+0x1cc>
 80058fa:	2300      	movs	r3, #0
 80058fc:	697a      	ldr	r2, [r7, #20]
 80058fe:	2103      	movs	r1, #3
 8005900:	400a      	ands	r2, r1
 8005902:	00d2      	lsls	r2, r2, #3
 8005904:	4093      	lsls	r3, r2
 8005906:	693a      	ldr	r2, [r7, #16]
 8005908:	4313      	orrs	r3, r2
 800590a:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 800590c:	4936      	ldr	r1, [pc, #216]	@ (80059e8 <HAL_GPIO_Init+0x2b8>)
 800590e:	697b      	ldr	r3, [r7, #20]
 8005910:	089b      	lsrs	r3, r3, #2
 8005912:	3318      	adds	r3, #24
 8005914:	009b      	lsls	r3, r3, #2
 8005916:	693a      	ldr	r2, [r7, #16]
 8005918:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800591a:	4b33      	ldr	r3, [pc, #204]	@ (80059e8 <HAL_GPIO_Init+0x2b8>)
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	43da      	mvns	r2, r3
 8005924:	693b      	ldr	r3, [r7, #16]
 8005926:	4013      	ands	r3, r2
 8005928:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	685a      	ldr	r2, [r3, #4]
 800592e:	2380      	movs	r3, #128	@ 0x80
 8005930:	035b      	lsls	r3, r3, #13
 8005932:	4013      	ands	r3, r2
 8005934:	d003      	beq.n	800593e <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8005936:	693a      	ldr	r2, [r7, #16]
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	4313      	orrs	r3, r2
 800593c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800593e:	4b2a      	ldr	r3, [pc, #168]	@ (80059e8 <HAL_GPIO_Init+0x2b8>)
 8005940:	693a      	ldr	r2, [r7, #16]
 8005942:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8005944:	4b28      	ldr	r3, [pc, #160]	@ (80059e8 <HAL_GPIO_Init+0x2b8>)
 8005946:	685b      	ldr	r3, [r3, #4]
 8005948:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	43da      	mvns	r2, r3
 800594e:	693b      	ldr	r3, [r7, #16]
 8005950:	4013      	ands	r3, r2
 8005952:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005954:	683b      	ldr	r3, [r7, #0]
 8005956:	685a      	ldr	r2, [r3, #4]
 8005958:	2380      	movs	r3, #128	@ 0x80
 800595a:	039b      	lsls	r3, r3, #14
 800595c:	4013      	ands	r3, r2
 800595e:	d003      	beq.n	8005968 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8005960:	693a      	ldr	r2, [r7, #16]
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	4313      	orrs	r3, r2
 8005966:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005968:	4b1f      	ldr	r3, [pc, #124]	@ (80059e8 <HAL_GPIO_Init+0x2b8>)
 800596a:	693a      	ldr	r2, [r7, #16]
 800596c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800596e:	4a1e      	ldr	r2, [pc, #120]	@ (80059e8 <HAL_GPIO_Init+0x2b8>)
 8005970:	2384      	movs	r3, #132	@ 0x84
 8005972:	58d3      	ldr	r3, [r2, r3]
 8005974:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	43da      	mvns	r2, r3
 800597a:	693b      	ldr	r3, [r7, #16]
 800597c:	4013      	ands	r3, r2
 800597e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	685a      	ldr	r2, [r3, #4]
 8005984:	2380      	movs	r3, #128	@ 0x80
 8005986:	029b      	lsls	r3, r3, #10
 8005988:	4013      	ands	r3, r2
 800598a:	d003      	beq.n	8005994 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 800598c:	693a      	ldr	r2, [r7, #16]
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	4313      	orrs	r3, r2
 8005992:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005994:	4914      	ldr	r1, [pc, #80]	@ (80059e8 <HAL_GPIO_Init+0x2b8>)
 8005996:	2284      	movs	r2, #132	@ 0x84
 8005998:	693b      	ldr	r3, [r7, #16]
 800599a:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 800599c:	4a12      	ldr	r2, [pc, #72]	@ (80059e8 <HAL_GPIO_Init+0x2b8>)
 800599e:	2380      	movs	r3, #128	@ 0x80
 80059a0:	58d3      	ldr	r3, [r2, r3]
 80059a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	43da      	mvns	r2, r3
 80059a8:	693b      	ldr	r3, [r7, #16]
 80059aa:	4013      	ands	r3, r2
 80059ac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80059ae:	683b      	ldr	r3, [r7, #0]
 80059b0:	685a      	ldr	r2, [r3, #4]
 80059b2:	2380      	movs	r3, #128	@ 0x80
 80059b4:	025b      	lsls	r3, r3, #9
 80059b6:	4013      	ands	r3, r2
 80059b8:	d003      	beq.n	80059c2 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 80059ba:	693a      	ldr	r2, [r7, #16]
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	4313      	orrs	r3, r2
 80059c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80059c2:	4909      	ldr	r1, [pc, #36]	@ (80059e8 <HAL_GPIO_Init+0x2b8>)
 80059c4:	2280      	movs	r2, #128	@ 0x80
 80059c6:	693b      	ldr	r3, [r7, #16]
 80059c8:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80059ca:	697b      	ldr	r3, [r7, #20]
 80059cc:	3301      	adds	r3, #1
 80059ce:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	681a      	ldr	r2, [r3, #0]
 80059d4:	697b      	ldr	r3, [r7, #20]
 80059d6:	40da      	lsrs	r2, r3
 80059d8:	1e13      	subs	r3, r2, #0
 80059da:	d000      	beq.n	80059de <HAL_GPIO_Init+0x2ae>
 80059dc:	e6b0      	b.n	8005740 <HAL_GPIO_Init+0x10>
  }
}
 80059de:	46c0      	nop			@ (mov r8, r8)
 80059e0:	46c0      	nop			@ (mov r8, r8)
 80059e2:	46bd      	mov	sp, r7
 80059e4:	b006      	add	sp, #24
 80059e6:	bd80      	pop	{r7, pc}
 80059e8:	40021800 	.word	0x40021800
 80059ec:	50000400 	.word	0x50000400
 80059f0:	50000800 	.word	0x50000800
 80059f4:	50000c00 	.word	0x50000c00

080059f8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80059f8:	b580      	push	{r7, lr}
 80059fa:	b084      	sub	sp, #16
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
 8005a00:	000a      	movs	r2, r1
 8005a02:	1cbb      	adds	r3, r7, #2
 8005a04:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	691b      	ldr	r3, [r3, #16]
 8005a0a:	1cba      	adds	r2, r7, #2
 8005a0c:	8812      	ldrh	r2, [r2, #0]
 8005a0e:	4013      	ands	r3, r2
 8005a10:	d004      	beq.n	8005a1c <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8005a12:	230f      	movs	r3, #15
 8005a14:	18fb      	adds	r3, r7, r3
 8005a16:	2201      	movs	r2, #1
 8005a18:	701a      	strb	r2, [r3, #0]
 8005a1a:	e003      	b.n	8005a24 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005a1c:	230f      	movs	r3, #15
 8005a1e:	18fb      	adds	r3, r7, r3
 8005a20:	2200      	movs	r2, #0
 8005a22:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8005a24:	230f      	movs	r3, #15
 8005a26:	18fb      	adds	r3, r7, r3
 8005a28:	781b      	ldrb	r3, [r3, #0]
}
 8005a2a:	0018      	movs	r0, r3
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	b004      	add	sp, #16
 8005a30:	bd80      	pop	{r7, pc}

08005a32 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005a32:	b580      	push	{r7, lr}
 8005a34:	b082      	sub	sp, #8
 8005a36:	af00      	add	r7, sp, #0
 8005a38:	6078      	str	r0, [r7, #4]
 8005a3a:	0008      	movs	r0, r1
 8005a3c:	0011      	movs	r1, r2
 8005a3e:	1cbb      	adds	r3, r7, #2
 8005a40:	1c02      	adds	r2, r0, #0
 8005a42:	801a      	strh	r2, [r3, #0]
 8005a44:	1c7b      	adds	r3, r7, #1
 8005a46:	1c0a      	adds	r2, r1, #0
 8005a48:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005a4a:	1c7b      	adds	r3, r7, #1
 8005a4c:	781b      	ldrb	r3, [r3, #0]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d004      	beq.n	8005a5c <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005a52:	1cbb      	adds	r3, r7, #2
 8005a54:	881a      	ldrh	r2, [r3, #0]
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005a5a:	e003      	b.n	8005a64 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005a5c:	1cbb      	adds	r3, r7, #2
 8005a5e:	881a      	ldrh	r2, [r3, #0]
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005a64:	46c0      	nop			@ (mov r8, r8)
 8005a66:	46bd      	mov	sp, r7
 8005a68:	b002      	add	sp, #8
 8005a6a:	bd80      	pop	{r7, pc}

08005a6c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	b084      	sub	sp, #16
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8005a74:	4b19      	ldr	r3, [pc, #100]	@ (8005adc <HAL_PWREx_ControlVoltageScaling+0x70>)
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	4a19      	ldr	r2, [pc, #100]	@ (8005ae0 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8005a7a:	4013      	ands	r3, r2
 8005a7c:	0019      	movs	r1, r3
 8005a7e:	4b17      	ldr	r3, [pc, #92]	@ (8005adc <HAL_PWREx_ControlVoltageScaling+0x70>)
 8005a80:	687a      	ldr	r2, [r7, #4]
 8005a82:	430a      	orrs	r2, r1
 8005a84:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005a86:	687a      	ldr	r2, [r7, #4]
 8005a88:	2380      	movs	r3, #128	@ 0x80
 8005a8a:	009b      	lsls	r3, r3, #2
 8005a8c:	429a      	cmp	r2, r3
 8005a8e:	d11f      	bne.n	8005ad0 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8005a90:	4b14      	ldr	r3, [pc, #80]	@ (8005ae4 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8005a92:	681a      	ldr	r2, [r3, #0]
 8005a94:	0013      	movs	r3, r2
 8005a96:	005b      	lsls	r3, r3, #1
 8005a98:	189b      	adds	r3, r3, r2
 8005a9a:	005b      	lsls	r3, r3, #1
 8005a9c:	4912      	ldr	r1, [pc, #72]	@ (8005ae8 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8005a9e:	0018      	movs	r0, r3
 8005aa0:	f7fa fb30 	bl	8000104 <__udivsi3>
 8005aa4:	0003      	movs	r3, r0
 8005aa6:	3301      	adds	r3, #1
 8005aa8:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005aaa:	e008      	b.n	8005abe <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d003      	beq.n	8005aba <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	3b01      	subs	r3, #1
 8005ab6:	60fb      	str	r3, [r7, #12]
 8005ab8:	e001      	b.n	8005abe <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8005aba:	2303      	movs	r3, #3
 8005abc:	e009      	b.n	8005ad2 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005abe:	4b07      	ldr	r3, [pc, #28]	@ (8005adc <HAL_PWREx_ControlVoltageScaling+0x70>)
 8005ac0:	695a      	ldr	r2, [r3, #20]
 8005ac2:	2380      	movs	r3, #128	@ 0x80
 8005ac4:	00db      	lsls	r3, r3, #3
 8005ac6:	401a      	ands	r2, r3
 8005ac8:	2380      	movs	r3, #128	@ 0x80
 8005aca:	00db      	lsls	r3, r3, #3
 8005acc:	429a      	cmp	r2, r3
 8005ace:	d0ed      	beq.n	8005aac <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8005ad0:	2300      	movs	r3, #0
}
 8005ad2:	0018      	movs	r0, r3
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	b004      	add	sp, #16
 8005ad8:	bd80      	pop	{r7, pc}
 8005ada:	46c0      	nop			@ (mov r8, r8)
 8005adc:	40007000 	.word	0x40007000
 8005ae0:	fffff9ff 	.word	0xfffff9ff
 8005ae4:	20000008 	.word	0x20000008
 8005ae8:	000f4240 	.word	0x000f4240

08005aec <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8005aec:	b580      	push	{r7, lr}
 8005aee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8005af0:	4b03      	ldr	r3, [pc, #12]	@ (8005b00 <LL_RCC_GetAPB1Prescaler+0x14>)
 8005af2:	689a      	ldr	r2, [r3, #8]
 8005af4:	23e0      	movs	r3, #224	@ 0xe0
 8005af6:	01db      	lsls	r3, r3, #7
 8005af8:	4013      	ands	r3, r2
}
 8005afa:	0018      	movs	r0, r3
 8005afc:	46bd      	mov	sp, r7
 8005afe:	bd80      	pop	{r7, pc}
 8005b00:	40021000 	.word	0x40021000

08005b04 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005b04:	b580      	push	{r7, lr}
 8005b06:	b088      	sub	sp, #32
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d101      	bne.n	8005b16 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005b12:	2301      	movs	r3, #1
 8005b14:	e2fe      	b.n	8006114 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	2201      	movs	r2, #1
 8005b1c:	4013      	ands	r3, r2
 8005b1e:	d100      	bne.n	8005b22 <HAL_RCC_OscConfig+0x1e>
 8005b20:	e07c      	b.n	8005c1c <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005b22:	4bc3      	ldr	r3, [pc, #780]	@ (8005e30 <HAL_RCC_OscConfig+0x32c>)
 8005b24:	689b      	ldr	r3, [r3, #8]
 8005b26:	2238      	movs	r2, #56	@ 0x38
 8005b28:	4013      	ands	r3, r2
 8005b2a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005b2c:	4bc0      	ldr	r3, [pc, #768]	@ (8005e30 <HAL_RCC_OscConfig+0x32c>)
 8005b2e:	68db      	ldr	r3, [r3, #12]
 8005b30:	2203      	movs	r2, #3
 8005b32:	4013      	ands	r3, r2
 8005b34:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8005b36:	69bb      	ldr	r3, [r7, #24]
 8005b38:	2b10      	cmp	r3, #16
 8005b3a:	d102      	bne.n	8005b42 <HAL_RCC_OscConfig+0x3e>
 8005b3c:	697b      	ldr	r3, [r7, #20]
 8005b3e:	2b03      	cmp	r3, #3
 8005b40:	d002      	beq.n	8005b48 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8005b42:	69bb      	ldr	r3, [r7, #24]
 8005b44:	2b08      	cmp	r3, #8
 8005b46:	d10b      	bne.n	8005b60 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b48:	4bb9      	ldr	r3, [pc, #740]	@ (8005e30 <HAL_RCC_OscConfig+0x32c>)
 8005b4a:	681a      	ldr	r2, [r3, #0]
 8005b4c:	2380      	movs	r3, #128	@ 0x80
 8005b4e:	029b      	lsls	r3, r3, #10
 8005b50:	4013      	ands	r3, r2
 8005b52:	d062      	beq.n	8005c1a <HAL_RCC_OscConfig+0x116>
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	685b      	ldr	r3, [r3, #4]
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d15e      	bne.n	8005c1a <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8005b5c:	2301      	movs	r3, #1
 8005b5e:	e2d9      	b.n	8006114 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	685a      	ldr	r2, [r3, #4]
 8005b64:	2380      	movs	r3, #128	@ 0x80
 8005b66:	025b      	lsls	r3, r3, #9
 8005b68:	429a      	cmp	r2, r3
 8005b6a:	d107      	bne.n	8005b7c <HAL_RCC_OscConfig+0x78>
 8005b6c:	4bb0      	ldr	r3, [pc, #704]	@ (8005e30 <HAL_RCC_OscConfig+0x32c>)
 8005b6e:	681a      	ldr	r2, [r3, #0]
 8005b70:	4baf      	ldr	r3, [pc, #700]	@ (8005e30 <HAL_RCC_OscConfig+0x32c>)
 8005b72:	2180      	movs	r1, #128	@ 0x80
 8005b74:	0249      	lsls	r1, r1, #9
 8005b76:	430a      	orrs	r2, r1
 8005b78:	601a      	str	r2, [r3, #0]
 8005b7a:	e020      	b.n	8005bbe <HAL_RCC_OscConfig+0xba>
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	685a      	ldr	r2, [r3, #4]
 8005b80:	23a0      	movs	r3, #160	@ 0xa0
 8005b82:	02db      	lsls	r3, r3, #11
 8005b84:	429a      	cmp	r2, r3
 8005b86:	d10e      	bne.n	8005ba6 <HAL_RCC_OscConfig+0xa2>
 8005b88:	4ba9      	ldr	r3, [pc, #676]	@ (8005e30 <HAL_RCC_OscConfig+0x32c>)
 8005b8a:	681a      	ldr	r2, [r3, #0]
 8005b8c:	4ba8      	ldr	r3, [pc, #672]	@ (8005e30 <HAL_RCC_OscConfig+0x32c>)
 8005b8e:	2180      	movs	r1, #128	@ 0x80
 8005b90:	02c9      	lsls	r1, r1, #11
 8005b92:	430a      	orrs	r2, r1
 8005b94:	601a      	str	r2, [r3, #0]
 8005b96:	4ba6      	ldr	r3, [pc, #664]	@ (8005e30 <HAL_RCC_OscConfig+0x32c>)
 8005b98:	681a      	ldr	r2, [r3, #0]
 8005b9a:	4ba5      	ldr	r3, [pc, #660]	@ (8005e30 <HAL_RCC_OscConfig+0x32c>)
 8005b9c:	2180      	movs	r1, #128	@ 0x80
 8005b9e:	0249      	lsls	r1, r1, #9
 8005ba0:	430a      	orrs	r2, r1
 8005ba2:	601a      	str	r2, [r3, #0]
 8005ba4:	e00b      	b.n	8005bbe <HAL_RCC_OscConfig+0xba>
 8005ba6:	4ba2      	ldr	r3, [pc, #648]	@ (8005e30 <HAL_RCC_OscConfig+0x32c>)
 8005ba8:	681a      	ldr	r2, [r3, #0]
 8005baa:	4ba1      	ldr	r3, [pc, #644]	@ (8005e30 <HAL_RCC_OscConfig+0x32c>)
 8005bac:	49a1      	ldr	r1, [pc, #644]	@ (8005e34 <HAL_RCC_OscConfig+0x330>)
 8005bae:	400a      	ands	r2, r1
 8005bb0:	601a      	str	r2, [r3, #0]
 8005bb2:	4b9f      	ldr	r3, [pc, #636]	@ (8005e30 <HAL_RCC_OscConfig+0x32c>)
 8005bb4:	681a      	ldr	r2, [r3, #0]
 8005bb6:	4b9e      	ldr	r3, [pc, #632]	@ (8005e30 <HAL_RCC_OscConfig+0x32c>)
 8005bb8:	499f      	ldr	r1, [pc, #636]	@ (8005e38 <HAL_RCC_OscConfig+0x334>)
 8005bba:	400a      	ands	r2, r1
 8005bbc:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	685b      	ldr	r3, [r3, #4]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d014      	beq.n	8005bf0 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bc6:	f7fe fc03 	bl	80043d0 <HAL_GetTick>
 8005bca:	0003      	movs	r3, r0
 8005bcc:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005bce:	e008      	b.n	8005be2 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005bd0:	f7fe fbfe 	bl	80043d0 <HAL_GetTick>
 8005bd4:	0002      	movs	r2, r0
 8005bd6:	693b      	ldr	r3, [r7, #16]
 8005bd8:	1ad3      	subs	r3, r2, r3
 8005bda:	2b64      	cmp	r3, #100	@ 0x64
 8005bdc:	d901      	bls.n	8005be2 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8005bde:	2303      	movs	r3, #3
 8005be0:	e298      	b.n	8006114 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005be2:	4b93      	ldr	r3, [pc, #588]	@ (8005e30 <HAL_RCC_OscConfig+0x32c>)
 8005be4:	681a      	ldr	r2, [r3, #0]
 8005be6:	2380      	movs	r3, #128	@ 0x80
 8005be8:	029b      	lsls	r3, r3, #10
 8005bea:	4013      	ands	r3, r2
 8005bec:	d0f0      	beq.n	8005bd0 <HAL_RCC_OscConfig+0xcc>
 8005bee:	e015      	b.n	8005c1c <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bf0:	f7fe fbee 	bl	80043d0 <HAL_GetTick>
 8005bf4:	0003      	movs	r3, r0
 8005bf6:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005bf8:	e008      	b.n	8005c0c <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005bfa:	f7fe fbe9 	bl	80043d0 <HAL_GetTick>
 8005bfe:	0002      	movs	r2, r0
 8005c00:	693b      	ldr	r3, [r7, #16]
 8005c02:	1ad3      	subs	r3, r2, r3
 8005c04:	2b64      	cmp	r3, #100	@ 0x64
 8005c06:	d901      	bls.n	8005c0c <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8005c08:	2303      	movs	r3, #3
 8005c0a:	e283      	b.n	8006114 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005c0c:	4b88      	ldr	r3, [pc, #544]	@ (8005e30 <HAL_RCC_OscConfig+0x32c>)
 8005c0e:	681a      	ldr	r2, [r3, #0]
 8005c10:	2380      	movs	r3, #128	@ 0x80
 8005c12:	029b      	lsls	r3, r3, #10
 8005c14:	4013      	ands	r3, r2
 8005c16:	d1f0      	bne.n	8005bfa <HAL_RCC_OscConfig+0xf6>
 8005c18:	e000      	b.n	8005c1c <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c1a:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	2202      	movs	r2, #2
 8005c22:	4013      	ands	r3, r2
 8005c24:	d100      	bne.n	8005c28 <HAL_RCC_OscConfig+0x124>
 8005c26:	e099      	b.n	8005d5c <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005c28:	4b81      	ldr	r3, [pc, #516]	@ (8005e30 <HAL_RCC_OscConfig+0x32c>)
 8005c2a:	689b      	ldr	r3, [r3, #8]
 8005c2c:	2238      	movs	r2, #56	@ 0x38
 8005c2e:	4013      	ands	r3, r2
 8005c30:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005c32:	4b7f      	ldr	r3, [pc, #508]	@ (8005e30 <HAL_RCC_OscConfig+0x32c>)
 8005c34:	68db      	ldr	r3, [r3, #12]
 8005c36:	2203      	movs	r2, #3
 8005c38:	4013      	ands	r3, r2
 8005c3a:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8005c3c:	69bb      	ldr	r3, [r7, #24]
 8005c3e:	2b10      	cmp	r3, #16
 8005c40:	d102      	bne.n	8005c48 <HAL_RCC_OscConfig+0x144>
 8005c42:	697b      	ldr	r3, [r7, #20]
 8005c44:	2b02      	cmp	r3, #2
 8005c46:	d002      	beq.n	8005c4e <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8005c48:	69bb      	ldr	r3, [r7, #24]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d135      	bne.n	8005cba <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005c4e:	4b78      	ldr	r3, [pc, #480]	@ (8005e30 <HAL_RCC_OscConfig+0x32c>)
 8005c50:	681a      	ldr	r2, [r3, #0]
 8005c52:	2380      	movs	r3, #128	@ 0x80
 8005c54:	00db      	lsls	r3, r3, #3
 8005c56:	4013      	ands	r3, r2
 8005c58:	d005      	beq.n	8005c66 <HAL_RCC_OscConfig+0x162>
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	68db      	ldr	r3, [r3, #12]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d101      	bne.n	8005c66 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8005c62:	2301      	movs	r3, #1
 8005c64:	e256      	b.n	8006114 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c66:	4b72      	ldr	r3, [pc, #456]	@ (8005e30 <HAL_RCC_OscConfig+0x32c>)
 8005c68:	685b      	ldr	r3, [r3, #4]
 8005c6a:	4a74      	ldr	r2, [pc, #464]	@ (8005e3c <HAL_RCC_OscConfig+0x338>)
 8005c6c:	4013      	ands	r3, r2
 8005c6e:	0019      	movs	r1, r3
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	695b      	ldr	r3, [r3, #20]
 8005c74:	021a      	lsls	r2, r3, #8
 8005c76:	4b6e      	ldr	r3, [pc, #440]	@ (8005e30 <HAL_RCC_OscConfig+0x32c>)
 8005c78:	430a      	orrs	r2, r1
 8005c7a:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005c7c:	69bb      	ldr	r3, [r7, #24]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d112      	bne.n	8005ca8 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8005c82:	4b6b      	ldr	r3, [pc, #428]	@ (8005e30 <HAL_RCC_OscConfig+0x32c>)
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	4a6e      	ldr	r2, [pc, #440]	@ (8005e40 <HAL_RCC_OscConfig+0x33c>)
 8005c88:	4013      	ands	r3, r2
 8005c8a:	0019      	movs	r1, r3
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	691a      	ldr	r2, [r3, #16]
 8005c90:	4b67      	ldr	r3, [pc, #412]	@ (8005e30 <HAL_RCC_OscConfig+0x32c>)
 8005c92:	430a      	orrs	r2, r1
 8005c94:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8005c96:	4b66      	ldr	r3, [pc, #408]	@ (8005e30 <HAL_RCC_OscConfig+0x32c>)
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	0adb      	lsrs	r3, r3, #11
 8005c9c:	2207      	movs	r2, #7
 8005c9e:	4013      	ands	r3, r2
 8005ca0:	4a68      	ldr	r2, [pc, #416]	@ (8005e44 <HAL_RCC_OscConfig+0x340>)
 8005ca2:	40da      	lsrs	r2, r3
 8005ca4:	4b68      	ldr	r3, [pc, #416]	@ (8005e48 <HAL_RCC_OscConfig+0x344>)
 8005ca6:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005ca8:	4b68      	ldr	r3, [pc, #416]	@ (8005e4c <HAL_RCC_OscConfig+0x348>)
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	0018      	movs	r0, r3
 8005cae:	f7fe fb33 	bl	8004318 <HAL_InitTick>
 8005cb2:	1e03      	subs	r3, r0, #0
 8005cb4:	d051      	beq.n	8005d5a <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8005cb6:	2301      	movs	r3, #1
 8005cb8:	e22c      	b.n	8006114 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	68db      	ldr	r3, [r3, #12]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d030      	beq.n	8005d24 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8005cc2:	4b5b      	ldr	r3, [pc, #364]	@ (8005e30 <HAL_RCC_OscConfig+0x32c>)
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	4a5e      	ldr	r2, [pc, #376]	@ (8005e40 <HAL_RCC_OscConfig+0x33c>)
 8005cc8:	4013      	ands	r3, r2
 8005cca:	0019      	movs	r1, r3
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	691a      	ldr	r2, [r3, #16]
 8005cd0:	4b57      	ldr	r3, [pc, #348]	@ (8005e30 <HAL_RCC_OscConfig+0x32c>)
 8005cd2:	430a      	orrs	r2, r1
 8005cd4:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8005cd6:	4b56      	ldr	r3, [pc, #344]	@ (8005e30 <HAL_RCC_OscConfig+0x32c>)
 8005cd8:	681a      	ldr	r2, [r3, #0]
 8005cda:	4b55      	ldr	r3, [pc, #340]	@ (8005e30 <HAL_RCC_OscConfig+0x32c>)
 8005cdc:	2180      	movs	r1, #128	@ 0x80
 8005cde:	0049      	lsls	r1, r1, #1
 8005ce0:	430a      	orrs	r2, r1
 8005ce2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ce4:	f7fe fb74 	bl	80043d0 <HAL_GetTick>
 8005ce8:	0003      	movs	r3, r0
 8005cea:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005cec:	e008      	b.n	8005d00 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005cee:	f7fe fb6f 	bl	80043d0 <HAL_GetTick>
 8005cf2:	0002      	movs	r2, r0
 8005cf4:	693b      	ldr	r3, [r7, #16]
 8005cf6:	1ad3      	subs	r3, r2, r3
 8005cf8:	2b02      	cmp	r3, #2
 8005cfa:	d901      	bls.n	8005d00 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8005cfc:	2303      	movs	r3, #3
 8005cfe:	e209      	b.n	8006114 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005d00:	4b4b      	ldr	r3, [pc, #300]	@ (8005e30 <HAL_RCC_OscConfig+0x32c>)
 8005d02:	681a      	ldr	r2, [r3, #0]
 8005d04:	2380      	movs	r3, #128	@ 0x80
 8005d06:	00db      	lsls	r3, r3, #3
 8005d08:	4013      	ands	r3, r2
 8005d0a:	d0f0      	beq.n	8005cee <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d0c:	4b48      	ldr	r3, [pc, #288]	@ (8005e30 <HAL_RCC_OscConfig+0x32c>)
 8005d0e:	685b      	ldr	r3, [r3, #4]
 8005d10:	4a4a      	ldr	r2, [pc, #296]	@ (8005e3c <HAL_RCC_OscConfig+0x338>)
 8005d12:	4013      	ands	r3, r2
 8005d14:	0019      	movs	r1, r3
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	695b      	ldr	r3, [r3, #20]
 8005d1a:	021a      	lsls	r2, r3, #8
 8005d1c:	4b44      	ldr	r3, [pc, #272]	@ (8005e30 <HAL_RCC_OscConfig+0x32c>)
 8005d1e:	430a      	orrs	r2, r1
 8005d20:	605a      	str	r2, [r3, #4]
 8005d22:	e01b      	b.n	8005d5c <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8005d24:	4b42      	ldr	r3, [pc, #264]	@ (8005e30 <HAL_RCC_OscConfig+0x32c>)
 8005d26:	681a      	ldr	r2, [r3, #0]
 8005d28:	4b41      	ldr	r3, [pc, #260]	@ (8005e30 <HAL_RCC_OscConfig+0x32c>)
 8005d2a:	4949      	ldr	r1, [pc, #292]	@ (8005e50 <HAL_RCC_OscConfig+0x34c>)
 8005d2c:	400a      	ands	r2, r1
 8005d2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d30:	f7fe fb4e 	bl	80043d0 <HAL_GetTick>
 8005d34:	0003      	movs	r3, r0
 8005d36:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005d38:	e008      	b.n	8005d4c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005d3a:	f7fe fb49 	bl	80043d0 <HAL_GetTick>
 8005d3e:	0002      	movs	r2, r0
 8005d40:	693b      	ldr	r3, [r7, #16]
 8005d42:	1ad3      	subs	r3, r2, r3
 8005d44:	2b02      	cmp	r3, #2
 8005d46:	d901      	bls.n	8005d4c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8005d48:	2303      	movs	r3, #3
 8005d4a:	e1e3      	b.n	8006114 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005d4c:	4b38      	ldr	r3, [pc, #224]	@ (8005e30 <HAL_RCC_OscConfig+0x32c>)
 8005d4e:	681a      	ldr	r2, [r3, #0]
 8005d50:	2380      	movs	r3, #128	@ 0x80
 8005d52:	00db      	lsls	r3, r3, #3
 8005d54:	4013      	ands	r3, r2
 8005d56:	d1f0      	bne.n	8005d3a <HAL_RCC_OscConfig+0x236>
 8005d58:	e000      	b.n	8005d5c <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005d5a:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	2208      	movs	r2, #8
 8005d62:	4013      	ands	r3, r2
 8005d64:	d047      	beq.n	8005df6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8005d66:	4b32      	ldr	r3, [pc, #200]	@ (8005e30 <HAL_RCC_OscConfig+0x32c>)
 8005d68:	689b      	ldr	r3, [r3, #8]
 8005d6a:	2238      	movs	r2, #56	@ 0x38
 8005d6c:	4013      	ands	r3, r2
 8005d6e:	2b18      	cmp	r3, #24
 8005d70:	d10a      	bne.n	8005d88 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8005d72:	4b2f      	ldr	r3, [pc, #188]	@ (8005e30 <HAL_RCC_OscConfig+0x32c>)
 8005d74:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005d76:	2202      	movs	r2, #2
 8005d78:	4013      	ands	r3, r2
 8005d7a:	d03c      	beq.n	8005df6 <HAL_RCC_OscConfig+0x2f2>
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	699b      	ldr	r3, [r3, #24]
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d138      	bne.n	8005df6 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8005d84:	2301      	movs	r3, #1
 8005d86:	e1c5      	b.n	8006114 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	699b      	ldr	r3, [r3, #24]
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d019      	beq.n	8005dc4 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8005d90:	4b27      	ldr	r3, [pc, #156]	@ (8005e30 <HAL_RCC_OscConfig+0x32c>)
 8005d92:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8005d94:	4b26      	ldr	r3, [pc, #152]	@ (8005e30 <HAL_RCC_OscConfig+0x32c>)
 8005d96:	2101      	movs	r1, #1
 8005d98:	430a      	orrs	r2, r1
 8005d9a:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d9c:	f7fe fb18 	bl	80043d0 <HAL_GetTick>
 8005da0:	0003      	movs	r3, r0
 8005da2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005da4:	e008      	b.n	8005db8 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005da6:	f7fe fb13 	bl	80043d0 <HAL_GetTick>
 8005daa:	0002      	movs	r2, r0
 8005dac:	693b      	ldr	r3, [r7, #16]
 8005dae:	1ad3      	subs	r3, r2, r3
 8005db0:	2b02      	cmp	r3, #2
 8005db2:	d901      	bls.n	8005db8 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8005db4:	2303      	movs	r3, #3
 8005db6:	e1ad      	b.n	8006114 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005db8:	4b1d      	ldr	r3, [pc, #116]	@ (8005e30 <HAL_RCC_OscConfig+0x32c>)
 8005dba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005dbc:	2202      	movs	r2, #2
 8005dbe:	4013      	ands	r3, r2
 8005dc0:	d0f1      	beq.n	8005da6 <HAL_RCC_OscConfig+0x2a2>
 8005dc2:	e018      	b.n	8005df6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8005dc4:	4b1a      	ldr	r3, [pc, #104]	@ (8005e30 <HAL_RCC_OscConfig+0x32c>)
 8005dc6:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8005dc8:	4b19      	ldr	r3, [pc, #100]	@ (8005e30 <HAL_RCC_OscConfig+0x32c>)
 8005dca:	2101      	movs	r1, #1
 8005dcc:	438a      	bics	r2, r1
 8005dce:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005dd0:	f7fe fafe 	bl	80043d0 <HAL_GetTick>
 8005dd4:	0003      	movs	r3, r0
 8005dd6:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005dd8:	e008      	b.n	8005dec <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005dda:	f7fe faf9 	bl	80043d0 <HAL_GetTick>
 8005dde:	0002      	movs	r2, r0
 8005de0:	693b      	ldr	r3, [r7, #16]
 8005de2:	1ad3      	subs	r3, r2, r3
 8005de4:	2b02      	cmp	r3, #2
 8005de6:	d901      	bls.n	8005dec <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8005de8:	2303      	movs	r3, #3
 8005dea:	e193      	b.n	8006114 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005dec:	4b10      	ldr	r3, [pc, #64]	@ (8005e30 <HAL_RCC_OscConfig+0x32c>)
 8005dee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005df0:	2202      	movs	r2, #2
 8005df2:	4013      	ands	r3, r2
 8005df4:	d1f1      	bne.n	8005dda <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	2204      	movs	r2, #4
 8005dfc:	4013      	ands	r3, r2
 8005dfe:	d100      	bne.n	8005e02 <HAL_RCC_OscConfig+0x2fe>
 8005e00:	e0c6      	b.n	8005f90 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005e02:	231f      	movs	r3, #31
 8005e04:	18fb      	adds	r3, r7, r3
 8005e06:	2200      	movs	r2, #0
 8005e08:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8005e0a:	4b09      	ldr	r3, [pc, #36]	@ (8005e30 <HAL_RCC_OscConfig+0x32c>)
 8005e0c:	689b      	ldr	r3, [r3, #8]
 8005e0e:	2238      	movs	r2, #56	@ 0x38
 8005e10:	4013      	ands	r3, r2
 8005e12:	2b20      	cmp	r3, #32
 8005e14:	d11e      	bne.n	8005e54 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8005e16:	4b06      	ldr	r3, [pc, #24]	@ (8005e30 <HAL_RCC_OscConfig+0x32c>)
 8005e18:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e1a:	2202      	movs	r2, #2
 8005e1c:	4013      	ands	r3, r2
 8005e1e:	d100      	bne.n	8005e22 <HAL_RCC_OscConfig+0x31e>
 8005e20:	e0b6      	b.n	8005f90 <HAL_RCC_OscConfig+0x48c>
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	689b      	ldr	r3, [r3, #8]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d000      	beq.n	8005e2c <HAL_RCC_OscConfig+0x328>
 8005e2a:	e0b1      	b.n	8005f90 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8005e2c:	2301      	movs	r3, #1
 8005e2e:	e171      	b.n	8006114 <HAL_RCC_OscConfig+0x610>
 8005e30:	40021000 	.word	0x40021000
 8005e34:	fffeffff 	.word	0xfffeffff
 8005e38:	fffbffff 	.word	0xfffbffff
 8005e3c:	ffff80ff 	.word	0xffff80ff
 8005e40:	ffffc7ff 	.word	0xffffc7ff
 8005e44:	00f42400 	.word	0x00f42400
 8005e48:	20000008 	.word	0x20000008
 8005e4c:	2000000c 	.word	0x2000000c
 8005e50:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005e54:	4bb1      	ldr	r3, [pc, #708]	@ (800611c <HAL_RCC_OscConfig+0x618>)
 8005e56:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005e58:	2380      	movs	r3, #128	@ 0x80
 8005e5a:	055b      	lsls	r3, r3, #21
 8005e5c:	4013      	ands	r3, r2
 8005e5e:	d101      	bne.n	8005e64 <HAL_RCC_OscConfig+0x360>
 8005e60:	2301      	movs	r3, #1
 8005e62:	e000      	b.n	8005e66 <HAL_RCC_OscConfig+0x362>
 8005e64:	2300      	movs	r3, #0
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d011      	beq.n	8005e8e <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8005e6a:	4bac      	ldr	r3, [pc, #688]	@ (800611c <HAL_RCC_OscConfig+0x618>)
 8005e6c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005e6e:	4bab      	ldr	r3, [pc, #684]	@ (800611c <HAL_RCC_OscConfig+0x618>)
 8005e70:	2180      	movs	r1, #128	@ 0x80
 8005e72:	0549      	lsls	r1, r1, #21
 8005e74:	430a      	orrs	r2, r1
 8005e76:	63da      	str	r2, [r3, #60]	@ 0x3c
 8005e78:	4ba8      	ldr	r3, [pc, #672]	@ (800611c <HAL_RCC_OscConfig+0x618>)
 8005e7a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005e7c:	2380      	movs	r3, #128	@ 0x80
 8005e7e:	055b      	lsls	r3, r3, #21
 8005e80:	4013      	ands	r3, r2
 8005e82:	60fb      	str	r3, [r7, #12]
 8005e84:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8005e86:	231f      	movs	r3, #31
 8005e88:	18fb      	adds	r3, r7, r3
 8005e8a:	2201      	movs	r2, #1
 8005e8c:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005e8e:	4ba4      	ldr	r3, [pc, #656]	@ (8006120 <HAL_RCC_OscConfig+0x61c>)
 8005e90:	681a      	ldr	r2, [r3, #0]
 8005e92:	2380      	movs	r3, #128	@ 0x80
 8005e94:	005b      	lsls	r3, r3, #1
 8005e96:	4013      	ands	r3, r2
 8005e98:	d11a      	bne.n	8005ed0 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005e9a:	4ba1      	ldr	r3, [pc, #644]	@ (8006120 <HAL_RCC_OscConfig+0x61c>)
 8005e9c:	681a      	ldr	r2, [r3, #0]
 8005e9e:	4ba0      	ldr	r3, [pc, #640]	@ (8006120 <HAL_RCC_OscConfig+0x61c>)
 8005ea0:	2180      	movs	r1, #128	@ 0x80
 8005ea2:	0049      	lsls	r1, r1, #1
 8005ea4:	430a      	orrs	r2, r1
 8005ea6:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8005ea8:	f7fe fa92 	bl	80043d0 <HAL_GetTick>
 8005eac:	0003      	movs	r3, r0
 8005eae:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005eb0:	e008      	b.n	8005ec4 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005eb2:	f7fe fa8d 	bl	80043d0 <HAL_GetTick>
 8005eb6:	0002      	movs	r2, r0
 8005eb8:	693b      	ldr	r3, [r7, #16]
 8005eba:	1ad3      	subs	r3, r2, r3
 8005ebc:	2b02      	cmp	r3, #2
 8005ebe:	d901      	bls.n	8005ec4 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8005ec0:	2303      	movs	r3, #3
 8005ec2:	e127      	b.n	8006114 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005ec4:	4b96      	ldr	r3, [pc, #600]	@ (8006120 <HAL_RCC_OscConfig+0x61c>)
 8005ec6:	681a      	ldr	r2, [r3, #0]
 8005ec8:	2380      	movs	r3, #128	@ 0x80
 8005eca:	005b      	lsls	r3, r3, #1
 8005ecc:	4013      	ands	r3, r2
 8005ece:	d0f0      	beq.n	8005eb2 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	689b      	ldr	r3, [r3, #8]
 8005ed4:	2b01      	cmp	r3, #1
 8005ed6:	d106      	bne.n	8005ee6 <HAL_RCC_OscConfig+0x3e2>
 8005ed8:	4b90      	ldr	r3, [pc, #576]	@ (800611c <HAL_RCC_OscConfig+0x618>)
 8005eda:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005edc:	4b8f      	ldr	r3, [pc, #572]	@ (800611c <HAL_RCC_OscConfig+0x618>)
 8005ede:	2101      	movs	r1, #1
 8005ee0:	430a      	orrs	r2, r1
 8005ee2:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005ee4:	e01c      	b.n	8005f20 <HAL_RCC_OscConfig+0x41c>
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	689b      	ldr	r3, [r3, #8]
 8005eea:	2b05      	cmp	r3, #5
 8005eec:	d10c      	bne.n	8005f08 <HAL_RCC_OscConfig+0x404>
 8005eee:	4b8b      	ldr	r3, [pc, #556]	@ (800611c <HAL_RCC_OscConfig+0x618>)
 8005ef0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005ef2:	4b8a      	ldr	r3, [pc, #552]	@ (800611c <HAL_RCC_OscConfig+0x618>)
 8005ef4:	2104      	movs	r1, #4
 8005ef6:	430a      	orrs	r2, r1
 8005ef8:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005efa:	4b88      	ldr	r3, [pc, #544]	@ (800611c <HAL_RCC_OscConfig+0x618>)
 8005efc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005efe:	4b87      	ldr	r3, [pc, #540]	@ (800611c <HAL_RCC_OscConfig+0x618>)
 8005f00:	2101      	movs	r1, #1
 8005f02:	430a      	orrs	r2, r1
 8005f04:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005f06:	e00b      	b.n	8005f20 <HAL_RCC_OscConfig+0x41c>
 8005f08:	4b84      	ldr	r3, [pc, #528]	@ (800611c <HAL_RCC_OscConfig+0x618>)
 8005f0a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005f0c:	4b83      	ldr	r3, [pc, #524]	@ (800611c <HAL_RCC_OscConfig+0x618>)
 8005f0e:	2101      	movs	r1, #1
 8005f10:	438a      	bics	r2, r1
 8005f12:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005f14:	4b81      	ldr	r3, [pc, #516]	@ (800611c <HAL_RCC_OscConfig+0x618>)
 8005f16:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005f18:	4b80      	ldr	r3, [pc, #512]	@ (800611c <HAL_RCC_OscConfig+0x618>)
 8005f1a:	2104      	movs	r1, #4
 8005f1c:	438a      	bics	r2, r1
 8005f1e:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	689b      	ldr	r3, [r3, #8]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d014      	beq.n	8005f52 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f28:	f7fe fa52 	bl	80043d0 <HAL_GetTick>
 8005f2c:	0003      	movs	r3, r0
 8005f2e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005f30:	e009      	b.n	8005f46 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f32:	f7fe fa4d 	bl	80043d0 <HAL_GetTick>
 8005f36:	0002      	movs	r2, r0
 8005f38:	693b      	ldr	r3, [r7, #16]
 8005f3a:	1ad3      	subs	r3, r2, r3
 8005f3c:	4a79      	ldr	r2, [pc, #484]	@ (8006124 <HAL_RCC_OscConfig+0x620>)
 8005f3e:	4293      	cmp	r3, r2
 8005f40:	d901      	bls.n	8005f46 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8005f42:	2303      	movs	r3, #3
 8005f44:	e0e6      	b.n	8006114 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005f46:	4b75      	ldr	r3, [pc, #468]	@ (800611c <HAL_RCC_OscConfig+0x618>)
 8005f48:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f4a:	2202      	movs	r2, #2
 8005f4c:	4013      	ands	r3, r2
 8005f4e:	d0f0      	beq.n	8005f32 <HAL_RCC_OscConfig+0x42e>
 8005f50:	e013      	b.n	8005f7a <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f52:	f7fe fa3d 	bl	80043d0 <HAL_GetTick>
 8005f56:	0003      	movs	r3, r0
 8005f58:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005f5a:	e009      	b.n	8005f70 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f5c:	f7fe fa38 	bl	80043d0 <HAL_GetTick>
 8005f60:	0002      	movs	r2, r0
 8005f62:	693b      	ldr	r3, [r7, #16]
 8005f64:	1ad3      	subs	r3, r2, r3
 8005f66:	4a6f      	ldr	r2, [pc, #444]	@ (8006124 <HAL_RCC_OscConfig+0x620>)
 8005f68:	4293      	cmp	r3, r2
 8005f6a:	d901      	bls.n	8005f70 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8005f6c:	2303      	movs	r3, #3
 8005f6e:	e0d1      	b.n	8006114 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005f70:	4b6a      	ldr	r3, [pc, #424]	@ (800611c <HAL_RCC_OscConfig+0x618>)
 8005f72:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f74:	2202      	movs	r2, #2
 8005f76:	4013      	ands	r3, r2
 8005f78:	d1f0      	bne.n	8005f5c <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8005f7a:	231f      	movs	r3, #31
 8005f7c:	18fb      	adds	r3, r7, r3
 8005f7e:	781b      	ldrb	r3, [r3, #0]
 8005f80:	2b01      	cmp	r3, #1
 8005f82:	d105      	bne.n	8005f90 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8005f84:	4b65      	ldr	r3, [pc, #404]	@ (800611c <HAL_RCC_OscConfig+0x618>)
 8005f86:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005f88:	4b64      	ldr	r3, [pc, #400]	@ (800611c <HAL_RCC_OscConfig+0x618>)
 8005f8a:	4967      	ldr	r1, [pc, #412]	@ (8006128 <HAL_RCC_OscConfig+0x624>)
 8005f8c:	400a      	ands	r2, r1
 8005f8e:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	69db      	ldr	r3, [r3, #28]
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d100      	bne.n	8005f9a <HAL_RCC_OscConfig+0x496>
 8005f98:	e0bb      	b.n	8006112 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005f9a:	4b60      	ldr	r3, [pc, #384]	@ (800611c <HAL_RCC_OscConfig+0x618>)
 8005f9c:	689b      	ldr	r3, [r3, #8]
 8005f9e:	2238      	movs	r2, #56	@ 0x38
 8005fa0:	4013      	ands	r3, r2
 8005fa2:	2b10      	cmp	r3, #16
 8005fa4:	d100      	bne.n	8005fa8 <HAL_RCC_OscConfig+0x4a4>
 8005fa6:	e07b      	b.n	80060a0 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	69db      	ldr	r3, [r3, #28]
 8005fac:	2b02      	cmp	r3, #2
 8005fae:	d156      	bne.n	800605e <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005fb0:	4b5a      	ldr	r3, [pc, #360]	@ (800611c <HAL_RCC_OscConfig+0x618>)
 8005fb2:	681a      	ldr	r2, [r3, #0]
 8005fb4:	4b59      	ldr	r3, [pc, #356]	@ (800611c <HAL_RCC_OscConfig+0x618>)
 8005fb6:	495d      	ldr	r1, [pc, #372]	@ (800612c <HAL_RCC_OscConfig+0x628>)
 8005fb8:	400a      	ands	r2, r1
 8005fba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fbc:	f7fe fa08 	bl	80043d0 <HAL_GetTick>
 8005fc0:	0003      	movs	r3, r0
 8005fc2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005fc4:	e008      	b.n	8005fd8 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005fc6:	f7fe fa03 	bl	80043d0 <HAL_GetTick>
 8005fca:	0002      	movs	r2, r0
 8005fcc:	693b      	ldr	r3, [r7, #16]
 8005fce:	1ad3      	subs	r3, r2, r3
 8005fd0:	2b02      	cmp	r3, #2
 8005fd2:	d901      	bls.n	8005fd8 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8005fd4:	2303      	movs	r3, #3
 8005fd6:	e09d      	b.n	8006114 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005fd8:	4b50      	ldr	r3, [pc, #320]	@ (800611c <HAL_RCC_OscConfig+0x618>)
 8005fda:	681a      	ldr	r2, [r3, #0]
 8005fdc:	2380      	movs	r3, #128	@ 0x80
 8005fde:	049b      	lsls	r3, r3, #18
 8005fe0:	4013      	ands	r3, r2
 8005fe2:	d1f0      	bne.n	8005fc6 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005fe4:	4b4d      	ldr	r3, [pc, #308]	@ (800611c <HAL_RCC_OscConfig+0x618>)
 8005fe6:	68db      	ldr	r3, [r3, #12]
 8005fe8:	4a51      	ldr	r2, [pc, #324]	@ (8006130 <HAL_RCC_OscConfig+0x62c>)
 8005fea:	4013      	ands	r3, r2
 8005fec:	0019      	movs	r1, r3
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	6a1a      	ldr	r2, [r3, #32]
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ff6:	431a      	orrs	r2, r3
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ffc:	021b      	lsls	r3, r3, #8
 8005ffe:	431a      	orrs	r2, r3
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006004:	431a      	orrs	r2, r3
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800600a:	431a      	orrs	r2, r3
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006010:	431a      	orrs	r2, r3
 8006012:	4b42      	ldr	r3, [pc, #264]	@ (800611c <HAL_RCC_OscConfig+0x618>)
 8006014:	430a      	orrs	r2, r1
 8006016:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006018:	4b40      	ldr	r3, [pc, #256]	@ (800611c <HAL_RCC_OscConfig+0x618>)
 800601a:	681a      	ldr	r2, [r3, #0]
 800601c:	4b3f      	ldr	r3, [pc, #252]	@ (800611c <HAL_RCC_OscConfig+0x618>)
 800601e:	2180      	movs	r1, #128	@ 0x80
 8006020:	0449      	lsls	r1, r1, #17
 8006022:	430a      	orrs	r2, r1
 8006024:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8006026:	4b3d      	ldr	r3, [pc, #244]	@ (800611c <HAL_RCC_OscConfig+0x618>)
 8006028:	68da      	ldr	r2, [r3, #12]
 800602a:	4b3c      	ldr	r3, [pc, #240]	@ (800611c <HAL_RCC_OscConfig+0x618>)
 800602c:	2180      	movs	r1, #128	@ 0x80
 800602e:	0549      	lsls	r1, r1, #21
 8006030:	430a      	orrs	r2, r1
 8006032:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006034:	f7fe f9cc 	bl	80043d0 <HAL_GetTick>
 8006038:	0003      	movs	r3, r0
 800603a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800603c:	e008      	b.n	8006050 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800603e:	f7fe f9c7 	bl	80043d0 <HAL_GetTick>
 8006042:	0002      	movs	r2, r0
 8006044:	693b      	ldr	r3, [r7, #16]
 8006046:	1ad3      	subs	r3, r2, r3
 8006048:	2b02      	cmp	r3, #2
 800604a:	d901      	bls.n	8006050 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 800604c:	2303      	movs	r3, #3
 800604e:	e061      	b.n	8006114 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006050:	4b32      	ldr	r3, [pc, #200]	@ (800611c <HAL_RCC_OscConfig+0x618>)
 8006052:	681a      	ldr	r2, [r3, #0]
 8006054:	2380      	movs	r3, #128	@ 0x80
 8006056:	049b      	lsls	r3, r3, #18
 8006058:	4013      	ands	r3, r2
 800605a:	d0f0      	beq.n	800603e <HAL_RCC_OscConfig+0x53a>
 800605c:	e059      	b.n	8006112 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800605e:	4b2f      	ldr	r3, [pc, #188]	@ (800611c <HAL_RCC_OscConfig+0x618>)
 8006060:	681a      	ldr	r2, [r3, #0]
 8006062:	4b2e      	ldr	r3, [pc, #184]	@ (800611c <HAL_RCC_OscConfig+0x618>)
 8006064:	4931      	ldr	r1, [pc, #196]	@ (800612c <HAL_RCC_OscConfig+0x628>)
 8006066:	400a      	ands	r2, r1
 8006068:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800606a:	f7fe f9b1 	bl	80043d0 <HAL_GetTick>
 800606e:	0003      	movs	r3, r0
 8006070:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006072:	e008      	b.n	8006086 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006074:	f7fe f9ac 	bl	80043d0 <HAL_GetTick>
 8006078:	0002      	movs	r2, r0
 800607a:	693b      	ldr	r3, [r7, #16]
 800607c:	1ad3      	subs	r3, r2, r3
 800607e:	2b02      	cmp	r3, #2
 8006080:	d901      	bls.n	8006086 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8006082:	2303      	movs	r3, #3
 8006084:	e046      	b.n	8006114 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006086:	4b25      	ldr	r3, [pc, #148]	@ (800611c <HAL_RCC_OscConfig+0x618>)
 8006088:	681a      	ldr	r2, [r3, #0]
 800608a:	2380      	movs	r3, #128	@ 0x80
 800608c:	049b      	lsls	r3, r3, #18
 800608e:	4013      	ands	r3, r2
 8006090:	d1f0      	bne.n	8006074 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8006092:	4b22      	ldr	r3, [pc, #136]	@ (800611c <HAL_RCC_OscConfig+0x618>)
 8006094:	68da      	ldr	r2, [r3, #12]
 8006096:	4b21      	ldr	r3, [pc, #132]	@ (800611c <HAL_RCC_OscConfig+0x618>)
 8006098:	4926      	ldr	r1, [pc, #152]	@ (8006134 <HAL_RCC_OscConfig+0x630>)
 800609a:	400a      	ands	r2, r1
 800609c:	60da      	str	r2, [r3, #12]
 800609e:	e038      	b.n	8006112 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	69db      	ldr	r3, [r3, #28]
 80060a4:	2b01      	cmp	r3, #1
 80060a6:	d101      	bne.n	80060ac <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80060a8:	2301      	movs	r3, #1
 80060aa:	e033      	b.n	8006114 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80060ac:	4b1b      	ldr	r3, [pc, #108]	@ (800611c <HAL_RCC_OscConfig+0x618>)
 80060ae:	68db      	ldr	r3, [r3, #12]
 80060b0:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80060b2:	697b      	ldr	r3, [r7, #20]
 80060b4:	2203      	movs	r2, #3
 80060b6:	401a      	ands	r2, r3
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	6a1b      	ldr	r3, [r3, #32]
 80060bc:	429a      	cmp	r2, r3
 80060be:	d126      	bne.n	800610e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80060c0:	697b      	ldr	r3, [r7, #20]
 80060c2:	2270      	movs	r2, #112	@ 0x70
 80060c4:	401a      	ands	r2, r3
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80060ca:	429a      	cmp	r2, r3
 80060cc:	d11f      	bne.n	800610e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80060ce:	697a      	ldr	r2, [r7, #20]
 80060d0:	23fe      	movs	r3, #254	@ 0xfe
 80060d2:	01db      	lsls	r3, r3, #7
 80060d4:	401a      	ands	r2, r3
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060da:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80060dc:	429a      	cmp	r2, r3
 80060de:	d116      	bne.n	800610e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80060e0:	697a      	ldr	r2, [r7, #20]
 80060e2:	23f8      	movs	r3, #248	@ 0xf8
 80060e4:	039b      	lsls	r3, r3, #14
 80060e6:	401a      	ands	r2, r3
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80060ec:	429a      	cmp	r2, r3
 80060ee:	d10e      	bne.n	800610e <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80060f0:	697a      	ldr	r2, [r7, #20]
 80060f2:	23e0      	movs	r3, #224	@ 0xe0
 80060f4:	051b      	lsls	r3, r3, #20
 80060f6:	401a      	ands	r2, r3
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80060fc:	429a      	cmp	r2, r3
 80060fe:	d106      	bne.n	800610e <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8006100:	697b      	ldr	r3, [r7, #20]
 8006102:	0f5b      	lsrs	r3, r3, #29
 8006104:	075a      	lsls	r2, r3, #29
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800610a:	429a      	cmp	r2, r3
 800610c:	d001      	beq.n	8006112 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 800610e:	2301      	movs	r3, #1
 8006110:	e000      	b.n	8006114 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8006112:	2300      	movs	r3, #0
}
 8006114:	0018      	movs	r0, r3
 8006116:	46bd      	mov	sp, r7
 8006118:	b008      	add	sp, #32
 800611a:	bd80      	pop	{r7, pc}
 800611c:	40021000 	.word	0x40021000
 8006120:	40007000 	.word	0x40007000
 8006124:	00001388 	.word	0x00001388
 8006128:	efffffff 	.word	0xefffffff
 800612c:	feffffff 	.word	0xfeffffff
 8006130:	11c1808c 	.word	0x11c1808c
 8006134:	eefefffc 	.word	0xeefefffc

08006138 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006138:	b580      	push	{r7, lr}
 800613a:	b084      	sub	sp, #16
 800613c:	af00      	add	r7, sp, #0
 800613e:	6078      	str	r0, [r7, #4]
 8006140:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	2b00      	cmp	r3, #0
 8006146:	d101      	bne.n	800614c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006148:	2301      	movs	r3, #1
 800614a:	e0e9      	b.n	8006320 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800614c:	4b76      	ldr	r3, [pc, #472]	@ (8006328 <HAL_RCC_ClockConfig+0x1f0>)
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	2207      	movs	r2, #7
 8006152:	4013      	ands	r3, r2
 8006154:	683a      	ldr	r2, [r7, #0]
 8006156:	429a      	cmp	r2, r3
 8006158:	d91e      	bls.n	8006198 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800615a:	4b73      	ldr	r3, [pc, #460]	@ (8006328 <HAL_RCC_ClockConfig+0x1f0>)
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	2207      	movs	r2, #7
 8006160:	4393      	bics	r3, r2
 8006162:	0019      	movs	r1, r3
 8006164:	4b70      	ldr	r3, [pc, #448]	@ (8006328 <HAL_RCC_ClockConfig+0x1f0>)
 8006166:	683a      	ldr	r2, [r7, #0]
 8006168:	430a      	orrs	r2, r1
 800616a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800616c:	f7fe f930 	bl	80043d0 <HAL_GetTick>
 8006170:	0003      	movs	r3, r0
 8006172:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8006174:	e009      	b.n	800618a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006176:	f7fe f92b 	bl	80043d0 <HAL_GetTick>
 800617a:	0002      	movs	r2, r0
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	1ad3      	subs	r3, r2, r3
 8006180:	4a6a      	ldr	r2, [pc, #424]	@ (800632c <HAL_RCC_ClockConfig+0x1f4>)
 8006182:	4293      	cmp	r3, r2
 8006184:	d901      	bls.n	800618a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8006186:	2303      	movs	r3, #3
 8006188:	e0ca      	b.n	8006320 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800618a:	4b67      	ldr	r3, [pc, #412]	@ (8006328 <HAL_RCC_ClockConfig+0x1f0>)
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	2207      	movs	r2, #7
 8006190:	4013      	ands	r3, r2
 8006192:	683a      	ldr	r2, [r7, #0]
 8006194:	429a      	cmp	r2, r3
 8006196:	d1ee      	bne.n	8006176 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	2202      	movs	r2, #2
 800619e:	4013      	ands	r3, r2
 80061a0:	d015      	beq.n	80061ce <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	2204      	movs	r2, #4
 80061a8:	4013      	ands	r3, r2
 80061aa:	d006      	beq.n	80061ba <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80061ac:	4b60      	ldr	r3, [pc, #384]	@ (8006330 <HAL_RCC_ClockConfig+0x1f8>)
 80061ae:	689a      	ldr	r2, [r3, #8]
 80061b0:	4b5f      	ldr	r3, [pc, #380]	@ (8006330 <HAL_RCC_ClockConfig+0x1f8>)
 80061b2:	21e0      	movs	r1, #224	@ 0xe0
 80061b4:	01c9      	lsls	r1, r1, #7
 80061b6:	430a      	orrs	r2, r1
 80061b8:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80061ba:	4b5d      	ldr	r3, [pc, #372]	@ (8006330 <HAL_RCC_ClockConfig+0x1f8>)
 80061bc:	689b      	ldr	r3, [r3, #8]
 80061be:	4a5d      	ldr	r2, [pc, #372]	@ (8006334 <HAL_RCC_ClockConfig+0x1fc>)
 80061c0:	4013      	ands	r3, r2
 80061c2:	0019      	movs	r1, r3
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	689a      	ldr	r2, [r3, #8]
 80061c8:	4b59      	ldr	r3, [pc, #356]	@ (8006330 <HAL_RCC_ClockConfig+0x1f8>)
 80061ca:	430a      	orrs	r2, r1
 80061cc:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	2201      	movs	r2, #1
 80061d4:	4013      	ands	r3, r2
 80061d6:	d057      	beq.n	8006288 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	685b      	ldr	r3, [r3, #4]
 80061dc:	2b01      	cmp	r3, #1
 80061de:	d107      	bne.n	80061f0 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80061e0:	4b53      	ldr	r3, [pc, #332]	@ (8006330 <HAL_RCC_ClockConfig+0x1f8>)
 80061e2:	681a      	ldr	r2, [r3, #0]
 80061e4:	2380      	movs	r3, #128	@ 0x80
 80061e6:	029b      	lsls	r3, r3, #10
 80061e8:	4013      	ands	r3, r2
 80061ea:	d12b      	bne.n	8006244 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80061ec:	2301      	movs	r3, #1
 80061ee:	e097      	b.n	8006320 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	685b      	ldr	r3, [r3, #4]
 80061f4:	2b02      	cmp	r3, #2
 80061f6:	d107      	bne.n	8006208 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80061f8:	4b4d      	ldr	r3, [pc, #308]	@ (8006330 <HAL_RCC_ClockConfig+0x1f8>)
 80061fa:	681a      	ldr	r2, [r3, #0]
 80061fc:	2380      	movs	r3, #128	@ 0x80
 80061fe:	049b      	lsls	r3, r3, #18
 8006200:	4013      	ands	r3, r2
 8006202:	d11f      	bne.n	8006244 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8006204:	2301      	movs	r3, #1
 8006206:	e08b      	b.n	8006320 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	685b      	ldr	r3, [r3, #4]
 800620c:	2b00      	cmp	r3, #0
 800620e:	d107      	bne.n	8006220 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006210:	4b47      	ldr	r3, [pc, #284]	@ (8006330 <HAL_RCC_ClockConfig+0x1f8>)
 8006212:	681a      	ldr	r2, [r3, #0]
 8006214:	2380      	movs	r3, #128	@ 0x80
 8006216:	00db      	lsls	r3, r3, #3
 8006218:	4013      	ands	r3, r2
 800621a:	d113      	bne.n	8006244 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800621c:	2301      	movs	r3, #1
 800621e:	e07f      	b.n	8006320 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	685b      	ldr	r3, [r3, #4]
 8006224:	2b03      	cmp	r3, #3
 8006226:	d106      	bne.n	8006236 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006228:	4b41      	ldr	r3, [pc, #260]	@ (8006330 <HAL_RCC_ClockConfig+0x1f8>)
 800622a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800622c:	2202      	movs	r2, #2
 800622e:	4013      	ands	r3, r2
 8006230:	d108      	bne.n	8006244 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8006232:	2301      	movs	r3, #1
 8006234:	e074      	b.n	8006320 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006236:	4b3e      	ldr	r3, [pc, #248]	@ (8006330 <HAL_RCC_ClockConfig+0x1f8>)
 8006238:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800623a:	2202      	movs	r2, #2
 800623c:	4013      	ands	r3, r2
 800623e:	d101      	bne.n	8006244 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8006240:	2301      	movs	r3, #1
 8006242:	e06d      	b.n	8006320 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006244:	4b3a      	ldr	r3, [pc, #232]	@ (8006330 <HAL_RCC_ClockConfig+0x1f8>)
 8006246:	689b      	ldr	r3, [r3, #8]
 8006248:	2207      	movs	r2, #7
 800624a:	4393      	bics	r3, r2
 800624c:	0019      	movs	r1, r3
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	685a      	ldr	r2, [r3, #4]
 8006252:	4b37      	ldr	r3, [pc, #220]	@ (8006330 <HAL_RCC_ClockConfig+0x1f8>)
 8006254:	430a      	orrs	r2, r1
 8006256:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006258:	f7fe f8ba 	bl	80043d0 <HAL_GetTick>
 800625c:	0003      	movs	r3, r0
 800625e:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006260:	e009      	b.n	8006276 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006262:	f7fe f8b5 	bl	80043d0 <HAL_GetTick>
 8006266:	0002      	movs	r2, r0
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	1ad3      	subs	r3, r2, r3
 800626c:	4a2f      	ldr	r2, [pc, #188]	@ (800632c <HAL_RCC_ClockConfig+0x1f4>)
 800626e:	4293      	cmp	r3, r2
 8006270:	d901      	bls.n	8006276 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8006272:	2303      	movs	r3, #3
 8006274:	e054      	b.n	8006320 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006276:	4b2e      	ldr	r3, [pc, #184]	@ (8006330 <HAL_RCC_ClockConfig+0x1f8>)
 8006278:	689b      	ldr	r3, [r3, #8]
 800627a:	2238      	movs	r2, #56	@ 0x38
 800627c:	401a      	ands	r2, r3
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	685b      	ldr	r3, [r3, #4]
 8006282:	00db      	lsls	r3, r3, #3
 8006284:	429a      	cmp	r2, r3
 8006286:	d1ec      	bne.n	8006262 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006288:	4b27      	ldr	r3, [pc, #156]	@ (8006328 <HAL_RCC_ClockConfig+0x1f0>)
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	2207      	movs	r2, #7
 800628e:	4013      	ands	r3, r2
 8006290:	683a      	ldr	r2, [r7, #0]
 8006292:	429a      	cmp	r2, r3
 8006294:	d21e      	bcs.n	80062d4 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006296:	4b24      	ldr	r3, [pc, #144]	@ (8006328 <HAL_RCC_ClockConfig+0x1f0>)
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	2207      	movs	r2, #7
 800629c:	4393      	bics	r3, r2
 800629e:	0019      	movs	r1, r3
 80062a0:	4b21      	ldr	r3, [pc, #132]	@ (8006328 <HAL_RCC_ClockConfig+0x1f0>)
 80062a2:	683a      	ldr	r2, [r7, #0]
 80062a4:	430a      	orrs	r2, r1
 80062a6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80062a8:	f7fe f892 	bl	80043d0 <HAL_GetTick>
 80062ac:	0003      	movs	r3, r0
 80062ae:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80062b0:	e009      	b.n	80062c6 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80062b2:	f7fe f88d 	bl	80043d0 <HAL_GetTick>
 80062b6:	0002      	movs	r2, r0
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	1ad3      	subs	r3, r2, r3
 80062bc:	4a1b      	ldr	r2, [pc, #108]	@ (800632c <HAL_RCC_ClockConfig+0x1f4>)
 80062be:	4293      	cmp	r3, r2
 80062c0:	d901      	bls.n	80062c6 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80062c2:	2303      	movs	r3, #3
 80062c4:	e02c      	b.n	8006320 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80062c6:	4b18      	ldr	r3, [pc, #96]	@ (8006328 <HAL_RCC_ClockConfig+0x1f0>)
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	2207      	movs	r2, #7
 80062cc:	4013      	ands	r3, r2
 80062ce:	683a      	ldr	r2, [r7, #0]
 80062d0:	429a      	cmp	r2, r3
 80062d2:	d1ee      	bne.n	80062b2 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	2204      	movs	r2, #4
 80062da:	4013      	ands	r3, r2
 80062dc:	d009      	beq.n	80062f2 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80062de:	4b14      	ldr	r3, [pc, #80]	@ (8006330 <HAL_RCC_ClockConfig+0x1f8>)
 80062e0:	689b      	ldr	r3, [r3, #8]
 80062e2:	4a15      	ldr	r2, [pc, #84]	@ (8006338 <HAL_RCC_ClockConfig+0x200>)
 80062e4:	4013      	ands	r3, r2
 80062e6:	0019      	movs	r1, r3
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	68da      	ldr	r2, [r3, #12]
 80062ec:	4b10      	ldr	r3, [pc, #64]	@ (8006330 <HAL_RCC_ClockConfig+0x1f8>)
 80062ee:	430a      	orrs	r2, r1
 80062f0:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80062f2:	f000 f829 	bl	8006348 <HAL_RCC_GetSysClockFreq>
 80062f6:	0001      	movs	r1, r0
 80062f8:	4b0d      	ldr	r3, [pc, #52]	@ (8006330 <HAL_RCC_ClockConfig+0x1f8>)
 80062fa:	689b      	ldr	r3, [r3, #8]
 80062fc:	0a1b      	lsrs	r3, r3, #8
 80062fe:	220f      	movs	r2, #15
 8006300:	401a      	ands	r2, r3
 8006302:	4b0e      	ldr	r3, [pc, #56]	@ (800633c <HAL_RCC_ClockConfig+0x204>)
 8006304:	0092      	lsls	r2, r2, #2
 8006306:	58d3      	ldr	r3, [r2, r3]
 8006308:	221f      	movs	r2, #31
 800630a:	4013      	ands	r3, r2
 800630c:	000a      	movs	r2, r1
 800630e:	40da      	lsrs	r2, r3
 8006310:	4b0b      	ldr	r3, [pc, #44]	@ (8006340 <HAL_RCC_ClockConfig+0x208>)
 8006312:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8006314:	4b0b      	ldr	r3, [pc, #44]	@ (8006344 <HAL_RCC_ClockConfig+0x20c>)
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	0018      	movs	r0, r3
 800631a:	f7fd fffd 	bl	8004318 <HAL_InitTick>
 800631e:	0003      	movs	r3, r0
}
 8006320:	0018      	movs	r0, r3
 8006322:	46bd      	mov	sp, r7
 8006324:	b004      	add	sp, #16
 8006326:	bd80      	pop	{r7, pc}
 8006328:	40022000 	.word	0x40022000
 800632c:	00001388 	.word	0x00001388
 8006330:	40021000 	.word	0x40021000
 8006334:	fffff0ff 	.word	0xfffff0ff
 8006338:	ffff8fff 	.word	0xffff8fff
 800633c:	080090d4 	.word	0x080090d4
 8006340:	20000008 	.word	0x20000008
 8006344:	2000000c 	.word	0x2000000c

08006348 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006348:	b580      	push	{r7, lr}
 800634a:	b086      	sub	sp, #24
 800634c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800634e:	4b3c      	ldr	r3, [pc, #240]	@ (8006440 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006350:	689b      	ldr	r3, [r3, #8]
 8006352:	2238      	movs	r2, #56	@ 0x38
 8006354:	4013      	ands	r3, r2
 8006356:	d10f      	bne.n	8006378 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8006358:	4b39      	ldr	r3, [pc, #228]	@ (8006440 <HAL_RCC_GetSysClockFreq+0xf8>)
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	0adb      	lsrs	r3, r3, #11
 800635e:	2207      	movs	r2, #7
 8006360:	4013      	ands	r3, r2
 8006362:	2201      	movs	r2, #1
 8006364:	409a      	lsls	r2, r3
 8006366:	0013      	movs	r3, r2
 8006368:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800636a:	6839      	ldr	r1, [r7, #0]
 800636c:	4835      	ldr	r0, [pc, #212]	@ (8006444 <HAL_RCC_GetSysClockFreq+0xfc>)
 800636e:	f7f9 fec9 	bl	8000104 <__udivsi3>
 8006372:	0003      	movs	r3, r0
 8006374:	613b      	str	r3, [r7, #16]
 8006376:	e05d      	b.n	8006434 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006378:	4b31      	ldr	r3, [pc, #196]	@ (8006440 <HAL_RCC_GetSysClockFreq+0xf8>)
 800637a:	689b      	ldr	r3, [r3, #8]
 800637c:	2238      	movs	r2, #56	@ 0x38
 800637e:	4013      	ands	r3, r2
 8006380:	2b08      	cmp	r3, #8
 8006382:	d102      	bne.n	800638a <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006384:	4b30      	ldr	r3, [pc, #192]	@ (8006448 <HAL_RCC_GetSysClockFreq+0x100>)
 8006386:	613b      	str	r3, [r7, #16]
 8006388:	e054      	b.n	8006434 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800638a:	4b2d      	ldr	r3, [pc, #180]	@ (8006440 <HAL_RCC_GetSysClockFreq+0xf8>)
 800638c:	689b      	ldr	r3, [r3, #8]
 800638e:	2238      	movs	r2, #56	@ 0x38
 8006390:	4013      	ands	r3, r2
 8006392:	2b10      	cmp	r3, #16
 8006394:	d138      	bne.n	8006408 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8006396:	4b2a      	ldr	r3, [pc, #168]	@ (8006440 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006398:	68db      	ldr	r3, [r3, #12]
 800639a:	2203      	movs	r2, #3
 800639c:	4013      	ands	r3, r2
 800639e:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80063a0:	4b27      	ldr	r3, [pc, #156]	@ (8006440 <HAL_RCC_GetSysClockFreq+0xf8>)
 80063a2:	68db      	ldr	r3, [r3, #12]
 80063a4:	091b      	lsrs	r3, r3, #4
 80063a6:	2207      	movs	r2, #7
 80063a8:	4013      	ands	r3, r2
 80063aa:	3301      	adds	r3, #1
 80063ac:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	2b03      	cmp	r3, #3
 80063b2:	d10d      	bne.n	80063d0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80063b4:	68b9      	ldr	r1, [r7, #8]
 80063b6:	4824      	ldr	r0, [pc, #144]	@ (8006448 <HAL_RCC_GetSysClockFreq+0x100>)
 80063b8:	f7f9 fea4 	bl	8000104 <__udivsi3>
 80063bc:	0003      	movs	r3, r0
 80063be:	0019      	movs	r1, r3
 80063c0:	4b1f      	ldr	r3, [pc, #124]	@ (8006440 <HAL_RCC_GetSysClockFreq+0xf8>)
 80063c2:	68db      	ldr	r3, [r3, #12]
 80063c4:	0a1b      	lsrs	r3, r3, #8
 80063c6:	227f      	movs	r2, #127	@ 0x7f
 80063c8:	4013      	ands	r3, r2
 80063ca:	434b      	muls	r3, r1
 80063cc:	617b      	str	r3, [r7, #20]
        break;
 80063ce:	e00d      	b.n	80063ec <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80063d0:	68b9      	ldr	r1, [r7, #8]
 80063d2:	481c      	ldr	r0, [pc, #112]	@ (8006444 <HAL_RCC_GetSysClockFreq+0xfc>)
 80063d4:	f7f9 fe96 	bl	8000104 <__udivsi3>
 80063d8:	0003      	movs	r3, r0
 80063da:	0019      	movs	r1, r3
 80063dc:	4b18      	ldr	r3, [pc, #96]	@ (8006440 <HAL_RCC_GetSysClockFreq+0xf8>)
 80063de:	68db      	ldr	r3, [r3, #12]
 80063e0:	0a1b      	lsrs	r3, r3, #8
 80063e2:	227f      	movs	r2, #127	@ 0x7f
 80063e4:	4013      	ands	r3, r2
 80063e6:	434b      	muls	r3, r1
 80063e8:	617b      	str	r3, [r7, #20]
        break;
 80063ea:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80063ec:	4b14      	ldr	r3, [pc, #80]	@ (8006440 <HAL_RCC_GetSysClockFreq+0xf8>)
 80063ee:	68db      	ldr	r3, [r3, #12]
 80063f0:	0f5b      	lsrs	r3, r3, #29
 80063f2:	2207      	movs	r2, #7
 80063f4:	4013      	ands	r3, r2
 80063f6:	3301      	adds	r3, #1
 80063f8:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80063fa:	6879      	ldr	r1, [r7, #4]
 80063fc:	6978      	ldr	r0, [r7, #20]
 80063fe:	f7f9 fe81 	bl	8000104 <__udivsi3>
 8006402:	0003      	movs	r3, r0
 8006404:	613b      	str	r3, [r7, #16]
 8006406:	e015      	b.n	8006434 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8006408:	4b0d      	ldr	r3, [pc, #52]	@ (8006440 <HAL_RCC_GetSysClockFreq+0xf8>)
 800640a:	689b      	ldr	r3, [r3, #8]
 800640c:	2238      	movs	r2, #56	@ 0x38
 800640e:	4013      	ands	r3, r2
 8006410:	2b20      	cmp	r3, #32
 8006412:	d103      	bne.n	800641c <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8006414:	2380      	movs	r3, #128	@ 0x80
 8006416:	021b      	lsls	r3, r3, #8
 8006418:	613b      	str	r3, [r7, #16]
 800641a:	e00b      	b.n	8006434 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800641c:	4b08      	ldr	r3, [pc, #32]	@ (8006440 <HAL_RCC_GetSysClockFreq+0xf8>)
 800641e:	689b      	ldr	r3, [r3, #8]
 8006420:	2238      	movs	r2, #56	@ 0x38
 8006422:	4013      	ands	r3, r2
 8006424:	2b18      	cmp	r3, #24
 8006426:	d103      	bne.n	8006430 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8006428:	23fa      	movs	r3, #250	@ 0xfa
 800642a:	01db      	lsls	r3, r3, #7
 800642c:	613b      	str	r3, [r7, #16]
 800642e:	e001      	b.n	8006434 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8006430:	2300      	movs	r3, #0
 8006432:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8006434:	693b      	ldr	r3, [r7, #16]
}
 8006436:	0018      	movs	r0, r3
 8006438:	46bd      	mov	sp, r7
 800643a:	b006      	add	sp, #24
 800643c:	bd80      	pop	{r7, pc}
 800643e:	46c0      	nop			@ (mov r8, r8)
 8006440:	40021000 	.word	0x40021000
 8006444:	00f42400 	.word	0x00f42400
 8006448:	007a1200 	.word	0x007a1200

0800644c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800644c:	b580      	push	{r7, lr}
 800644e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006450:	4b02      	ldr	r3, [pc, #8]	@ (800645c <HAL_RCC_GetHCLKFreq+0x10>)
 8006452:	681b      	ldr	r3, [r3, #0]
}
 8006454:	0018      	movs	r0, r3
 8006456:	46bd      	mov	sp, r7
 8006458:	bd80      	pop	{r7, pc}
 800645a:	46c0      	nop			@ (mov r8, r8)
 800645c:	20000008 	.word	0x20000008

08006460 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006460:	b5b0      	push	{r4, r5, r7, lr}
 8006462:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8006464:	f7ff fff2 	bl	800644c <HAL_RCC_GetHCLKFreq>
 8006468:	0004      	movs	r4, r0
 800646a:	f7ff fb3f 	bl	8005aec <LL_RCC_GetAPB1Prescaler>
 800646e:	0003      	movs	r3, r0
 8006470:	0b1a      	lsrs	r2, r3, #12
 8006472:	4b05      	ldr	r3, [pc, #20]	@ (8006488 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006474:	0092      	lsls	r2, r2, #2
 8006476:	58d3      	ldr	r3, [r2, r3]
 8006478:	221f      	movs	r2, #31
 800647a:	4013      	ands	r3, r2
 800647c:	40dc      	lsrs	r4, r3
 800647e:	0023      	movs	r3, r4
}
 8006480:	0018      	movs	r0, r3
 8006482:	46bd      	mov	sp, r7
 8006484:	bdb0      	pop	{r4, r5, r7, pc}
 8006486:	46c0      	nop			@ (mov r8, r8)
 8006488:	08009114 	.word	0x08009114

0800648c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800648c:	b580      	push	{r7, lr}
 800648e:	b086      	sub	sp, #24
 8006490:	af00      	add	r7, sp, #0
 8006492:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8006494:	2313      	movs	r3, #19
 8006496:	18fb      	adds	r3, r7, r3
 8006498:	2200      	movs	r2, #0
 800649a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800649c:	2312      	movs	r3, #18
 800649e:	18fb      	adds	r3, r7, r3
 80064a0:	2200      	movs	r2, #0
 80064a2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681a      	ldr	r2, [r3, #0]
 80064a8:	2380      	movs	r3, #128	@ 0x80
 80064aa:	029b      	lsls	r3, r3, #10
 80064ac:	4013      	ands	r3, r2
 80064ae:	d100      	bne.n	80064b2 <HAL_RCCEx_PeriphCLKConfig+0x26>
 80064b0:	e0a3      	b.n	80065fa <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80064b2:	2011      	movs	r0, #17
 80064b4:	183b      	adds	r3, r7, r0
 80064b6:	2200      	movs	r2, #0
 80064b8:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80064ba:	4bc3      	ldr	r3, [pc, #780]	@ (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80064bc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80064be:	2380      	movs	r3, #128	@ 0x80
 80064c0:	055b      	lsls	r3, r3, #21
 80064c2:	4013      	ands	r3, r2
 80064c4:	d110      	bne.n	80064e8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80064c6:	4bc0      	ldr	r3, [pc, #768]	@ (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80064c8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80064ca:	4bbf      	ldr	r3, [pc, #764]	@ (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80064cc:	2180      	movs	r1, #128	@ 0x80
 80064ce:	0549      	lsls	r1, r1, #21
 80064d0:	430a      	orrs	r2, r1
 80064d2:	63da      	str	r2, [r3, #60]	@ 0x3c
 80064d4:	4bbc      	ldr	r3, [pc, #752]	@ (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80064d6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80064d8:	2380      	movs	r3, #128	@ 0x80
 80064da:	055b      	lsls	r3, r3, #21
 80064dc:	4013      	ands	r3, r2
 80064de:	60bb      	str	r3, [r7, #8]
 80064e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80064e2:	183b      	adds	r3, r7, r0
 80064e4:	2201      	movs	r2, #1
 80064e6:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80064e8:	4bb8      	ldr	r3, [pc, #736]	@ (80067cc <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80064ea:	681a      	ldr	r2, [r3, #0]
 80064ec:	4bb7      	ldr	r3, [pc, #732]	@ (80067cc <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80064ee:	2180      	movs	r1, #128	@ 0x80
 80064f0:	0049      	lsls	r1, r1, #1
 80064f2:	430a      	orrs	r2, r1
 80064f4:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80064f6:	f7fd ff6b 	bl	80043d0 <HAL_GetTick>
 80064fa:	0003      	movs	r3, r0
 80064fc:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80064fe:	e00b      	b.n	8006518 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006500:	f7fd ff66 	bl	80043d0 <HAL_GetTick>
 8006504:	0002      	movs	r2, r0
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	1ad3      	subs	r3, r2, r3
 800650a:	2b02      	cmp	r3, #2
 800650c:	d904      	bls.n	8006518 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 800650e:	2313      	movs	r3, #19
 8006510:	18fb      	adds	r3, r7, r3
 8006512:	2203      	movs	r2, #3
 8006514:	701a      	strb	r2, [r3, #0]
        break;
 8006516:	e005      	b.n	8006524 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006518:	4bac      	ldr	r3, [pc, #688]	@ (80067cc <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800651a:	681a      	ldr	r2, [r3, #0]
 800651c:	2380      	movs	r3, #128	@ 0x80
 800651e:	005b      	lsls	r3, r3, #1
 8006520:	4013      	ands	r3, r2
 8006522:	d0ed      	beq.n	8006500 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8006524:	2313      	movs	r3, #19
 8006526:	18fb      	adds	r3, r7, r3
 8006528:	781b      	ldrb	r3, [r3, #0]
 800652a:	2b00      	cmp	r3, #0
 800652c:	d154      	bne.n	80065d8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800652e:	4ba6      	ldr	r3, [pc, #664]	@ (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006530:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006532:	23c0      	movs	r3, #192	@ 0xc0
 8006534:	009b      	lsls	r3, r3, #2
 8006536:	4013      	ands	r3, r2
 8006538:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800653a:	697b      	ldr	r3, [r7, #20]
 800653c:	2b00      	cmp	r3, #0
 800653e:	d019      	beq.n	8006574 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006544:	697a      	ldr	r2, [r7, #20]
 8006546:	429a      	cmp	r2, r3
 8006548:	d014      	beq.n	8006574 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800654a:	4b9f      	ldr	r3, [pc, #636]	@ (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800654c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800654e:	4aa0      	ldr	r2, [pc, #640]	@ (80067d0 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8006550:	4013      	ands	r3, r2
 8006552:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006554:	4b9c      	ldr	r3, [pc, #624]	@ (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006556:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006558:	4b9b      	ldr	r3, [pc, #620]	@ (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800655a:	2180      	movs	r1, #128	@ 0x80
 800655c:	0249      	lsls	r1, r1, #9
 800655e:	430a      	orrs	r2, r1
 8006560:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006562:	4b99      	ldr	r3, [pc, #612]	@ (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006564:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006566:	4b98      	ldr	r3, [pc, #608]	@ (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006568:	499a      	ldr	r1, [pc, #616]	@ (80067d4 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 800656a:	400a      	ands	r2, r1
 800656c:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800656e:	4b96      	ldr	r3, [pc, #600]	@ (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006570:	697a      	ldr	r2, [r7, #20]
 8006572:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006574:	697b      	ldr	r3, [r7, #20]
 8006576:	2201      	movs	r2, #1
 8006578:	4013      	ands	r3, r2
 800657a:	d016      	beq.n	80065aa <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800657c:	f7fd ff28 	bl	80043d0 <HAL_GetTick>
 8006580:	0003      	movs	r3, r0
 8006582:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006584:	e00c      	b.n	80065a0 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006586:	f7fd ff23 	bl	80043d0 <HAL_GetTick>
 800658a:	0002      	movs	r2, r0
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	1ad3      	subs	r3, r2, r3
 8006590:	4a91      	ldr	r2, [pc, #580]	@ (80067d8 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 8006592:	4293      	cmp	r3, r2
 8006594:	d904      	bls.n	80065a0 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8006596:	2313      	movs	r3, #19
 8006598:	18fb      	adds	r3, r7, r3
 800659a:	2203      	movs	r2, #3
 800659c:	701a      	strb	r2, [r3, #0]
            break;
 800659e:	e004      	b.n	80065aa <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80065a0:	4b89      	ldr	r3, [pc, #548]	@ (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80065a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80065a4:	2202      	movs	r2, #2
 80065a6:	4013      	ands	r3, r2
 80065a8:	d0ed      	beq.n	8006586 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 80065aa:	2313      	movs	r3, #19
 80065ac:	18fb      	adds	r3, r7, r3
 80065ae:	781b      	ldrb	r3, [r3, #0]
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d10a      	bne.n	80065ca <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80065b4:	4b84      	ldr	r3, [pc, #528]	@ (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80065b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80065b8:	4a85      	ldr	r2, [pc, #532]	@ (80067d0 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80065ba:	4013      	ands	r3, r2
 80065bc:	0019      	movs	r1, r3
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80065c2:	4b81      	ldr	r3, [pc, #516]	@ (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80065c4:	430a      	orrs	r2, r1
 80065c6:	65da      	str	r2, [r3, #92]	@ 0x5c
 80065c8:	e00c      	b.n	80065e4 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80065ca:	2312      	movs	r3, #18
 80065cc:	18fb      	adds	r3, r7, r3
 80065ce:	2213      	movs	r2, #19
 80065d0:	18ba      	adds	r2, r7, r2
 80065d2:	7812      	ldrb	r2, [r2, #0]
 80065d4:	701a      	strb	r2, [r3, #0]
 80065d6:	e005      	b.n	80065e4 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065d8:	2312      	movs	r3, #18
 80065da:	18fb      	adds	r3, r7, r3
 80065dc:	2213      	movs	r2, #19
 80065de:	18ba      	adds	r2, r7, r2
 80065e0:	7812      	ldrb	r2, [r2, #0]
 80065e2:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80065e4:	2311      	movs	r3, #17
 80065e6:	18fb      	adds	r3, r7, r3
 80065e8:	781b      	ldrb	r3, [r3, #0]
 80065ea:	2b01      	cmp	r3, #1
 80065ec:	d105      	bne.n	80065fa <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80065ee:	4b76      	ldr	r3, [pc, #472]	@ (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80065f0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80065f2:	4b75      	ldr	r3, [pc, #468]	@ (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80065f4:	4979      	ldr	r1, [pc, #484]	@ (80067dc <HAL_RCCEx_PeriphCLKConfig+0x350>)
 80065f6:	400a      	ands	r2, r1
 80065f8:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	2201      	movs	r2, #1
 8006600:	4013      	ands	r3, r2
 8006602:	d009      	beq.n	8006618 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006604:	4b70      	ldr	r3, [pc, #448]	@ (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006606:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006608:	2203      	movs	r2, #3
 800660a:	4393      	bics	r3, r2
 800660c:	0019      	movs	r1, r3
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	685a      	ldr	r2, [r3, #4]
 8006612:	4b6d      	ldr	r3, [pc, #436]	@ (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006614:	430a      	orrs	r2, r1
 8006616:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	2202      	movs	r2, #2
 800661e:	4013      	ands	r3, r2
 8006620:	d009      	beq.n	8006636 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006622:	4b69      	ldr	r3, [pc, #420]	@ (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006624:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006626:	220c      	movs	r2, #12
 8006628:	4393      	bics	r3, r2
 800662a:	0019      	movs	r1, r3
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	689a      	ldr	r2, [r3, #8]
 8006630:	4b65      	ldr	r3, [pc, #404]	@ (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006632:	430a      	orrs	r2, r1
 8006634:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	2210      	movs	r2, #16
 800663c:	4013      	ands	r3, r2
 800663e:	d009      	beq.n	8006654 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006640:	4b61      	ldr	r3, [pc, #388]	@ (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006642:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006644:	4a66      	ldr	r2, [pc, #408]	@ (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 8006646:	4013      	ands	r3, r2
 8006648:	0019      	movs	r1, r3
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	68da      	ldr	r2, [r3, #12]
 800664e:	4b5e      	ldr	r3, [pc, #376]	@ (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006650:	430a      	orrs	r2, r1
 8006652:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681a      	ldr	r2, [r3, #0]
 8006658:	2380      	movs	r3, #128	@ 0x80
 800665a:	009b      	lsls	r3, r3, #2
 800665c:	4013      	ands	r3, r2
 800665e:	d009      	beq.n	8006674 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006660:	4b59      	ldr	r3, [pc, #356]	@ (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006662:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006664:	4a5f      	ldr	r2, [pc, #380]	@ (80067e4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8006666:	4013      	ands	r3, r2
 8006668:	0019      	movs	r1, r3
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	699a      	ldr	r2, [r3, #24]
 800666e:	4b56      	ldr	r3, [pc, #344]	@ (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006670:	430a      	orrs	r2, r1
 8006672:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681a      	ldr	r2, [r3, #0]
 8006678:	2380      	movs	r3, #128	@ 0x80
 800667a:	00db      	lsls	r3, r3, #3
 800667c:	4013      	ands	r3, r2
 800667e:	d009      	beq.n	8006694 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006680:	4b51      	ldr	r3, [pc, #324]	@ (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006682:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006684:	4a58      	ldr	r2, [pc, #352]	@ (80067e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006686:	4013      	ands	r3, r2
 8006688:	0019      	movs	r1, r3
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	69da      	ldr	r2, [r3, #28]
 800668e:	4b4e      	ldr	r3, [pc, #312]	@ (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006690:	430a      	orrs	r2, r1
 8006692:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	2220      	movs	r2, #32
 800669a:	4013      	ands	r3, r2
 800669c:	d009      	beq.n	80066b2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800669e:	4b4a      	ldr	r3, [pc, #296]	@ (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80066a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80066a2:	4a52      	ldr	r2, [pc, #328]	@ (80067ec <HAL_RCCEx_PeriphCLKConfig+0x360>)
 80066a4:	4013      	ands	r3, r2
 80066a6:	0019      	movs	r1, r3
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	691a      	ldr	r2, [r3, #16]
 80066ac:	4b46      	ldr	r3, [pc, #280]	@ (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80066ae:	430a      	orrs	r2, r1
 80066b0:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681a      	ldr	r2, [r3, #0]
 80066b6:	2380      	movs	r3, #128	@ 0x80
 80066b8:	01db      	lsls	r3, r3, #7
 80066ba:	4013      	ands	r3, r2
 80066bc:	d015      	beq.n	80066ea <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80066be:	4b42      	ldr	r3, [pc, #264]	@ (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80066c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80066c2:	009b      	lsls	r3, r3, #2
 80066c4:	0899      	lsrs	r1, r3, #2
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	6a1a      	ldr	r2, [r3, #32]
 80066ca:	4b3f      	ldr	r3, [pc, #252]	@ (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80066cc:	430a      	orrs	r2, r1
 80066ce:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	6a1a      	ldr	r2, [r3, #32]
 80066d4:	2380      	movs	r3, #128	@ 0x80
 80066d6:	05db      	lsls	r3, r3, #23
 80066d8:	429a      	cmp	r2, r3
 80066da:	d106      	bne.n	80066ea <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80066dc:	4b3a      	ldr	r3, [pc, #232]	@ (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80066de:	68da      	ldr	r2, [r3, #12]
 80066e0:	4b39      	ldr	r3, [pc, #228]	@ (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80066e2:	2180      	movs	r1, #128	@ 0x80
 80066e4:	0249      	lsls	r1, r1, #9
 80066e6:	430a      	orrs	r2, r1
 80066e8:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681a      	ldr	r2, [r3, #0]
 80066ee:	2380      	movs	r3, #128	@ 0x80
 80066f0:	031b      	lsls	r3, r3, #12
 80066f2:	4013      	ands	r3, r2
 80066f4:	d009      	beq.n	800670a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80066f6:	4b34      	ldr	r3, [pc, #208]	@ (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80066f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80066fa:	2240      	movs	r2, #64	@ 0x40
 80066fc:	4393      	bics	r3, r2
 80066fe:	0019      	movs	r1, r3
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006704:	4b30      	ldr	r3, [pc, #192]	@ (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006706:	430a      	orrs	r2, r1
 8006708:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681a      	ldr	r2, [r3, #0]
 800670e:	2380      	movs	r3, #128	@ 0x80
 8006710:	039b      	lsls	r3, r3, #14
 8006712:	4013      	ands	r3, r2
 8006714:	d016      	beq.n	8006744 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8006716:	4b2c      	ldr	r3, [pc, #176]	@ (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006718:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800671a:	4a35      	ldr	r2, [pc, #212]	@ (80067f0 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800671c:	4013      	ands	r3, r2
 800671e:	0019      	movs	r1, r3
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006724:	4b28      	ldr	r3, [pc, #160]	@ (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006726:	430a      	orrs	r2, r1
 8006728:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800672e:	2380      	movs	r3, #128	@ 0x80
 8006730:	03db      	lsls	r3, r3, #15
 8006732:	429a      	cmp	r2, r3
 8006734:	d106      	bne.n	8006744 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8006736:	4b24      	ldr	r3, [pc, #144]	@ (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006738:	68da      	ldr	r2, [r3, #12]
 800673a:	4b23      	ldr	r3, [pc, #140]	@ (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800673c:	2180      	movs	r1, #128	@ 0x80
 800673e:	0449      	lsls	r1, r1, #17
 8006740:	430a      	orrs	r2, r1
 8006742:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681a      	ldr	r2, [r3, #0]
 8006748:	2380      	movs	r3, #128	@ 0x80
 800674a:	03db      	lsls	r3, r3, #15
 800674c:	4013      	ands	r3, r2
 800674e:	d016      	beq.n	800677e <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8006750:	4b1d      	ldr	r3, [pc, #116]	@ (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006752:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006754:	4a27      	ldr	r2, [pc, #156]	@ (80067f4 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 8006756:	4013      	ands	r3, r2
 8006758:	0019      	movs	r1, r3
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800675e:	4b1a      	ldr	r3, [pc, #104]	@ (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006760:	430a      	orrs	r2, r1
 8006762:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006768:	2380      	movs	r3, #128	@ 0x80
 800676a:	045b      	lsls	r3, r3, #17
 800676c:	429a      	cmp	r2, r3
 800676e:	d106      	bne.n	800677e <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8006770:	4b15      	ldr	r3, [pc, #84]	@ (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006772:	68da      	ldr	r2, [r3, #12]
 8006774:	4b14      	ldr	r3, [pc, #80]	@ (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006776:	2180      	movs	r1, #128	@ 0x80
 8006778:	0449      	lsls	r1, r1, #17
 800677a:	430a      	orrs	r2, r1
 800677c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681a      	ldr	r2, [r3, #0]
 8006782:	2380      	movs	r3, #128	@ 0x80
 8006784:	011b      	lsls	r3, r3, #4
 8006786:	4013      	ands	r3, r2
 8006788:	d016      	beq.n	80067b8 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800678a:	4b0f      	ldr	r3, [pc, #60]	@ (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800678c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800678e:	4a1a      	ldr	r2, [pc, #104]	@ (80067f8 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8006790:	4013      	ands	r3, r2
 8006792:	0019      	movs	r1, r3
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	695a      	ldr	r2, [r3, #20]
 8006798:	4b0b      	ldr	r3, [pc, #44]	@ (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800679a:	430a      	orrs	r2, r1
 800679c:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	695a      	ldr	r2, [r3, #20]
 80067a2:	2380      	movs	r3, #128	@ 0x80
 80067a4:	01db      	lsls	r3, r3, #7
 80067a6:	429a      	cmp	r2, r3
 80067a8:	d106      	bne.n	80067b8 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80067aa:	4b07      	ldr	r3, [pc, #28]	@ (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80067ac:	68da      	ldr	r2, [r3, #12]
 80067ae:	4b06      	ldr	r3, [pc, #24]	@ (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80067b0:	2180      	movs	r1, #128	@ 0x80
 80067b2:	0249      	lsls	r1, r1, #9
 80067b4:	430a      	orrs	r2, r1
 80067b6:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 80067b8:	2312      	movs	r3, #18
 80067ba:	18fb      	adds	r3, r7, r3
 80067bc:	781b      	ldrb	r3, [r3, #0]
}
 80067be:	0018      	movs	r0, r3
 80067c0:	46bd      	mov	sp, r7
 80067c2:	b006      	add	sp, #24
 80067c4:	bd80      	pop	{r7, pc}
 80067c6:	46c0      	nop			@ (mov r8, r8)
 80067c8:	40021000 	.word	0x40021000
 80067cc:	40007000 	.word	0x40007000
 80067d0:	fffffcff 	.word	0xfffffcff
 80067d4:	fffeffff 	.word	0xfffeffff
 80067d8:	00001388 	.word	0x00001388
 80067dc:	efffffff 	.word	0xefffffff
 80067e0:	fffff3ff 	.word	0xfffff3ff
 80067e4:	fff3ffff 	.word	0xfff3ffff
 80067e8:	ffcfffff 	.word	0xffcfffff
 80067ec:	ffffcfff 	.word	0xffffcfff
 80067f0:	ffbfffff 	.word	0xffbfffff
 80067f4:	feffffff 	.word	0xfeffffff
 80067f8:	ffff3fff 	.word	0xffff3fff

080067fc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80067fc:	b580      	push	{r7, lr}
 80067fe:	b084      	sub	sp, #16
 8006800:	af00      	add	r7, sp, #0
 8006802:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2b00      	cmp	r3, #0
 8006808:	d101      	bne.n	800680e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800680a:	2301      	movs	r3, #1
 800680c:	e0a8      	b.n	8006960 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006812:	2b00      	cmp	r3, #0
 8006814:	d109      	bne.n	800682a <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	685a      	ldr	r2, [r3, #4]
 800681a:	2382      	movs	r3, #130	@ 0x82
 800681c:	005b      	lsls	r3, r3, #1
 800681e:	429a      	cmp	r2, r3
 8006820:	d009      	beq.n	8006836 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	2200      	movs	r2, #0
 8006826:	61da      	str	r2, [r3, #28]
 8006828:	e005      	b.n	8006836 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	2200      	movs	r2, #0
 800682e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	2200      	movs	r2, #0
 8006834:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	2200      	movs	r2, #0
 800683a:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	225d      	movs	r2, #93	@ 0x5d
 8006840:	5c9b      	ldrb	r3, [r3, r2]
 8006842:	b2db      	uxtb	r3, r3
 8006844:	2b00      	cmp	r3, #0
 8006846:	d107      	bne.n	8006858 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	225c      	movs	r2, #92	@ 0x5c
 800684c:	2100      	movs	r1, #0
 800684e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	0018      	movs	r0, r3
 8006854:	f7fd fb52 	bl	8003efc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	225d      	movs	r2, #93	@ 0x5d
 800685c:	2102      	movs	r1, #2
 800685e:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	681a      	ldr	r2, [r3, #0]
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	2140      	movs	r1, #64	@ 0x40
 800686c:	438a      	bics	r2, r1
 800686e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	68da      	ldr	r2, [r3, #12]
 8006874:	23e0      	movs	r3, #224	@ 0xe0
 8006876:	00db      	lsls	r3, r3, #3
 8006878:	429a      	cmp	r2, r3
 800687a:	d902      	bls.n	8006882 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800687c:	2300      	movs	r3, #0
 800687e:	60fb      	str	r3, [r7, #12]
 8006880:	e002      	b.n	8006888 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006882:	2380      	movs	r3, #128	@ 0x80
 8006884:	015b      	lsls	r3, r3, #5
 8006886:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	68da      	ldr	r2, [r3, #12]
 800688c:	23f0      	movs	r3, #240	@ 0xf0
 800688e:	011b      	lsls	r3, r3, #4
 8006890:	429a      	cmp	r2, r3
 8006892:	d008      	beq.n	80068a6 <HAL_SPI_Init+0xaa>
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	68da      	ldr	r2, [r3, #12]
 8006898:	23e0      	movs	r3, #224	@ 0xe0
 800689a:	00db      	lsls	r3, r3, #3
 800689c:	429a      	cmp	r2, r3
 800689e:	d002      	beq.n	80068a6 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	2200      	movs	r2, #0
 80068a4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	685a      	ldr	r2, [r3, #4]
 80068aa:	2382      	movs	r3, #130	@ 0x82
 80068ac:	005b      	lsls	r3, r3, #1
 80068ae:	401a      	ands	r2, r3
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	6899      	ldr	r1, [r3, #8]
 80068b4:	2384      	movs	r3, #132	@ 0x84
 80068b6:	021b      	lsls	r3, r3, #8
 80068b8:	400b      	ands	r3, r1
 80068ba:	431a      	orrs	r2, r3
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	691b      	ldr	r3, [r3, #16]
 80068c0:	2102      	movs	r1, #2
 80068c2:	400b      	ands	r3, r1
 80068c4:	431a      	orrs	r2, r3
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	695b      	ldr	r3, [r3, #20]
 80068ca:	2101      	movs	r1, #1
 80068cc:	400b      	ands	r3, r1
 80068ce:	431a      	orrs	r2, r3
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	6999      	ldr	r1, [r3, #24]
 80068d4:	2380      	movs	r3, #128	@ 0x80
 80068d6:	009b      	lsls	r3, r3, #2
 80068d8:	400b      	ands	r3, r1
 80068da:	431a      	orrs	r2, r3
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	69db      	ldr	r3, [r3, #28]
 80068e0:	2138      	movs	r1, #56	@ 0x38
 80068e2:	400b      	ands	r3, r1
 80068e4:	431a      	orrs	r2, r3
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	6a1b      	ldr	r3, [r3, #32]
 80068ea:	2180      	movs	r1, #128	@ 0x80
 80068ec:	400b      	ands	r3, r1
 80068ee:	431a      	orrs	r2, r3
 80068f0:	0011      	movs	r1, r2
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80068f6:	2380      	movs	r3, #128	@ 0x80
 80068f8:	019b      	lsls	r3, r3, #6
 80068fa:	401a      	ands	r2, r3
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	430a      	orrs	r2, r1
 8006902:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	699b      	ldr	r3, [r3, #24]
 8006908:	0c1b      	lsrs	r3, r3, #16
 800690a:	2204      	movs	r2, #4
 800690c:	401a      	ands	r2, r3
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006912:	2110      	movs	r1, #16
 8006914:	400b      	ands	r3, r1
 8006916:	431a      	orrs	r2, r3
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800691c:	2108      	movs	r1, #8
 800691e:	400b      	ands	r3, r1
 8006920:	431a      	orrs	r2, r3
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	68d9      	ldr	r1, [r3, #12]
 8006926:	23f0      	movs	r3, #240	@ 0xf0
 8006928:	011b      	lsls	r3, r3, #4
 800692a:	400b      	ands	r3, r1
 800692c:	431a      	orrs	r2, r3
 800692e:	0011      	movs	r1, r2
 8006930:	68fa      	ldr	r2, [r7, #12]
 8006932:	2380      	movs	r3, #128	@ 0x80
 8006934:	015b      	lsls	r3, r3, #5
 8006936:	401a      	ands	r2, r3
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	430a      	orrs	r2, r1
 800693e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	69da      	ldr	r2, [r3, #28]
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	4907      	ldr	r1, [pc, #28]	@ (8006968 <HAL_SPI_Init+0x16c>)
 800694c:	400a      	ands	r2, r1
 800694e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	2200      	movs	r2, #0
 8006954:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	225d      	movs	r2, #93	@ 0x5d
 800695a:	2101      	movs	r1, #1
 800695c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800695e:	2300      	movs	r3, #0
}
 8006960:	0018      	movs	r0, r3
 8006962:	46bd      	mov	sp, r7
 8006964:	b004      	add	sp, #16
 8006966:	bd80      	pop	{r7, pc}
 8006968:	fffff7ff 	.word	0xfffff7ff

0800696c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800696c:	b580      	push	{r7, lr}
 800696e:	b088      	sub	sp, #32
 8006970:	af00      	add	r7, sp, #0
 8006972:	60f8      	str	r0, [r7, #12]
 8006974:	60b9      	str	r1, [r7, #8]
 8006976:	603b      	str	r3, [r7, #0]
 8006978:	1dbb      	adds	r3, r7, #6
 800697a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800697c:	231f      	movs	r3, #31
 800697e:	18fb      	adds	r3, r7, r3
 8006980:	2200      	movs	r2, #0
 8006982:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	225c      	movs	r2, #92	@ 0x5c
 8006988:	5c9b      	ldrb	r3, [r3, r2]
 800698a:	2b01      	cmp	r3, #1
 800698c:	d101      	bne.n	8006992 <HAL_SPI_Transmit+0x26>
 800698e:	2302      	movs	r3, #2
 8006990:	e147      	b.n	8006c22 <HAL_SPI_Transmit+0x2b6>
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	225c      	movs	r2, #92	@ 0x5c
 8006996:	2101      	movs	r1, #1
 8006998:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800699a:	f7fd fd19 	bl	80043d0 <HAL_GetTick>
 800699e:	0003      	movs	r3, r0
 80069a0:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80069a2:	2316      	movs	r3, #22
 80069a4:	18fb      	adds	r3, r7, r3
 80069a6:	1dba      	adds	r2, r7, #6
 80069a8:	8812      	ldrh	r2, [r2, #0]
 80069aa:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	225d      	movs	r2, #93	@ 0x5d
 80069b0:	5c9b      	ldrb	r3, [r3, r2]
 80069b2:	b2db      	uxtb	r3, r3
 80069b4:	2b01      	cmp	r3, #1
 80069b6:	d004      	beq.n	80069c2 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 80069b8:	231f      	movs	r3, #31
 80069ba:	18fb      	adds	r3, r7, r3
 80069bc:	2202      	movs	r2, #2
 80069be:	701a      	strb	r2, [r3, #0]
    goto error;
 80069c0:	e128      	b.n	8006c14 <HAL_SPI_Transmit+0x2a8>
  }

  if ((pData == NULL) || (Size == 0U))
 80069c2:	68bb      	ldr	r3, [r7, #8]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d003      	beq.n	80069d0 <HAL_SPI_Transmit+0x64>
 80069c8:	1dbb      	adds	r3, r7, #6
 80069ca:	881b      	ldrh	r3, [r3, #0]
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d104      	bne.n	80069da <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 80069d0:	231f      	movs	r3, #31
 80069d2:	18fb      	adds	r3, r7, r3
 80069d4:	2201      	movs	r2, #1
 80069d6:	701a      	strb	r2, [r3, #0]
    goto error;
 80069d8:	e11c      	b.n	8006c14 <HAL_SPI_Transmit+0x2a8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	225d      	movs	r2, #93	@ 0x5d
 80069de:	2103      	movs	r1, #3
 80069e0:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	2200      	movs	r2, #0
 80069e6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	68ba      	ldr	r2, [r7, #8]
 80069ec:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	1dba      	adds	r2, r7, #6
 80069f2:	8812      	ldrh	r2, [r2, #0]
 80069f4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	1dba      	adds	r2, r7, #6
 80069fa:	8812      	ldrh	r2, [r2, #0]
 80069fc:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	2200      	movs	r2, #0
 8006a02:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	2244      	movs	r2, #68	@ 0x44
 8006a08:	2100      	movs	r1, #0
 8006a0a:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	2246      	movs	r2, #70	@ 0x46
 8006a10:	2100      	movs	r1, #0
 8006a12:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	2200      	movs	r2, #0
 8006a18:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	2200      	movs	r2, #0
 8006a1e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	689a      	ldr	r2, [r3, #8]
 8006a24:	2380      	movs	r3, #128	@ 0x80
 8006a26:	021b      	lsls	r3, r3, #8
 8006a28:	429a      	cmp	r2, r3
 8006a2a:	d110      	bne.n	8006a4e <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	681a      	ldr	r2, [r3, #0]
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	2140      	movs	r1, #64	@ 0x40
 8006a38:	438a      	bics	r2, r1
 8006a3a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	681a      	ldr	r2, [r3, #0]
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	2180      	movs	r1, #128	@ 0x80
 8006a48:	01c9      	lsls	r1, r1, #7
 8006a4a:	430a      	orrs	r2, r1
 8006a4c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	2240      	movs	r2, #64	@ 0x40
 8006a56:	4013      	ands	r3, r2
 8006a58:	2b40      	cmp	r3, #64	@ 0x40
 8006a5a:	d007      	beq.n	8006a6c <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	681a      	ldr	r2, [r3, #0]
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	2140      	movs	r1, #64	@ 0x40
 8006a68:	430a      	orrs	r2, r1
 8006a6a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	68da      	ldr	r2, [r3, #12]
 8006a70:	23e0      	movs	r3, #224	@ 0xe0
 8006a72:	00db      	lsls	r3, r3, #3
 8006a74:	429a      	cmp	r2, r3
 8006a76:	d952      	bls.n	8006b1e <HAL_SPI_Transmit+0x1b2>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	685b      	ldr	r3, [r3, #4]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d004      	beq.n	8006a8a <HAL_SPI_Transmit+0x11e>
 8006a80:	2316      	movs	r3, #22
 8006a82:	18fb      	adds	r3, r7, r3
 8006a84:	881b      	ldrh	r3, [r3, #0]
 8006a86:	2b01      	cmp	r3, #1
 8006a88:	d143      	bne.n	8006b12 <HAL_SPI_Transmit+0x1a6>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a8e:	881a      	ldrh	r2, [r3, #0]
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a9a:	1c9a      	adds	r2, r3, #2
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006aa4:	b29b      	uxth	r3, r3
 8006aa6:	3b01      	subs	r3, #1
 8006aa8:	b29a      	uxth	r2, r3
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006aae:	e030      	b.n	8006b12 <HAL_SPI_Transmit+0x1a6>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	689b      	ldr	r3, [r3, #8]
 8006ab6:	2202      	movs	r2, #2
 8006ab8:	4013      	ands	r3, r2
 8006aba:	2b02      	cmp	r3, #2
 8006abc:	d112      	bne.n	8006ae4 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ac2:	881a      	ldrh	r2, [r3, #0]
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ace:	1c9a      	adds	r2, r3, #2
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006ad8:	b29b      	uxth	r3, r3
 8006ada:	3b01      	subs	r3, #1
 8006adc:	b29a      	uxth	r2, r3
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006ae2:	e016      	b.n	8006b12 <HAL_SPI_Transmit+0x1a6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006ae4:	f7fd fc74 	bl	80043d0 <HAL_GetTick>
 8006ae8:	0002      	movs	r2, r0
 8006aea:	69bb      	ldr	r3, [r7, #24]
 8006aec:	1ad3      	subs	r3, r2, r3
 8006aee:	683a      	ldr	r2, [r7, #0]
 8006af0:	429a      	cmp	r2, r3
 8006af2:	d802      	bhi.n	8006afa <HAL_SPI_Transmit+0x18e>
 8006af4:	683b      	ldr	r3, [r7, #0]
 8006af6:	3301      	adds	r3, #1
 8006af8:	d102      	bne.n	8006b00 <HAL_SPI_Transmit+0x194>
 8006afa:	683b      	ldr	r3, [r7, #0]
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d108      	bne.n	8006b12 <HAL_SPI_Transmit+0x1a6>
        {
          errorcode = HAL_TIMEOUT;
 8006b00:	231f      	movs	r3, #31
 8006b02:	18fb      	adds	r3, r7, r3
 8006b04:	2203      	movs	r2, #3
 8006b06:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	225d      	movs	r2, #93	@ 0x5d
 8006b0c:	2101      	movs	r1, #1
 8006b0e:	5499      	strb	r1, [r3, r2]
          goto error;
 8006b10:	e080      	b.n	8006c14 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006b16:	b29b      	uxth	r3, r3
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d1c9      	bne.n	8006ab0 <HAL_SPI_Transmit+0x144>
 8006b1c:	e053      	b.n	8006bc6 <HAL_SPI_Transmit+0x25a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	685b      	ldr	r3, [r3, #4]
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d004      	beq.n	8006b30 <HAL_SPI_Transmit+0x1c4>
 8006b26:	2316      	movs	r3, #22
 8006b28:	18fb      	adds	r3, r7, r3
 8006b2a:	881b      	ldrh	r3, [r3, #0]
 8006b2c:	2b01      	cmp	r3, #1
 8006b2e:	d145      	bne.n	8006bbc <HAL_SPI_Transmit+0x250>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	330c      	adds	r3, #12
 8006b3a:	7812      	ldrb	r2, [r2, #0]
 8006b3c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b42:	1c5a      	adds	r2, r3, #1
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006b4c:	b29b      	uxth	r3, r3
 8006b4e:	3b01      	subs	r3, #1
 8006b50:	b29a      	uxth	r2, r3
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    while (hspi->TxXferCount > 0U)
 8006b56:	e031      	b.n	8006bbc <HAL_SPI_Transmit+0x250>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	689b      	ldr	r3, [r3, #8]
 8006b5e:	2202      	movs	r2, #2
 8006b60:	4013      	ands	r3, r2
 8006b62:	2b02      	cmp	r3, #2
 8006b64:	d113      	bne.n	8006b8e <HAL_SPI_Transmit+0x222>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	330c      	adds	r3, #12
 8006b70:	7812      	ldrb	r2, [r2, #0]
 8006b72:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b78:	1c5a      	adds	r2, r3, #1
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006b82:	b29b      	uxth	r3, r3
 8006b84:	3b01      	subs	r3, #1
 8006b86:	b29a      	uxth	r2, r3
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006b8c:	e016      	b.n	8006bbc <HAL_SPI_Transmit+0x250>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006b8e:	f7fd fc1f 	bl	80043d0 <HAL_GetTick>
 8006b92:	0002      	movs	r2, r0
 8006b94:	69bb      	ldr	r3, [r7, #24]
 8006b96:	1ad3      	subs	r3, r2, r3
 8006b98:	683a      	ldr	r2, [r7, #0]
 8006b9a:	429a      	cmp	r2, r3
 8006b9c:	d802      	bhi.n	8006ba4 <HAL_SPI_Transmit+0x238>
 8006b9e:	683b      	ldr	r3, [r7, #0]
 8006ba0:	3301      	adds	r3, #1
 8006ba2:	d102      	bne.n	8006baa <HAL_SPI_Transmit+0x23e>
 8006ba4:	683b      	ldr	r3, [r7, #0]
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d108      	bne.n	8006bbc <HAL_SPI_Transmit+0x250>
        {
          errorcode = HAL_TIMEOUT;
 8006baa:	231f      	movs	r3, #31
 8006bac:	18fb      	adds	r3, r7, r3
 8006bae:	2203      	movs	r2, #3
 8006bb0:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	225d      	movs	r2, #93	@ 0x5d
 8006bb6:	2101      	movs	r1, #1
 8006bb8:	5499      	strb	r1, [r3, r2]
          goto error;
 8006bba:	e02b      	b.n	8006c14 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006bc0:	b29b      	uxth	r3, r3
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d1c8      	bne.n	8006b58 <HAL_SPI_Transmit+0x1ec>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006bc6:	69ba      	ldr	r2, [r7, #24]
 8006bc8:	6839      	ldr	r1, [r7, #0]
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	0018      	movs	r0, r3
 8006bce:	f000 fb3f 	bl	8007250 <SPI_EndRxTxTransaction>
 8006bd2:	1e03      	subs	r3, r0, #0
 8006bd4:	d002      	beq.n	8006bdc <HAL_SPI_Transmit+0x270>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	2220      	movs	r2, #32
 8006bda:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	689b      	ldr	r3, [r3, #8]
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d10a      	bne.n	8006bfa <HAL_SPI_Transmit+0x28e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006be4:	2300      	movs	r3, #0
 8006be6:	613b      	str	r3, [r7, #16]
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	68db      	ldr	r3, [r3, #12]
 8006bee:	613b      	str	r3, [r7, #16]
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	689b      	ldr	r3, [r3, #8]
 8006bf6:	613b      	str	r3, [r7, #16]
 8006bf8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d004      	beq.n	8006c0c <HAL_SPI_Transmit+0x2a0>
  {
    errorcode = HAL_ERROR;
 8006c02:	231f      	movs	r3, #31
 8006c04:	18fb      	adds	r3, r7, r3
 8006c06:	2201      	movs	r2, #1
 8006c08:	701a      	strb	r2, [r3, #0]
 8006c0a:	e003      	b.n	8006c14 <HAL_SPI_Transmit+0x2a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	225d      	movs	r2, #93	@ 0x5d
 8006c10:	2101      	movs	r1, #1
 8006c12:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	225c      	movs	r2, #92	@ 0x5c
 8006c18:	2100      	movs	r1, #0
 8006c1a:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8006c1c:	231f      	movs	r3, #31
 8006c1e:	18fb      	adds	r3, r7, r3
 8006c20:	781b      	ldrb	r3, [r3, #0]
}
 8006c22:	0018      	movs	r0, r3
 8006c24:	46bd      	mov	sp, r7
 8006c26:	b008      	add	sp, #32
 8006c28:	bd80      	pop	{r7, pc}
	...

08006c2c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006c2c:	b580      	push	{r7, lr}
 8006c2e:	b08a      	sub	sp, #40	@ 0x28
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	60f8      	str	r0, [r7, #12]
 8006c34:	60b9      	str	r1, [r7, #8]
 8006c36:	607a      	str	r2, [r7, #4]
 8006c38:	001a      	movs	r2, r3
 8006c3a:	1cbb      	adds	r3, r7, #2
 8006c3c:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006c3e:	2301      	movs	r3, #1
 8006c40:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006c42:	2323      	movs	r3, #35	@ 0x23
 8006c44:	18fb      	adds	r3, r7, r3
 8006c46:	2200      	movs	r2, #0
 8006c48:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	225c      	movs	r2, #92	@ 0x5c
 8006c4e:	5c9b      	ldrb	r3, [r3, r2]
 8006c50:	2b01      	cmp	r3, #1
 8006c52:	d101      	bne.n	8006c58 <HAL_SPI_TransmitReceive+0x2c>
 8006c54:	2302      	movs	r3, #2
 8006c56:	e1c4      	b.n	8006fe2 <HAL_SPI_TransmitReceive+0x3b6>
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	225c      	movs	r2, #92	@ 0x5c
 8006c5c:	2101      	movs	r1, #1
 8006c5e:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006c60:	f7fd fbb6 	bl	80043d0 <HAL_GetTick>
 8006c64:	0003      	movs	r3, r0
 8006c66:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006c68:	201b      	movs	r0, #27
 8006c6a:	183b      	adds	r3, r7, r0
 8006c6c:	68fa      	ldr	r2, [r7, #12]
 8006c6e:	215d      	movs	r1, #93	@ 0x5d
 8006c70:	5c52      	ldrb	r2, [r2, r1]
 8006c72:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	685b      	ldr	r3, [r3, #4]
 8006c78:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8006c7a:	2312      	movs	r3, #18
 8006c7c:	18fb      	adds	r3, r7, r3
 8006c7e:	1cba      	adds	r2, r7, #2
 8006c80:	8812      	ldrh	r2, [r2, #0]
 8006c82:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006c84:	183b      	adds	r3, r7, r0
 8006c86:	781b      	ldrb	r3, [r3, #0]
 8006c88:	2b01      	cmp	r3, #1
 8006c8a:	d011      	beq.n	8006cb0 <HAL_SPI_TransmitReceive+0x84>
 8006c8c:	697a      	ldr	r2, [r7, #20]
 8006c8e:	2382      	movs	r3, #130	@ 0x82
 8006c90:	005b      	lsls	r3, r3, #1
 8006c92:	429a      	cmp	r2, r3
 8006c94:	d107      	bne.n	8006ca6 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	689b      	ldr	r3, [r3, #8]
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d103      	bne.n	8006ca6 <HAL_SPI_TransmitReceive+0x7a>
 8006c9e:	183b      	adds	r3, r7, r0
 8006ca0:	781b      	ldrb	r3, [r3, #0]
 8006ca2:	2b04      	cmp	r3, #4
 8006ca4:	d004      	beq.n	8006cb0 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8006ca6:	2323      	movs	r3, #35	@ 0x23
 8006ca8:	18fb      	adds	r3, r7, r3
 8006caa:	2202      	movs	r2, #2
 8006cac:	701a      	strb	r2, [r3, #0]
    goto error;
 8006cae:	e191      	b.n	8006fd4 <HAL_SPI_TransmitReceive+0x3a8>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006cb0:	68bb      	ldr	r3, [r7, #8]
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d006      	beq.n	8006cc4 <HAL_SPI_TransmitReceive+0x98>
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d003      	beq.n	8006cc4 <HAL_SPI_TransmitReceive+0x98>
 8006cbc:	1cbb      	adds	r3, r7, #2
 8006cbe:	881b      	ldrh	r3, [r3, #0]
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d104      	bne.n	8006cce <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8006cc4:	2323      	movs	r3, #35	@ 0x23
 8006cc6:	18fb      	adds	r3, r7, r3
 8006cc8:	2201      	movs	r2, #1
 8006cca:	701a      	strb	r2, [r3, #0]
    goto error;
 8006ccc:	e182      	b.n	8006fd4 <HAL_SPI_TransmitReceive+0x3a8>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	225d      	movs	r2, #93	@ 0x5d
 8006cd2:	5c9b      	ldrb	r3, [r3, r2]
 8006cd4:	b2db      	uxtb	r3, r3
 8006cd6:	2b04      	cmp	r3, #4
 8006cd8:	d003      	beq.n	8006ce2 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	225d      	movs	r2, #93	@ 0x5d
 8006cde:	2105      	movs	r1, #5
 8006ce0:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	2200      	movs	r2, #0
 8006ce6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	687a      	ldr	r2, [r7, #4]
 8006cec:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	1cba      	adds	r2, r7, #2
 8006cf2:	2146      	movs	r1, #70	@ 0x46
 8006cf4:	8812      	ldrh	r2, [r2, #0]
 8006cf6:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	1cba      	adds	r2, r7, #2
 8006cfc:	2144      	movs	r1, #68	@ 0x44
 8006cfe:	8812      	ldrh	r2, [r2, #0]
 8006d00:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	68ba      	ldr	r2, [r7, #8]
 8006d06:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	1cba      	adds	r2, r7, #2
 8006d0c:	8812      	ldrh	r2, [r2, #0]
 8006d0e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	1cba      	adds	r2, r7, #2
 8006d14:	8812      	ldrh	r2, [r2, #0]
 8006d16:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	2200      	movs	r2, #0
 8006d22:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	68da      	ldr	r2, [r3, #12]
 8006d28:	23e0      	movs	r3, #224	@ 0xe0
 8006d2a:	00db      	lsls	r3, r3, #3
 8006d2c:	429a      	cmp	r2, r3
 8006d2e:	d908      	bls.n	8006d42 <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	685a      	ldr	r2, [r3, #4]
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	49ac      	ldr	r1, [pc, #688]	@ (8006fec <HAL_SPI_TransmitReceive+0x3c0>)
 8006d3c:	400a      	ands	r2, r1
 8006d3e:	605a      	str	r2, [r3, #4]
 8006d40:	e008      	b.n	8006d54 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	685a      	ldr	r2, [r3, #4]
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	2180      	movs	r1, #128	@ 0x80
 8006d4e:	0149      	lsls	r1, r1, #5
 8006d50:	430a      	orrs	r2, r1
 8006d52:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	2240      	movs	r2, #64	@ 0x40
 8006d5c:	4013      	ands	r3, r2
 8006d5e:	2b40      	cmp	r3, #64	@ 0x40
 8006d60:	d007      	beq.n	8006d72 <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	681a      	ldr	r2, [r3, #0]
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	2140      	movs	r1, #64	@ 0x40
 8006d6e:	430a      	orrs	r2, r1
 8006d70:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	68da      	ldr	r2, [r3, #12]
 8006d76:	23e0      	movs	r3, #224	@ 0xe0
 8006d78:	00db      	lsls	r3, r3, #3
 8006d7a:	429a      	cmp	r2, r3
 8006d7c:	d800      	bhi.n	8006d80 <HAL_SPI_TransmitReceive+0x154>
 8006d7e:	e083      	b.n	8006e88 <HAL_SPI_TransmitReceive+0x25c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	685b      	ldr	r3, [r3, #4]
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d005      	beq.n	8006d94 <HAL_SPI_TransmitReceive+0x168>
 8006d88:	2312      	movs	r3, #18
 8006d8a:	18fb      	adds	r3, r7, r3
 8006d8c:	881b      	ldrh	r3, [r3, #0]
 8006d8e:	2b01      	cmp	r3, #1
 8006d90:	d000      	beq.n	8006d94 <HAL_SPI_TransmitReceive+0x168>
 8006d92:	e06d      	b.n	8006e70 <HAL_SPI_TransmitReceive+0x244>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d98:	881a      	ldrh	r2, [r3, #0]
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006da4:	1c9a      	adds	r2, r3, #2
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006dae:	b29b      	uxth	r3, r3
 8006db0:	3b01      	subs	r3, #1
 8006db2:	b29a      	uxth	r2, r3
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006db8:	e05a      	b.n	8006e70 <HAL_SPI_TransmitReceive+0x244>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	689b      	ldr	r3, [r3, #8]
 8006dc0:	2202      	movs	r2, #2
 8006dc2:	4013      	ands	r3, r2
 8006dc4:	2b02      	cmp	r3, #2
 8006dc6:	d11b      	bne.n	8006e00 <HAL_SPI_TransmitReceive+0x1d4>
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006dcc:	b29b      	uxth	r3, r3
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d016      	beq.n	8006e00 <HAL_SPI_TransmitReceive+0x1d4>
 8006dd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dd4:	2b01      	cmp	r3, #1
 8006dd6:	d113      	bne.n	8006e00 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ddc:	881a      	ldrh	r2, [r3, #0]
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006de8:	1c9a      	adds	r2, r3, #2
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006df2:	b29b      	uxth	r3, r3
 8006df4:	3b01      	subs	r3, #1
 8006df6:	b29a      	uxth	r2, r3
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006dfc:	2300      	movs	r3, #0
 8006dfe:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	689b      	ldr	r3, [r3, #8]
 8006e06:	2201      	movs	r2, #1
 8006e08:	4013      	ands	r3, r2
 8006e0a:	2b01      	cmp	r3, #1
 8006e0c:	d11c      	bne.n	8006e48 <HAL_SPI_TransmitReceive+0x21c>
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	2246      	movs	r2, #70	@ 0x46
 8006e12:	5a9b      	ldrh	r3, [r3, r2]
 8006e14:	b29b      	uxth	r3, r3
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d016      	beq.n	8006e48 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	68da      	ldr	r2, [r3, #12]
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e24:	b292      	uxth	r2, r2
 8006e26:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e2c:	1c9a      	adds	r2, r3, #2
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	2246      	movs	r2, #70	@ 0x46
 8006e36:	5a9b      	ldrh	r3, [r3, r2]
 8006e38:	b29b      	uxth	r3, r3
 8006e3a:	3b01      	subs	r3, #1
 8006e3c:	b299      	uxth	r1, r3
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	2246      	movs	r2, #70	@ 0x46
 8006e42:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006e44:	2301      	movs	r3, #1
 8006e46:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006e48:	f7fd fac2 	bl	80043d0 <HAL_GetTick>
 8006e4c:	0002      	movs	r2, r0
 8006e4e:	69fb      	ldr	r3, [r7, #28]
 8006e50:	1ad3      	subs	r3, r2, r3
 8006e52:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006e54:	429a      	cmp	r2, r3
 8006e56:	d80b      	bhi.n	8006e70 <HAL_SPI_TransmitReceive+0x244>
 8006e58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e5a:	3301      	adds	r3, #1
 8006e5c:	d008      	beq.n	8006e70 <HAL_SPI_TransmitReceive+0x244>
      {
        errorcode = HAL_TIMEOUT;
 8006e5e:	2323      	movs	r3, #35	@ 0x23
 8006e60:	18fb      	adds	r3, r7, r3
 8006e62:	2203      	movs	r2, #3
 8006e64:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	225d      	movs	r2, #93	@ 0x5d
 8006e6a:	2101      	movs	r1, #1
 8006e6c:	5499      	strb	r1, [r3, r2]
        goto error;
 8006e6e:	e0b1      	b.n	8006fd4 <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006e74:	b29b      	uxth	r3, r3
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d19f      	bne.n	8006dba <HAL_SPI_TransmitReceive+0x18e>
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	2246      	movs	r2, #70	@ 0x46
 8006e7e:	5a9b      	ldrh	r3, [r3, r2]
 8006e80:	b29b      	uxth	r3, r3
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d199      	bne.n	8006dba <HAL_SPI_TransmitReceive+0x18e>
 8006e86:	e089      	b.n	8006f9c <HAL_SPI_TransmitReceive+0x370>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	685b      	ldr	r3, [r3, #4]
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d005      	beq.n	8006e9c <HAL_SPI_TransmitReceive+0x270>
 8006e90:	2312      	movs	r3, #18
 8006e92:	18fb      	adds	r3, r7, r3
 8006e94:	881b      	ldrh	r3, [r3, #0]
 8006e96:	2b01      	cmp	r3, #1
 8006e98:	d000      	beq.n	8006e9c <HAL_SPI_TransmitReceive+0x270>
 8006e9a:	e074      	b.n	8006f86 <HAL_SPI_TransmitReceive+0x35a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	330c      	adds	r3, #12
 8006ea6:	7812      	ldrb	r2, [r2, #0]
 8006ea8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006eae:	1c5a      	adds	r2, r3, #1
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006eb8:	b29b      	uxth	r3, r3
 8006eba:	3b01      	subs	r3, #1
 8006ebc:	b29a      	uxth	r2, r3
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006ec2:	e060      	b.n	8006f86 <HAL_SPI_TransmitReceive+0x35a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	689b      	ldr	r3, [r3, #8]
 8006eca:	2202      	movs	r2, #2
 8006ecc:	4013      	ands	r3, r2
 8006ece:	2b02      	cmp	r3, #2
 8006ed0:	d11c      	bne.n	8006f0c <HAL_SPI_TransmitReceive+0x2e0>
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006ed6:	b29b      	uxth	r3, r3
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d017      	beq.n	8006f0c <HAL_SPI_TransmitReceive+0x2e0>
 8006edc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ede:	2b01      	cmp	r3, #1
 8006ee0:	d114      	bne.n	8006f0c <HAL_SPI_TransmitReceive+0x2e0>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	330c      	adds	r3, #12
 8006eec:	7812      	ldrb	r2, [r2, #0]
 8006eee:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ef4:	1c5a      	adds	r2, r3, #1
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006efe:	b29b      	uxth	r3, r3
 8006f00:	3b01      	subs	r3, #1
 8006f02:	b29a      	uxth	r2, r3
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006f08:	2300      	movs	r3, #0
 8006f0a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	689b      	ldr	r3, [r3, #8]
 8006f12:	2201      	movs	r2, #1
 8006f14:	4013      	ands	r3, r2
 8006f16:	2b01      	cmp	r3, #1
 8006f18:	d11e      	bne.n	8006f58 <HAL_SPI_TransmitReceive+0x32c>
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	2246      	movs	r2, #70	@ 0x46
 8006f1e:	5a9b      	ldrh	r3, [r3, r2]
 8006f20:	b29b      	uxth	r3, r3
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d018      	beq.n	8006f58 <HAL_SPI_TransmitReceive+0x32c>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	330c      	adds	r3, #12
 8006f2c:	001a      	movs	r2, r3
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f32:	7812      	ldrb	r2, [r2, #0]
 8006f34:	b2d2      	uxtb	r2, r2
 8006f36:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f3c:	1c5a      	adds	r2, r3, #1
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	2246      	movs	r2, #70	@ 0x46
 8006f46:	5a9b      	ldrh	r3, [r3, r2]
 8006f48:	b29b      	uxth	r3, r3
 8006f4a:	3b01      	subs	r3, #1
 8006f4c:	b299      	uxth	r1, r3
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	2246      	movs	r2, #70	@ 0x46
 8006f52:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006f54:	2301      	movs	r3, #1
 8006f56:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006f58:	f7fd fa3a 	bl	80043d0 <HAL_GetTick>
 8006f5c:	0002      	movs	r2, r0
 8006f5e:	69fb      	ldr	r3, [r7, #28]
 8006f60:	1ad3      	subs	r3, r2, r3
 8006f62:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006f64:	429a      	cmp	r2, r3
 8006f66:	d802      	bhi.n	8006f6e <HAL_SPI_TransmitReceive+0x342>
 8006f68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f6a:	3301      	adds	r3, #1
 8006f6c:	d102      	bne.n	8006f74 <HAL_SPI_TransmitReceive+0x348>
 8006f6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d108      	bne.n	8006f86 <HAL_SPI_TransmitReceive+0x35a>
      {
        errorcode = HAL_TIMEOUT;
 8006f74:	2323      	movs	r3, #35	@ 0x23
 8006f76:	18fb      	adds	r3, r7, r3
 8006f78:	2203      	movs	r2, #3
 8006f7a:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	225d      	movs	r2, #93	@ 0x5d
 8006f80:	2101      	movs	r1, #1
 8006f82:	5499      	strb	r1, [r3, r2]
        goto error;
 8006f84:	e026      	b.n	8006fd4 <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006f8a:	b29b      	uxth	r3, r3
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d199      	bne.n	8006ec4 <HAL_SPI_TransmitReceive+0x298>
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	2246      	movs	r2, #70	@ 0x46
 8006f94:	5a9b      	ldrh	r3, [r3, r2]
 8006f96:	b29b      	uxth	r3, r3
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d193      	bne.n	8006ec4 <HAL_SPI_TransmitReceive+0x298>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006f9c:	69fa      	ldr	r2, [r7, #28]
 8006f9e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	0018      	movs	r0, r3
 8006fa4:	f000 f954 	bl	8007250 <SPI_EndRxTxTransaction>
 8006fa8:	1e03      	subs	r3, r0, #0
 8006faa:	d006      	beq.n	8006fba <HAL_SPI_TransmitReceive+0x38e>
  {
    errorcode = HAL_ERROR;
 8006fac:	2323      	movs	r3, #35	@ 0x23
 8006fae:	18fb      	adds	r3, r7, r3
 8006fb0:	2201      	movs	r2, #1
 8006fb2:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	2220      	movs	r2, #32
 8006fb8:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d004      	beq.n	8006fcc <HAL_SPI_TransmitReceive+0x3a0>
  {
    errorcode = HAL_ERROR;
 8006fc2:	2323      	movs	r3, #35	@ 0x23
 8006fc4:	18fb      	adds	r3, r7, r3
 8006fc6:	2201      	movs	r2, #1
 8006fc8:	701a      	strb	r2, [r3, #0]
 8006fca:	e003      	b.n	8006fd4 <HAL_SPI_TransmitReceive+0x3a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	225d      	movs	r2, #93	@ 0x5d
 8006fd0:	2101      	movs	r1, #1
 8006fd2:	5499      	strb	r1, [r3, r2]
  }
  
error :
  __HAL_UNLOCK(hspi);
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	225c      	movs	r2, #92	@ 0x5c
 8006fd8:	2100      	movs	r1, #0
 8006fda:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8006fdc:	2323      	movs	r3, #35	@ 0x23
 8006fde:	18fb      	adds	r3, r7, r3
 8006fe0:	781b      	ldrb	r3, [r3, #0]
}
 8006fe2:	0018      	movs	r0, r3
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	b00a      	add	sp, #40	@ 0x28
 8006fe8:	bd80      	pop	{r7, pc}
 8006fea:	46c0      	nop			@ (mov r8, r8)
 8006fec:	ffffefff 	.word	0xffffefff

08006ff0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006ff0:	b580      	push	{r7, lr}
 8006ff2:	b088      	sub	sp, #32
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	60f8      	str	r0, [r7, #12]
 8006ff8:	60b9      	str	r1, [r7, #8]
 8006ffa:	603b      	str	r3, [r7, #0]
 8006ffc:	1dfb      	adds	r3, r7, #7
 8006ffe:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007000:	f7fd f9e6 	bl	80043d0 <HAL_GetTick>
 8007004:	0002      	movs	r2, r0
 8007006:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007008:	1a9b      	subs	r3, r3, r2
 800700a:	683a      	ldr	r2, [r7, #0]
 800700c:	18d3      	adds	r3, r2, r3
 800700e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007010:	f7fd f9de 	bl	80043d0 <HAL_GetTick>
 8007014:	0003      	movs	r3, r0
 8007016:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007018:	4b3a      	ldr	r3, [pc, #232]	@ (8007104 <SPI_WaitFlagStateUntilTimeout+0x114>)
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	015b      	lsls	r3, r3, #5
 800701e:	0d1b      	lsrs	r3, r3, #20
 8007020:	69fa      	ldr	r2, [r7, #28]
 8007022:	4353      	muls	r3, r2
 8007024:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007026:	e058      	b.n	80070da <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007028:	683b      	ldr	r3, [r7, #0]
 800702a:	3301      	adds	r3, #1
 800702c:	d055      	beq.n	80070da <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800702e:	f7fd f9cf 	bl	80043d0 <HAL_GetTick>
 8007032:	0002      	movs	r2, r0
 8007034:	69bb      	ldr	r3, [r7, #24]
 8007036:	1ad3      	subs	r3, r2, r3
 8007038:	69fa      	ldr	r2, [r7, #28]
 800703a:	429a      	cmp	r2, r3
 800703c:	d902      	bls.n	8007044 <SPI_WaitFlagStateUntilTimeout+0x54>
 800703e:	69fb      	ldr	r3, [r7, #28]
 8007040:	2b00      	cmp	r3, #0
 8007042:	d142      	bne.n	80070ca <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	685a      	ldr	r2, [r3, #4]
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	21e0      	movs	r1, #224	@ 0xe0
 8007050:	438a      	bics	r2, r1
 8007052:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	685a      	ldr	r2, [r3, #4]
 8007058:	2382      	movs	r3, #130	@ 0x82
 800705a:	005b      	lsls	r3, r3, #1
 800705c:	429a      	cmp	r2, r3
 800705e:	d113      	bne.n	8007088 <SPI_WaitFlagStateUntilTimeout+0x98>
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	689a      	ldr	r2, [r3, #8]
 8007064:	2380      	movs	r3, #128	@ 0x80
 8007066:	021b      	lsls	r3, r3, #8
 8007068:	429a      	cmp	r2, r3
 800706a:	d005      	beq.n	8007078 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	689a      	ldr	r2, [r3, #8]
 8007070:	2380      	movs	r3, #128	@ 0x80
 8007072:	00db      	lsls	r3, r3, #3
 8007074:	429a      	cmp	r2, r3
 8007076:	d107      	bne.n	8007088 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	681a      	ldr	r2, [r3, #0]
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	2140      	movs	r1, #64	@ 0x40
 8007084:	438a      	bics	r2, r1
 8007086:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800708c:	2380      	movs	r3, #128	@ 0x80
 800708e:	019b      	lsls	r3, r3, #6
 8007090:	429a      	cmp	r2, r3
 8007092:	d110      	bne.n	80070b6 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	681a      	ldr	r2, [r3, #0]
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	491a      	ldr	r1, [pc, #104]	@ (8007108 <SPI_WaitFlagStateUntilTimeout+0x118>)
 80070a0:	400a      	ands	r2, r1
 80070a2:	601a      	str	r2, [r3, #0]
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	681a      	ldr	r2, [r3, #0]
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	2180      	movs	r1, #128	@ 0x80
 80070b0:	0189      	lsls	r1, r1, #6
 80070b2:	430a      	orrs	r2, r1
 80070b4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	225d      	movs	r2, #93	@ 0x5d
 80070ba:	2101      	movs	r1, #1
 80070bc:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	225c      	movs	r2, #92	@ 0x5c
 80070c2:	2100      	movs	r1, #0
 80070c4:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80070c6:	2303      	movs	r3, #3
 80070c8:	e017      	b.n	80070fa <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80070ca:	697b      	ldr	r3, [r7, #20]
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d101      	bne.n	80070d4 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 80070d0:	2300      	movs	r3, #0
 80070d2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80070d4:	697b      	ldr	r3, [r7, #20]
 80070d6:	3b01      	subs	r3, #1
 80070d8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	689b      	ldr	r3, [r3, #8]
 80070e0:	68ba      	ldr	r2, [r7, #8]
 80070e2:	4013      	ands	r3, r2
 80070e4:	68ba      	ldr	r2, [r7, #8]
 80070e6:	1ad3      	subs	r3, r2, r3
 80070e8:	425a      	negs	r2, r3
 80070ea:	4153      	adcs	r3, r2
 80070ec:	b2db      	uxtb	r3, r3
 80070ee:	001a      	movs	r2, r3
 80070f0:	1dfb      	adds	r3, r7, #7
 80070f2:	781b      	ldrb	r3, [r3, #0]
 80070f4:	429a      	cmp	r2, r3
 80070f6:	d197      	bne.n	8007028 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80070f8:	2300      	movs	r3, #0
}
 80070fa:	0018      	movs	r0, r3
 80070fc:	46bd      	mov	sp, r7
 80070fe:	b008      	add	sp, #32
 8007100:	bd80      	pop	{r7, pc}
 8007102:	46c0      	nop			@ (mov r8, r8)
 8007104:	20000008 	.word	0x20000008
 8007108:	ffffdfff 	.word	0xffffdfff

0800710c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800710c:	b580      	push	{r7, lr}
 800710e:	b08a      	sub	sp, #40	@ 0x28
 8007110:	af00      	add	r7, sp, #0
 8007112:	60f8      	str	r0, [r7, #12]
 8007114:	60b9      	str	r1, [r7, #8]
 8007116:	607a      	str	r2, [r7, #4]
 8007118:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800711a:	2317      	movs	r3, #23
 800711c:	18fb      	adds	r3, r7, r3
 800711e:	2200      	movs	r2, #0
 8007120:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8007122:	f7fd f955 	bl	80043d0 <HAL_GetTick>
 8007126:	0002      	movs	r2, r0
 8007128:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800712a:	1a9b      	subs	r3, r3, r2
 800712c:	683a      	ldr	r2, [r7, #0]
 800712e:	18d3      	adds	r3, r2, r3
 8007130:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8007132:	f7fd f94d 	bl	80043d0 <HAL_GetTick>
 8007136:	0003      	movs	r3, r0
 8007138:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	330c      	adds	r3, #12
 8007140:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8007142:	4b41      	ldr	r3, [pc, #260]	@ (8007248 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8007144:	681a      	ldr	r2, [r3, #0]
 8007146:	0013      	movs	r3, r2
 8007148:	009b      	lsls	r3, r3, #2
 800714a:	189b      	adds	r3, r3, r2
 800714c:	00da      	lsls	r2, r3, #3
 800714e:	1ad3      	subs	r3, r2, r3
 8007150:	0d1b      	lsrs	r3, r3, #20
 8007152:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007154:	4353      	muls	r3, r2
 8007156:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8007158:	e068      	b.n	800722c <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800715a:	68ba      	ldr	r2, [r7, #8]
 800715c:	23c0      	movs	r3, #192	@ 0xc0
 800715e:	00db      	lsls	r3, r3, #3
 8007160:	429a      	cmp	r2, r3
 8007162:	d10a      	bne.n	800717a <SPI_WaitFifoStateUntilTimeout+0x6e>
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	2b00      	cmp	r3, #0
 8007168:	d107      	bne.n	800717a <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800716a:	69fb      	ldr	r3, [r7, #28]
 800716c:	781b      	ldrb	r3, [r3, #0]
 800716e:	b2da      	uxtb	r2, r3
 8007170:	2117      	movs	r1, #23
 8007172:	187b      	adds	r3, r7, r1
 8007174:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8007176:	187b      	adds	r3, r7, r1
 8007178:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800717a:	683b      	ldr	r3, [r7, #0]
 800717c:	3301      	adds	r3, #1
 800717e:	d055      	beq.n	800722c <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007180:	f7fd f926 	bl	80043d0 <HAL_GetTick>
 8007184:	0002      	movs	r2, r0
 8007186:	6a3b      	ldr	r3, [r7, #32]
 8007188:	1ad3      	subs	r3, r2, r3
 800718a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800718c:	429a      	cmp	r2, r3
 800718e:	d902      	bls.n	8007196 <SPI_WaitFifoStateUntilTimeout+0x8a>
 8007190:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007192:	2b00      	cmp	r3, #0
 8007194:	d142      	bne.n	800721c <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	685a      	ldr	r2, [r3, #4]
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	21e0      	movs	r1, #224	@ 0xe0
 80071a2:	438a      	bics	r2, r1
 80071a4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	685a      	ldr	r2, [r3, #4]
 80071aa:	2382      	movs	r3, #130	@ 0x82
 80071ac:	005b      	lsls	r3, r3, #1
 80071ae:	429a      	cmp	r2, r3
 80071b0:	d113      	bne.n	80071da <SPI_WaitFifoStateUntilTimeout+0xce>
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	689a      	ldr	r2, [r3, #8]
 80071b6:	2380      	movs	r3, #128	@ 0x80
 80071b8:	021b      	lsls	r3, r3, #8
 80071ba:	429a      	cmp	r2, r3
 80071bc:	d005      	beq.n	80071ca <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	689a      	ldr	r2, [r3, #8]
 80071c2:	2380      	movs	r3, #128	@ 0x80
 80071c4:	00db      	lsls	r3, r3, #3
 80071c6:	429a      	cmp	r2, r3
 80071c8:	d107      	bne.n	80071da <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	681a      	ldr	r2, [r3, #0]
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	2140      	movs	r1, #64	@ 0x40
 80071d6:	438a      	bics	r2, r1
 80071d8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80071de:	2380      	movs	r3, #128	@ 0x80
 80071e0:	019b      	lsls	r3, r3, #6
 80071e2:	429a      	cmp	r2, r3
 80071e4:	d110      	bne.n	8007208 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	681a      	ldr	r2, [r3, #0]
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	4916      	ldr	r1, [pc, #88]	@ (800724c <SPI_WaitFifoStateUntilTimeout+0x140>)
 80071f2:	400a      	ands	r2, r1
 80071f4:	601a      	str	r2, [r3, #0]
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	681a      	ldr	r2, [r3, #0]
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	2180      	movs	r1, #128	@ 0x80
 8007202:	0189      	lsls	r1, r1, #6
 8007204:	430a      	orrs	r2, r1
 8007206:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	225d      	movs	r2, #93	@ 0x5d
 800720c:	2101      	movs	r1, #1
 800720e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	225c      	movs	r2, #92	@ 0x5c
 8007214:	2100      	movs	r1, #0
 8007216:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8007218:	2303      	movs	r3, #3
 800721a:	e010      	b.n	800723e <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800721c:	69bb      	ldr	r3, [r7, #24]
 800721e:	2b00      	cmp	r3, #0
 8007220:	d101      	bne.n	8007226 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8007222:	2300      	movs	r3, #0
 8007224:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8007226:	69bb      	ldr	r3, [r7, #24]
 8007228:	3b01      	subs	r3, #1
 800722a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	689b      	ldr	r3, [r3, #8]
 8007232:	68ba      	ldr	r2, [r7, #8]
 8007234:	4013      	ands	r3, r2
 8007236:	687a      	ldr	r2, [r7, #4]
 8007238:	429a      	cmp	r2, r3
 800723a:	d18e      	bne.n	800715a <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 800723c:	2300      	movs	r3, #0
}
 800723e:	0018      	movs	r0, r3
 8007240:	46bd      	mov	sp, r7
 8007242:	b00a      	add	sp, #40	@ 0x28
 8007244:	bd80      	pop	{r7, pc}
 8007246:	46c0      	nop			@ (mov r8, r8)
 8007248:	20000008 	.word	0x20000008
 800724c:	ffffdfff 	.word	0xffffdfff

08007250 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007250:	b580      	push	{r7, lr}
 8007252:	b086      	sub	sp, #24
 8007254:	af02      	add	r7, sp, #8
 8007256:	60f8      	str	r0, [r7, #12]
 8007258:	60b9      	str	r1, [r7, #8]
 800725a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800725c:	68ba      	ldr	r2, [r7, #8]
 800725e:	23c0      	movs	r3, #192	@ 0xc0
 8007260:	0159      	lsls	r1, r3, #5
 8007262:	68f8      	ldr	r0, [r7, #12]
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	9300      	str	r3, [sp, #0]
 8007268:	0013      	movs	r3, r2
 800726a:	2200      	movs	r2, #0
 800726c:	f7ff ff4e 	bl	800710c <SPI_WaitFifoStateUntilTimeout>
 8007270:	1e03      	subs	r3, r0, #0
 8007272:	d007      	beq.n	8007284 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007278:	2220      	movs	r2, #32
 800727a:	431a      	orrs	r2, r3
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8007280:	2303      	movs	r3, #3
 8007282:	e027      	b.n	80072d4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007284:	68ba      	ldr	r2, [r7, #8]
 8007286:	68f8      	ldr	r0, [r7, #12]
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	9300      	str	r3, [sp, #0]
 800728c:	0013      	movs	r3, r2
 800728e:	2200      	movs	r2, #0
 8007290:	2180      	movs	r1, #128	@ 0x80
 8007292:	f7ff fead 	bl	8006ff0 <SPI_WaitFlagStateUntilTimeout>
 8007296:	1e03      	subs	r3, r0, #0
 8007298:	d007      	beq.n	80072aa <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800729e:	2220      	movs	r2, #32
 80072a0:	431a      	orrs	r2, r3
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80072a6:	2303      	movs	r3, #3
 80072a8:	e014      	b.n	80072d4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80072aa:	68ba      	ldr	r2, [r7, #8]
 80072ac:	23c0      	movs	r3, #192	@ 0xc0
 80072ae:	00d9      	lsls	r1, r3, #3
 80072b0:	68f8      	ldr	r0, [r7, #12]
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	9300      	str	r3, [sp, #0]
 80072b6:	0013      	movs	r3, r2
 80072b8:	2200      	movs	r2, #0
 80072ba:	f7ff ff27 	bl	800710c <SPI_WaitFifoStateUntilTimeout>
 80072be:	1e03      	subs	r3, r0, #0
 80072c0:	d007      	beq.n	80072d2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80072c6:	2220      	movs	r2, #32
 80072c8:	431a      	orrs	r2, r3
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80072ce:	2303      	movs	r3, #3
 80072d0:	e000      	b.n	80072d4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80072d2:	2300      	movs	r3, #0
}
 80072d4:	0018      	movs	r0, r3
 80072d6:	46bd      	mov	sp, r7
 80072d8:	b004      	add	sp, #16
 80072da:	bd80      	pop	{r7, pc}

080072dc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80072dc:	b580      	push	{r7, lr}
 80072de:	b082      	sub	sp, #8
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d101      	bne.n	80072ee <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80072ea:	2301      	movs	r3, #1
 80072ec:	e04a      	b.n	8007384 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	223d      	movs	r2, #61	@ 0x3d
 80072f2:	5c9b      	ldrb	r3, [r3, r2]
 80072f4:	b2db      	uxtb	r3, r3
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d107      	bne.n	800730a <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	223c      	movs	r2, #60	@ 0x3c
 80072fe:	2100      	movs	r1, #0
 8007300:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	0018      	movs	r0, r3
 8007306:	f7fc fe67 	bl	8003fd8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	223d      	movs	r2, #61	@ 0x3d
 800730e:	2102      	movs	r1, #2
 8007310:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681a      	ldr	r2, [r3, #0]
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	3304      	adds	r3, #4
 800731a:	0019      	movs	r1, r3
 800731c:	0010      	movs	r0, r2
 800731e:	f000 fa1f 	bl	8007760 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	2248      	movs	r2, #72	@ 0x48
 8007326:	2101      	movs	r1, #1
 8007328:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	223e      	movs	r2, #62	@ 0x3e
 800732e:	2101      	movs	r1, #1
 8007330:	5499      	strb	r1, [r3, r2]
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	223f      	movs	r2, #63	@ 0x3f
 8007336:	2101      	movs	r1, #1
 8007338:	5499      	strb	r1, [r3, r2]
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	2240      	movs	r2, #64	@ 0x40
 800733e:	2101      	movs	r1, #1
 8007340:	5499      	strb	r1, [r3, r2]
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	2241      	movs	r2, #65	@ 0x41
 8007346:	2101      	movs	r1, #1
 8007348:	5499      	strb	r1, [r3, r2]
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	2242      	movs	r2, #66	@ 0x42
 800734e:	2101      	movs	r1, #1
 8007350:	5499      	strb	r1, [r3, r2]
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	2243      	movs	r2, #67	@ 0x43
 8007356:	2101      	movs	r1, #1
 8007358:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	2244      	movs	r2, #68	@ 0x44
 800735e:	2101      	movs	r1, #1
 8007360:	5499      	strb	r1, [r3, r2]
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	2245      	movs	r2, #69	@ 0x45
 8007366:	2101      	movs	r1, #1
 8007368:	5499      	strb	r1, [r3, r2]
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	2246      	movs	r2, #70	@ 0x46
 800736e:	2101      	movs	r1, #1
 8007370:	5499      	strb	r1, [r3, r2]
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	2247      	movs	r2, #71	@ 0x47
 8007376:	2101      	movs	r1, #1
 8007378:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	223d      	movs	r2, #61	@ 0x3d
 800737e:	2101      	movs	r1, #1
 8007380:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007382:	2300      	movs	r3, #0
}
 8007384:	0018      	movs	r0, r3
 8007386:	46bd      	mov	sp, r7
 8007388:	b002      	add	sp, #8
 800738a:	bd80      	pop	{r7, pc}

0800738c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800738c:	b580      	push	{r7, lr}
 800738e:	b084      	sub	sp, #16
 8007390:	af00      	add	r7, sp, #0
 8007392:	6078      	str	r0, [r7, #4]
 8007394:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007396:	683b      	ldr	r3, [r7, #0]
 8007398:	2b00      	cmp	r3, #0
 800739a:	d108      	bne.n	80073ae <HAL_TIM_PWM_Start+0x22>
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	223e      	movs	r2, #62	@ 0x3e
 80073a0:	5c9b      	ldrb	r3, [r3, r2]
 80073a2:	b2db      	uxtb	r3, r3
 80073a4:	3b01      	subs	r3, #1
 80073a6:	1e5a      	subs	r2, r3, #1
 80073a8:	4193      	sbcs	r3, r2
 80073aa:	b2db      	uxtb	r3, r3
 80073ac:	e037      	b.n	800741e <HAL_TIM_PWM_Start+0x92>
 80073ae:	683b      	ldr	r3, [r7, #0]
 80073b0:	2b04      	cmp	r3, #4
 80073b2:	d108      	bne.n	80073c6 <HAL_TIM_PWM_Start+0x3a>
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	223f      	movs	r2, #63	@ 0x3f
 80073b8:	5c9b      	ldrb	r3, [r3, r2]
 80073ba:	b2db      	uxtb	r3, r3
 80073bc:	3b01      	subs	r3, #1
 80073be:	1e5a      	subs	r2, r3, #1
 80073c0:	4193      	sbcs	r3, r2
 80073c2:	b2db      	uxtb	r3, r3
 80073c4:	e02b      	b.n	800741e <HAL_TIM_PWM_Start+0x92>
 80073c6:	683b      	ldr	r3, [r7, #0]
 80073c8:	2b08      	cmp	r3, #8
 80073ca:	d108      	bne.n	80073de <HAL_TIM_PWM_Start+0x52>
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	2240      	movs	r2, #64	@ 0x40
 80073d0:	5c9b      	ldrb	r3, [r3, r2]
 80073d2:	b2db      	uxtb	r3, r3
 80073d4:	3b01      	subs	r3, #1
 80073d6:	1e5a      	subs	r2, r3, #1
 80073d8:	4193      	sbcs	r3, r2
 80073da:	b2db      	uxtb	r3, r3
 80073dc:	e01f      	b.n	800741e <HAL_TIM_PWM_Start+0x92>
 80073de:	683b      	ldr	r3, [r7, #0]
 80073e0:	2b0c      	cmp	r3, #12
 80073e2:	d108      	bne.n	80073f6 <HAL_TIM_PWM_Start+0x6a>
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	2241      	movs	r2, #65	@ 0x41
 80073e8:	5c9b      	ldrb	r3, [r3, r2]
 80073ea:	b2db      	uxtb	r3, r3
 80073ec:	3b01      	subs	r3, #1
 80073ee:	1e5a      	subs	r2, r3, #1
 80073f0:	4193      	sbcs	r3, r2
 80073f2:	b2db      	uxtb	r3, r3
 80073f4:	e013      	b.n	800741e <HAL_TIM_PWM_Start+0x92>
 80073f6:	683b      	ldr	r3, [r7, #0]
 80073f8:	2b10      	cmp	r3, #16
 80073fa:	d108      	bne.n	800740e <HAL_TIM_PWM_Start+0x82>
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	2242      	movs	r2, #66	@ 0x42
 8007400:	5c9b      	ldrb	r3, [r3, r2]
 8007402:	b2db      	uxtb	r3, r3
 8007404:	3b01      	subs	r3, #1
 8007406:	1e5a      	subs	r2, r3, #1
 8007408:	4193      	sbcs	r3, r2
 800740a:	b2db      	uxtb	r3, r3
 800740c:	e007      	b.n	800741e <HAL_TIM_PWM_Start+0x92>
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	2243      	movs	r2, #67	@ 0x43
 8007412:	5c9b      	ldrb	r3, [r3, r2]
 8007414:	b2db      	uxtb	r3, r3
 8007416:	3b01      	subs	r3, #1
 8007418:	1e5a      	subs	r2, r3, #1
 800741a:	4193      	sbcs	r3, r2
 800741c:	b2db      	uxtb	r3, r3
 800741e:	2b00      	cmp	r3, #0
 8007420:	d001      	beq.n	8007426 <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 8007422:	2301      	movs	r3, #1
 8007424:	e08b      	b.n	800753e <HAL_TIM_PWM_Start+0x1b2>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007426:	683b      	ldr	r3, [r7, #0]
 8007428:	2b00      	cmp	r3, #0
 800742a:	d104      	bne.n	8007436 <HAL_TIM_PWM_Start+0xaa>
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	223e      	movs	r2, #62	@ 0x3e
 8007430:	2102      	movs	r1, #2
 8007432:	5499      	strb	r1, [r3, r2]
 8007434:	e023      	b.n	800747e <HAL_TIM_PWM_Start+0xf2>
 8007436:	683b      	ldr	r3, [r7, #0]
 8007438:	2b04      	cmp	r3, #4
 800743a:	d104      	bne.n	8007446 <HAL_TIM_PWM_Start+0xba>
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	223f      	movs	r2, #63	@ 0x3f
 8007440:	2102      	movs	r1, #2
 8007442:	5499      	strb	r1, [r3, r2]
 8007444:	e01b      	b.n	800747e <HAL_TIM_PWM_Start+0xf2>
 8007446:	683b      	ldr	r3, [r7, #0]
 8007448:	2b08      	cmp	r3, #8
 800744a:	d104      	bne.n	8007456 <HAL_TIM_PWM_Start+0xca>
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	2240      	movs	r2, #64	@ 0x40
 8007450:	2102      	movs	r1, #2
 8007452:	5499      	strb	r1, [r3, r2]
 8007454:	e013      	b.n	800747e <HAL_TIM_PWM_Start+0xf2>
 8007456:	683b      	ldr	r3, [r7, #0]
 8007458:	2b0c      	cmp	r3, #12
 800745a:	d104      	bne.n	8007466 <HAL_TIM_PWM_Start+0xda>
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	2241      	movs	r2, #65	@ 0x41
 8007460:	2102      	movs	r1, #2
 8007462:	5499      	strb	r1, [r3, r2]
 8007464:	e00b      	b.n	800747e <HAL_TIM_PWM_Start+0xf2>
 8007466:	683b      	ldr	r3, [r7, #0]
 8007468:	2b10      	cmp	r3, #16
 800746a:	d104      	bne.n	8007476 <HAL_TIM_PWM_Start+0xea>
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	2242      	movs	r2, #66	@ 0x42
 8007470:	2102      	movs	r1, #2
 8007472:	5499      	strb	r1, [r3, r2]
 8007474:	e003      	b.n	800747e <HAL_TIM_PWM_Start+0xf2>
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	2243      	movs	r2, #67	@ 0x43
 800747a:	2102      	movs	r1, #2
 800747c:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	6839      	ldr	r1, [r7, #0]
 8007484:	2201      	movs	r2, #1
 8007486:	0018      	movs	r0, r3
 8007488:	f000 fcbc 	bl	8007e04 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	4a2d      	ldr	r2, [pc, #180]	@ (8007548 <HAL_TIM_PWM_Start+0x1bc>)
 8007492:	4293      	cmp	r3, r2
 8007494:	d00e      	beq.n	80074b4 <HAL_TIM_PWM_Start+0x128>
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	4a2c      	ldr	r2, [pc, #176]	@ (800754c <HAL_TIM_PWM_Start+0x1c0>)
 800749c:	4293      	cmp	r3, r2
 800749e:	d009      	beq.n	80074b4 <HAL_TIM_PWM_Start+0x128>
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	4a2a      	ldr	r2, [pc, #168]	@ (8007550 <HAL_TIM_PWM_Start+0x1c4>)
 80074a6:	4293      	cmp	r3, r2
 80074a8:	d004      	beq.n	80074b4 <HAL_TIM_PWM_Start+0x128>
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	4a29      	ldr	r2, [pc, #164]	@ (8007554 <HAL_TIM_PWM_Start+0x1c8>)
 80074b0:	4293      	cmp	r3, r2
 80074b2:	d101      	bne.n	80074b8 <HAL_TIM_PWM_Start+0x12c>
 80074b4:	2301      	movs	r3, #1
 80074b6:	e000      	b.n	80074ba <HAL_TIM_PWM_Start+0x12e>
 80074b8:	2300      	movs	r3, #0
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d008      	beq.n	80074d0 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	2180      	movs	r1, #128	@ 0x80
 80074ca:	0209      	lsls	r1, r1, #8
 80074cc:	430a      	orrs	r2, r1
 80074ce:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	4a1c      	ldr	r2, [pc, #112]	@ (8007548 <HAL_TIM_PWM_Start+0x1bc>)
 80074d6:	4293      	cmp	r3, r2
 80074d8:	d00f      	beq.n	80074fa <HAL_TIM_PWM_Start+0x16e>
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681a      	ldr	r2, [r3, #0]
 80074de:	2380      	movs	r3, #128	@ 0x80
 80074e0:	05db      	lsls	r3, r3, #23
 80074e2:	429a      	cmp	r2, r3
 80074e4:	d009      	beq.n	80074fa <HAL_TIM_PWM_Start+0x16e>
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	4a1b      	ldr	r2, [pc, #108]	@ (8007558 <HAL_TIM_PWM_Start+0x1cc>)
 80074ec:	4293      	cmp	r3, r2
 80074ee:	d004      	beq.n	80074fa <HAL_TIM_PWM_Start+0x16e>
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	4a15      	ldr	r2, [pc, #84]	@ (800754c <HAL_TIM_PWM_Start+0x1c0>)
 80074f6:	4293      	cmp	r3, r2
 80074f8:	d116      	bne.n	8007528 <HAL_TIM_PWM_Start+0x19c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	689b      	ldr	r3, [r3, #8]
 8007500:	4a16      	ldr	r2, [pc, #88]	@ (800755c <HAL_TIM_PWM_Start+0x1d0>)
 8007502:	4013      	ands	r3, r2
 8007504:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	2b06      	cmp	r3, #6
 800750a:	d016      	beq.n	800753a <HAL_TIM_PWM_Start+0x1ae>
 800750c:	68fa      	ldr	r2, [r7, #12]
 800750e:	2380      	movs	r3, #128	@ 0x80
 8007510:	025b      	lsls	r3, r3, #9
 8007512:	429a      	cmp	r2, r3
 8007514:	d011      	beq.n	800753a <HAL_TIM_PWM_Start+0x1ae>
    {
      __HAL_TIM_ENABLE(htim);
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	681a      	ldr	r2, [r3, #0]
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	2101      	movs	r1, #1
 8007522:	430a      	orrs	r2, r1
 8007524:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007526:	e008      	b.n	800753a <HAL_TIM_PWM_Start+0x1ae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	681a      	ldr	r2, [r3, #0]
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	2101      	movs	r1, #1
 8007534:	430a      	orrs	r2, r1
 8007536:	601a      	str	r2, [r3, #0]
 8007538:	e000      	b.n	800753c <HAL_TIM_PWM_Start+0x1b0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800753a:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 800753c:	2300      	movs	r3, #0
}
 800753e:	0018      	movs	r0, r3
 8007540:	46bd      	mov	sp, r7
 8007542:	b004      	add	sp, #16
 8007544:	bd80      	pop	{r7, pc}
 8007546:	46c0      	nop			@ (mov r8, r8)
 8007548:	40012c00 	.word	0x40012c00
 800754c:	40014000 	.word	0x40014000
 8007550:	40014400 	.word	0x40014400
 8007554:	40014800 	.word	0x40014800
 8007558:	40000400 	.word	0x40000400
 800755c:	00010007 	.word	0x00010007

08007560 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007560:	b580      	push	{r7, lr}
 8007562:	b086      	sub	sp, #24
 8007564:	af00      	add	r7, sp, #0
 8007566:	60f8      	str	r0, [r7, #12]
 8007568:	60b9      	str	r1, [r7, #8]
 800756a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800756c:	2317      	movs	r3, #23
 800756e:	18fb      	adds	r3, r7, r3
 8007570:	2200      	movs	r2, #0
 8007572:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	223c      	movs	r2, #60	@ 0x3c
 8007578:	5c9b      	ldrb	r3, [r3, r2]
 800757a:	2b01      	cmp	r3, #1
 800757c:	d101      	bne.n	8007582 <HAL_TIM_PWM_ConfigChannel+0x22>
 800757e:	2302      	movs	r3, #2
 8007580:	e0e5      	b.n	800774e <HAL_TIM_PWM_ConfigChannel+0x1ee>
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	223c      	movs	r2, #60	@ 0x3c
 8007586:	2101      	movs	r1, #1
 8007588:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	2b14      	cmp	r3, #20
 800758e:	d900      	bls.n	8007592 <HAL_TIM_PWM_ConfigChannel+0x32>
 8007590:	e0d1      	b.n	8007736 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	009a      	lsls	r2, r3, #2
 8007596:	4b70      	ldr	r3, [pc, #448]	@ (8007758 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8007598:	18d3      	adds	r3, r2, r3
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	68ba      	ldr	r2, [r7, #8]
 80075a4:	0011      	movs	r1, r2
 80075a6:	0018      	movs	r0, r3
 80075a8:	f000 f968 	bl	800787c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	699a      	ldr	r2, [r3, #24]
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	2108      	movs	r1, #8
 80075b8:	430a      	orrs	r2, r1
 80075ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	699a      	ldr	r2, [r3, #24]
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	2104      	movs	r1, #4
 80075c8:	438a      	bics	r2, r1
 80075ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	6999      	ldr	r1, [r3, #24]
 80075d2:	68bb      	ldr	r3, [r7, #8]
 80075d4:	691a      	ldr	r2, [r3, #16]
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	430a      	orrs	r2, r1
 80075dc:	619a      	str	r2, [r3, #24]
      break;
 80075de:	e0af      	b.n	8007740 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	68ba      	ldr	r2, [r7, #8]
 80075e6:	0011      	movs	r1, r2
 80075e8:	0018      	movs	r0, r3
 80075ea:	f000 f9d1 	bl	8007990 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	699a      	ldr	r2, [r3, #24]
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	2180      	movs	r1, #128	@ 0x80
 80075fa:	0109      	lsls	r1, r1, #4
 80075fc:	430a      	orrs	r2, r1
 80075fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	699a      	ldr	r2, [r3, #24]
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	4954      	ldr	r1, [pc, #336]	@ (800775c <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 800760c:	400a      	ands	r2, r1
 800760e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	6999      	ldr	r1, [r3, #24]
 8007616:	68bb      	ldr	r3, [r7, #8]
 8007618:	691b      	ldr	r3, [r3, #16]
 800761a:	021a      	lsls	r2, r3, #8
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	430a      	orrs	r2, r1
 8007622:	619a      	str	r2, [r3, #24]
      break;
 8007624:	e08c      	b.n	8007740 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	68ba      	ldr	r2, [r7, #8]
 800762c:	0011      	movs	r1, r2
 800762e:	0018      	movs	r0, r3
 8007630:	f000 fa32 	bl	8007a98 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	69da      	ldr	r2, [r3, #28]
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	2108      	movs	r1, #8
 8007640:	430a      	orrs	r2, r1
 8007642:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	69da      	ldr	r2, [r3, #28]
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	2104      	movs	r1, #4
 8007650:	438a      	bics	r2, r1
 8007652:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	69d9      	ldr	r1, [r3, #28]
 800765a:	68bb      	ldr	r3, [r7, #8]
 800765c:	691a      	ldr	r2, [r3, #16]
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	430a      	orrs	r2, r1
 8007664:	61da      	str	r2, [r3, #28]
      break;
 8007666:	e06b      	b.n	8007740 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	68ba      	ldr	r2, [r7, #8]
 800766e:	0011      	movs	r1, r2
 8007670:	0018      	movs	r0, r3
 8007672:	f000 fa99 	bl	8007ba8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	69da      	ldr	r2, [r3, #28]
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	2180      	movs	r1, #128	@ 0x80
 8007682:	0109      	lsls	r1, r1, #4
 8007684:	430a      	orrs	r2, r1
 8007686:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	69da      	ldr	r2, [r3, #28]
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	4932      	ldr	r1, [pc, #200]	@ (800775c <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8007694:	400a      	ands	r2, r1
 8007696:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	69d9      	ldr	r1, [r3, #28]
 800769e:	68bb      	ldr	r3, [r7, #8]
 80076a0:	691b      	ldr	r3, [r3, #16]
 80076a2:	021a      	lsls	r2, r3, #8
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	430a      	orrs	r2, r1
 80076aa:	61da      	str	r2, [r3, #28]
      break;
 80076ac:	e048      	b.n	8007740 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	68ba      	ldr	r2, [r7, #8]
 80076b4:	0011      	movs	r1, r2
 80076b6:	0018      	movs	r0, r3
 80076b8:	f000 fae0 	bl	8007c7c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	2108      	movs	r1, #8
 80076c8:	430a      	orrs	r2, r1
 80076ca:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	2104      	movs	r1, #4
 80076d8:	438a      	bics	r2, r1
 80076da:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80076e2:	68bb      	ldr	r3, [r7, #8]
 80076e4:	691a      	ldr	r2, [r3, #16]
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	430a      	orrs	r2, r1
 80076ec:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80076ee:	e027      	b.n	8007740 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	68ba      	ldr	r2, [r7, #8]
 80076f6:	0011      	movs	r1, r2
 80076f8:	0018      	movs	r0, r3
 80076fa:	f000 fb1f 	bl	8007d3c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	2180      	movs	r1, #128	@ 0x80
 800770a:	0109      	lsls	r1, r1, #4
 800770c:	430a      	orrs	r2, r1
 800770e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	4910      	ldr	r1, [pc, #64]	@ (800775c <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 800771c:	400a      	ands	r2, r1
 800771e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8007726:	68bb      	ldr	r3, [r7, #8]
 8007728:	691b      	ldr	r3, [r3, #16]
 800772a:	021a      	lsls	r2, r3, #8
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	430a      	orrs	r2, r1
 8007732:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8007734:	e004      	b.n	8007740 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8007736:	2317      	movs	r3, #23
 8007738:	18fb      	adds	r3, r7, r3
 800773a:	2201      	movs	r2, #1
 800773c:	701a      	strb	r2, [r3, #0]
      break;
 800773e:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	223c      	movs	r2, #60	@ 0x3c
 8007744:	2100      	movs	r1, #0
 8007746:	5499      	strb	r1, [r3, r2]

  return status;
 8007748:	2317      	movs	r3, #23
 800774a:	18fb      	adds	r3, r7, r3
 800774c:	781b      	ldrb	r3, [r3, #0]
}
 800774e:	0018      	movs	r0, r3
 8007750:	46bd      	mov	sp, r7
 8007752:	b006      	add	sp, #24
 8007754:	bd80      	pop	{r7, pc}
 8007756:	46c0      	nop			@ (mov r8, r8)
 8007758:	08009134 	.word	0x08009134
 800775c:	fffffbff 	.word	0xfffffbff

08007760 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007760:	b580      	push	{r7, lr}
 8007762:	b084      	sub	sp, #16
 8007764:	af00      	add	r7, sp, #0
 8007766:	6078      	str	r0, [r7, #4]
 8007768:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	4a3b      	ldr	r2, [pc, #236]	@ (8007860 <TIM_Base_SetConfig+0x100>)
 8007774:	4293      	cmp	r3, r2
 8007776:	d008      	beq.n	800778a <TIM_Base_SetConfig+0x2a>
 8007778:	687a      	ldr	r2, [r7, #4]
 800777a:	2380      	movs	r3, #128	@ 0x80
 800777c:	05db      	lsls	r3, r3, #23
 800777e:	429a      	cmp	r2, r3
 8007780:	d003      	beq.n	800778a <TIM_Base_SetConfig+0x2a>
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	4a37      	ldr	r2, [pc, #220]	@ (8007864 <TIM_Base_SetConfig+0x104>)
 8007786:	4293      	cmp	r3, r2
 8007788:	d108      	bne.n	800779c <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	2270      	movs	r2, #112	@ 0x70
 800778e:	4393      	bics	r3, r2
 8007790:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007792:	683b      	ldr	r3, [r7, #0]
 8007794:	685b      	ldr	r3, [r3, #4]
 8007796:	68fa      	ldr	r2, [r7, #12]
 8007798:	4313      	orrs	r3, r2
 800779a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	4a30      	ldr	r2, [pc, #192]	@ (8007860 <TIM_Base_SetConfig+0x100>)
 80077a0:	4293      	cmp	r3, r2
 80077a2:	d018      	beq.n	80077d6 <TIM_Base_SetConfig+0x76>
 80077a4:	687a      	ldr	r2, [r7, #4]
 80077a6:	2380      	movs	r3, #128	@ 0x80
 80077a8:	05db      	lsls	r3, r3, #23
 80077aa:	429a      	cmp	r2, r3
 80077ac:	d013      	beq.n	80077d6 <TIM_Base_SetConfig+0x76>
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	4a2c      	ldr	r2, [pc, #176]	@ (8007864 <TIM_Base_SetConfig+0x104>)
 80077b2:	4293      	cmp	r3, r2
 80077b4:	d00f      	beq.n	80077d6 <TIM_Base_SetConfig+0x76>
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	4a2b      	ldr	r2, [pc, #172]	@ (8007868 <TIM_Base_SetConfig+0x108>)
 80077ba:	4293      	cmp	r3, r2
 80077bc:	d00b      	beq.n	80077d6 <TIM_Base_SetConfig+0x76>
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	4a2a      	ldr	r2, [pc, #168]	@ (800786c <TIM_Base_SetConfig+0x10c>)
 80077c2:	4293      	cmp	r3, r2
 80077c4:	d007      	beq.n	80077d6 <TIM_Base_SetConfig+0x76>
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	4a29      	ldr	r2, [pc, #164]	@ (8007870 <TIM_Base_SetConfig+0x110>)
 80077ca:	4293      	cmp	r3, r2
 80077cc:	d003      	beq.n	80077d6 <TIM_Base_SetConfig+0x76>
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	4a28      	ldr	r2, [pc, #160]	@ (8007874 <TIM_Base_SetConfig+0x114>)
 80077d2:	4293      	cmp	r3, r2
 80077d4:	d108      	bne.n	80077e8 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	4a27      	ldr	r2, [pc, #156]	@ (8007878 <TIM_Base_SetConfig+0x118>)
 80077da:	4013      	ands	r3, r2
 80077dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80077de:	683b      	ldr	r3, [r7, #0]
 80077e0:	68db      	ldr	r3, [r3, #12]
 80077e2:	68fa      	ldr	r2, [r7, #12]
 80077e4:	4313      	orrs	r3, r2
 80077e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	2280      	movs	r2, #128	@ 0x80
 80077ec:	4393      	bics	r3, r2
 80077ee:	001a      	movs	r2, r3
 80077f0:	683b      	ldr	r3, [r7, #0]
 80077f2:	695b      	ldr	r3, [r3, #20]
 80077f4:	4313      	orrs	r3, r2
 80077f6:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	68fa      	ldr	r2, [r7, #12]
 80077fc:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80077fe:	683b      	ldr	r3, [r7, #0]
 8007800:	689a      	ldr	r2, [r3, #8]
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007806:	683b      	ldr	r3, [r7, #0]
 8007808:	681a      	ldr	r2, [r3, #0]
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	4a13      	ldr	r2, [pc, #76]	@ (8007860 <TIM_Base_SetConfig+0x100>)
 8007812:	4293      	cmp	r3, r2
 8007814:	d00b      	beq.n	800782e <TIM_Base_SetConfig+0xce>
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	4a14      	ldr	r2, [pc, #80]	@ (800786c <TIM_Base_SetConfig+0x10c>)
 800781a:	4293      	cmp	r3, r2
 800781c:	d007      	beq.n	800782e <TIM_Base_SetConfig+0xce>
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	4a13      	ldr	r2, [pc, #76]	@ (8007870 <TIM_Base_SetConfig+0x110>)
 8007822:	4293      	cmp	r3, r2
 8007824:	d003      	beq.n	800782e <TIM_Base_SetConfig+0xce>
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	4a12      	ldr	r2, [pc, #72]	@ (8007874 <TIM_Base_SetConfig+0x114>)
 800782a:	4293      	cmp	r3, r2
 800782c:	d103      	bne.n	8007836 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800782e:	683b      	ldr	r3, [r7, #0]
 8007830:	691a      	ldr	r2, [r3, #16]
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	2201      	movs	r2, #1
 800783a:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	691b      	ldr	r3, [r3, #16]
 8007840:	2201      	movs	r2, #1
 8007842:	4013      	ands	r3, r2
 8007844:	2b01      	cmp	r3, #1
 8007846:	d106      	bne.n	8007856 <TIM_Base_SetConfig+0xf6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	691b      	ldr	r3, [r3, #16]
 800784c:	2201      	movs	r2, #1
 800784e:	4393      	bics	r3, r2
 8007850:	001a      	movs	r2, r3
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	611a      	str	r2, [r3, #16]
  }
}
 8007856:	46c0      	nop			@ (mov r8, r8)
 8007858:	46bd      	mov	sp, r7
 800785a:	b004      	add	sp, #16
 800785c:	bd80      	pop	{r7, pc}
 800785e:	46c0      	nop			@ (mov r8, r8)
 8007860:	40012c00 	.word	0x40012c00
 8007864:	40000400 	.word	0x40000400
 8007868:	40002000 	.word	0x40002000
 800786c:	40014000 	.word	0x40014000
 8007870:	40014400 	.word	0x40014400
 8007874:	40014800 	.word	0x40014800
 8007878:	fffffcff 	.word	0xfffffcff

0800787c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800787c:	b580      	push	{r7, lr}
 800787e:	b086      	sub	sp, #24
 8007880:	af00      	add	r7, sp, #0
 8007882:	6078      	str	r0, [r7, #4]
 8007884:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	6a1b      	ldr	r3, [r3, #32]
 800788a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	6a1b      	ldr	r3, [r3, #32]
 8007890:	2201      	movs	r2, #1
 8007892:	4393      	bics	r3, r2
 8007894:	001a      	movs	r2, r3
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	685b      	ldr	r3, [r3, #4]
 800789e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	699b      	ldr	r3, [r3, #24]
 80078a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	4a32      	ldr	r2, [pc, #200]	@ (8007974 <TIM_OC1_SetConfig+0xf8>)
 80078aa:	4013      	ands	r3, r2
 80078ac:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	2203      	movs	r2, #3
 80078b2:	4393      	bics	r3, r2
 80078b4:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80078b6:	683b      	ldr	r3, [r7, #0]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	68fa      	ldr	r2, [r7, #12]
 80078bc:	4313      	orrs	r3, r2
 80078be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80078c0:	697b      	ldr	r3, [r7, #20]
 80078c2:	2202      	movs	r2, #2
 80078c4:	4393      	bics	r3, r2
 80078c6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80078c8:	683b      	ldr	r3, [r7, #0]
 80078ca:	689b      	ldr	r3, [r3, #8]
 80078cc:	697a      	ldr	r2, [r7, #20]
 80078ce:	4313      	orrs	r3, r2
 80078d0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	4a28      	ldr	r2, [pc, #160]	@ (8007978 <TIM_OC1_SetConfig+0xfc>)
 80078d6:	4293      	cmp	r3, r2
 80078d8:	d00b      	beq.n	80078f2 <TIM_OC1_SetConfig+0x76>
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	4a27      	ldr	r2, [pc, #156]	@ (800797c <TIM_OC1_SetConfig+0x100>)
 80078de:	4293      	cmp	r3, r2
 80078e0:	d007      	beq.n	80078f2 <TIM_OC1_SetConfig+0x76>
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	4a26      	ldr	r2, [pc, #152]	@ (8007980 <TIM_OC1_SetConfig+0x104>)
 80078e6:	4293      	cmp	r3, r2
 80078e8:	d003      	beq.n	80078f2 <TIM_OC1_SetConfig+0x76>
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	4a25      	ldr	r2, [pc, #148]	@ (8007984 <TIM_OC1_SetConfig+0x108>)
 80078ee:	4293      	cmp	r3, r2
 80078f0:	d10c      	bne.n	800790c <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80078f2:	697b      	ldr	r3, [r7, #20]
 80078f4:	2208      	movs	r2, #8
 80078f6:	4393      	bics	r3, r2
 80078f8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80078fa:	683b      	ldr	r3, [r7, #0]
 80078fc:	68db      	ldr	r3, [r3, #12]
 80078fe:	697a      	ldr	r2, [r7, #20]
 8007900:	4313      	orrs	r3, r2
 8007902:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007904:	697b      	ldr	r3, [r7, #20]
 8007906:	2204      	movs	r2, #4
 8007908:	4393      	bics	r3, r2
 800790a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	4a1a      	ldr	r2, [pc, #104]	@ (8007978 <TIM_OC1_SetConfig+0xfc>)
 8007910:	4293      	cmp	r3, r2
 8007912:	d00b      	beq.n	800792c <TIM_OC1_SetConfig+0xb0>
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	4a19      	ldr	r2, [pc, #100]	@ (800797c <TIM_OC1_SetConfig+0x100>)
 8007918:	4293      	cmp	r3, r2
 800791a:	d007      	beq.n	800792c <TIM_OC1_SetConfig+0xb0>
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	4a18      	ldr	r2, [pc, #96]	@ (8007980 <TIM_OC1_SetConfig+0x104>)
 8007920:	4293      	cmp	r3, r2
 8007922:	d003      	beq.n	800792c <TIM_OC1_SetConfig+0xb0>
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	4a17      	ldr	r2, [pc, #92]	@ (8007984 <TIM_OC1_SetConfig+0x108>)
 8007928:	4293      	cmp	r3, r2
 800792a:	d111      	bne.n	8007950 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800792c:	693b      	ldr	r3, [r7, #16]
 800792e:	4a16      	ldr	r2, [pc, #88]	@ (8007988 <TIM_OC1_SetConfig+0x10c>)
 8007930:	4013      	ands	r3, r2
 8007932:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007934:	693b      	ldr	r3, [r7, #16]
 8007936:	4a15      	ldr	r2, [pc, #84]	@ (800798c <TIM_OC1_SetConfig+0x110>)
 8007938:	4013      	ands	r3, r2
 800793a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800793c:	683b      	ldr	r3, [r7, #0]
 800793e:	695b      	ldr	r3, [r3, #20]
 8007940:	693a      	ldr	r2, [r7, #16]
 8007942:	4313      	orrs	r3, r2
 8007944:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007946:	683b      	ldr	r3, [r7, #0]
 8007948:	699b      	ldr	r3, [r3, #24]
 800794a:	693a      	ldr	r2, [r7, #16]
 800794c:	4313      	orrs	r3, r2
 800794e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	693a      	ldr	r2, [r7, #16]
 8007954:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	68fa      	ldr	r2, [r7, #12]
 800795a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800795c:	683b      	ldr	r3, [r7, #0]
 800795e:	685a      	ldr	r2, [r3, #4]
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	697a      	ldr	r2, [r7, #20]
 8007968:	621a      	str	r2, [r3, #32]
}
 800796a:	46c0      	nop			@ (mov r8, r8)
 800796c:	46bd      	mov	sp, r7
 800796e:	b006      	add	sp, #24
 8007970:	bd80      	pop	{r7, pc}
 8007972:	46c0      	nop			@ (mov r8, r8)
 8007974:	fffeff8f 	.word	0xfffeff8f
 8007978:	40012c00 	.word	0x40012c00
 800797c:	40014000 	.word	0x40014000
 8007980:	40014400 	.word	0x40014400
 8007984:	40014800 	.word	0x40014800
 8007988:	fffffeff 	.word	0xfffffeff
 800798c:	fffffdff 	.word	0xfffffdff

08007990 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007990:	b580      	push	{r7, lr}
 8007992:	b086      	sub	sp, #24
 8007994:	af00      	add	r7, sp, #0
 8007996:	6078      	str	r0, [r7, #4]
 8007998:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	6a1b      	ldr	r3, [r3, #32]
 800799e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	6a1b      	ldr	r3, [r3, #32]
 80079a4:	2210      	movs	r2, #16
 80079a6:	4393      	bics	r3, r2
 80079a8:	001a      	movs	r2, r3
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	685b      	ldr	r3, [r3, #4]
 80079b2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	699b      	ldr	r3, [r3, #24]
 80079b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	4a2e      	ldr	r2, [pc, #184]	@ (8007a78 <TIM_OC2_SetConfig+0xe8>)
 80079be:	4013      	ands	r3, r2
 80079c0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	4a2d      	ldr	r2, [pc, #180]	@ (8007a7c <TIM_OC2_SetConfig+0xec>)
 80079c6:	4013      	ands	r3, r2
 80079c8:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80079ca:	683b      	ldr	r3, [r7, #0]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	021b      	lsls	r3, r3, #8
 80079d0:	68fa      	ldr	r2, [r7, #12]
 80079d2:	4313      	orrs	r3, r2
 80079d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80079d6:	697b      	ldr	r3, [r7, #20]
 80079d8:	2220      	movs	r2, #32
 80079da:	4393      	bics	r3, r2
 80079dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80079de:	683b      	ldr	r3, [r7, #0]
 80079e0:	689b      	ldr	r3, [r3, #8]
 80079e2:	011b      	lsls	r3, r3, #4
 80079e4:	697a      	ldr	r2, [r7, #20]
 80079e6:	4313      	orrs	r3, r2
 80079e8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	4a24      	ldr	r2, [pc, #144]	@ (8007a80 <TIM_OC2_SetConfig+0xf0>)
 80079ee:	4293      	cmp	r3, r2
 80079f0:	d10d      	bne.n	8007a0e <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80079f2:	697b      	ldr	r3, [r7, #20]
 80079f4:	2280      	movs	r2, #128	@ 0x80
 80079f6:	4393      	bics	r3, r2
 80079f8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80079fa:	683b      	ldr	r3, [r7, #0]
 80079fc:	68db      	ldr	r3, [r3, #12]
 80079fe:	011b      	lsls	r3, r3, #4
 8007a00:	697a      	ldr	r2, [r7, #20]
 8007a02:	4313      	orrs	r3, r2
 8007a04:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007a06:	697b      	ldr	r3, [r7, #20]
 8007a08:	2240      	movs	r2, #64	@ 0x40
 8007a0a:	4393      	bics	r3, r2
 8007a0c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	4a1b      	ldr	r2, [pc, #108]	@ (8007a80 <TIM_OC2_SetConfig+0xf0>)
 8007a12:	4293      	cmp	r3, r2
 8007a14:	d00b      	beq.n	8007a2e <TIM_OC2_SetConfig+0x9e>
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	4a1a      	ldr	r2, [pc, #104]	@ (8007a84 <TIM_OC2_SetConfig+0xf4>)
 8007a1a:	4293      	cmp	r3, r2
 8007a1c:	d007      	beq.n	8007a2e <TIM_OC2_SetConfig+0x9e>
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	4a19      	ldr	r2, [pc, #100]	@ (8007a88 <TIM_OC2_SetConfig+0xf8>)
 8007a22:	4293      	cmp	r3, r2
 8007a24:	d003      	beq.n	8007a2e <TIM_OC2_SetConfig+0x9e>
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	4a18      	ldr	r2, [pc, #96]	@ (8007a8c <TIM_OC2_SetConfig+0xfc>)
 8007a2a:	4293      	cmp	r3, r2
 8007a2c:	d113      	bne.n	8007a56 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007a2e:	693b      	ldr	r3, [r7, #16]
 8007a30:	4a17      	ldr	r2, [pc, #92]	@ (8007a90 <TIM_OC2_SetConfig+0x100>)
 8007a32:	4013      	ands	r3, r2
 8007a34:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007a36:	693b      	ldr	r3, [r7, #16]
 8007a38:	4a16      	ldr	r2, [pc, #88]	@ (8007a94 <TIM_OC2_SetConfig+0x104>)
 8007a3a:	4013      	ands	r3, r2
 8007a3c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007a3e:	683b      	ldr	r3, [r7, #0]
 8007a40:	695b      	ldr	r3, [r3, #20]
 8007a42:	009b      	lsls	r3, r3, #2
 8007a44:	693a      	ldr	r2, [r7, #16]
 8007a46:	4313      	orrs	r3, r2
 8007a48:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007a4a:	683b      	ldr	r3, [r7, #0]
 8007a4c:	699b      	ldr	r3, [r3, #24]
 8007a4e:	009b      	lsls	r3, r3, #2
 8007a50:	693a      	ldr	r2, [r7, #16]
 8007a52:	4313      	orrs	r3, r2
 8007a54:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	693a      	ldr	r2, [r7, #16]
 8007a5a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	68fa      	ldr	r2, [r7, #12]
 8007a60:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007a62:	683b      	ldr	r3, [r7, #0]
 8007a64:	685a      	ldr	r2, [r3, #4]
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	697a      	ldr	r2, [r7, #20]
 8007a6e:	621a      	str	r2, [r3, #32]
}
 8007a70:	46c0      	nop			@ (mov r8, r8)
 8007a72:	46bd      	mov	sp, r7
 8007a74:	b006      	add	sp, #24
 8007a76:	bd80      	pop	{r7, pc}
 8007a78:	feff8fff 	.word	0xfeff8fff
 8007a7c:	fffffcff 	.word	0xfffffcff
 8007a80:	40012c00 	.word	0x40012c00
 8007a84:	40014000 	.word	0x40014000
 8007a88:	40014400 	.word	0x40014400
 8007a8c:	40014800 	.word	0x40014800
 8007a90:	fffffbff 	.word	0xfffffbff
 8007a94:	fffff7ff 	.word	0xfffff7ff

08007a98 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007a98:	b580      	push	{r7, lr}
 8007a9a:	b086      	sub	sp, #24
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	6078      	str	r0, [r7, #4]
 8007aa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	6a1b      	ldr	r3, [r3, #32]
 8007aa6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	6a1b      	ldr	r3, [r3, #32]
 8007aac:	4a33      	ldr	r2, [pc, #204]	@ (8007b7c <TIM_OC3_SetConfig+0xe4>)
 8007aae:	401a      	ands	r2, r3
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	685b      	ldr	r3, [r3, #4]
 8007ab8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	69db      	ldr	r3, [r3, #28]
 8007abe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	4a2f      	ldr	r2, [pc, #188]	@ (8007b80 <TIM_OC3_SetConfig+0xe8>)
 8007ac4:	4013      	ands	r3, r2
 8007ac6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	2203      	movs	r2, #3
 8007acc:	4393      	bics	r3, r2
 8007ace:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007ad0:	683b      	ldr	r3, [r7, #0]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	68fa      	ldr	r2, [r7, #12]
 8007ad6:	4313      	orrs	r3, r2
 8007ad8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007ada:	697b      	ldr	r3, [r7, #20]
 8007adc:	4a29      	ldr	r2, [pc, #164]	@ (8007b84 <TIM_OC3_SetConfig+0xec>)
 8007ade:	4013      	ands	r3, r2
 8007ae0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007ae2:	683b      	ldr	r3, [r7, #0]
 8007ae4:	689b      	ldr	r3, [r3, #8]
 8007ae6:	021b      	lsls	r3, r3, #8
 8007ae8:	697a      	ldr	r2, [r7, #20]
 8007aea:	4313      	orrs	r3, r2
 8007aec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	4a25      	ldr	r2, [pc, #148]	@ (8007b88 <TIM_OC3_SetConfig+0xf0>)
 8007af2:	4293      	cmp	r3, r2
 8007af4:	d10d      	bne.n	8007b12 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007af6:	697b      	ldr	r3, [r7, #20]
 8007af8:	4a24      	ldr	r2, [pc, #144]	@ (8007b8c <TIM_OC3_SetConfig+0xf4>)
 8007afa:	4013      	ands	r3, r2
 8007afc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007afe:	683b      	ldr	r3, [r7, #0]
 8007b00:	68db      	ldr	r3, [r3, #12]
 8007b02:	021b      	lsls	r3, r3, #8
 8007b04:	697a      	ldr	r2, [r7, #20]
 8007b06:	4313      	orrs	r3, r2
 8007b08:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007b0a:	697b      	ldr	r3, [r7, #20]
 8007b0c:	4a20      	ldr	r2, [pc, #128]	@ (8007b90 <TIM_OC3_SetConfig+0xf8>)
 8007b0e:	4013      	ands	r3, r2
 8007b10:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	4a1c      	ldr	r2, [pc, #112]	@ (8007b88 <TIM_OC3_SetConfig+0xf0>)
 8007b16:	4293      	cmp	r3, r2
 8007b18:	d00b      	beq.n	8007b32 <TIM_OC3_SetConfig+0x9a>
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	4a1d      	ldr	r2, [pc, #116]	@ (8007b94 <TIM_OC3_SetConfig+0xfc>)
 8007b1e:	4293      	cmp	r3, r2
 8007b20:	d007      	beq.n	8007b32 <TIM_OC3_SetConfig+0x9a>
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	4a1c      	ldr	r2, [pc, #112]	@ (8007b98 <TIM_OC3_SetConfig+0x100>)
 8007b26:	4293      	cmp	r3, r2
 8007b28:	d003      	beq.n	8007b32 <TIM_OC3_SetConfig+0x9a>
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	4a1b      	ldr	r2, [pc, #108]	@ (8007b9c <TIM_OC3_SetConfig+0x104>)
 8007b2e:	4293      	cmp	r3, r2
 8007b30:	d113      	bne.n	8007b5a <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007b32:	693b      	ldr	r3, [r7, #16]
 8007b34:	4a1a      	ldr	r2, [pc, #104]	@ (8007ba0 <TIM_OC3_SetConfig+0x108>)
 8007b36:	4013      	ands	r3, r2
 8007b38:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007b3a:	693b      	ldr	r3, [r7, #16]
 8007b3c:	4a19      	ldr	r2, [pc, #100]	@ (8007ba4 <TIM_OC3_SetConfig+0x10c>)
 8007b3e:	4013      	ands	r3, r2
 8007b40:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007b42:	683b      	ldr	r3, [r7, #0]
 8007b44:	695b      	ldr	r3, [r3, #20]
 8007b46:	011b      	lsls	r3, r3, #4
 8007b48:	693a      	ldr	r2, [r7, #16]
 8007b4a:	4313      	orrs	r3, r2
 8007b4c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007b4e:	683b      	ldr	r3, [r7, #0]
 8007b50:	699b      	ldr	r3, [r3, #24]
 8007b52:	011b      	lsls	r3, r3, #4
 8007b54:	693a      	ldr	r2, [r7, #16]
 8007b56:	4313      	orrs	r3, r2
 8007b58:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	693a      	ldr	r2, [r7, #16]
 8007b5e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	68fa      	ldr	r2, [r7, #12]
 8007b64:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007b66:	683b      	ldr	r3, [r7, #0]
 8007b68:	685a      	ldr	r2, [r3, #4]
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	697a      	ldr	r2, [r7, #20]
 8007b72:	621a      	str	r2, [r3, #32]
}
 8007b74:	46c0      	nop			@ (mov r8, r8)
 8007b76:	46bd      	mov	sp, r7
 8007b78:	b006      	add	sp, #24
 8007b7a:	bd80      	pop	{r7, pc}
 8007b7c:	fffffeff 	.word	0xfffffeff
 8007b80:	fffeff8f 	.word	0xfffeff8f
 8007b84:	fffffdff 	.word	0xfffffdff
 8007b88:	40012c00 	.word	0x40012c00
 8007b8c:	fffff7ff 	.word	0xfffff7ff
 8007b90:	fffffbff 	.word	0xfffffbff
 8007b94:	40014000 	.word	0x40014000
 8007b98:	40014400 	.word	0x40014400
 8007b9c:	40014800 	.word	0x40014800
 8007ba0:	ffffefff 	.word	0xffffefff
 8007ba4:	ffffdfff 	.word	0xffffdfff

08007ba8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007ba8:	b580      	push	{r7, lr}
 8007baa:	b086      	sub	sp, #24
 8007bac:	af00      	add	r7, sp, #0
 8007bae:	6078      	str	r0, [r7, #4]
 8007bb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	6a1b      	ldr	r3, [r3, #32]
 8007bb6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	6a1b      	ldr	r3, [r3, #32]
 8007bbc:	4a26      	ldr	r2, [pc, #152]	@ (8007c58 <TIM_OC4_SetConfig+0xb0>)
 8007bbe:	401a      	ands	r2, r3
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	685b      	ldr	r3, [r3, #4]
 8007bc8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	69db      	ldr	r3, [r3, #28]
 8007bce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	4a22      	ldr	r2, [pc, #136]	@ (8007c5c <TIM_OC4_SetConfig+0xb4>)
 8007bd4:	4013      	ands	r3, r2
 8007bd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	4a21      	ldr	r2, [pc, #132]	@ (8007c60 <TIM_OC4_SetConfig+0xb8>)
 8007bdc:	4013      	ands	r3, r2
 8007bde:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007be0:	683b      	ldr	r3, [r7, #0]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	021b      	lsls	r3, r3, #8
 8007be6:	68fa      	ldr	r2, [r7, #12]
 8007be8:	4313      	orrs	r3, r2
 8007bea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007bec:	693b      	ldr	r3, [r7, #16]
 8007bee:	4a1d      	ldr	r2, [pc, #116]	@ (8007c64 <TIM_OC4_SetConfig+0xbc>)
 8007bf0:	4013      	ands	r3, r2
 8007bf2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007bf4:	683b      	ldr	r3, [r7, #0]
 8007bf6:	689b      	ldr	r3, [r3, #8]
 8007bf8:	031b      	lsls	r3, r3, #12
 8007bfa:	693a      	ldr	r2, [r7, #16]
 8007bfc:	4313      	orrs	r3, r2
 8007bfe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	4a19      	ldr	r2, [pc, #100]	@ (8007c68 <TIM_OC4_SetConfig+0xc0>)
 8007c04:	4293      	cmp	r3, r2
 8007c06:	d00b      	beq.n	8007c20 <TIM_OC4_SetConfig+0x78>
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	4a18      	ldr	r2, [pc, #96]	@ (8007c6c <TIM_OC4_SetConfig+0xc4>)
 8007c0c:	4293      	cmp	r3, r2
 8007c0e:	d007      	beq.n	8007c20 <TIM_OC4_SetConfig+0x78>
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	4a17      	ldr	r2, [pc, #92]	@ (8007c70 <TIM_OC4_SetConfig+0xc8>)
 8007c14:	4293      	cmp	r3, r2
 8007c16:	d003      	beq.n	8007c20 <TIM_OC4_SetConfig+0x78>
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	4a16      	ldr	r2, [pc, #88]	@ (8007c74 <TIM_OC4_SetConfig+0xcc>)
 8007c1c:	4293      	cmp	r3, r2
 8007c1e:	d109      	bne.n	8007c34 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007c20:	697b      	ldr	r3, [r7, #20]
 8007c22:	4a15      	ldr	r2, [pc, #84]	@ (8007c78 <TIM_OC4_SetConfig+0xd0>)
 8007c24:	4013      	ands	r3, r2
 8007c26:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007c28:	683b      	ldr	r3, [r7, #0]
 8007c2a:	695b      	ldr	r3, [r3, #20]
 8007c2c:	019b      	lsls	r3, r3, #6
 8007c2e:	697a      	ldr	r2, [r7, #20]
 8007c30:	4313      	orrs	r3, r2
 8007c32:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	697a      	ldr	r2, [r7, #20]
 8007c38:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	68fa      	ldr	r2, [r7, #12]
 8007c3e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007c40:	683b      	ldr	r3, [r7, #0]
 8007c42:	685a      	ldr	r2, [r3, #4]
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	693a      	ldr	r2, [r7, #16]
 8007c4c:	621a      	str	r2, [r3, #32]
}
 8007c4e:	46c0      	nop			@ (mov r8, r8)
 8007c50:	46bd      	mov	sp, r7
 8007c52:	b006      	add	sp, #24
 8007c54:	bd80      	pop	{r7, pc}
 8007c56:	46c0      	nop			@ (mov r8, r8)
 8007c58:	ffffefff 	.word	0xffffefff
 8007c5c:	feff8fff 	.word	0xfeff8fff
 8007c60:	fffffcff 	.word	0xfffffcff
 8007c64:	ffffdfff 	.word	0xffffdfff
 8007c68:	40012c00 	.word	0x40012c00
 8007c6c:	40014000 	.word	0x40014000
 8007c70:	40014400 	.word	0x40014400
 8007c74:	40014800 	.word	0x40014800
 8007c78:	ffffbfff 	.word	0xffffbfff

08007c7c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007c7c:	b580      	push	{r7, lr}
 8007c7e:	b086      	sub	sp, #24
 8007c80:	af00      	add	r7, sp, #0
 8007c82:	6078      	str	r0, [r7, #4]
 8007c84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	6a1b      	ldr	r3, [r3, #32]
 8007c8a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	6a1b      	ldr	r3, [r3, #32]
 8007c90:	4a23      	ldr	r2, [pc, #140]	@ (8007d20 <TIM_OC5_SetConfig+0xa4>)
 8007c92:	401a      	ands	r2, r3
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	685b      	ldr	r3, [r3, #4]
 8007c9c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007ca2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	4a1f      	ldr	r2, [pc, #124]	@ (8007d24 <TIM_OC5_SetConfig+0xa8>)
 8007ca8:	4013      	ands	r3, r2
 8007caa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007cac:	683b      	ldr	r3, [r7, #0]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	68fa      	ldr	r2, [r7, #12]
 8007cb2:	4313      	orrs	r3, r2
 8007cb4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007cb6:	693b      	ldr	r3, [r7, #16]
 8007cb8:	4a1b      	ldr	r2, [pc, #108]	@ (8007d28 <TIM_OC5_SetConfig+0xac>)
 8007cba:	4013      	ands	r3, r2
 8007cbc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007cbe:	683b      	ldr	r3, [r7, #0]
 8007cc0:	689b      	ldr	r3, [r3, #8]
 8007cc2:	041b      	lsls	r3, r3, #16
 8007cc4:	693a      	ldr	r2, [r7, #16]
 8007cc6:	4313      	orrs	r3, r2
 8007cc8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	4a17      	ldr	r2, [pc, #92]	@ (8007d2c <TIM_OC5_SetConfig+0xb0>)
 8007cce:	4293      	cmp	r3, r2
 8007cd0:	d00b      	beq.n	8007cea <TIM_OC5_SetConfig+0x6e>
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	4a16      	ldr	r2, [pc, #88]	@ (8007d30 <TIM_OC5_SetConfig+0xb4>)
 8007cd6:	4293      	cmp	r3, r2
 8007cd8:	d007      	beq.n	8007cea <TIM_OC5_SetConfig+0x6e>
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	4a15      	ldr	r2, [pc, #84]	@ (8007d34 <TIM_OC5_SetConfig+0xb8>)
 8007cde:	4293      	cmp	r3, r2
 8007ce0:	d003      	beq.n	8007cea <TIM_OC5_SetConfig+0x6e>
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	4a14      	ldr	r2, [pc, #80]	@ (8007d38 <TIM_OC5_SetConfig+0xbc>)
 8007ce6:	4293      	cmp	r3, r2
 8007ce8:	d109      	bne.n	8007cfe <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007cea:	697b      	ldr	r3, [r7, #20]
 8007cec:	4a0c      	ldr	r2, [pc, #48]	@ (8007d20 <TIM_OC5_SetConfig+0xa4>)
 8007cee:	4013      	ands	r3, r2
 8007cf0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007cf2:	683b      	ldr	r3, [r7, #0]
 8007cf4:	695b      	ldr	r3, [r3, #20]
 8007cf6:	021b      	lsls	r3, r3, #8
 8007cf8:	697a      	ldr	r2, [r7, #20]
 8007cfa:	4313      	orrs	r3, r2
 8007cfc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	697a      	ldr	r2, [r7, #20]
 8007d02:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	68fa      	ldr	r2, [r7, #12]
 8007d08:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007d0a:	683b      	ldr	r3, [r7, #0]
 8007d0c:	685a      	ldr	r2, [r3, #4]
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	693a      	ldr	r2, [r7, #16]
 8007d16:	621a      	str	r2, [r3, #32]
}
 8007d18:	46c0      	nop			@ (mov r8, r8)
 8007d1a:	46bd      	mov	sp, r7
 8007d1c:	b006      	add	sp, #24
 8007d1e:	bd80      	pop	{r7, pc}
 8007d20:	fffeffff 	.word	0xfffeffff
 8007d24:	fffeff8f 	.word	0xfffeff8f
 8007d28:	fffdffff 	.word	0xfffdffff
 8007d2c:	40012c00 	.word	0x40012c00
 8007d30:	40014000 	.word	0x40014000
 8007d34:	40014400 	.word	0x40014400
 8007d38:	40014800 	.word	0x40014800

08007d3c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007d3c:	b580      	push	{r7, lr}
 8007d3e:	b086      	sub	sp, #24
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	6078      	str	r0, [r7, #4]
 8007d44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	6a1b      	ldr	r3, [r3, #32]
 8007d4a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	6a1b      	ldr	r3, [r3, #32]
 8007d50:	4a24      	ldr	r2, [pc, #144]	@ (8007de4 <TIM_OC6_SetConfig+0xa8>)
 8007d52:	401a      	ands	r2, r3
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	685b      	ldr	r3, [r3, #4]
 8007d5c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007d62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	4a20      	ldr	r2, [pc, #128]	@ (8007de8 <TIM_OC6_SetConfig+0xac>)
 8007d68:	4013      	ands	r3, r2
 8007d6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007d6c:	683b      	ldr	r3, [r7, #0]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	021b      	lsls	r3, r3, #8
 8007d72:	68fa      	ldr	r2, [r7, #12]
 8007d74:	4313      	orrs	r3, r2
 8007d76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007d78:	693b      	ldr	r3, [r7, #16]
 8007d7a:	4a1c      	ldr	r2, [pc, #112]	@ (8007dec <TIM_OC6_SetConfig+0xb0>)
 8007d7c:	4013      	ands	r3, r2
 8007d7e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007d80:	683b      	ldr	r3, [r7, #0]
 8007d82:	689b      	ldr	r3, [r3, #8]
 8007d84:	051b      	lsls	r3, r3, #20
 8007d86:	693a      	ldr	r2, [r7, #16]
 8007d88:	4313      	orrs	r3, r2
 8007d8a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	4a18      	ldr	r2, [pc, #96]	@ (8007df0 <TIM_OC6_SetConfig+0xb4>)
 8007d90:	4293      	cmp	r3, r2
 8007d92:	d00b      	beq.n	8007dac <TIM_OC6_SetConfig+0x70>
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	4a17      	ldr	r2, [pc, #92]	@ (8007df4 <TIM_OC6_SetConfig+0xb8>)
 8007d98:	4293      	cmp	r3, r2
 8007d9a:	d007      	beq.n	8007dac <TIM_OC6_SetConfig+0x70>
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	4a16      	ldr	r2, [pc, #88]	@ (8007df8 <TIM_OC6_SetConfig+0xbc>)
 8007da0:	4293      	cmp	r3, r2
 8007da2:	d003      	beq.n	8007dac <TIM_OC6_SetConfig+0x70>
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	4a15      	ldr	r2, [pc, #84]	@ (8007dfc <TIM_OC6_SetConfig+0xc0>)
 8007da8:	4293      	cmp	r3, r2
 8007daa:	d109      	bne.n	8007dc0 <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007dac:	697b      	ldr	r3, [r7, #20]
 8007dae:	4a14      	ldr	r2, [pc, #80]	@ (8007e00 <TIM_OC6_SetConfig+0xc4>)
 8007db0:	4013      	ands	r3, r2
 8007db2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007db4:	683b      	ldr	r3, [r7, #0]
 8007db6:	695b      	ldr	r3, [r3, #20]
 8007db8:	029b      	lsls	r3, r3, #10
 8007dba:	697a      	ldr	r2, [r7, #20]
 8007dbc:	4313      	orrs	r3, r2
 8007dbe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	697a      	ldr	r2, [r7, #20]
 8007dc4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	68fa      	ldr	r2, [r7, #12]
 8007dca:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007dcc:	683b      	ldr	r3, [r7, #0]
 8007dce:	685a      	ldr	r2, [r3, #4]
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	693a      	ldr	r2, [r7, #16]
 8007dd8:	621a      	str	r2, [r3, #32]
}
 8007dda:	46c0      	nop			@ (mov r8, r8)
 8007ddc:	46bd      	mov	sp, r7
 8007dde:	b006      	add	sp, #24
 8007de0:	bd80      	pop	{r7, pc}
 8007de2:	46c0      	nop			@ (mov r8, r8)
 8007de4:	ffefffff 	.word	0xffefffff
 8007de8:	feff8fff 	.word	0xfeff8fff
 8007dec:	ffdfffff 	.word	0xffdfffff
 8007df0:	40012c00 	.word	0x40012c00
 8007df4:	40014000 	.word	0x40014000
 8007df8:	40014400 	.word	0x40014400
 8007dfc:	40014800 	.word	0x40014800
 8007e00:	fffbffff 	.word	0xfffbffff

08007e04 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007e04:	b580      	push	{r7, lr}
 8007e06:	b086      	sub	sp, #24
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	60f8      	str	r0, [r7, #12]
 8007e0c:	60b9      	str	r1, [r7, #8]
 8007e0e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007e10:	68bb      	ldr	r3, [r7, #8]
 8007e12:	221f      	movs	r2, #31
 8007e14:	4013      	ands	r3, r2
 8007e16:	2201      	movs	r2, #1
 8007e18:	409a      	lsls	r2, r3
 8007e1a:	0013      	movs	r3, r2
 8007e1c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	6a1b      	ldr	r3, [r3, #32]
 8007e22:	697a      	ldr	r2, [r7, #20]
 8007e24:	43d2      	mvns	r2, r2
 8007e26:	401a      	ands	r2, r3
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	6a1a      	ldr	r2, [r3, #32]
 8007e30:	68bb      	ldr	r3, [r7, #8]
 8007e32:	211f      	movs	r1, #31
 8007e34:	400b      	ands	r3, r1
 8007e36:	6879      	ldr	r1, [r7, #4]
 8007e38:	4099      	lsls	r1, r3
 8007e3a:	000b      	movs	r3, r1
 8007e3c:	431a      	orrs	r2, r3
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	621a      	str	r2, [r3, #32]
}
 8007e42:	46c0      	nop			@ (mov r8, r8)
 8007e44:	46bd      	mov	sp, r7
 8007e46:	b006      	add	sp, #24
 8007e48:	bd80      	pop	{r7, pc}
	...

08007e4c <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007e4c:	b580      	push	{r7, lr}
 8007e4e:	b084      	sub	sp, #16
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	6078      	str	r0, [r7, #4]
 8007e54:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007e56:	683b      	ldr	r3, [r7, #0]
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d108      	bne.n	8007e6e <HAL_TIMEx_PWMN_Start+0x22>
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	2244      	movs	r2, #68	@ 0x44
 8007e60:	5c9b      	ldrb	r3, [r3, r2]
 8007e62:	b2db      	uxtb	r3, r3
 8007e64:	3b01      	subs	r3, #1
 8007e66:	1e5a      	subs	r2, r3, #1
 8007e68:	4193      	sbcs	r3, r2
 8007e6a:	b2db      	uxtb	r3, r3
 8007e6c:	e01f      	b.n	8007eae <HAL_TIMEx_PWMN_Start+0x62>
 8007e6e:	683b      	ldr	r3, [r7, #0]
 8007e70:	2b04      	cmp	r3, #4
 8007e72:	d108      	bne.n	8007e86 <HAL_TIMEx_PWMN_Start+0x3a>
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	2245      	movs	r2, #69	@ 0x45
 8007e78:	5c9b      	ldrb	r3, [r3, r2]
 8007e7a:	b2db      	uxtb	r3, r3
 8007e7c:	3b01      	subs	r3, #1
 8007e7e:	1e5a      	subs	r2, r3, #1
 8007e80:	4193      	sbcs	r3, r2
 8007e82:	b2db      	uxtb	r3, r3
 8007e84:	e013      	b.n	8007eae <HAL_TIMEx_PWMN_Start+0x62>
 8007e86:	683b      	ldr	r3, [r7, #0]
 8007e88:	2b08      	cmp	r3, #8
 8007e8a:	d108      	bne.n	8007e9e <HAL_TIMEx_PWMN_Start+0x52>
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	2246      	movs	r2, #70	@ 0x46
 8007e90:	5c9b      	ldrb	r3, [r3, r2]
 8007e92:	b2db      	uxtb	r3, r3
 8007e94:	3b01      	subs	r3, #1
 8007e96:	1e5a      	subs	r2, r3, #1
 8007e98:	4193      	sbcs	r3, r2
 8007e9a:	b2db      	uxtb	r3, r3
 8007e9c:	e007      	b.n	8007eae <HAL_TIMEx_PWMN_Start+0x62>
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	2247      	movs	r2, #71	@ 0x47
 8007ea2:	5c9b      	ldrb	r3, [r3, r2]
 8007ea4:	b2db      	uxtb	r3, r3
 8007ea6:	3b01      	subs	r3, #1
 8007ea8:	1e5a      	subs	r2, r3, #1
 8007eaa:	4193      	sbcs	r3, r2
 8007eac:	b2db      	uxtb	r3, r3
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d001      	beq.n	8007eb6 <HAL_TIMEx_PWMN_Start+0x6a>
  {
    return HAL_ERROR;
 8007eb2:	2301      	movs	r3, #1
 8007eb4:	e062      	b.n	8007f7c <HAL_TIMEx_PWMN_Start+0x130>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007eb6:	683b      	ldr	r3, [r7, #0]
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d104      	bne.n	8007ec6 <HAL_TIMEx_PWMN_Start+0x7a>
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	2244      	movs	r2, #68	@ 0x44
 8007ec0:	2102      	movs	r1, #2
 8007ec2:	5499      	strb	r1, [r3, r2]
 8007ec4:	e013      	b.n	8007eee <HAL_TIMEx_PWMN_Start+0xa2>
 8007ec6:	683b      	ldr	r3, [r7, #0]
 8007ec8:	2b04      	cmp	r3, #4
 8007eca:	d104      	bne.n	8007ed6 <HAL_TIMEx_PWMN_Start+0x8a>
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	2245      	movs	r2, #69	@ 0x45
 8007ed0:	2102      	movs	r1, #2
 8007ed2:	5499      	strb	r1, [r3, r2]
 8007ed4:	e00b      	b.n	8007eee <HAL_TIMEx_PWMN_Start+0xa2>
 8007ed6:	683b      	ldr	r3, [r7, #0]
 8007ed8:	2b08      	cmp	r3, #8
 8007eda:	d104      	bne.n	8007ee6 <HAL_TIMEx_PWMN_Start+0x9a>
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	2246      	movs	r2, #70	@ 0x46
 8007ee0:	2102      	movs	r1, #2
 8007ee2:	5499      	strb	r1, [r3, r2]
 8007ee4:	e003      	b.n	8007eee <HAL_TIMEx_PWMN_Start+0xa2>
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	2247      	movs	r2, #71	@ 0x47
 8007eea:	2102      	movs	r1, #2
 8007eec:	5499      	strb	r1, [r3, r2]

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	6839      	ldr	r1, [r7, #0]
 8007ef4:	2204      	movs	r2, #4
 8007ef6:	0018      	movs	r0, r3
 8007ef8:	f000 f956 	bl	80081a8 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	2180      	movs	r1, #128	@ 0x80
 8007f08:	0209      	lsls	r1, r1, #8
 8007f0a:	430a      	orrs	r2, r1
 8007f0c:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	4a1c      	ldr	r2, [pc, #112]	@ (8007f84 <HAL_TIMEx_PWMN_Start+0x138>)
 8007f14:	4293      	cmp	r3, r2
 8007f16:	d00f      	beq.n	8007f38 <HAL_TIMEx_PWMN_Start+0xec>
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681a      	ldr	r2, [r3, #0]
 8007f1c:	2380      	movs	r3, #128	@ 0x80
 8007f1e:	05db      	lsls	r3, r3, #23
 8007f20:	429a      	cmp	r2, r3
 8007f22:	d009      	beq.n	8007f38 <HAL_TIMEx_PWMN_Start+0xec>
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	4a17      	ldr	r2, [pc, #92]	@ (8007f88 <HAL_TIMEx_PWMN_Start+0x13c>)
 8007f2a:	4293      	cmp	r3, r2
 8007f2c:	d004      	beq.n	8007f38 <HAL_TIMEx_PWMN_Start+0xec>
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	4a16      	ldr	r2, [pc, #88]	@ (8007f8c <HAL_TIMEx_PWMN_Start+0x140>)
 8007f34:	4293      	cmp	r3, r2
 8007f36:	d116      	bne.n	8007f66 <HAL_TIMEx_PWMN_Start+0x11a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	689b      	ldr	r3, [r3, #8]
 8007f3e:	4a14      	ldr	r2, [pc, #80]	@ (8007f90 <HAL_TIMEx_PWMN_Start+0x144>)
 8007f40:	4013      	ands	r3, r2
 8007f42:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	2b06      	cmp	r3, #6
 8007f48:	d016      	beq.n	8007f78 <HAL_TIMEx_PWMN_Start+0x12c>
 8007f4a:	68fa      	ldr	r2, [r7, #12]
 8007f4c:	2380      	movs	r3, #128	@ 0x80
 8007f4e:	025b      	lsls	r3, r3, #9
 8007f50:	429a      	cmp	r2, r3
 8007f52:	d011      	beq.n	8007f78 <HAL_TIMEx_PWMN_Start+0x12c>
    {
      __HAL_TIM_ENABLE(htim);
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	681a      	ldr	r2, [r3, #0]
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	2101      	movs	r1, #1
 8007f60:	430a      	orrs	r2, r1
 8007f62:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f64:	e008      	b.n	8007f78 <HAL_TIMEx_PWMN_Start+0x12c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	681a      	ldr	r2, [r3, #0]
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	2101      	movs	r1, #1
 8007f72:	430a      	orrs	r2, r1
 8007f74:	601a      	str	r2, [r3, #0]
 8007f76:	e000      	b.n	8007f7a <HAL_TIMEx_PWMN_Start+0x12e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f78:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8007f7a:	2300      	movs	r3, #0
}
 8007f7c:	0018      	movs	r0, r3
 8007f7e:	46bd      	mov	sp, r7
 8007f80:	b004      	add	sp, #16
 8007f82:	bd80      	pop	{r7, pc}
 8007f84:	40012c00 	.word	0x40012c00
 8007f88:	40000400 	.word	0x40000400
 8007f8c:	40014000 	.word	0x40014000
 8007f90:	00010007 	.word	0x00010007

08007f94 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007f94:	b580      	push	{r7, lr}
 8007f96:	b084      	sub	sp, #16
 8007f98:	af00      	add	r7, sp, #0
 8007f9a:	6078      	str	r0, [r7, #4]
 8007f9c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	223c      	movs	r2, #60	@ 0x3c
 8007fa2:	5c9b      	ldrb	r3, [r3, r2]
 8007fa4:	2b01      	cmp	r3, #1
 8007fa6:	d101      	bne.n	8007fac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007fa8:	2302      	movs	r3, #2
 8007faa:	e055      	b.n	8008058 <HAL_TIMEx_MasterConfigSynchronization+0xc4>
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	223c      	movs	r2, #60	@ 0x3c
 8007fb0:	2101      	movs	r1, #1
 8007fb2:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	223d      	movs	r2, #61	@ 0x3d
 8007fb8:	2102      	movs	r1, #2
 8007fba:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	685b      	ldr	r3, [r3, #4]
 8007fc2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	689b      	ldr	r3, [r3, #8]
 8007fca:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	4a23      	ldr	r2, [pc, #140]	@ (8008060 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8007fd2:	4293      	cmp	r3, r2
 8007fd4:	d108      	bne.n	8007fe8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	4a22      	ldr	r2, [pc, #136]	@ (8008064 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8007fda:	4013      	ands	r3, r2
 8007fdc:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007fde:	683b      	ldr	r3, [r7, #0]
 8007fe0:	685b      	ldr	r3, [r3, #4]
 8007fe2:	68fa      	ldr	r2, [r7, #12]
 8007fe4:	4313      	orrs	r3, r2
 8007fe6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	2270      	movs	r2, #112	@ 0x70
 8007fec:	4393      	bics	r3, r2
 8007fee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007ff0:	683b      	ldr	r3, [r7, #0]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	68fa      	ldr	r2, [r7, #12]
 8007ff6:	4313      	orrs	r3, r2
 8007ff8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	68fa      	ldr	r2, [r7, #12]
 8008000:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	4a16      	ldr	r2, [pc, #88]	@ (8008060 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8008008:	4293      	cmp	r3, r2
 800800a:	d00f      	beq.n	800802c <HAL_TIMEx_MasterConfigSynchronization+0x98>
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681a      	ldr	r2, [r3, #0]
 8008010:	2380      	movs	r3, #128	@ 0x80
 8008012:	05db      	lsls	r3, r3, #23
 8008014:	429a      	cmp	r2, r3
 8008016:	d009      	beq.n	800802c <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	4a12      	ldr	r2, [pc, #72]	@ (8008068 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800801e:	4293      	cmp	r3, r2
 8008020:	d004      	beq.n	800802c <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	4a11      	ldr	r2, [pc, #68]	@ (800806c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8008028:	4293      	cmp	r3, r2
 800802a:	d10c      	bne.n	8008046 <HAL_TIMEx_MasterConfigSynchronization+0xb2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800802c:	68bb      	ldr	r3, [r7, #8]
 800802e:	2280      	movs	r2, #128	@ 0x80
 8008030:	4393      	bics	r3, r2
 8008032:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008034:	683b      	ldr	r3, [r7, #0]
 8008036:	689b      	ldr	r3, [r3, #8]
 8008038:	68ba      	ldr	r2, [r7, #8]
 800803a:	4313      	orrs	r3, r2
 800803c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	68ba      	ldr	r2, [r7, #8]
 8008044:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	223d      	movs	r2, #61	@ 0x3d
 800804a:	2101      	movs	r1, #1
 800804c:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	223c      	movs	r2, #60	@ 0x3c
 8008052:	2100      	movs	r1, #0
 8008054:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008056:	2300      	movs	r3, #0
}
 8008058:	0018      	movs	r0, r3
 800805a:	46bd      	mov	sp, r7
 800805c:	b004      	add	sp, #16
 800805e:	bd80      	pop	{r7, pc}
 8008060:	40012c00 	.word	0x40012c00
 8008064:	ff0fffff 	.word	0xff0fffff
 8008068:	40000400 	.word	0x40000400
 800806c:	40014000 	.word	0x40014000

08008070 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008070:	b580      	push	{r7, lr}
 8008072:	b084      	sub	sp, #16
 8008074:	af00      	add	r7, sp, #0
 8008076:	6078      	str	r0, [r7, #4]
 8008078:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800807a:	2300      	movs	r3, #0
 800807c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	223c      	movs	r2, #60	@ 0x3c
 8008082:	5c9b      	ldrb	r3, [r3, r2]
 8008084:	2b01      	cmp	r3, #1
 8008086:	d101      	bne.n	800808c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008088:	2302      	movs	r3, #2
 800808a:	e06f      	b.n	800816c <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	223c      	movs	r2, #60	@ 0x3c
 8008090:	2101      	movs	r1, #1
 8008092:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	22ff      	movs	r2, #255	@ 0xff
 8008098:	4393      	bics	r3, r2
 800809a:	001a      	movs	r2, r3
 800809c:	683b      	ldr	r3, [r7, #0]
 800809e:	68db      	ldr	r3, [r3, #12]
 80080a0:	4313      	orrs	r3, r2
 80080a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	4a33      	ldr	r2, [pc, #204]	@ (8008174 <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 80080a8:	401a      	ands	r2, r3
 80080aa:	683b      	ldr	r3, [r7, #0]
 80080ac:	689b      	ldr	r3, [r3, #8]
 80080ae:	4313      	orrs	r3, r2
 80080b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	4a30      	ldr	r2, [pc, #192]	@ (8008178 <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 80080b6:	401a      	ands	r2, r3
 80080b8:	683b      	ldr	r3, [r7, #0]
 80080ba:	685b      	ldr	r3, [r3, #4]
 80080bc:	4313      	orrs	r3, r2
 80080be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	4a2e      	ldr	r2, [pc, #184]	@ (800817c <HAL_TIMEx_ConfigBreakDeadTime+0x10c>)
 80080c4:	401a      	ands	r2, r3
 80080c6:	683b      	ldr	r3, [r7, #0]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	4313      	orrs	r3, r2
 80080cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	4a2b      	ldr	r2, [pc, #172]	@ (8008180 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 80080d2:	401a      	ands	r2, r3
 80080d4:	683b      	ldr	r3, [r7, #0]
 80080d6:	691b      	ldr	r3, [r3, #16]
 80080d8:	4313      	orrs	r3, r2
 80080da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	4a29      	ldr	r2, [pc, #164]	@ (8008184 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 80080e0:	401a      	ands	r2, r3
 80080e2:	683b      	ldr	r3, [r7, #0]
 80080e4:	695b      	ldr	r3, [r3, #20]
 80080e6:	4313      	orrs	r3, r2
 80080e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	4a26      	ldr	r2, [pc, #152]	@ (8008188 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 80080ee:	401a      	ands	r2, r3
 80080f0:	683b      	ldr	r3, [r7, #0]
 80080f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80080f4:	4313      	orrs	r3, r2
 80080f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	4a24      	ldr	r2, [pc, #144]	@ (800818c <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 80080fc:	401a      	ands	r2, r3
 80080fe:	683b      	ldr	r3, [r7, #0]
 8008100:	699b      	ldr	r3, [r3, #24]
 8008102:	041b      	lsls	r3, r3, #16
 8008104:	4313      	orrs	r3, r2
 8008106:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	4a21      	ldr	r2, [pc, #132]	@ (8008190 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 800810c:	401a      	ands	r2, r3
 800810e:	683b      	ldr	r3, [r7, #0]
 8008110:	69db      	ldr	r3, [r3, #28]
 8008112:	4313      	orrs	r3, r2
 8008114:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	4a1e      	ldr	r2, [pc, #120]	@ (8008194 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800811c:	4293      	cmp	r3, r2
 800811e:	d11c      	bne.n	800815a <HAL_TIMEx_ConfigBreakDeadTime+0xea>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	4a1d      	ldr	r2, [pc, #116]	@ (8008198 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 8008124:	401a      	ands	r2, r3
 8008126:	683b      	ldr	r3, [r7, #0]
 8008128:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800812a:	051b      	lsls	r3, r3, #20
 800812c:	4313      	orrs	r3, r2
 800812e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	4a1a      	ldr	r2, [pc, #104]	@ (800819c <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 8008134:	401a      	ands	r2, r3
 8008136:	683b      	ldr	r3, [r7, #0]
 8008138:	6a1b      	ldr	r3, [r3, #32]
 800813a:	4313      	orrs	r3, r2
 800813c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	4a17      	ldr	r2, [pc, #92]	@ (80081a0 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 8008142:	401a      	ands	r2, r3
 8008144:	683b      	ldr	r3, [r7, #0]
 8008146:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008148:	4313      	orrs	r3, r2
 800814a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	4a15      	ldr	r2, [pc, #84]	@ (80081a4 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8008150:	401a      	ands	r2, r3
 8008152:	683b      	ldr	r3, [r7, #0]
 8008154:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008156:	4313      	orrs	r3, r2
 8008158:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	68fa      	ldr	r2, [r7, #12]
 8008160:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	223c      	movs	r2, #60	@ 0x3c
 8008166:	2100      	movs	r1, #0
 8008168:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800816a:	2300      	movs	r3, #0
}
 800816c:	0018      	movs	r0, r3
 800816e:	46bd      	mov	sp, r7
 8008170:	b004      	add	sp, #16
 8008172:	bd80      	pop	{r7, pc}
 8008174:	fffffcff 	.word	0xfffffcff
 8008178:	fffffbff 	.word	0xfffffbff
 800817c:	fffff7ff 	.word	0xfffff7ff
 8008180:	ffffefff 	.word	0xffffefff
 8008184:	ffffdfff 	.word	0xffffdfff
 8008188:	ffffbfff 	.word	0xffffbfff
 800818c:	fff0ffff 	.word	0xfff0ffff
 8008190:	efffffff 	.word	0xefffffff
 8008194:	40012c00 	.word	0x40012c00
 8008198:	ff0fffff 	.word	0xff0fffff
 800819c:	feffffff 	.word	0xfeffffff
 80081a0:	fdffffff 	.word	0xfdffffff
 80081a4:	dfffffff 	.word	0xdfffffff

080081a8 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 80081a8:	b580      	push	{r7, lr}
 80081aa:	b086      	sub	sp, #24
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	60f8      	str	r0, [r7, #12]
 80081b0:	60b9      	str	r1, [r7, #8]
 80081b2:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 80081b4:	68bb      	ldr	r3, [r7, #8]
 80081b6:	220f      	movs	r2, #15
 80081b8:	4013      	ands	r3, r2
 80081ba:	2204      	movs	r2, #4
 80081bc:	409a      	lsls	r2, r3
 80081be:	0013      	movs	r3, r2
 80081c0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	6a1b      	ldr	r3, [r3, #32]
 80081c6:	697a      	ldr	r2, [r7, #20]
 80081c8:	43d2      	mvns	r2, r2
 80081ca:	401a      	ands	r2, r3
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	6a1a      	ldr	r2, [r3, #32]
 80081d4:	68bb      	ldr	r3, [r7, #8]
 80081d6:	210f      	movs	r1, #15
 80081d8:	400b      	ands	r3, r1
 80081da:	6879      	ldr	r1, [r7, #4]
 80081dc:	4099      	lsls	r1, r3
 80081de:	000b      	movs	r3, r1
 80081e0:	431a      	orrs	r2, r3
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	621a      	str	r2, [r3, #32]
}
 80081e6:	46c0      	nop			@ (mov r8, r8)
 80081e8:	46bd      	mov	sp, r7
 80081ea:	b006      	add	sp, #24
 80081ec:	bd80      	pop	{r7, pc}
	...

080081f0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80081f0:	b580      	push	{r7, lr}
 80081f2:	b082      	sub	sp, #8
 80081f4:	af00      	add	r7, sp, #0
 80081f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d101      	bne.n	8008202 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80081fe:	2301      	movs	r3, #1
 8008200:	e046      	b.n	8008290 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	2288      	movs	r2, #136	@ 0x88
 8008206:	589b      	ldr	r3, [r3, r2]
 8008208:	2b00      	cmp	r3, #0
 800820a:	d107      	bne.n	800821c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	2284      	movs	r2, #132	@ 0x84
 8008210:	2100      	movs	r1, #0
 8008212:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	0018      	movs	r0, r3
 8008218:	f7fb ffb4 	bl	8004184 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	2288      	movs	r2, #136	@ 0x88
 8008220:	2124      	movs	r1, #36	@ 0x24
 8008222:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	681a      	ldr	r2, [r3, #0]
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	2101      	movs	r1, #1
 8008230:	438a      	bics	r2, r1
 8008232:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008238:	2b00      	cmp	r3, #0
 800823a:	d003      	beq.n	8008244 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	0018      	movs	r0, r3
 8008240:	f000 faea 	bl	8008818 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	0018      	movs	r0, r3
 8008248:	f000 f828 	bl	800829c <UART_SetConfig>
 800824c:	0003      	movs	r3, r0
 800824e:	2b01      	cmp	r3, #1
 8008250:	d101      	bne.n	8008256 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8008252:	2301      	movs	r3, #1
 8008254:	e01c      	b.n	8008290 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	685a      	ldr	r2, [r3, #4]
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	490d      	ldr	r1, [pc, #52]	@ (8008298 <HAL_UART_Init+0xa8>)
 8008262:	400a      	ands	r2, r1
 8008264:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	689a      	ldr	r2, [r3, #8]
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	212a      	movs	r1, #42	@ 0x2a
 8008272:	438a      	bics	r2, r1
 8008274:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	681a      	ldr	r2, [r3, #0]
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	2101      	movs	r1, #1
 8008282:	430a      	orrs	r2, r1
 8008284:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	0018      	movs	r0, r3
 800828a:	f000 fb79 	bl	8008980 <UART_CheckIdleState>
 800828e:	0003      	movs	r3, r0
}
 8008290:	0018      	movs	r0, r3
 8008292:	46bd      	mov	sp, r7
 8008294:	b002      	add	sp, #8
 8008296:	bd80      	pop	{r7, pc}
 8008298:	ffffb7ff 	.word	0xffffb7ff

0800829c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800829c:	b5b0      	push	{r4, r5, r7, lr}
 800829e:	b090      	sub	sp, #64	@ 0x40
 80082a0:	af00      	add	r7, sp, #0
 80082a2:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80082a4:	231a      	movs	r3, #26
 80082a6:	2220      	movs	r2, #32
 80082a8:	189b      	adds	r3, r3, r2
 80082aa:	19db      	adds	r3, r3, r7
 80082ac:	2200      	movs	r2, #0
 80082ae:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80082b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082b2:	689a      	ldr	r2, [r3, #8]
 80082b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082b6:	691b      	ldr	r3, [r3, #16]
 80082b8:	431a      	orrs	r2, r3
 80082ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082bc:	695b      	ldr	r3, [r3, #20]
 80082be:	431a      	orrs	r2, r3
 80082c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082c2:	69db      	ldr	r3, [r3, #28]
 80082c4:	4313      	orrs	r3, r2
 80082c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80082c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	4aaf      	ldr	r2, [pc, #700]	@ (800858c <UART_SetConfig+0x2f0>)
 80082d0:	4013      	ands	r3, r2
 80082d2:	0019      	movs	r1, r3
 80082d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082d6:	681a      	ldr	r2, [r3, #0]
 80082d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80082da:	430b      	orrs	r3, r1
 80082dc:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80082de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	685b      	ldr	r3, [r3, #4]
 80082e4:	4aaa      	ldr	r2, [pc, #680]	@ (8008590 <UART_SetConfig+0x2f4>)
 80082e6:	4013      	ands	r3, r2
 80082e8:	0018      	movs	r0, r3
 80082ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082ec:	68d9      	ldr	r1, [r3, #12]
 80082ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082f0:	681a      	ldr	r2, [r3, #0]
 80082f2:	0003      	movs	r3, r0
 80082f4:	430b      	orrs	r3, r1
 80082f6:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80082f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082fa:	699b      	ldr	r3, [r3, #24]
 80082fc:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80082fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	4aa4      	ldr	r2, [pc, #656]	@ (8008594 <UART_SetConfig+0x2f8>)
 8008304:	4293      	cmp	r3, r2
 8008306:	d004      	beq.n	8008312 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008308:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800830a:	6a1b      	ldr	r3, [r3, #32]
 800830c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800830e:	4313      	orrs	r3, r2
 8008310:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008312:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	689b      	ldr	r3, [r3, #8]
 8008318:	4a9f      	ldr	r2, [pc, #636]	@ (8008598 <UART_SetConfig+0x2fc>)
 800831a:	4013      	ands	r3, r2
 800831c:	0019      	movs	r1, r3
 800831e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008320:	681a      	ldr	r2, [r3, #0]
 8008322:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008324:	430b      	orrs	r3, r1
 8008326:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008328:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800832e:	220f      	movs	r2, #15
 8008330:	4393      	bics	r3, r2
 8008332:	0018      	movs	r0, r3
 8008334:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008336:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8008338:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800833a:	681a      	ldr	r2, [r3, #0]
 800833c:	0003      	movs	r3, r0
 800833e:	430b      	orrs	r3, r1
 8008340:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008342:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	4a95      	ldr	r2, [pc, #596]	@ (800859c <UART_SetConfig+0x300>)
 8008348:	4293      	cmp	r3, r2
 800834a:	d131      	bne.n	80083b0 <UART_SetConfig+0x114>
 800834c:	4b94      	ldr	r3, [pc, #592]	@ (80085a0 <UART_SetConfig+0x304>)
 800834e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008350:	2203      	movs	r2, #3
 8008352:	4013      	ands	r3, r2
 8008354:	2b03      	cmp	r3, #3
 8008356:	d01d      	beq.n	8008394 <UART_SetConfig+0xf8>
 8008358:	d823      	bhi.n	80083a2 <UART_SetConfig+0x106>
 800835a:	2b02      	cmp	r3, #2
 800835c:	d00c      	beq.n	8008378 <UART_SetConfig+0xdc>
 800835e:	d820      	bhi.n	80083a2 <UART_SetConfig+0x106>
 8008360:	2b00      	cmp	r3, #0
 8008362:	d002      	beq.n	800836a <UART_SetConfig+0xce>
 8008364:	2b01      	cmp	r3, #1
 8008366:	d00e      	beq.n	8008386 <UART_SetConfig+0xea>
 8008368:	e01b      	b.n	80083a2 <UART_SetConfig+0x106>
 800836a:	231b      	movs	r3, #27
 800836c:	2220      	movs	r2, #32
 800836e:	189b      	adds	r3, r3, r2
 8008370:	19db      	adds	r3, r3, r7
 8008372:	2200      	movs	r2, #0
 8008374:	701a      	strb	r2, [r3, #0]
 8008376:	e0b4      	b.n	80084e2 <UART_SetConfig+0x246>
 8008378:	231b      	movs	r3, #27
 800837a:	2220      	movs	r2, #32
 800837c:	189b      	adds	r3, r3, r2
 800837e:	19db      	adds	r3, r3, r7
 8008380:	2202      	movs	r2, #2
 8008382:	701a      	strb	r2, [r3, #0]
 8008384:	e0ad      	b.n	80084e2 <UART_SetConfig+0x246>
 8008386:	231b      	movs	r3, #27
 8008388:	2220      	movs	r2, #32
 800838a:	189b      	adds	r3, r3, r2
 800838c:	19db      	adds	r3, r3, r7
 800838e:	2204      	movs	r2, #4
 8008390:	701a      	strb	r2, [r3, #0]
 8008392:	e0a6      	b.n	80084e2 <UART_SetConfig+0x246>
 8008394:	231b      	movs	r3, #27
 8008396:	2220      	movs	r2, #32
 8008398:	189b      	adds	r3, r3, r2
 800839a:	19db      	adds	r3, r3, r7
 800839c:	2208      	movs	r2, #8
 800839e:	701a      	strb	r2, [r3, #0]
 80083a0:	e09f      	b.n	80084e2 <UART_SetConfig+0x246>
 80083a2:	231b      	movs	r3, #27
 80083a4:	2220      	movs	r2, #32
 80083a6:	189b      	adds	r3, r3, r2
 80083a8:	19db      	adds	r3, r3, r7
 80083aa:	2210      	movs	r2, #16
 80083ac:	701a      	strb	r2, [r3, #0]
 80083ae:	e098      	b.n	80084e2 <UART_SetConfig+0x246>
 80083b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	4a7b      	ldr	r2, [pc, #492]	@ (80085a4 <UART_SetConfig+0x308>)
 80083b6:	4293      	cmp	r3, r2
 80083b8:	d131      	bne.n	800841e <UART_SetConfig+0x182>
 80083ba:	4b79      	ldr	r3, [pc, #484]	@ (80085a0 <UART_SetConfig+0x304>)
 80083bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80083be:	220c      	movs	r2, #12
 80083c0:	4013      	ands	r3, r2
 80083c2:	2b0c      	cmp	r3, #12
 80083c4:	d01d      	beq.n	8008402 <UART_SetConfig+0x166>
 80083c6:	d823      	bhi.n	8008410 <UART_SetConfig+0x174>
 80083c8:	2b08      	cmp	r3, #8
 80083ca:	d00c      	beq.n	80083e6 <UART_SetConfig+0x14a>
 80083cc:	d820      	bhi.n	8008410 <UART_SetConfig+0x174>
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d002      	beq.n	80083d8 <UART_SetConfig+0x13c>
 80083d2:	2b04      	cmp	r3, #4
 80083d4:	d00e      	beq.n	80083f4 <UART_SetConfig+0x158>
 80083d6:	e01b      	b.n	8008410 <UART_SetConfig+0x174>
 80083d8:	231b      	movs	r3, #27
 80083da:	2220      	movs	r2, #32
 80083dc:	189b      	adds	r3, r3, r2
 80083de:	19db      	adds	r3, r3, r7
 80083e0:	2200      	movs	r2, #0
 80083e2:	701a      	strb	r2, [r3, #0]
 80083e4:	e07d      	b.n	80084e2 <UART_SetConfig+0x246>
 80083e6:	231b      	movs	r3, #27
 80083e8:	2220      	movs	r2, #32
 80083ea:	189b      	adds	r3, r3, r2
 80083ec:	19db      	adds	r3, r3, r7
 80083ee:	2202      	movs	r2, #2
 80083f0:	701a      	strb	r2, [r3, #0]
 80083f2:	e076      	b.n	80084e2 <UART_SetConfig+0x246>
 80083f4:	231b      	movs	r3, #27
 80083f6:	2220      	movs	r2, #32
 80083f8:	189b      	adds	r3, r3, r2
 80083fa:	19db      	adds	r3, r3, r7
 80083fc:	2204      	movs	r2, #4
 80083fe:	701a      	strb	r2, [r3, #0]
 8008400:	e06f      	b.n	80084e2 <UART_SetConfig+0x246>
 8008402:	231b      	movs	r3, #27
 8008404:	2220      	movs	r2, #32
 8008406:	189b      	adds	r3, r3, r2
 8008408:	19db      	adds	r3, r3, r7
 800840a:	2208      	movs	r2, #8
 800840c:	701a      	strb	r2, [r3, #0]
 800840e:	e068      	b.n	80084e2 <UART_SetConfig+0x246>
 8008410:	231b      	movs	r3, #27
 8008412:	2220      	movs	r2, #32
 8008414:	189b      	adds	r3, r3, r2
 8008416:	19db      	adds	r3, r3, r7
 8008418:	2210      	movs	r2, #16
 800841a:	701a      	strb	r2, [r3, #0]
 800841c:	e061      	b.n	80084e2 <UART_SetConfig+0x246>
 800841e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	4a61      	ldr	r2, [pc, #388]	@ (80085a8 <UART_SetConfig+0x30c>)
 8008424:	4293      	cmp	r3, r2
 8008426:	d106      	bne.n	8008436 <UART_SetConfig+0x19a>
 8008428:	231b      	movs	r3, #27
 800842a:	2220      	movs	r2, #32
 800842c:	189b      	adds	r3, r3, r2
 800842e:	19db      	adds	r3, r3, r7
 8008430:	2200      	movs	r2, #0
 8008432:	701a      	strb	r2, [r3, #0]
 8008434:	e055      	b.n	80084e2 <UART_SetConfig+0x246>
 8008436:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	4a5c      	ldr	r2, [pc, #368]	@ (80085ac <UART_SetConfig+0x310>)
 800843c:	4293      	cmp	r3, r2
 800843e:	d106      	bne.n	800844e <UART_SetConfig+0x1b2>
 8008440:	231b      	movs	r3, #27
 8008442:	2220      	movs	r2, #32
 8008444:	189b      	adds	r3, r3, r2
 8008446:	19db      	adds	r3, r3, r7
 8008448:	2200      	movs	r2, #0
 800844a:	701a      	strb	r2, [r3, #0]
 800844c:	e049      	b.n	80084e2 <UART_SetConfig+0x246>
 800844e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	4a50      	ldr	r2, [pc, #320]	@ (8008594 <UART_SetConfig+0x2f8>)
 8008454:	4293      	cmp	r3, r2
 8008456:	d13e      	bne.n	80084d6 <UART_SetConfig+0x23a>
 8008458:	4b51      	ldr	r3, [pc, #324]	@ (80085a0 <UART_SetConfig+0x304>)
 800845a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800845c:	23c0      	movs	r3, #192	@ 0xc0
 800845e:	011b      	lsls	r3, r3, #4
 8008460:	4013      	ands	r3, r2
 8008462:	22c0      	movs	r2, #192	@ 0xc0
 8008464:	0112      	lsls	r2, r2, #4
 8008466:	4293      	cmp	r3, r2
 8008468:	d027      	beq.n	80084ba <UART_SetConfig+0x21e>
 800846a:	22c0      	movs	r2, #192	@ 0xc0
 800846c:	0112      	lsls	r2, r2, #4
 800846e:	4293      	cmp	r3, r2
 8008470:	d82a      	bhi.n	80084c8 <UART_SetConfig+0x22c>
 8008472:	2280      	movs	r2, #128	@ 0x80
 8008474:	0112      	lsls	r2, r2, #4
 8008476:	4293      	cmp	r3, r2
 8008478:	d011      	beq.n	800849e <UART_SetConfig+0x202>
 800847a:	2280      	movs	r2, #128	@ 0x80
 800847c:	0112      	lsls	r2, r2, #4
 800847e:	4293      	cmp	r3, r2
 8008480:	d822      	bhi.n	80084c8 <UART_SetConfig+0x22c>
 8008482:	2b00      	cmp	r3, #0
 8008484:	d004      	beq.n	8008490 <UART_SetConfig+0x1f4>
 8008486:	2280      	movs	r2, #128	@ 0x80
 8008488:	00d2      	lsls	r2, r2, #3
 800848a:	4293      	cmp	r3, r2
 800848c:	d00e      	beq.n	80084ac <UART_SetConfig+0x210>
 800848e:	e01b      	b.n	80084c8 <UART_SetConfig+0x22c>
 8008490:	231b      	movs	r3, #27
 8008492:	2220      	movs	r2, #32
 8008494:	189b      	adds	r3, r3, r2
 8008496:	19db      	adds	r3, r3, r7
 8008498:	2200      	movs	r2, #0
 800849a:	701a      	strb	r2, [r3, #0]
 800849c:	e021      	b.n	80084e2 <UART_SetConfig+0x246>
 800849e:	231b      	movs	r3, #27
 80084a0:	2220      	movs	r2, #32
 80084a2:	189b      	adds	r3, r3, r2
 80084a4:	19db      	adds	r3, r3, r7
 80084a6:	2202      	movs	r2, #2
 80084a8:	701a      	strb	r2, [r3, #0]
 80084aa:	e01a      	b.n	80084e2 <UART_SetConfig+0x246>
 80084ac:	231b      	movs	r3, #27
 80084ae:	2220      	movs	r2, #32
 80084b0:	189b      	adds	r3, r3, r2
 80084b2:	19db      	adds	r3, r3, r7
 80084b4:	2204      	movs	r2, #4
 80084b6:	701a      	strb	r2, [r3, #0]
 80084b8:	e013      	b.n	80084e2 <UART_SetConfig+0x246>
 80084ba:	231b      	movs	r3, #27
 80084bc:	2220      	movs	r2, #32
 80084be:	189b      	adds	r3, r3, r2
 80084c0:	19db      	adds	r3, r3, r7
 80084c2:	2208      	movs	r2, #8
 80084c4:	701a      	strb	r2, [r3, #0]
 80084c6:	e00c      	b.n	80084e2 <UART_SetConfig+0x246>
 80084c8:	231b      	movs	r3, #27
 80084ca:	2220      	movs	r2, #32
 80084cc:	189b      	adds	r3, r3, r2
 80084ce:	19db      	adds	r3, r3, r7
 80084d0:	2210      	movs	r2, #16
 80084d2:	701a      	strb	r2, [r3, #0]
 80084d4:	e005      	b.n	80084e2 <UART_SetConfig+0x246>
 80084d6:	231b      	movs	r3, #27
 80084d8:	2220      	movs	r2, #32
 80084da:	189b      	adds	r3, r3, r2
 80084dc:	19db      	adds	r3, r3, r7
 80084de:	2210      	movs	r2, #16
 80084e0:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80084e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	4a2b      	ldr	r2, [pc, #172]	@ (8008594 <UART_SetConfig+0x2f8>)
 80084e8:	4293      	cmp	r3, r2
 80084ea:	d000      	beq.n	80084ee <UART_SetConfig+0x252>
 80084ec:	e0a9      	b.n	8008642 <UART_SetConfig+0x3a6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80084ee:	231b      	movs	r3, #27
 80084f0:	2220      	movs	r2, #32
 80084f2:	189b      	adds	r3, r3, r2
 80084f4:	19db      	adds	r3, r3, r7
 80084f6:	781b      	ldrb	r3, [r3, #0]
 80084f8:	2b08      	cmp	r3, #8
 80084fa:	d015      	beq.n	8008528 <UART_SetConfig+0x28c>
 80084fc:	dc18      	bgt.n	8008530 <UART_SetConfig+0x294>
 80084fe:	2b04      	cmp	r3, #4
 8008500:	d00d      	beq.n	800851e <UART_SetConfig+0x282>
 8008502:	dc15      	bgt.n	8008530 <UART_SetConfig+0x294>
 8008504:	2b00      	cmp	r3, #0
 8008506:	d002      	beq.n	800850e <UART_SetConfig+0x272>
 8008508:	2b02      	cmp	r3, #2
 800850a:	d005      	beq.n	8008518 <UART_SetConfig+0x27c>
 800850c:	e010      	b.n	8008530 <UART_SetConfig+0x294>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800850e:	f7fd ffa7 	bl	8006460 <HAL_RCC_GetPCLK1Freq>
 8008512:	0003      	movs	r3, r0
 8008514:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008516:	e014      	b.n	8008542 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008518:	4b25      	ldr	r3, [pc, #148]	@ (80085b0 <UART_SetConfig+0x314>)
 800851a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800851c:	e011      	b.n	8008542 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800851e:	f7fd ff13 	bl	8006348 <HAL_RCC_GetSysClockFreq>
 8008522:	0003      	movs	r3, r0
 8008524:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008526:	e00c      	b.n	8008542 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008528:	2380      	movs	r3, #128	@ 0x80
 800852a:	021b      	lsls	r3, r3, #8
 800852c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800852e:	e008      	b.n	8008542 <UART_SetConfig+0x2a6>
      default:
        pclk = 0U;
 8008530:	2300      	movs	r3, #0
 8008532:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8008534:	231a      	movs	r3, #26
 8008536:	2220      	movs	r2, #32
 8008538:	189b      	adds	r3, r3, r2
 800853a:	19db      	adds	r3, r3, r7
 800853c:	2201      	movs	r2, #1
 800853e:	701a      	strb	r2, [r3, #0]
        break;
 8008540:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008542:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008544:	2b00      	cmp	r3, #0
 8008546:	d100      	bne.n	800854a <UART_SetConfig+0x2ae>
 8008548:	e14b      	b.n	80087e2 <UART_SetConfig+0x546>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800854a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800854c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800854e:	4b19      	ldr	r3, [pc, #100]	@ (80085b4 <UART_SetConfig+0x318>)
 8008550:	0052      	lsls	r2, r2, #1
 8008552:	5ad3      	ldrh	r3, [r2, r3]
 8008554:	0019      	movs	r1, r3
 8008556:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8008558:	f7f7 fdd4 	bl	8000104 <__udivsi3>
 800855c:	0003      	movs	r3, r0
 800855e:	62bb      	str	r3, [r7, #40]	@ 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008560:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008562:	685a      	ldr	r2, [r3, #4]
 8008564:	0013      	movs	r3, r2
 8008566:	005b      	lsls	r3, r3, #1
 8008568:	189b      	adds	r3, r3, r2
 800856a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800856c:	429a      	cmp	r2, r3
 800856e:	d305      	bcc.n	800857c <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008570:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008572:	685b      	ldr	r3, [r3, #4]
 8008574:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008576:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008578:	429a      	cmp	r2, r3
 800857a:	d91d      	bls.n	80085b8 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 800857c:	231a      	movs	r3, #26
 800857e:	2220      	movs	r2, #32
 8008580:	189b      	adds	r3, r3, r2
 8008582:	19db      	adds	r3, r3, r7
 8008584:	2201      	movs	r2, #1
 8008586:	701a      	strb	r2, [r3, #0]
 8008588:	e12b      	b.n	80087e2 <UART_SetConfig+0x546>
 800858a:	46c0      	nop			@ (mov r8, r8)
 800858c:	cfff69f3 	.word	0xcfff69f3
 8008590:	ffffcfff 	.word	0xffffcfff
 8008594:	40008000 	.word	0x40008000
 8008598:	11fff4ff 	.word	0x11fff4ff
 800859c:	40013800 	.word	0x40013800
 80085a0:	40021000 	.word	0x40021000
 80085a4:	40004400 	.word	0x40004400
 80085a8:	40004800 	.word	0x40004800
 80085ac:	40004c00 	.word	0x40004c00
 80085b0:	00f42400 	.word	0x00f42400
 80085b4:	08009188 	.word	0x08009188
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80085b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80085ba:	61bb      	str	r3, [r7, #24]
 80085bc:	2300      	movs	r3, #0
 80085be:	61fb      	str	r3, [r7, #28]
 80085c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085c2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80085c4:	4b92      	ldr	r3, [pc, #584]	@ (8008810 <UART_SetConfig+0x574>)
 80085c6:	0052      	lsls	r2, r2, #1
 80085c8:	5ad3      	ldrh	r3, [r2, r3]
 80085ca:	613b      	str	r3, [r7, #16]
 80085cc:	2300      	movs	r3, #0
 80085ce:	617b      	str	r3, [r7, #20]
 80085d0:	693a      	ldr	r2, [r7, #16]
 80085d2:	697b      	ldr	r3, [r7, #20]
 80085d4:	69b8      	ldr	r0, [r7, #24]
 80085d6:	69f9      	ldr	r1, [r7, #28]
 80085d8:	f7f7 ff44 	bl	8000464 <__aeabi_uldivmod>
 80085dc:	0002      	movs	r2, r0
 80085de:	000b      	movs	r3, r1
 80085e0:	0e11      	lsrs	r1, r2, #24
 80085e2:	021d      	lsls	r5, r3, #8
 80085e4:	430d      	orrs	r5, r1
 80085e6:	0214      	lsls	r4, r2, #8
 80085e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085ea:	685b      	ldr	r3, [r3, #4]
 80085ec:	085b      	lsrs	r3, r3, #1
 80085ee:	60bb      	str	r3, [r7, #8]
 80085f0:	2300      	movs	r3, #0
 80085f2:	60fb      	str	r3, [r7, #12]
 80085f4:	68b8      	ldr	r0, [r7, #8]
 80085f6:	68f9      	ldr	r1, [r7, #12]
 80085f8:	1900      	adds	r0, r0, r4
 80085fa:	4169      	adcs	r1, r5
 80085fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085fe:	685b      	ldr	r3, [r3, #4]
 8008600:	603b      	str	r3, [r7, #0]
 8008602:	2300      	movs	r3, #0
 8008604:	607b      	str	r3, [r7, #4]
 8008606:	683a      	ldr	r2, [r7, #0]
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	f7f7 ff2b 	bl	8000464 <__aeabi_uldivmod>
 800860e:	0002      	movs	r2, r0
 8008610:	000b      	movs	r3, r1
 8008612:	0013      	movs	r3, r2
 8008614:	633b      	str	r3, [r7, #48]	@ 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008616:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008618:	23c0      	movs	r3, #192	@ 0xc0
 800861a:	009b      	lsls	r3, r3, #2
 800861c:	429a      	cmp	r2, r3
 800861e:	d309      	bcc.n	8008634 <UART_SetConfig+0x398>
 8008620:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008622:	2380      	movs	r3, #128	@ 0x80
 8008624:	035b      	lsls	r3, r3, #13
 8008626:	429a      	cmp	r2, r3
 8008628:	d204      	bcs.n	8008634 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 800862a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008630:	60da      	str	r2, [r3, #12]
 8008632:	e0d6      	b.n	80087e2 <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 8008634:	231a      	movs	r3, #26
 8008636:	2220      	movs	r2, #32
 8008638:	189b      	adds	r3, r3, r2
 800863a:	19db      	adds	r3, r3, r7
 800863c:	2201      	movs	r2, #1
 800863e:	701a      	strb	r2, [r3, #0]
 8008640:	e0cf      	b.n	80087e2 <UART_SetConfig+0x546>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008642:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008644:	69da      	ldr	r2, [r3, #28]
 8008646:	2380      	movs	r3, #128	@ 0x80
 8008648:	021b      	lsls	r3, r3, #8
 800864a:	429a      	cmp	r2, r3
 800864c:	d000      	beq.n	8008650 <UART_SetConfig+0x3b4>
 800864e:	e070      	b.n	8008732 <UART_SetConfig+0x496>
  {
    switch (clocksource)
 8008650:	231b      	movs	r3, #27
 8008652:	2220      	movs	r2, #32
 8008654:	189b      	adds	r3, r3, r2
 8008656:	19db      	adds	r3, r3, r7
 8008658:	781b      	ldrb	r3, [r3, #0]
 800865a:	2b08      	cmp	r3, #8
 800865c:	d015      	beq.n	800868a <UART_SetConfig+0x3ee>
 800865e:	dc18      	bgt.n	8008692 <UART_SetConfig+0x3f6>
 8008660:	2b04      	cmp	r3, #4
 8008662:	d00d      	beq.n	8008680 <UART_SetConfig+0x3e4>
 8008664:	dc15      	bgt.n	8008692 <UART_SetConfig+0x3f6>
 8008666:	2b00      	cmp	r3, #0
 8008668:	d002      	beq.n	8008670 <UART_SetConfig+0x3d4>
 800866a:	2b02      	cmp	r3, #2
 800866c:	d005      	beq.n	800867a <UART_SetConfig+0x3de>
 800866e:	e010      	b.n	8008692 <UART_SetConfig+0x3f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008670:	f7fd fef6 	bl	8006460 <HAL_RCC_GetPCLK1Freq>
 8008674:	0003      	movs	r3, r0
 8008676:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008678:	e014      	b.n	80086a4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800867a:	4b66      	ldr	r3, [pc, #408]	@ (8008814 <UART_SetConfig+0x578>)
 800867c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800867e:	e011      	b.n	80086a4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008680:	f7fd fe62 	bl	8006348 <HAL_RCC_GetSysClockFreq>
 8008684:	0003      	movs	r3, r0
 8008686:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008688:	e00c      	b.n	80086a4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800868a:	2380      	movs	r3, #128	@ 0x80
 800868c:	021b      	lsls	r3, r3, #8
 800868e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008690:	e008      	b.n	80086a4 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8008692:	2300      	movs	r3, #0
 8008694:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8008696:	231a      	movs	r3, #26
 8008698:	2220      	movs	r2, #32
 800869a:	189b      	adds	r3, r3, r2
 800869c:	19db      	adds	r3, r3, r7
 800869e:	2201      	movs	r2, #1
 80086a0:	701a      	strb	r2, [r3, #0]
        break;
 80086a2:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80086a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d100      	bne.n	80086ac <UART_SetConfig+0x410>
 80086aa:	e09a      	b.n	80087e2 <UART_SetConfig+0x546>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80086ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086ae:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80086b0:	4b57      	ldr	r3, [pc, #348]	@ (8008810 <UART_SetConfig+0x574>)
 80086b2:	0052      	lsls	r2, r2, #1
 80086b4:	5ad3      	ldrh	r3, [r2, r3]
 80086b6:	0019      	movs	r1, r3
 80086b8:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80086ba:	f7f7 fd23 	bl	8000104 <__udivsi3>
 80086be:	0003      	movs	r3, r0
 80086c0:	005a      	lsls	r2, r3, #1
 80086c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086c4:	685b      	ldr	r3, [r3, #4]
 80086c6:	085b      	lsrs	r3, r3, #1
 80086c8:	18d2      	adds	r2, r2, r3
 80086ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086cc:	685b      	ldr	r3, [r3, #4]
 80086ce:	0019      	movs	r1, r3
 80086d0:	0010      	movs	r0, r2
 80086d2:	f7f7 fd17 	bl	8000104 <__udivsi3>
 80086d6:	0003      	movs	r3, r0
 80086d8:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80086da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086dc:	2b0f      	cmp	r3, #15
 80086de:	d921      	bls.n	8008724 <UART_SetConfig+0x488>
 80086e0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80086e2:	2380      	movs	r3, #128	@ 0x80
 80086e4:	025b      	lsls	r3, r3, #9
 80086e6:	429a      	cmp	r2, r3
 80086e8:	d21c      	bcs.n	8008724 <UART_SetConfig+0x488>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80086ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086ec:	b29a      	uxth	r2, r3
 80086ee:	200e      	movs	r0, #14
 80086f0:	2420      	movs	r4, #32
 80086f2:	1903      	adds	r3, r0, r4
 80086f4:	19db      	adds	r3, r3, r7
 80086f6:	210f      	movs	r1, #15
 80086f8:	438a      	bics	r2, r1
 80086fa:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80086fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086fe:	085b      	lsrs	r3, r3, #1
 8008700:	b29b      	uxth	r3, r3
 8008702:	2207      	movs	r2, #7
 8008704:	4013      	ands	r3, r2
 8008706:	b299      	uxth	r1, r3
 8008708:	1903      	adds	r3, r0, r4
 800870a:	19db      	adds	r3, r3, r7
 800870c:	1902      	adds	r2, r0, r4
 800870e:	19d2      	adds	r2, r2, r7
 8008710:	8812      	ldrh	r2, [r2, #0]
 8008712:	430a      	orrs	r2, r1
 8008714:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8008716:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	1902      	adds	r2, r0, r4
 800871c:	19d2      	adds	r2, r2, r7
 800871e:	8812      	ldrh	r2, [r2, #0]
 8008720:	60da      	str	r2, [r3, #12]
 8008722:	e05e      	b.n	80087e2 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8008724:	231a      	movs	r3, #26
 8008726:	2220      	movs	r2, #32
 8008728:	189b      	adds	r3, r3, r2
 800872a:	19db      	adds	r3, r3, r7
 800872c:	2201      	movs	r2, #1
 800872e:	701a      	strb	r2, [r3, #0]
 8008730:	e057      	b.n	80087e2 <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008732:	231b      	movs	r3, #27
 8008734:	2220      	movs	r2, #32
 8008736:	189b      	adds	r3, r3, r2
 8008738:	19db      	adds	r3, r3, r7
 800873a:	781b      	ldrb	r3, [r3, #0]
 800873c:	2b08      	cmp	r3, #8
 800873e:	d015      	beq.n	800876c <UART_SetConfig+0x4d0>
 8008740:	dc18      	bgt.n	8008774 <UART_SetConfig+0x4d8>
 8008742:	2b04      	cmp	r3, #4
 8008744:	d00d      	beq.n	8008762 <UART_SetConfig+0x4c6>
 8008746:	dc15      	bgt.n	8008774 <UART_SetConfig+0x4d8>
 8008748:	2b00      	cmp	r3, #0
 800874a:	d002      	beq.n	8008752 <UART_SetConfig+0x4b6>
 800874c:	2b02      	cmp	r3, #2
 800874e:	d005      	beq.n	800875c <UART_SetConfig+0x4c0>
 8008750:	e010      	b.n	8008774 <UART_SetConfig+0x4d8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008752:	f7fd fe85 	bl	8006460 <HAL_RCC_GetPCLK1Freq>
 8008756:	0003      	movs	r3, r0
 8008758:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800875a:	e014      	b.n	8008786 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800875c:	4b2d      	ldr	r3, [pc, #180]	@ (8008814 <UART_SetConfig+0x578>)
 800875e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008760:	e011      	b.n	8008786 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008762:	f7fd fdf1 	bl	8006348 <HAL_RCC_GetSysClockFreq>
 8008766:	0003      	movs	r3, r0
 8008768:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800876a:	e00c      	b.n	8008786 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800876c:	2380      	movs	r3, #128	@ 0x80
 800876e:	021b      	lsls	r3, r3, #8
 8008770:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008772:	e008      	b.n	8008786 <UART_SetConfig+0x4ea>
      default:
        pclk = 0U;
 8008774:	2300      	movs	r3, #0
 8008776:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8008778:	231a      	movs	r3, #26
 800877a:	2220      	movs	r2, #32
 800877c:	189b      	adds	r3, r3, r2
 800877e:	19db      	adds	r3, r3, r7
 8008780:	2201      	movs	r2, #1
 8008782:	701a      	strb	r2, [r3, #0]
        break;
 8008784:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8008786:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008788:	2b00      	cmp	r3, #0
 800878a:	d02a      	beq.n	80087e2 <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800878c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800878e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008790:	4b1f      	ldr	r3, [pc, #124]	@ (8008810 <UART_SetConfig+0x574>)
 8008792:	0052      	lsls	r2, r2, #1
 8008794:	5ad3      	ldrh	r3, [r2, r3]
 8008796:	0019      	movs	r1, r3
 8008798:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800879a:	f7f7 fcb3 	bl	8000104 <__udivsi3>
 800879e:	0003      	movs	r3, r0
 80087a0:	001a      	movs	r2, r3
 80087a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087a4:	685b      	ldr	r3, [r3, #4]
 80087a6:	085b      	lsrs	r3, r3, #1
 80087a8:	18d2      	adds	r2, r2, r3
 80087aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087ac:	685b      	ldr	r3, [r3, #4]
 80087ae:	0019      	movs	r1, r3
 80087b0:	0010      	movs	r0, r2
 80087b2:	f7f7 fca7 	bl	8000104 <__udivsi3>
 80087b6:	0003      	movs	r3, r0
 80087b8:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80087ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087bc:	2b0f      	cmp	r3, #15
 80087be:	d90a      	bls.n	80087d6 <UART_SetConfig+0x53a>
 80087c0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80087c2:	2380      	movs	r3, #128	@ 0x80
 80087c4:	025b      	lsls	r3, r3, #9
 80087c6:	429a      	cmp	r2, r3
 80087c8:	d205      	bcs.n	80087d6 <UART_SetConfig+0x53a>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80087ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087cc:	b29a      	uxth	r2, r3
 80087ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	60da      	str	r2, [r3, #12]
 80087d4:	e005      	b.n	80087e2 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 80087d6:	231a      	movs	r3, #26
 80087d8:	2220      	movs	r2, #32
 80087da:	189b      	adds	r3, r3, r2
 80087dc:	19db      	adds	r3, r3, r7
 80087de:	2201      	movs	r2, #1
 80087e0:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80087e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087e4:	226a      	movs	r2, #106	@ 0x6a
 80087e6:	2101      	movs	r1, #1
 80087e8:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 80087ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087ec:	2268      	movs	r2, #104	@ 0x68
 80087ee:	2101      	movs	r1, #1
 80087f0:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80087f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087f4:	2200      	movs	r2, #0
 80087f6:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80087f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087fa:	2200      	movs	r2, #0
 80087fc:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80087fe:	231a      	movs	r3, #26
 8008800:	2220      	movs	r2, #32
 8008802:	189b      	adds	r3, r3, r2
 8008804:	19db      	adds	r3, r3, r7
 8008806:	781b      	ldrb	r3, [r3, #0]
}
 8008808:	0018      	movs	r0, r3
 800880a:	46bd      	mov	sp, r7
 800880c:	b010      	add	sp, #64	@ 0x40
 800880e:	bdb0      	pop	{r4, r5, r7, pc}
 8008810:	08009188 	.word	0x08009188
 8008814:	00f42400 	.word	0x00f42400

08008818 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008818:	b580      	push	{r7, lr}
 800881a:	b082      	sub	sp, #8
 800881c:	af00      	add	r7, sp, #0
 800881e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008824:	2208      	movs	r2, #8
 8008826:	4013      	ands	r3, r2
 8008828:	d00b      	beq.n	8008842 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	685b      	ldr	r3, [r3, #4]
 8008830:	4a4a      	ldr	r2, [pc, #296]	@ (800895c <UART_AdvFeatureConfig+0x144>)
 8008832:	4013      	ands	r3, r2
 8008834:	0019      	movs	r1, r3
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	430a      	orrs	r2, r1
 8008840:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008846:	2201      	movs	r2, #1
 8008848:	4013      	ands	r3, r2
 800884a:	d00b      	beq.n	8008864 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	685b      	ldr	r3, [r3, #4]
 8008852:	4a43      	ldr	r2, [pc, #268]	@ (8008960 <UART_AdvFeatureConfig+0x148>)
 8008854:	4013      	ands	r3, r2
 8008856:	0019      	movs	r1, r3
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	430a      	orrs	r2, r1
 8008862:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008868:	2202      	movs	r2, #2
 800886a:	4013      	ands	r3, r2
 800886c:	d00b      	beq.n	8008886 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	685b      	ldr	r3, [r3, #4]
 8008874:	4a3b      	ldr	r2, [pc, #236]	@ (8008964 <UART_AdvFeatureConfig+0x14c>)
 8008876:	4013      	ands	r3, r2
 8008878:	0019      	movs	r1, r3
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	430a      	orrs	r2, r1
 8008884:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800888a:	2204      	movs	r2, #4
 800888c:	4013      	ands	r3, r2
 800888e:	d00b      	beq.n	80088a8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	685b      	ldr	r3, [r3, #4]
 8008896:	4a34      	ldr	r2, [pc, #208]	@ (8008968 <UART_AdvFeatureConfig+0x150>)
 8008898:	4013      	ands	r3, r2
 800889a:	0019      	movs	r1, r3
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	430a      	orrs	r2, r1
 80088a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80088ac:	2210      	movs	r2, #16
 80088ae:	4013      	ands	r3, r2
 80088b0:	d00b      	beq.n	80088ca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	689b      	ldr	r3, [r3, #8]
 80088b8:	4a2c      	ldr	r2, [pc, #176]	@ (800896c <UART_AdvFeatureConfig+0x154>)
 80088ba:	4013      	ands	r3, r2
 80088bc:	0019      	movs	r1, r3
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	430a      	orrs	r2, r1
 80088c8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80088ce:	2220      	movs	r2, #32
 80088d0:	4013      	ands	r3, r2
 80088d2:	d00b      	beq.n	80088ec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	689b      	ldr	r3, [r3, #8]
 80088da:	4a25      	ldr	r2, [pc, #148]	@ (8008970 <UART_AdvFeatureConfig+0x158>)
 80088dc:	4013      	ands	r3, r2
 80088de:	0019      	movs	r1, r3
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	430a      	orrs	r2, r1
 80088ea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80088f0:	2240      	movs	r2, #64	@ 0x40
 80088f2:	4013      	ands	r3, r2
 80088f4:	d01d      	beq.n	8008932 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	685b      	ldr	r3, [r3, #4]
 80088fc:	4a1d      	ldr	r2, [pc, #116]	@ (8008974 <UART_AdvFeatureConfig+0x15c>)
 80088fe:	4013      	ands	r3, r2
 8008900:	0019      	movs	r1, r3
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	430a      	orrs	r2, r1
 800890c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008912:	2380      	movs	r3, #128	@ 0x80
 8008914:	035b      	lsls	r3, r3, #13
 8008916:	429a      	cmp	r2, r3
 8008918:	d10b      	bne.n	8008932 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	685b      	ldr	r3, [r3, #4]
 8008920:	4a15      	ldr	r2, [pc, #84]	@ (8008978 <UART_AdvFeatureConfig+0x160>)
 8008922:	4013      	ands	r3, r2
 8008924:	0019      	movs	r1, r3
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	430a      	orrs	r2, r1
 8008930:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008936:	2280      	movs	r2, #128	@ 0x80
 8008938:	4013      	ands	r3, r2
 800893a:	d00b      	beq.n	8008954 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	685b      	ldr	r3, [r3, #4]
 8008942:	4a0e      	ldr	r2, [pc, #56]	@ (800897c <UART_AdvFeatureConfig+0x164>)
 8008944:	4013      	ands	r3, r2
 8008946:	0019      	movs	r1, r3
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	430a      	orrs	r2, r1
 8008952:	605a      	str	r2, [r3, #4]
  }
}
 8008954:	46c0      	nop			@ (mov r8, r8)
 8008956:	46bd      	mov	sp, r7
 8008958:	b002      	add	sp, #8
 800895a:	bd80      	pop	{r7, pc}
 800895c:	ffff7fff 	.word	0xffff7fff
 8008960:	fffdffff 	.word	0xfffdffff
 8008964:	fffeffff 	.word	0xfffeffff
 8008968:	fffbffff 	.word	0xfffbffff
 800896c:	ffffefff 	.word	0xffffefff
 8008970:	ffffdfff 	.word	0xffffdfff
 8008974:	ffefffff 	.word	0xffefffff
 8008978:	ff9fffff 	.word	0xff9fffff
 800897c:	fff7ffff 	.word	0xfff7ffff

08008980 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008980:	b580      	push	{r7, lr}
 8008982:	b092      	sub	sp, #72	@ 0x48
 8008984:	af02      	add	r7, sp, #8
 8008986:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	2290      	movs	r2, #144	@ 0x90
 800898c:	2100      	movs	r1, #0
 800898e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008990:	f7fb fd1e 	bl	80043d0 <HAL_GetTick>
 8008994:	0003      	movs	r3, r0
 8008996:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	2208      	movs	r2, #8
 80089a0:	4013      	ands	r3, r2
 80089a2:	2b08      	cmp	r3, #8
 80089a4:	d12d      	bne.n	8008a02 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80089a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80089a8:	2280      	movs	r2, #128	@ 0x80
 80089aa:	0391      	lsls	r1, r2, #14
 80089ac:	6878      	ldr	r0, [r7, #4]
 80089ae:	4a47      	ldr	r2, [pc, #284]	@ (8008acc <UART_CheckIdleState+0x14c>)
 80089b0:	9200      	str	r2, [sp, #0]
 80089b2:	2200      	movs	r2, #0
 80089b4:	f000 f88e 	bl	8008ad4 <UART_WaitOnFlagUntilTimeout>
 80089b8:	1e03      	subs	r3, r0, #0
 80089ba:	d022      	beq.n	8008a02 <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80089bc:	f3ef 8310 	mrs	r3, PRIMASK
 80089c0:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80089c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80089c4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80089c6:	2301      	movs	r3, #1
 80089c8:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80089ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089cc:	f383 8810 	msr	PRIMASK, r3
}
 80089d0:	46c0      	nop			@ (mov r8, r8)
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	681a      	ldr	r2, [r3, #0]
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	2180      	movs	r1, #128	@ 0x80
 80089de:	438a      	bics	r2, r1
 80089e0:	601a      	str	r2, [r3, #0]
 80089e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80089e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089e8:	f383 8810 	msr	PRIMASK, r3
}
 80089ec:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	2288      	movs	r2, #136	@ 0x88
 80089f2:	2120      	movs	r1, #32
 80089f4:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	2284      	movs	r2, #132	@ 0x84
 80089fa:	2100      	movs	r1, #0
 80089fc:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80089fe:	2303      	movs	r3, #3
 8008a00:	e060      	b.n	8008ac4 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	2204      	movs	r2, #4
 8008a0a:	4013      	ands	r3, r2
 8008a0c:	2b04      	cmp	r3, #4
 8008a0e:	d146      	bne.n	8008a9e <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008a10:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008a12:	2280      	movs	r2, #128	@ 0x80
 8008a14:	03d1      	lsls	r1, r2, #15
 8008a16:	6878      	ldr	r0, [r7, #4]
 8008a18:	4a2c      	ldr	r2, [pc, #176]	@ (8008acc <UART_CheckIdleState+0x14c>)
 8008a1a:	9200      	str	r2, [sp, #0]
 8008a1c:	2200      	movs	r2, #0
 8008a1e:	f000 f859 	bl	8008ad4 <UART_WaitOnFlagUntilTimeout>
 8008a22:	1e03      	subs	r3, r0, #0
 8008a24:	d03b      	beq.n	8008a9e <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008a26:	f3ef 8310 	mrs	r3, PRIMASK
 8008a2a:	60fb      	str	r3, [r7, #12]
  return(result);
 8008a2c:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008a2e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008a30:	2301      	movs	r3, #1
 8008a32:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008a34:	693b      	ldr	r3, [r7, #16]
 8008a36:	f383 8810 	msr	PRIMASK, r3
}
 8008a3a:	46c0      	nop			@ (mov r8, r8)
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	681a      	ldr	r2, [r3, #0]
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	4922      	ldr	r1, [pc, #136]	@ (8008ad0 <UART_CheckIdleState+0x150>)
 8008a48:	400a      	ands	r2, r1
 8008a4a:	601a      	str	r2, [r3, #0]
 8008a4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a4e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008a50:	697b      	ldr	r3, [r7, #20]
 8008a52:	f383 8810 	msr	PRIMASK, r3
}
 8008a56:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008a58:	f3ef 8310 	mrs	r3, PRIMASK
 8008a5c:	61bb      	str	r3, [r7, #24]
  return(result);
 8008a5e:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a60:	633b      	str	r3, [r7, #48]	@ 0x30
 8008a62:	2301      	movs	r3, #1
 8008a64:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008a66:	69fb      	ldr	r3, [r7, #28]
 8008a68:	f383 8810 	msr	PRIMASK, r3
}
 8008a6c:	46c0      	nop			@ (mov r8, r8)
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	689a      	ldr	r2, [r3, #8]
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	2101      	movs	r1, #1
 8008a7a:	438a      	bics	r2, r1
 8008a7c:	609a      	str	r2, [r3, #8]
 8008a7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a80:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008a82:	6a3b      	ldr	r3, [r7, #32]
 8008a84:	f383 8810 	msr	PRIMASK, r3
}
 8008a88:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	228c      	movs	r2, #140	@ 0x8c
 8008a8e:	2120      	movs	r1, #32
 8008a90:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	2284      	movs	r2, #132	@ 0x84
 8008a96:	2100      	movs	r1, #0
 8008a98:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008a9a:	2303      	movs	r3, #3
 8008a9c:	e012      	b.n	8008ac4 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	2288      	movs	r2, #136	@ 0x88
 8008aa2:	2120      	movs	r1, #32
 8008aa4:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	228c      	movs	r2, #140	@ 0x8c
 8008aaa:	2120      	movs	r1, #32
 8008aac:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	2200      	movs	r2, #0
 8008ab2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	2200      	movs	r2, #0
 8008ab8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	2284      	movs	r2, #132	@ 0x84
 8008abe:	2100      	movs	r1, #0
 8008ac0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008ac2:	2300      	movs	r3, #0
}
 8008ac4:	0018      	movs	r0, r3
 8008ac6:	46bd      	mov	sp, r7
 8008ac8:	b010      	add	sp, #64	@ 0x40
 8008aca:	bd80      	pop	{r7, pc}
 8008acc:	01ffffff 	.word	0x01ffffff
 8008ad0:	fffffedf 	.word	0xfffffedf

08008ad4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008ad4:	b580      	push	{r7, lr}
 8008ad6:	b084      	sub	sp, #16
 8008ad8:	af00      	add	r7, sp, #0
 8008ada:	60f8      	str	r0, [r7, #12]
 8008adc:	60b9      	str	r1, [r7, #8]
 8008ade:	603b      	str	r3, [r7, #0]
 8008ae0:	1dfb      	adds	r3, r7, #7
 8008ae2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008ae4:	e051      	b.n	8008b8a <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008ae6:	69bb      	ldr	r3, [r7, #24]
 8008ae8:	3301      	adds	r3, #1
 8008aea:	d04e      	beq.n	8008b8a <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008aec:	f7fb fc70 	bl	80043d0 <HAL_GetTick>
 8008af0:	0002      	movs	r2, r0
 8008af2:	683b      	ldr	r3, [r7, #0]
 8008af4:	1ad3      	subs	r3, r2, r3
 8008af6:	69ba      	ldr	r2, [r7, #24]
 8008af8:	429a      	cmp	r2, r3
 8008afa:	d302      	bcc.n	8008b02 <UART_WaitOnFlagUntilTimeout+0x2e>
 8008afc:	69bb      	ldr	r3, [r7, #24]
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d101      	bne.n	8008b06 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8008b02:	2303      	movs	r3, #3
 8008b04:	e051      	b.n	8008baa <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	2204      	movs	r2, #4
 8008b0e:	4013      	ands	r3, r2
 8008b10:	d03b      	beq.n	8008b8a <UART_WaitOnFlagUntilTimeout+0xb6>
 8008b12:	68bb      	ldr	r3, [r7, #8]
 8008b14:	2b80      	cmp	r3, #128	@ 0x80
 8008b16:	d038      	beq.n	8008b8a <UART_WaitOnFlagUntilTimeout+0xb6>
 8008b18:	68bb      	ldr	r3, [r7, #8]
 8008b1a:	2b40      	cmp	r3, #64	@ 0x40
 8008b1c:	d035      	beq.n	8008b8a <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	69db      	ldr	r3, [r3, #28]
 8008b24:	2208      	movs	r2, #8
 8008b26:	4013      	ands	r3, r2
 8008b28:	2b08      	cmp	r3, #8
 8008b2a:	d111      	bne.n	8008b50 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	2208      	movs	r2, #8
 8008b32:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	0018      	movs	r0, r3
 8008b38:	f000 f83c 	bl	8008bb4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	2290      	movs	r2, #144	@ 0x90
 8008b40:	2108      	movs	r1, #8
 8008b42:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	2284      	movs	r2, #132	@ 0x84
 8008b48:	2100      	movs	r1, #0
 8008b4a:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8008b4c:	2301      	movs	r3, #1
 8008b4e:	e02c      	b.n	8008baa <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	69da      	ldr	r2, [r3, #28]
 8008b56:	2380      	movs	r3, #128	@ 0x80
 8008b58:	011b      	lsls	r3, r3, #4
 8008b5a:	401a      	ands	r2, r3
 8008b5c:	2380      	movs	r3, #128	@ 0x80
 8008b5e:	011b      	lsls	r3, r3, #4
 8008b60:	429a      	cmp	r2, r3
 8008b62:	d112      	bne.n	8008b8a <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	2280      	movs	r2, #128	@ 0x80
 8008b6a:	0112      	lsls	r2, r2, #4
 8008b6c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	0018      	movs	r0, r3
 8008b72:	f000 f81f 	bl	8008bb4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	2290      	movs	r2, #144	@ 0x90
 8008b7a:	2120      	movs	r1, #32
 8008b7c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	2284      	movs	r2, #132	@ 0x84
 8008b82:	2100      	movs	r1, #0
 8008b84:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8008b86:	2303      	movs	r3, #3
 8008b88:	e00f      	b.n	8008baa <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	69db      	ldr	r3, [r3, #28]
 8008b90:	68ba      	ldr	r2, [r7, #8]
 8008b92:	4013      	ands	r3, r2
 8008b94:	68ba      	ldr	r2, [r7, #8]
 8008b96:	1ad3      	subs	r3, r2, r3
 8008b98:	425a      	negs	r2, r3
 8008b9a:	4153      	adcs	r3, r2
 8008b9c:	b2db      	uxtb	r3, r3
 8008b9e:	001a      	movs	r2, r3
 8008ba0:	1dfb      	adds	r3, r7, #7
 8008ba2:	781b      	ldrb	r3, [r3, #0]
 8008ba4:	429a      	cmp	r2, r3
 8008ba6:	d09e      	beq.n	8008ae6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008ba8:	2300      	movs	r3, #0
}
 8008baa:	0018      	movs	r0, r3
 8008bac:	46bd      	mov	sp, r7
 8008bae:	b004      	add	sp, #16
 8008bb0:	bd80      	pop	{r7, pc}
	...

08008bb4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008bb4:	b580      	push	{r7, lr}
 8008bb6:	b08e      	sub	sp, #56	@ 0x38
 8008bb8:	af00      	add	r7, sp, #0
 8008bba:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008bbc:	f3ef 8310 	mrs	r3, PRIMASK
 8008bc0:	617b      	str	r3, [r7, #20]
  return(result);
 8008bc2:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008bc4:	637b      	str	r3, [r7, #52]	@ 0x34
 8008bc6:	2301      	movs	r3, #1
 8008bc8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008bca:	69bb      	ldr	r3, [r7, #24]
 8008bcc:	f383 8810 	msr	PRIMASK, r3
}
 8008bd0:	46c0      	nop			@ (mov r8, r8)
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	681a      	ldr	r2, [r3, #0]
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	4926      	ldr	r1, [pc, #152]	@ (8008c78 <UART_EndRxTransfer+0xc4>)
 8008bde:	400a      	ands	r2, r1
 8008be0:	601a      	str	r2, [r3, #0]
 8008be2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008be4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008be6:	69fb      	ldr	r3, [r7, #28]
 8008be8:	f383 8810 	msr	PRIMASK, r3
}
 8008bec:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008bee:	f3ef 8310 	mrs	r3, PRIMASK
 8008bf2:	623b      	str	r3, [r7, #32]
  return(result);
 8008bf4:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008bf6:	633b      	str	r3, [r7, #48]	@ 0x30
 8008bf8:	2301      	movs	r3, #1
 8008bfa:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008bfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bfe:	f383 8810 	msr	PRIMASK, r3
}
 8008c02:	46c0      	nop			@ (mov r8, r8)
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	689a      	ldr	r2, [r3, #8]
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	491b      	ldr	r1, [pc, #108]	@ (8008c7c <UART_EndRxTransfer+0xc8>)
 8008c10:	400a      	ands	r2, r1
 8008c12:	609a      	str	r2, [r3, #8]
 8008c14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c16:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008c18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c1a:	f383 8810 	msr	PRIMASK, r3
}
 8008c1e:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008c24:	2b01      	cmp	r3, #1
 8008c26:	d118      	bne.n	8008c5a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008c28:	f3ef 8310 	mrs	r3, PRIMASK
 8008c2c:	60bb      	str	r3, [r7, #8]
  return(result);
 8008c2e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008c30:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008c32:	2301      	movs	r3, #1
 8008c34:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	f383 8810 	msr	PRIMASK, r3
}
 8008c3c:	46c0      	nop			@ (mov r8, r8)
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	681a      	ldr	r2, [r3, #0]
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	2110      	movs	r1, #16
 8008c4a:	438a      	bics	r2, r1
 8008c4c:	601a      	str	r2, [r3, #0]
 8008c4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c50:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008c52:	693b      	ldr	r3, [r7, #16]
 8008c54:	f383 8810 	msr	PRIMASK, r3
}
 8008c58:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	228c      	movs	r2, #140	@ 0x8c
 8008c5e:	2120      	movs	r1, #32
 8008c60:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	2200      	movs	r2, #0
 8008c66:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	2200      	movs	r2, #0
 8008c6c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8008c6e:	46c0      	nop			@ (mov r8, r8)
 8008c70:	46bd      	mov	sp, r7
 8008c72:	b00e      	add	sp, #56	@ 0x38
 8008c74:	bd80      	pop	{r7, pc}
 8008c76:	46c0      	nop			@ (mov r8, r8)
 8008c78:	fffffedf 	.word	0xfffffedf
 8008c7c:	effffffe 	.word	0xeffffffe

08008c80 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008c80:	b580      	push	{r7, lr}
 8008c82:	b084      	sub	sp, #16
 8008c84:	af00      	add	r7, sp, #0
 8008c86:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	2284      	movs	r2, #132	@ 0x84
 8008c8c:	5c9b      	ldrb	r3, [r3, r2]
 8008c8e:	2b01      	cmp	r3, #1
 8008c90:	d101      	bne.n	8008c96 <HAL_UARTEx_DisableFifoMode+0x16>
 8008c92:	2302      	movs	r3, #2
 8008c94:	e027      	b.n	8008ce6 <HAL_UARTEx_DisableFifoMode+0x66>
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	2284      	movs	r2, #132	@ 0x84
 8008c9a:	2101      	movs	r1, #1
 8008c9c:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	2288      	movs	r2, #136	@ 0x88
 8008ca2:	2124      	movs	r1, #36	@ 0x24
 8008ca4:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	681a      	ldr	r2, [r3, #0]
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	2101      	movs	r1, #1
 8008cba:	438a      	bics	r2, r1
 8008cbc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	4a0b      	ldr	r2, [pc, #44]	@ (8008cf0 <HAL_UARTEx_DisableFifoMode+0x70>)
 8008cc2:	4013      	ands	r3, r2
 8008cc4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	2200      	movs	r2, #0
 8008cca:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	68fa      	ldr	r2, [r7, #12]
 8008cd2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	2288      	movs	r2, #136	@ 0x88
 8008cd8:	2120      	movs	r1, #32
 8008cda:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	2284      	movs	r2, #132	@ 0x84
 8008ce0:	2100      	movs	r1, #0
 8008ce2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008ce4:	2300      	movs	r3, #0
}
 8008ce6:	0018      	movs	r0, r3
 8008ce8:	46bd      	mov	sp, r7
 8008cea:	b004      	add	sp, #16
 8008cec:	bd80      	pop	{r7, pc}
 8008cee:	46c0      	nop			@ (mov r8, r8)
 8008cf0:	dfffffff 	.word	0xdfffffff

08008cf4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008cf4:	b580      	push	{r7, lr}
 8008cf6:	b084      	sub	sp, #16
 8008cf8:	af00      	add	r7, sp, #0
 8008cfa:	6078      	str	r0, [r7, #4]
 8008cfc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	2284      	movs	r2, #132	@ 0x84
 8008d02:	5c9b      	ldrb	r3, [r3, r2]
 8008d04:	2b01      	cmp	r3, #1
 8008d06:	d101      	bne.n	8008d0c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008d08:	2302      	movs	r3, #2
 8008d0a:	e02e      	b.n	8008d6a <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	2284      	movs	r2, #132	@ 0x84
 8008d10:	2101      	movs	r1, #1
 8008d12:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	2288      	movs	r2, #136	@ 0x88
 8008d18:	2124      	movs	r1, #36	@ 0x24
 8008d1a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	681a      	ldr	r2, [r3, #0]
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	2101      	movs	r1, #1
 8008d30:	438a      	bics	r2, r1
 8008d32:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	689b      	ldr	r3, [r3, #8]
 8008d3a:	00db      	lsls	r3, r3, #3
 8008d3c:	08d9      	lsrs	r1, r3, #3
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	683a      	ldr	r2, [r7, #0]
 8008d44:	430a      	orrs	r2, r1
 8008d46:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	0018      	movs	r0, r3
 8008d4c:	f000 f854 	bl	8008df8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	68fa      	ldr	r2, [r7, #12]
 8008d56:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	2288      	movs	r2, #136	@ 0x88
 8008d5c:	2120      	movs	r1, #32
 8008d5e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	2284      	movs	r2, #132	@ 0x84
 8008d64:	2100      	movs	r1, #0
 8008d66:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008d68:	2300      	movs	r3, #0
}
 8008d6a:	0018      	movs	r0, r3
 8008d6c:	46bd      	mov	sp, r7
 8008d6e:	b004      	add	sp, #16
 8008d70:	bd80      	pop	{r7, pc}
	...

08008d74 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008d74:	b580      	push	{r7, lr}
 8008d76:	b084      	sub	sp, #16
 8008d78:	af00      	add	r7, sp, #0
 8008d7a:	6078      	str	r0, [r7, #4]
 8008d7c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	2284      	movs	r2, #132	@ 0x84
 8008d82:	5c9b      	ldrb	r3, [r3, r2]
 8008d84:	2b01      	cmp	r3, #1
 8008d86:	d101      	bne.n	8008d8c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008d88:	2302      	movs	r3, #2
 8008d8a:	e02f      	b.n	8008dec <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	2284      	movs	r2, #132	@ 0x84
 8008d90:	2101      	movs	r1, #1
 8008d92:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	2288      	movs	r2, #136	@ 0x88
 8008d98:	2124      	movs	r1, #36	@ 0x24
 8008d9a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	681a      	ldr	r2, [r3, #0]
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	2101      	movs	r1, #1
 8008db0:	438a      	bics	r2, r1
 8008db2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	689b      	ldr	r3, [r3, #8]
 8008dba:	4a0e      	ldr	r2, [pc, #56]	@ (8008df4 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8008dbc:	4013      	ands	r3, r2
 8008dbe:	0019      	movs	r1, r3
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	683a      	ldr	r2, [r7, #0]
 8008dc6:	430a      	orrs	r2, r1
 8008dc8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	0018      	movs	r0, r3
 8008dce:	f000 f813 	bl	8008df8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	68fa      	ldr	r2, [r7, #12]
 8008dd8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	2288      	movs	r2, #136	@ 0x88
 8008dde:	2120      	movs	r1, #32
 8008de0:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	2284      	movs	r2, #132	@ 0x84
 8008de6:	2100      	movs	r1, #0
 8008de8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008dea:	2300      	movs	r3, #0
}
 8008dec:	0018      	movs	r0, r3
 8008dee:	46bd      	mov	sp, r7
 8008df0:	b004      	add	sp, #16
 8008df2:	bd80      	pop	{r7, pc}
 8008df4:	f1ffffff 	.word	0xf1ffffff

08008df8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008df8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008dfa:	b085      	sub	sp, #20
 8008dfc:	af00      	add	r7, sp, #0
 8008dfe:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d108      	bne.n	8008e1a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	226a      	movs	r2, #106	@ 0x6a
 8008e0c:	2101      	movs	r1, #1
 8008e0e:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	2268      	movs	r2, #104	@ 0x68
 8008e14:	2101      	movs	r1, #1
 8008e16:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008e18:	e043      	b.n	8008ea2 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008e1a:	260f      	movs	r6, #15
 8008e1c:	19bb      	adds	r3, r7, r6
 8008e1e:	2208      	movs	r2, #8
 8008e20:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008e22:	200e      	movs	r0, #14
 8008e24:	183b      	adds	r3, r7, r0
 8008e26:	2208      	movs	r2, #8
 8008e28:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	689b      	ldr	r3, [r3, #8]
 8008e30:	0e5b      	lsrs	r3, r3, #25
 8008e32:	b2da      	uxtb	r2, r3
 8008e34:	240d      	movs	r4, #13
 8008e36:	193b      	adds	r3, r7, r4
 8008e38:	2107      	movs	r1, #7
 8008e3a:	400a      	ands	r2, r1
 8008e3c:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	689b      	ldr	r3, [r3, #8]
 8008e44:	0f5b      	lsrs	r3, r3, #29
 8008e46:	b2da      	uxtb	r2, r3
 8008e48:	250c      	movs	r5, #12
 8008e4a:	197b      	adds	r3, r7, r5
 8008e4c:	2107      	movs	r1, #7
 8008e4e:	400a      	ands	r2, r1
 8008e50:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008e52:	183b      	adds	r3, r7, r0
 8008e54:	781b      	ldrb	r3, [r3, #0]
 8008e56:	197a      	adds	r2, r7, r5
 8008e58:	7812      	ldrb	r2, [r2, #0]
 8008e5a:	4914      	ldr	r1, [pc, #80]	@ (8008eac <UARTEx_SetNbDataToProcess+0xb4>)
 8008e5c:	5c8a      	ldrb	r2, [r1, r2]
 8008e5e:	435a      	muls	r2, r3
 8008e60:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8008e62:	197b      	adds	r3, r7, r5
 8008e64:	781b      	ldrb	r3, [r3, #0]
 8008e66:	4a12      	ldr	r2, [pc, #72]	@ (8008eb0 <UARTEx_SetNbDataToProcess+0xb8>)
 8008e68:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008e6a:	0019      	movs	r1, r3
 8008e6c:	f7f7 f9d4 	bl	8000218 <__divsi3>
 8008e70:	0003      	movs	r3, r0
 8008e72:	b299      	uxth	r1, r3
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	226a      	movs	r2, #106	@ 0x6a
 8008e78:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008e7a:	19bb      	adds	r3, r7, r6
 8008e7c:	781b      	ldrb	r3, [r3, #0]
 8008e7e:	193a      	adds	r2, r7, r4
 8008e80:	7812      	ldrb	r2, [r2, #0]
 8008e82:	490a      	ldr	r1, [pc, #40]	@ (8008eac <UARTEx_SetNbDataToProcess+0xb4>)
 8008e84:	5c8a      	ldrb	r2, [r1, r2]
 8008e86:	435a      	muls	r2, r3
 8008e88:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8008e8a:	193b      	adds	r3, r7, r4
 8008e8c:	781b      	ldrb	r3, [r3, #0]
 8008e8e:	4a08      	ldr	r2, [pc, #32]	@ (8008eb0 <UARTEx_SetNbDataToProcess+0xb8>)
 8008e90:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008e92:	0019      	movs	r1, r3
 8008e94:	f7f7 f9c0 	bl	8000218 <__divsi3>
 8008e98:	0003      	movs	r3, r0
 8008e9a:	b299      	uxth	r1, r3
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	2268      	movs	r2, #104	@ 0x68
 8008ea0:	5299      	strh	r1, [r3, r2]
}
 8008ea2:	46c0      	nop			@ (mov r8, r8)
 8008ea4:	46bd      	mov	sp, r7
 8008ea6:	b005      	add	sp, #20
 8008ea8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008eaa:	46c0      	nop			@ (mov r8, r8)
 8008eac:	080091a0 	.word	0x080091a0
 8008eb0:	080091a8 	.word	0x080091a8

08008eb4 <memset>:
 8008eb4:	0003      	movs	r3, r0
 8008eb6:	1882      	adds	r2, r0, r2
 8008eb8:	4293      	cmp	r3, r2
 8008eba:	d100      	bne.n	8008ebe <memset+0xa>
 8008ebc:	4770      	bx	lr
 8008ebe:	7019      	strb	r1, [r3, #0]
 8008ec0:	3301      	adds	r3, #1
 8008ec2:	e7f9      	b.n	8008eb8 <memset+0x4>

08008ec4 <__errno>:
 8008ec4:	4b01      	ldr	r3, [pc, #4]	@ (8008ecc <__errno+0x8>)
 8008ec6:	6818      	ldr	r0, [r3, #0]
 8008ec8:	4770      	bx	lr
 8008eca:	46c0      	nop			@ (mov r8, r8)
 8008ecc:	20000014 	.word	0x20000014

08008ed0 <__libc_init_array>:
 8008ed0:	b570      	push	{r4, r5, r6, lr}
 8008ed2:	2600      	movs	r6, #0
 8008ed4:	4c0c      	ldr	r4, [pc, #48]	@ (8008f08 <__libc_init_array+0x38>)
 8008ed6:	4d0d      	ldr	r5, [pc, #52]	@ (8008f0c <__libc_init_array+0x3c>)
 8008ed8:	1b64      	subs	r4, r4, r5
 8008eda:	10a4      	asrs	r4, r4, #2
 8008edc:	42a6      	cmp	r6, r4
 8008ede:	d109      	bne.n	8008ef4 <__libc_init_array+0x24>
 8008ee0:	2600      	movs	r6, #0
 8008ee2:	f000 f8ad 	bl	8009040 <_init>
 8008ee6:	4c0a      	ldr	r4, [pc, #40]	@ (8008f10 <__libc_init_array+0x40>)
 8008ee8:	4d0a      	ldr	r5, [pc, #40]	@ (8008f14 <__libc_init_array+0x44>)
 8008eea:	1b64      	subs	r4, r4, r5
 8008eec:	10a4      	asrs	r4, r4, #2
 8008eee:	42a6      	cmp	r6, r4
 8008ef0:	d105      	bne.n	8008efe <__libc_init_array+0x2e>
 8008ef2:	bd70      	pop	{r4, r5, r6, pc}
 8008ef4:	00b3      	lsls	r3, r6, #2
 8008ef6:	58eb      	ldr	r3, [r5, r3]
 8008ef8:	4798      	blx	r3
 8008efa:	3601      	adds	r6, #1
 8008efc:	e7ee      	b.n	8008edc <__libc_init_array+0xc>
 8008efe:	00b3      	lsls	r3, r6, #2
 8008f00:	58eb      	ldr	r3, [r5, r3]
 8008f02:	4798      	blx	r3
 8008f04:	3601      	adds	r6, #1
 8008f06:	e7f2      	b.n	8008eee <__libc_init_array+0x1e>
 8008f08:	080091b8 	.word	0x080091b8
 8008f0c:	080091b8 	.word	0x080091b8
 8008f10:	080091bc 	.word	0x080091bc
 8008f14:	080091b8 	.word	0x080091b8

08008f18 <sqrtf>:
 8008f18:	b570      	push	{r4, r5, r6, lr}
 8008f1a:	1c05      	adds	r5, r0, #0
 8008f1c:	f000 f818 	bl	8008f50 <__ieee754_sqrtf>
 8008f20:	1c29      	adds	r1, r5, #0
 8008f22:	1c04      	adds	r4, r0, #0
 8008f24:	1c28      	adds	r0, r5, #0
 8008f26:	f7f8 f9f3 	bl	8001310 <__aeabi_fcmpun>
 8008f2a:	2800      	cmp	r0, #0
 8008f2c:	d10e      	bne.n	8008f4c <sqrtf+0x34>
 8008f2e:	2100      	movs	r1, #0
 8008f30:	1c28      	adds	r0, r5, #0
 8008f32:	f7f7 fa6f 	bl	8000414 <__aeabi_fcmplt>
 8008f36:	2800      	cmp	r0, #0
 8008f38:	d008      	beq.n	8008f4c <sqrtf+0x34>
 8008f3a:	f7ff ffc3 	bl	8008ec4 <__errno>
 8008f3e:	2321      	movs	r3, #33	@ 0x21
 8008f40:	2100      	movs	r1, #0
 8008f42:	6003      	str	r3, [r0, #0]
 8008f44:	1c08      	adds	r0, r1, #0
 8008f46:	f7f7 fd1b 	bl	8000980 <__aeabi_fdiv>
 8008f4a:	1c04      	adds	r4, r0, #0
 8008f4c:	1c20      	adds	r0, r4, #0
 8008f4e:	bd70      	pop	{r4, r5, r6, pc}

08008f50 <__ieee754_sqrtf>:
 8008f50:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008f52:	0003      	movs	r3, r0
 8008f54:	0042      	lsls	r2, r0, #1
 8008f56:	1c04      	adds	r4, r0, #0
 8008f58:	20ff      	movs	r0, #255	@ 0xff
 8008f5a:	0852      	lsrs	r2, r2, #1
 8008f5c:	05c0      	lsls	r0, r0, #23
 8008f5e:	4282      	cmp	r2, r0
 8008f60:	d30a      	bcc.n	8008f78 <__ieee754_sqrtf+0x28>
 8008f62:	1c21      	adds	r1, r4, #0
 8008f64:	1c20      	adds	r0, r4, #0
 8008f66:	f7f7 fef1 	bl	8000d4c <__aeabi_fmul>
 8008f6a:	1c01      	adds	r1, r0, #0
 8008f6c:	1c20      	adds	r0, r4, #0
 8008f6e:	f7f7 fb7d 	bl	800066c <__aeabi_fadd>
 8008f72:	1c04      	adds	r4, r0, #0
 8008f74:	1c20      	adds	r0, r4, #0
 8008f76:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008f78:	2a00      	cmp	r2, #0
 8008f7a:	d0fb      	beq.n	8008f74 <__ieee754_sqrtf+0x24>
 8008f7c:	2c00      	cmp	r4, #0
 8008f7e:	da07      	bge.n	8008f90 <__ieee754_sqrtf+0x40>
 8008f80:	1c21      	adds	r1, r4, #0
 8008f82:	1c20      	adds	r0, r4, #0
 8008f84:	f7f8 f820 	bl	8000fc8 <__aeabi_fsub>
 8008f88:	1c01      	adds	r1, r0, #0
 8008f8a:	f7f7 fcf9 	bl	8000980 <__aeabi_fdiv>
 8008f8e:	e7f0      	b.n	8008f72 <__ieee754_sqrtf+0x22>
 8008f90:	0022      	movs	r2, r4
 8008f92:	15e1      	asrs	r1, r4, #23
 8008f94:	4002      	ands	r2, r0
 8008f96:	4204      	tst	r4, r0
 8008f98:	d046      	beq.n	8009028 <__ieee754_sqrtf+0xd8>
 8008f9a:	2280      	movs	r2, #128	@ 0x80
 8008f9c:	000f      	movs	r7, r1
 8008f9e:	025b      	lsls	r3, r3, #9
 8008fa0:	0a5b      	lsrs	r3, r3, #9
 8008fa2:	0412      	lsls	r2, r2, #16
 8008fa4:	3f7f      	subs	r7, #127	@ 0x7f
 8008fa6:	4313      	orrs	r3, r2
 8008fa8:	07c9      	lsls	r1, r1, #31
 8008faa:	d400      	bmi.n	8008fae <__ieee754_sqrtf+0x5e>
 8008fac:	005b      	lsls	r3, r3, #1
 8008fae:	2400      	movs	r4, #0
 8008fb0:	2180      	movs	r1, #128	@ 0x80
 8008fb2:	2019      	movs	r0, #25
 8008fb4:	0026      	movs	r6, r4
 8008fb6:	107f      	asrs	r7, r7, #1
 8008fb8:	005b      	lsls	r3, r3, #1
 8008fba:	0449      	lsls	r1, r1, #17
 8008fbc:	1875      	adds	r5, r6, r1
 8008fbe:	001a      	movs	r2, r3
 8008fc0:	429d      	cmp	r5, r3
 8008fc2:	dc02      	bgt.n	8008fca <__ieee754_sqrtf+0x7a>
 8008fc4:	186e      	adds	r6, r5, r1
 8008fc6:	1b5a      	subs	r2, r3, r5
 8008fc8:	1864      	adds	r4, r4, r1
 8008fca:	3801      	subs	r0, #1
 8008fcc:	0053      	lsls	r3, r2, #1
 8008fce:	0849      	lsrs	r1, r1, #1
 8008fd0:	2800      	cmp	r0, #0
 8008fd2:	d1f3      	bne.n	8008fbc <__ieee754_sqrtf+0x6c>
 8008fd4:	2a00      	cmp	r2, #0
 8008fd6:	d019      	beq.n	800900c <__ieee754_sqrtf+0xbc>
 8008fd8:	4d17      	ldr	r5, [pc, #92]	@ (8009038 <__ieee754_sqrtf+0xe8>)
 8008fda:	4e18      	ldr	r6, [pc, #96]	@ (800903c <__ieee754_sqrtf+0xec>)
 8008fdc:	6828      	ldr	r0, [r5, #0]
 8008fde:	6831      	ldr	r1, [r6, #0]
 8008fe0:	682b      	ldr	r3, [r5, #0]
 8008fe2:	9301      	str	r3, [sp, #4]
 8008fe4:	f7f7 fff0 	bl	8000fc8 <__aeabi_fsub>
 8008fe8:	1c01      	adds	r1, r0, #0
 8008fea:	9801      	ldr	r0, [sp, #4]
 8008fec:	f7f7 fa1c 	bl	8000428 <__aeabi_fcmple>
 8008ff0:	2800      	cmp	r0, #0
 8008ff2:	d00b      	beq.n	800900c <__ieee754_sqrtf+0xbc>
 8008ff4:	6828      	ldr	r0, [r5, #0]
 8008ff6:	6831      	ldr	r1, [r6, #0]
 8008ff8:	f7f7 fb38 	bl	800066c <__aeabi_fadd>
 8008ffc:	682d      	ldr	r5, [r5, #0]
 8008ffe:	1c01      	adds	r1, r0, #0
 8009000:	1c28      	adds	r0, r5, #0
 8009002:	f7f7 fa07 	bl	8000414 <__aeabi_fcmplt>
 8009006:	2800      	cmp	r0, #0
 8009008:	d011      	beq.n	800902e <__ieee754_sqrtf+0xde>
 800900a:	3402      	adds	r4, #2
 800900c:	23fc      	movs	r3, #252	@ 0xfc
 800900e:	1064      	asrs	r4, r4, #1
 8009010:	059b      	lsls	r3, r3, #22
 8009012:	18e3      	adds	r3, r4, r3
 8009014:	05fc      	lsls	r4, r7, #23
 8009016:	18e4      	adds	r4, r4, r3
 8009018:	e7ac      	b.n	8008f74 <__ieee754_sqrtf+0x24>
 800901a:	005b      	lsls	r3, r3, #1
 800901c:	3201      	adds	r2, #1
 800901e:	4203      	tst	r3, r0
 8009020:	d0fb      	beq.n	800901a <__ieee754_sqrtf+0xca>
 8009022:	3a01      	subs	r2, #1
 8009024:	1a89      	subs	r1, r1, r2
 8009026:	e7b8      	b.n	8008f9a <__ieee754_sqrtf+0x4a>
 8009028:	2080      	movs	r0, #128	@ 0x80
 800902a:	0400      	lsls	r0, r0, #16
 800902c:	e7f7      	b.n	800901e <__ieee754_sqrtf+0xce>
 800902e:	2301      	movs	r3, #1
 8009030:	3401      	adds	r4, #1
 8009032:	439c      	bics	r4, r3
 8009034:	e7ea      	b.n	800900c <__ieee754_sqrtf+0xbc>
 8009036:	46c0      	nop			@ (mov r8, r8)
 8009038:	20000068 	.word	0x20000068
 800903c:	20000064 	.word	0x20000064

08009040 <_init>:
 8009040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009042:	46c0      	nop			@ (mov r8, r8)
 8009044:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009046:	bc08      	pop	{r3}
 8009048:	469e      	mov	lr, r3
 800904a:	4770      	bx	lr

0800904c <_fini>:
 800904c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800904e:	46c0      	nop			@ (mov r8, r8)
 8009050:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009052:	bc08      	pop	{r3}
 8009054:	469e      	mov	lr, r3
 8009056:	4770      	bx	lr
